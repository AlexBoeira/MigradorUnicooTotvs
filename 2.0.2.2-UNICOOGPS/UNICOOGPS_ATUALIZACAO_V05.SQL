CREATE OR REPLACE PACKAGE "PCK_UNICOOGPS" is

  /*
  *********************************************************************************************************************************************
  criação          : vinicius justino
  data             : 02/12/2014 16:43
  módulo principal : migração
  módulos          : migração unicoo -> gestão de planos
  telas            : migração
  objetivo         :
  alteracoes
  +-------------------------------------------------------------------------------------------------------------------------------------------+
  | data       | responsavel    | versao          | pendência | alteracao                                                                     |
  +------------+----------------+-----------------+-----------+-------------------------------------------------------------------------------+
  |            |                |                 |           |                                                                               |
  +-------------------------------------------------------------------------------------------------------------------------------------------+
  *********************************************************************************************************************************************
  */

  cursor c_ctrl_propost(pnum_sqcial_bnficiar gp.import_bnfciar.num_seqcial_bnfciar%type) is
    select distinct cdp.nrpessoa_paga,
                    m.in_tipo_pessoa, -- modalid.in_tipo_pessoa
                    cdp.nrregistro,
                    cdp.nrcontrato,
                    (select distinct Case
                                       when (cdp.tpfatura = 'U' or --Tipo de Faturamento: por Família
                                            cp.cdcontratacao_ans = 1 or --individual/familiar
                                            rt.ao_contr_orig_resp_financ =
                                            'CONTR_ORIG' or --forcando regra no DEPARA
                                            f.nrpessoa_paga is not null or --responsavel financeiro da familia é diferente do contrato_da_pessoa
                                            f.dtinicio_contrato is not null) then --plano de DEMITIDO/APOSENTADO
                                       --Evandro Levi (16/05/2018): Com a mudança de conceito para NI, onde contratos por adesão, A/D
                                       --                             e Lotação são agrupados numa mesma proposta, com isso, a
                                       --                             família na import_propost (num_livre_4) somente deve ser
                                       --                             preenchido com valor diferente de zero se for plano particular.
                                       -- Implementar somente no migrador SP, após oficializar as implementações de NI para todos os clientes.
                                       /*When (cp.cdcontratacao_ans = 1 Or
                                                                                   cp.tpusu_contrato = 'P') Then*/
                                        f.nrfamilia
                                       else
                                        0
                                     end fnrfamilia
                       from contrato_da_pessoa cdp,
                            familia            f,
                            contrato_plano     cpl,
                            contrato_padrao    cp,
                            usuario            us,
                            import_bnfciar     ib
                      where us.cdcontrato = cp.cdcontrato
                        and us.nrregistro = cpl.nrregistro
                        and us.nrcontrato = cpl.nrcontrato
                        and us.cdcontrato = cpl.cdcontrato
                        and us.nrregistro = f.nrregistro
                        and us.nrcontrato = f.nrcontrato
                        and us.nrfamilia = f.nrfamilia
                        and cdp.nrregistro = cpl.nrregistro
                        and cdp.nrcontrato = cpl.nrcontrato
                        and ib.num_seqcial_bnfciar = us.nrsequencial_usuario
                        and ib.num_seqcial_bnfciar = u.nrsequencial_usuario) nrfamilia,

                    (select distinct case
                                       when (cdp.tpfatura = 'L' or
                                            cdp.tpfatura = 'I') then --L: lotacao; I: lotacao com independencia financeira
                                       /* Evandro Levi (16/05/2018): Considerar o parametro USULOTAC para identificar a LOTACAO do usuário
                                                                                            nvl((select l.cdlotacao
                                                                                                  from lotacao l
                                                                                                 where l.nrregistro =
                                                                                                       cdp.nrregistro
                                                                                                   and l.nrcontrato =
                                                                                                       cdp.nrcontrato
                                                                                                   and us.cdlotacao = l.cdlotacao),
                                                                                                nvl(f.cdlotacao, '0')) */
                                        nvl((Select cdlotacao
                                              From lotacao
                                             Where nrregistro =
                                                   cdp.nrregistro
                                               And nrcontrato =
                                                   cdp.nrcontrato
                                               And cdlotacao =
                                                   decode(pm.vlparametro,
                                                          'N',
                                                          f.cdlotacao,
                                                          us.cdlotacao)),
                                            '0')
                                       else
                                        '0'
                                     end cdlotacao
                       from contrato_da_pessoa cdp,
                            familia            f,
                            contrato_plano     cpl,
                            contrato_padrao    cp,
                            usuario            us,
                            import_bnfciar     ib,
                            parametro          pm
                      where us.cdcontrato = cp.cdcontrato
                        and us.nrregistro = cpl.nrregistro
                        and us.nrcontrato = cpl.nrcontrato
                        and us.cdcontrato = cpl.cdcontrato
                        and us.nrregistro = f.nrregistro
                        and us.nrcontrato = f.nrcontrato
                        and us.nrfamilia = f.nrfamilia
                        and cdp.nrregistro = cpl.nrregistro
                        and cdp.nrcontrato = cpl.nrcontrato
                        and ib.num_seqcial_bnfciar = us.nrsequencial_usuario
                        and ib.num_seqcial_bnfciar = u.nrsequencial_usuario
                        And pm.cdparametro = 'USULOTAC') cdlotacao,

                    --Evandro Levi (17/05/2018): conceito do campo "cdlotacao_benef" é AGRUPADOR, válido quando a lotação no Unicoo é somente informativo (TPFATURA = "N").
                    decode(par.vlparametro, 'N', fam.cdlotacao, u.cdlotacao) cdlotacao_benef,

                    --Alex Boeira (11/07/2018): pessoa que paga da familia, para planos Adesao e Demitido/Aposentado
                    --nvl(fam.nrpessoa_paga,fam.nrpessoa_titular) nrpessoa_paga_familia,
                    --decode(fam.dtinicio_contrato,null,'N','S') plano_demitido,

                    --tdd.cdcontrato_agr cdcontrato,
                    rt.cdcontrato,
                    cp.tpusu_contrato tpusu_contrato,
                    cp.cdcontratacao_ans,
                    cdp.tpfatura,
                    cdp.cdnivel_preco,
                    cp.tpcontrato tpcontrato,
                    u.cdareaacao,
                    cdp.dtiniciocontrato,
                    'SEMFAT' cdfator_moderador, --inicializa como SEMFAT e ajusta o valor com FN_FATOR_BENEF na P_GERA_PROPOSTA_R2
                    cdp.dtfimcontrato dtfimcontrato,
                    rt.cd_modalidade,
                    rt.cd_plano,
                    rt.cd_tipo_plano,
                    0 nrperiodo_ult_reajuste,
                    decode(cp.tpcontrato, 'PM', '1', 'SP', '2') cd_forma_pagto,
                    u.tpplano tpplano,
                    u.cdorigem,
                    u.nrsequencial_usuario,
                    rt.lg_considera_taxa_co,
                    rt.ao_contr_orig_resp_financ
      from usuario            u,
           familia            fam,
           contrato_da_pessoa cdp,
           contrato_padrao    cp,
           t_v_plano_padrao   rt,
           --temp_depara_detalhado tdd,
           gp.modalid m,
           parametro  par
     where u.nrregistro = cdp.nrregistro
       and u.nrcontrato = cdp.nrcontrato
       and u.cdcontrato = cp.cdcontrato
       and rt.cdcontrato_usu = u.cdcontrato
       and rt.tpplano = u.tpplano
          --and tdd.cdcontrato = rt.cdcontrato
       and nrsequencial_usuario = pnum_sqcial_bnficiar
       and m.cd_modalidade = rt.cd_modalidade
       And fam.nrregistro = u.nrregistro
       And fam.nrcontrato = u.nrcontrato
       And fam.nrfamilia = u.nrfamilia
       And par.cdparametro = 'USULOTAC';

  --funções
  function f_to_long(valor_long long) return char;
  FUNCTION md5 (valor VARCHAR) RETURN VARCHAR2;

  function f_insumo(pcdclasse varchar2) return varchar2;
  function fn_fator_benef(pnrcontrato        contrato_coparticipacao.nrcontrato%type,
                          pnrregistro        contrato_coparticipacao.nrregistro%type,
                          pcdcontrato_padrao contrato_coparticipacao.cdcontrato%type,
                          pnrfamilia         familia.nrfamilia%type,
                          pdtexclusao        usuario.dtexclusao%type)

   return varchar2;

  function f_busca_cobranca_carteira(pDtReferencia   in Date,
                                     pCdcontrato     in Varchar2,
                                     pTpContrato     in Varchar2,
                                     pTpUsu_Contrato in Varchar2)
    return number;

  function fn_nr_meses_criterio(ptpcriterio tipo_de_criterio.tpcriterio%type)
    return char;

function gerar_hash_servico_da_autoriz(pnrseq_serv_autorizacao number,
                                       pnrautorizacao number,
                                       pnrocorrencia number) return varchar2;
function gerar_hash_usuario_unicoo(pnrsequencial_usuario number) return varchar2;
function gerar_hash_contrato_unicoo(pnrregistro number, pnrcontrato number) return varchar2;
function gerar_hash_contratante_unicoo(pnrregistro number) return varchar2;
  procedure p_migra_ramo_atividade;

  --estrutura
  procedure p_migra_modulo_cobertura;
  procedure p_migra_tipo_plano;
  procedure p_migra_estrutura;
  procedure p_migra_pl_gr_pa;
  --  procedure p_migra_abrangencia; DESCONTINUADO APOS CRIACAO DA REDE REFERENCIA
  procedure p_migra_rede_refer_abrangencia;
  procedure p_migra_rede_atendimento;
  procedure p_relaciona_rede_atendimento;
  procedure p_migra_procedimentos;
  procedure p_migra_pla_mod;
  procedure p_migra_qtdmoeda;
  procedure p_migra_forpagtx;
  procedure p_migra_quantitativo_permitido;
  procedure p_migra_regra_estrutura; -- Novo. Cria Regra Modelo (criado em NI)
  procedure p_migra_trans_mod_proced;
  procedure p_insert_trans_mod_proced(pcd_transacao    number,
                                      pcd_modulo       number,
                                      pcd_procedimento number);
  procedure p_insert_trmodtpi(pcd_transacao   number,
                              pcd_modulo      number,
                              pcd_tipo_insumo number,
                              pcd_insumo      number);

  procedure P_ACERTA_SEQUENCES;
  procedure p_atualizar_tm_sequences;

  --propostas
  --procedure p_gera_lotacao; -- comentado pois a chamada foi adicionada no inicio de p_migra_lotacao
  procedure p_migra_lotacao; -- mc ferj
  --  procedure p_atualiza_proposta_sem_lot(pnrsequencial_proposta import_propost.num_seqcial_propost%type);
  --  procedure p_atualiza_proposta_com_lot(pnrsequencial_proposta import_propost.num_seqcial_propost%type);
  procedure p_atualiza_proposta(pnrsequencial_proposta import_propost.num_seqcial_propost%type,
                              paocom_lotacao varchar,
                              pnrsequencial_usuario number);
  procedure p_atualiza_status_proposta_JK(pqtsessoes_proposta number);
  procedure p_atualiza_status_proposta(pqtsessoes_proposta number);
  procedure apaga_contrato(pnrcontrato in varchar2);
  procedure apaga_contrato_KL; --KILL
  procedure apaga_proposta_totvs(pcd_modalidade in number,
                                 pnr_proposta   in number);
  procedure apaga_proposta_import(pnr_contrato_antigo  in number,
                                  pnum_seqcial_propost in number,
                                  papagar_benefs varchar2);

  --beneficiários
  procedure p_carga_beneficiarios(papenas_contratos_ativos char,
                                  pnrregistro number,
                                  pnrcontrato char,
                                  pnrseqcial_bnfciar number);
  procedure p_gera_proposta_r2 (pnrregistro number,
                                pnrcontrato char,
                                pnrseqcial_bnfciar number);
  procedure p_atualiza_beneficiario_g(pnrsequencial_usuario import_bnfciar.num_seqcial_bnfciar%type);
  procedure p_atualiza_status_benef(pqtsessoes_beneficiario number);
  procedure p_atualiza_status_benef_JK(pqtsessoes_beneficiario number);
  procedure apaga_beneficiario(pnrsequencial_usuario in number);
  procedure apaga_beneficiario_totvs(pnrsequencial_usuario in number);
  procedure apaga_beneficiario_import(pnrsequencial_usuario in number);
  procedure p_migra_carteira;
  procedure p_migra_mensagem_prodmed;
  --  procedure P_MIGRA_OCORR_TERMO_BENEF(pdspasta_anexos varchar);
  procedure P_MIGRA_OCORR_TERMO_BENEF;
  procedure p_migra_ocorrencias_termo(pdspasta_anexos varchar);
  procedure p_migra_ocorrencias_benef(pdspasta_anexos varchar);

  --p_migra_fator_moderador e p_cria_demais_regras_fator foram substituidos por:
  --     p_cria_agrupador_e_capa_regra (par_mig)
  --     p_associa_agrupador_contrato  (movimento)
  --procedure p_migra_fator_moderador;
  --procedure p_cria_demais_regras_fator;
  --procedure assoc_regras_partic_contratos;
  procedure p_cria_agrupador_e_capa_regra(paosimular varchar);

  procedure p_associa_agrupador_contrato(paosimular  varchar,
                                         pnrregistro number,
                                         pnrcontrato varchar2);

  procedure p_replicar_agrupador(paosimular varchar);

  procedure p_criar_new_tm_tabelas_ems5_gp;

  --regra de mensalidade
/*  procedure p_migra_regra_proposta(pAoSimular  in varchar2 default 'N',
                                   pNrregistro In Number Default Null,
                                   pNrcontrato In Varchar2 Default Null); -- NOVO (criado em NI, complementa a mudança da Regra Modelo)
*/
  procedure p_migra_regra_proposta2(pInSimular  in varchar2 default 'T',
                                    pNrregistro In Number Default Null,
                                    pNrcontrato In Varchar2 Default Null); -- NOVO (criado em NI, complementa a mudança da Regra Modelo)

  /**
  * As procedures abaixo estão declaradas aqui devido a dependências, mas não são chamadas
  * diretamente pelo usuário durante a migração.
  */
  procedure p_insert_regra_menslid(pInSimular   varchar2,
                                   pcdd_regra   number,
                                   pdes_regra   varchar2,
                                   pdat_inic    date,
                                   pdat_fim     date,
                                   pcdn_tip_idx Number);

  procedure P_REGRA_DEFAULT_CONTRATO(pcdmodalidade number,
                                     pcdplano      number,
                                     pcdtipo_plano number,
                                     pnrproposta   number);

  procedure p_insert_regra_menslid_estrut(pInSimular     varchar2,
                                          pcdd_regra     number,
                                          pcd_modalidade number,
                                          pcd_plano      number,
                                          pcd_tipo_plano number,
                                          pdat_inic      date,
                                          pdat_fim       date,
                                          pnr_proposta   number,
                                          pnr_usuario    number);
  procedure p_insert_regra_menslid_reaj(pInSimular varchar2,
                                        pcdd_regra number,
                                        pnrcompet  number);
  procedure p_insert_regra_menslid_criter(pInSimular           varchar2,
                                          pcdd_regra           number,
                                          pcd_padrao_cobertura varchar2,
                                          pcd_modulo           number,
                                          pcd_grau_parentesco  number,
                                          pnr_faixa            number,
                                          pnridade_inicio      number,
                                          pnridade_fim         number,
                                          pvlpreco_mensal      number,
                                          pvlpreco_inscricao   number,
                                          pdat_inic            date,
                                          pdat_fim             date,
                                          pnrqtusuario_inicio  number,
                                          pnrqtusuario_fim     number,
                                          pnrsequencia         number);
  /**
  * Fim das procedures internas da nova Regras Mensalidade.
  */

  /**
   * Versao antiga (antes da Unimed NI e criação das Regras Modelo).
   * Ainda nao liberado em produto padrão (18/08/2017)

  procedure p_regras_mensalidade(pnrcontrato  contrato_da_pessoa.nrcontrato%type,
                                 pinrperiodo  periodo_competencia.nrperiodo%type);*/

  --regra de desconto
  procedure p_regras_desconto;

  --apoio
  procedure p_valida_servicos;
  procedure p_verifica_rows_tab;
  procedure p_reprocessa_proposta;
  procedure p_reprocessa_beneficiario;
  procedure p_carrega_depara;
  procedure p_carga_unimed;
  procedure p_valida_depara_familia;

  /* MÉTODO COMENTADO POR SEGURANÇA. ELE TRUNCA TODAS AS TABELAS EM TM_TABELAS_MOVIMENTACAO.
  DESCOMENTE E COMPILE NOVAMENTE SE PRECISAR UTILIZÁ-LO*/
  --procedure p_apaga_base_movimentacao;

  --dados pessoa
  procedure p_migra_cidade;
  procedure p_ajusta_codigo_cidade_no_cep;
  procedure p_migra_cep;
  procedure p_migra_dados_pessoa;
  procedure p_migra_pessoa_fisica;
  procedure p_migra_pessoajuridica;
  procedure p_migra_endereco;
  procedure p_migra_contato;

  --contratante
  procedure p_contratante;

  --autorizacao
  procedure p_import_guia_autorizacao(PQT_GUIAS_POR_CICLO number);
  procedure p_obs_guia_autor;
  procedure p_atualiza_status_guia_aut_jk(pnrsessoes number);
  procedure p_atualiza_status_guia_aut(pnrsessoes number);

  --especialidade prestador
  procedure p_migra_especialidade;

  --faturas
  procedure p_import_fatura;

  --pos
  procedure p_pos_migracao;

  procedure p_gera_modulo_proposta_r2(pnrsequencial_proposta number);

  /* chamada interna
    procedure gera_regra_menslid(anrperiodocorte number,
                                 anrcontrato     varchar2);
  */

  procedure p_migra_grupo_procedimento;

  procedure p_migra_reajuste(pnrcontrato_antigo in number);

  procedure p_grava_benef_aposdem_sem_lot;
  --  procedure p_grava_benef_aposdem_com_lot;

  procedure p_insere_falha(pnrcontroleintegracao number,
                           pcdintegracao         varchar2,
                           ptxfalha              varchar2,
                           ptxajuda              varchar2,
                           pnrsequencialorigem   number);

  procedure p_gera_beneficiario(pnrregistro number, pnrcontrato number, pnrseqcial_bnfciar number);

  procedure p_repasse_proposta(pnrsequencial_proposta number);

  procedure p_grava_modulo_benef_r2(pnrsequencial_beneficiario usuario.nrsequencial_usuario%type);

  procedure p_migra_contratante;

  procedure p_repasse_benef(pnum_seqcial_bnfciar import_bnfciar.num_seqcial_bnfciar%type);

  procedure p_grava_proposta_sem_lotacao(pproposta c_ctrl_propost%rowtype,
                                         pnr_contrato_antigo number,
                                         psit_proposta varchar2);

  procedure p_grava_proposta_com_lotacao(pproposta c_ctrl_propost%rowtype,
                                         pnr_contrato_antigo number,
                                         psit_proposta varchar2);

  procedure P_GERA_DEB_PROD;

  --procedure p_carga_estrutura_modulos;

  procedure p_faixa_especial_proposta(pnrsequencial_proposta number);

  procedure p_migra_cbo;

  procedure p_gera_contrat;
  procedure p_carga_plamodpr_proc;
  procedure p_carga_plamodpr_ins;

  procedure p_pos_carga_proposta_e_benef;

  procedure p_condicao_saude;
  procedure p_migra_quantitativo_utilizado;
  procedure p_gerar_comandos_limpeza_base;
  procedure p_comandos_espelhar_parametros;
  procedure p_gerar_comandos_analyse;
  procedure p_atualizar_histabpreco;
  procedure p_atualizar_contagem_regs;
  procedure p_carga_t_v_plano_padrao;
  --procedure p_setar_codigo_beneficiario;
  procedure p_apagar_benef_e_temps;
  procedure log_dbms (pmensagem varchar2);

  --procedure p_carga_temp_autorizacao;
  /*procedure resetar_sequence(p_seq_name in varchar2,
                             p_tabela   in varchar2,
                             p_campo    in varchar2);
*/
  procedure p_atualiza_status_fatura_JK(pqtsessoes_fatura number);
--  procedure restaurar_import_bnfciar_hist(pnum_seqcial_bnfciar number);
--  procedure restaurar_import_propost_hist(pnr_contrato_antigo number);
--  procedure gravar_historico_import_benef(pnum_seqcial_bnfciar number);
  procedure apagar_termos_e_benefs_erro(pnrregistro number,
                                        pnrcontrato char,
                                        pnrseqcial_bnfciar number);
  procedure p_insere_log(ptpintegracao        varchar2,    --IDENTIFICADOR DA ENTIDADE
                         pmetodo              varchar2,
                         pind_acao            varchar2,
                         pnrsequencial_origem number,      --ID UNICO DO REGISTRO NO UNICOO
                         pcdidentificador     varchar2,
                         pobservacao          varchar2,    --ID UNICO DO REGISTRO NO TOTVS
                         p_complemento        varchar2);
  procedure p_remover_guias_para_atualizar;
  procedure apagar_guia_totvs(pcd_unimed           number,
                              paa_guia_atendimento number,
                              pnr_guia_atendimento number);
  procedure p_importa_nota_co_evento_progr (pPeriodo number,                            /*Informar o período do UNICOO para buscar os eventos de Coparticipação e Custo Operacional*/
                                            pEVENTO_FM      GP.EVENPROG.CD_EVENTO%Type, /*Informar o Evento de Coparticipação do TOTVS*/
                                            pEVENTO_CO      GP.EVENPROG.CD_EVENTO%Type, /*Informar o Evento de Custo Operacional do TOTVS*/
                                            pOBS_EVENTO_FM  Varchar2,                   /*Observações para registrar os Eventos de Coparticipação*/
                                            pOBS_EVENTO_CO  Varchar2);                  /*Observações para registrar os Eventos de Custo Operacional*/


end pck_unicoogps;
/
CREATE OR REPLACE PACKAGE BODY "PCK_UNICOOGPS" IS
  -- VERSAO 63
  --Evandro Levi (21/11/2018): Atualizado o cursor "c_modulos_benef".
  --Alex Boeira  (18/01/2019): NIG-1463 - migrar contratos mesmo que somente tenham beneficiario eventual
  --Alex Boeira  (24/01/2019): ajuste para considerar FATURAMENTO.NRPESSOA_PAGA para buscar ultimo faturamento
  --Alex Boeira  (04/02/2019): tratamento para sincronizar mudancas na origem (Unicoo) beneficiario, proposta - Jenkins
  --Alex Boeira  (14/02/2019): tratamento para sincronizar mudancas na origem (Unicoo) autorizacoes - Jenkins
  --Alex Boeira  (06/03/2019): renomeado REM_TAB_CONVERSAO* para MIG_TAB_CONVERSAO* (criadas em UNICOOGPS identico ao original do Unicoo)
  --Alex Boeira  (08/03/2019): novo metodo desenvolvido por Evandro Levi: p_importa_nota_co_evento_progr



  /*CAMPOS RESERVA GP.IMPORT_PROPOST:
                     num_livre_2 = CONTRATO_PADRAO/CONTRATO_DA_PESSOA.nrregistro
                     num_livre_3 = CONTRATO_PADRAO/CONTRATO_DA_PESSOA.nrcontrato
                     cod_livre_3 = CONTRATO_PADRAO/CONTRATO_DA_PESSOA.cdcontrato


  */
  /*TM_CONTROLE_PROPOSTAS
  *********************************************************************************************************************************************
  CRIAÇÃO          : VINICIUS JUSTINO
  DATA             : 02/12/2014 16:43
  MÓDULO PRINCIPAL : MIGRAÇÃO
  MÓDULOS          : MIGRAÇÃO UNICOO -> GESTÃO DE PLANOS
  TELAS            :
  OBJETIVO         :
  ALTERACOES
  +-------------------------------------------------------------------------------------------------------------------------------------------+
  | DATA       | RESPONSAVEL    | VERSAO          | PENDÊNCIA | ALTERACAO                                                                     |
  +------------+----------------+-----------------+-----------+-------------------------------------------------------------------------------+
  |            |                |                 |           |                                                                               |
  +-------------------------------------------------------------------------------------------------------------------------------------------+
  *********************************************************************************************************************************************
  */
  vnrproposta number;
  cuser_migracao constant varchar2(12) := 'MIGRACAO';
  vcont_erro number := 0;

  /**
   * nrfamilia_demitidos e nrfamilia_sinistrados devem ser iniciados com valores nesse formato (sem repetir):
   *           100000, 200000, 300000, etc, até 900000.
   * objetivo: esse número é somado ao código da família no plano de DEMITIDO/APOSENTADO e SINISTRADO, pois como no TOTVS
   *           é criado um registro do funcionário no plano da empresa e outro na lotação '1' (default DEMAP), a sua
   *           matrícula ficaria duplicada. Com esse recurso, por exemplo, se a matrícula do beneficiário
   *           no plano da empresa for 0528000321001, e o parâmetro for 600000, então no plano de demitido
   *           a sua matrícula será 0528600321001.
   */
  pnrfamilia_demitidos   number:= 600000;

  PAOLOG_DBMS_OUTPUT varchar2(1); -- gerar logs pelo DBMS_OUTPUT?
  PAOLOG_TABELA      varchar2(1); -- gerar logs em tabela do banco?

  --parametros inicio
  pcategsus  varchar2(60);
  PCLASSES_INSUMOS VARCHAR2(60);
  pclsmater        varchar2(60);
  pclsmedic        varchar2(60);
  pcltaxa          varchar2(60);
  pclasdia         varchar2(60);
  pcommit          varchar2(60);
  pcdtabcobr  varchar2(60);
  pcdtabpreco varchar2(60);
  PCDMODALIDADE_PORT_REC varchar2(1);

  PNRPERIODO_ULT_REAJUSTE    varchar2(60);
  PNRPERIODO_ULT_FATURAMENTO varchar2(60);

  --pcdmodnreg              varchar2(60);
  pqtvalidtermo           varchar2(60);
  punvalidtermo           varchar2(60);
  pqtvalidcart            varchar2(60);
  punvalidcart            varchar2(60);
  pnrunimed               varchar2(60);
  prealgps                varchar2(8);
  pcdmotivocancel         varchar2(60);
  pcdconveniopadrao       varchar2(60);
  pqtlimite               varchar2(60);
  pcdconvtab              varchar2(60);
  pnocidadedefault        varchar2(60);
  pcdcidadedefault        varchar2(60);
  pcdestadodefault        varchar2(60);
  pcdportador             varchar2(60);
  pcdbanco                varchar2(60);
  paocpfinvalidinativo    varchar2(60);
  pcontrato_pea           varchar2(60);
  parea_acao_monitoramento_ie number;
  pcdprestador            tm_parametro.cdparametro%type;
  pnoprestador            tm_parametro.cdparametro%type;
  pcdconselhoprof tm_parametro.cdparametro%type;
  pnrconselhoprof tm_parametro.cdparametro%type;
  pcdestadocrm    tm_parametro.cdparametro%type;
  pcdespecialidade              tm_parametro.cdparametro%type;
  pgrau_parentesco_irmao        tm_parametro.cdparametro%type;
  PCDGRAU_DEFAULT_REMIDOS       tm_parametro.cdparametro%type;
  pmotivo_cancel_obito          tm_parametro.cdparametro%type;
  psepara_inativo               tm_parametro.cdparametro%type;
  pCD_REPRESENTANTE             tm_parametro.cdparametro%type;
  pcd_modulo_menslidade         tm_parametro.cdparametro%type;
  pAOCONSID_PRIMEIRO_DIA_CARENC tm_parametro.cdparametro%type;
  pcd_modalidade_pea            tm_parametro.cdparametro%type;
  PCDMOTIVOCANCEL_BENEF         TM_PARAMETRO.CDPARAMETRO%TYPE;
  pCDGRAU_PARENTESCO_ESPECIAL   TM_PARAMETRO.CDPARAMETRO%TYPE;
  pCDGRAU_PARENTESCO_UNIVER     TM_PARAMETRO.CDPARAMETRO%TYPE;
  pCD_GLOSA_DEFAULT             TM_PARAMETRO.CDPARAMETRO%TYPE;
  pAOMIGRA_COM_LOTACAO          TM_PARAMETRO.CDPARAMETRO%TYPE;
  pmigra_insumos_unicoo         TM_PARAMETRO.CDPARAMETRO%TYPE;
  aoignorar_histor_guia_iguais  TM_PARAMETRO.CDPARAMETRO%TYPE;
  PTIPO_ANEXO_CONTRATO          TM_PARAMETRO.CDPARAMETRO%TYPE;
  PTIPO_ANEXO_BENEF             TM_PARAMETRO.CDPARAMETRO%TYPE;
  PTIPO_ANEXO_OUTROS            TM_PARAMETRO.CDPARAMETRO%TYPE;
  pSEPARADOR_ENDERECO_NUMERO    TM_PARAMETRO.CDPARAMETRO%TYPE;
  P_AAAAMM_INI_FATURAS          TM_PARAMETRO.CDPARAMETRO%TYPE;
  P_AAAAMM_FIM_FATURAS          TM_PARAMETRO.CDPARAMETRO%TYPE;
  PDT_INICIAL_GUIAS_AUTORIZ     TM_PARAMETRO.CDPARAMETRO%TYPE;
  PCD_UNIDADE_DECPREST          TM_PARAMETRO.CDPARAMETRO%TYPE;
  PCD_PRESTADOR_DECPREST        TM_PARAMETRO.CDPARAMETRO%TYPE;

  --parametros fim

  vaofalha            varchar2(1);
  vnrcontrolemigracao number;
  vnrsequencialorigem number;

  countofrecords number;
  vqtregistro1   number;

  seqproposta     number := 0;
  vnrfamilia      number := 0;
  vaogravar       varchar2(1);
  vaomigrado      varchar2(1);
  vnaotem         varchar2(1);
  vtabelapreco    varchar2(12);
  vnrperiodo_ini  number := 199001;
  vnrperiodo_fim  number := 999912;
  vnrperiodo      number;

  vcdcontrato_ini contrato_padrao.cdcontrato%type;
  vcdcontrato_fim contrato_padrao.cdcontrato%type;
  vcont           number := 0;

  --cursor

  cursor cproperus_plano is

    select distinct /*+ rule */ rem.cd_modalidade cd_modalidade,
                    rem.cd_plano cd_plano,
                    rem.cd_tipo_plano cd_tipo_plano,
                    0 nr_ter_adesao,
                    0 cd_usuario,
                    --nvl(rmo.cdvalor_externo, cs.cdcategserv) cd_modulo,
                    rmo.cdmodulo cd_modulo,
                    nvl(rpr.cdvalor_externo, s.cdservico) cd_procedimento,
                    nvl(rcs.cdvalor_externo, s.cdclasse) grupo_proc_tp_insu,
                    cs.nocategserv,
                    substr(s.noservico, 0, 40) ds_properus, --verificar com cliente
                    ls.qtlimite qt_permitida,
                    case
                      when rtc.cdvalor_externo in ('R', 'M') then
                       nvl(ls.qtmes, 0)
                      else
                       0
                    end nr_meses,
                    cs.cdcategserv,
                    ls.tpcriterio,
                    s.cdservico,
                    s.cdclasse,
                    nvl(sc.aoexclusao, 'N') aoexclusao,
                    nvl(ls.aolimite_individual, 'N') aolimite_individual,
                    ag.cdagrupamento,
                    ag.noagrupamento,
                    case
                      when s.cdclasse in
                           (pclasdia, pclsmater, pclsmedic, pcltaxa) then
                       'INSUMO'
                      else
                       'PROCEDIMENTO'
                    end tpservico,
                    rem.cd_padrao_cobertura
      from t_v_plano_padrao rem,
           contrato_padrao cp,
           categoria_de_servico cs,
           depara_modulo rmo,
           servico_da_categoria sc,
           servico s,
           (select cdvalor_externo, cdvalor_interno
              from mig_tab_conversao tc, mig_tab_conversao_exp ce
             where notabela = 'MIGRACAO_PROCEDIMENTOS'
               and tc.nrseq = ce.nrseq_tab_conversao) rpr,
           (select cdvalor_externo, cdvalor_interno
              from mig_tab_conversao tc, mig_tab_conversao_exp ce
             where notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO'
               and tc.nrseq = ce.nrseq_tab_conversao) rcs,
           limite_do_servico ls,
           agrupamento_servico ag,
           agrupamento_servico_detalhe agd,
           mig_tab_conversao r,
           mig_tab_conversao_exp rtc
     where ls.qtlimite < pqtlimite
       and r.nrseq = rtc.nrseq_tab_conversao
       and r.notabela = 'MIGRACAO_INDICADOR_PERIODO'
       and rtc.cdvalor_interno = ls.tpcriterio
       and cp.cdcontrato = rem.cdcontrato
       and cp.cdcontrato = cs.cdcontrato
       --and cs.cdcategserv = rmo.cdvalor_interno(+)
       and cs.cdcategserv = rmo.cdcategserv(+)
       and cs.cdcontrato = sc.cdcontrato
       and cs.cdcategserv = sc.cdcategserv
       and sc.cdagrupamento = ag.cdagrupamento(+)
       and ag.cdagrupamento = agd.cdagrupamento(+)
       and ag.aosituacao(+) = 'A'
       and agd.aoexceto(+) = 'N'
       and nvl(sc.cdservico, agd.cdservico) = s.cdservico
       and s.cdservico = rpr.cdvalor_interno(+)
       and s.cdclasse = rcs.cdvalor_interno(+)
       and sc.nrserv_categ = ls.nrserv_categ
       and (ls.tpplano = rem.tpplano or ls.tpplano = '*' or
           rem.tpplano = '*')
       and ls.cdusucateg = '*'
       and ls.cdsitcadastro = '*'
       and nvl(sc.aoexclusao, 'N') = 'N'
       and cp.tpcontrato in ('PM', 'SP')
/* com as validacoes abaixo, ignora insumos. trata apenas procedimentos
       and s.cdclasse not in (pclasdia, pclsmater, pclsmedic, pcltaxa)
       and length(nvl(translate(upper(s.cdservico),
                                'ABCDEFGHIJKLMNOPQRSTUVXZ',
                                0),
                      0)) = 8*/

     order by rem.cd_modalidade,
              rem.cd_plano,
              rem.cd_tipo_plano,
              --nvl(rmo.cdvalor_externo, cs.cdcategserv),
              rmo.cdmodulo,
              lpad(nvl(rpr.cdvalor_externo, s.cdservico), 8, '0'),
              ag.cdagrupamento;

  cursor c_servico(pcdservico varchar2) is
    select nvl(rpr.cdvalor_externo, s.cdservico) cd_procedimento,
           s.cdservico,
           nvl(rcs.cdvalor_externo, s.cdclasse) grupo_proc_tp_insu,
           s.cdclasse
      from servico s,
           (select cdvalor_externo, cdvalor_interno
              from mig_tab_conversao tc, mig_tab_conversao_exp ce
             where notabela = 'MIGRACAO_PROCEDIMENTOS'
               and tc.nrseq = ce.nrseq_tab_conversao) rpr,
           (select cdvalor_externo, cdvalor_interno
              from mig_tab_conversao tc, mig_tab_conversao_exp ce
             where notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO'
               and tc.nrseq = ce.nrseq_tab_conversao) rcs
     where s.cdservico like pcdservico || '%'
       and length(s.cdservico) = 8
       and s.cdservico = rpr.cdvalor_interno(+)
       and s.cdclasse = rcs.cdvalor_interno(+);

  cursor cur_proposta(nrseq_proposta import_propost.num_seqcial_propost%type) is
    select b.*, c.nr_insc_contratante, null nr_insc_contrat_origem
      from (select a.*, t.noabreviado_cliente
              from (select '1' tpregistro,
                           null inscr_contratante_origem,
                           '1' tpvencimento,
                           cdp.nrdia_de_vencimento dia_vencimento,
                           cdp.tpfatura,
                           'S' inicio_validade,

                           --pcdconveniopadrao convenio,
                           nvl((select tcc.cd_convenio
                                  from temp_convenio_contrato tcc
                                 where tcc.cd_modalidade = tmp.cd_modalidade
                                   and tcc.cd_plano      = tmp.cd_plano
                                   and tcc.cd_tipo_plano = tmp.cd_tipo_plano
                                   and (tcc.nrcontrato = tmp.num_livre_3 or tcc.nrcontrato = 0)),pcdconveniopadrao) convenio, -- \*pcdconveniopadrao*\

                           case
                             when cod_livre_4 <> 'SEMFAT' then
                              '2' -- COM PARTICIPACAO
                             else
                              '1' -- SEM PARTICIPACAO
                           end tpparticipacao,

                           --nvl(cdvendedor, pCD_REPRESENTANTE) vendedor,
                           --SE VENDEDOR ESTIVER NULO NO CONTRATO, BUSCAR DO RESPONSAVEL (22/03/2018)
                           nvl(nvl(cdvendedor,
                               (select u1.cdvendedor
                                  from usuario u1
                                 where u1.nrregistro = cdp.nrregistro
                                   and u1.nrcontrato = cdp.nrcontrato
                                   and u1.tpusuario  = 0
                                   and rownum = 1)),pCD_REPRESENTANTE) vendedor,

                           pcdtabpreco tab_preco_plano,
                           (cdp.txadministracao * 1000) perc_acres_mensalidade,
                           null dtlimite_acres_mensalidade,
                           (cdp.txadministracao * 1000) perc_acres_inscricao,
                           null dtlimite_acres_inscricao,

                           nvl(cdp.pedesconto,0) perc_desc_mensalidade,
                           decode(nvl(cdp.pedesconto,0),0,null,'31/12/9999') dtlimite_desc_mensalidade,

                           nvl(cdp.pedesconto,0) perc_desc_inscricao,
                           decode(nvl(cdp.pedesconto,0),0,null,'31/12/9999') dtlimite_desc_inscricao,

                           0 perc_desc_taxa_prest,
                           0 perc_desc_taxa_adm_credenciado,
                           pcdtabcobr tabela_qtd_moeda_pagto,
                           0 aomascara,
                           ' ' descr_mascara,
                           '0' faixa_etaria_especial,
                           'N' cobertura_especial,
                           'N' considera_prestador,
                           tmp.log_consid_tax_coper, --'S' considera_taxa_co,
                           '0' perc_uso_indevido,
                           'N' medico_na_empresa,
                           cdp.dtvalidcar,
                           case
                             when (case
                                    when cdp.dtfimcontrato <
                                         (select dtfinal_contrato
                                            from familia f
                                           where f.nrregistro = tmp.num_livre_2
                                             and f.nrcontrato = tmp.num_livre_3
                                             and f.nrfamilia = tmp.num_livre_4
                                             and rownum = 1) then
                                     (select dtfinal_contrato
                                        from familia f
                                       where f.nrregistro = tmp.num_livre_2
                                         and f.nrcontrato = tmp.num_livre_3
                                         and f.nrfamilia = tmp.num_livre_4
                                         and rownum = 1)
                                    else
                                     cdp.dtfimcontrato
                                  end) is not null then
                              to_char((case
                                        when cdp.dtfimcontrato <
                                             (select dtfinal_contrato
                                                from familia f
                                               where f.nrregistro = tmp.num_livre_2
                                                 and f.nrcontrato = tmp.num_livre_3
                                                 and f.nrfamilia = tmp.num_livre_4
                                                 and rownum = 1) then
                                         (select dtfinal_contrato
                                            from familia f
                                           where f.nrregistro = tmp.num_livre_2
                                             and f.nrcontrato = tmp.num_livre_3
                                             and f.nrfamilia = tmp.num_livre_4
                                             and rownum = 1)
                                        else
                                         cdp.dtfimcontrato
                                      end),
                                      'YYYY')
                             else
                               substr(PNRPERIODO_ULT_FATURAMENTO, 1, 4)
                           end ultimo_ano_faturado,

                           case
                             when (case
                                    when cdp.dtfimcontrato <
                                         (select dtfinal_contrato
                                            from familia f
                                           where f.nrregistro = tmp.num_livre_2
                                             and f.nrcontrato = tmp.num_livre_3
                                             and f.nrfamilia = tmp.num_livre_4
                                             and rownum = 1) then
                                     (select dtfinal_contrato
                                        from familia f
                                       where f.nrregistro = tmp.num_livre_2
                                         and f.nrcontrato = tmp.num_livre_3
                                         and f.nrfamilia = tmp.num_livre_4
                                         and rownum = 1)
                                    else
                                     cdp.dtfimcontrato
                                  end) is not null then
                              to_char((case
                                        when cdp.dtfimcontrato <
                                             (select dtfinal_contrato
                                                from familia f
                                               where f.nrregistro = tmp.num_livre_2
                                                 and f.nrcontrato = tmp.num_livre_3
                                                 and f.nrfamilia = tmp.num_livre_4
                                                 and rownum = 1) then
                                         (select dtfinal_contrato
                                            from familia f
                                           where f.nrregistro = tmp.num_livre_2
                                             and f.nrcontrato = tmp.num_livre_3
                                             and f.nrfamilia = tmp.num_livre_4
                                             and rownum = 1)
                                        else
                                         cdp.dtfimcontrato
                                      end),
                                      'MM')
                             else
                                    substr(PNRPERIODO_ULT_FATURAMENTO, 5, 2)
                           end ultimo_mes_faturado,

                           cdp.dtiniciocontrato dtinicio_proposta,
                           decode(cdp.aoempresario_individual,'S',1,0) aoempresario_individual,

                           case
                             when cdp.dtfimcontrato <
                                  (select dtfinal_contrato
                                     from familia f
                                    where f.nrregistro = tmp.num_livre_2
                                      and f.nrcontrato = tmp.num_livre_3
                                      and f.nrfamilia = tmp.num_livre_4
                                      and rownum = 1) then
                              (select dtfinal_contrato
                                 from familia f
                                where f.nrregistro = tmp.num_livre_2
                                  and f.nrcontrato = tmp.num_livre_3
                                  and f.nrfamilia = tmp.num_livre_4
                                  and rownum = 1)
                             else
                              cdp.dtfimcontrato
                           end dtcancelamento_proposta,
                           tmp.num_seqcial_propost contrato_antigo,
                           (select tppessoa
                              from pessoa p
                             where p.nrregistro = tmp.num_livre_2) tppessoa,
                           ' ' tppessoa_origem,
                           '0' vlproposta,
                           'S' doc_identificacao_benef,
                           'S' tabela_difer_cobr,
                           '0' perc_desc_prom_s_tx_inscricao,
                           null dt_valid_desc_pro_s_dtinscr,
                           '0' perc_desc_promoc_s_mens,
                           null dt_valid_desc_promoc_s_mens,
                           case
                             when cdp.nrcontrato = pcontrato_pea then
                              'S'
                             else
                              'N'
                           end prop_seguro_assist,
                           null dtfim_seg_assist,
                           'N' faturar_prop_seg_assist,
                           'S' altera_participacao,
                           'S' altera_tx_inscricao,
                           'S' validade_benef_movimento,
                           'S' val_prorrog_benef_mov,
                           null cobr_contrat_subst,
                           null ultimo_mes_reajuste,
                           null ultimo_ano_reajuste,
                           case
                             when (select v.cd_padrao_cobertura
                                     from t_v_plano_padrao v
                                    where tmp.cod_livre_3 = v.cdcontrato
                                      and tmp.cd_modalidade = v.cd_modalidade
                                      and tmp.cd_plano = v.cd_plano
                                      and tmp.cd_tipo_plano = v.cd_tipo_plano
                                      and rownum = 1) is not null then
                              '0'
                             else
                              case
                                when cp.aonova_legislacao = 'S' then
                                 (select cdproduto_min_saude
                                    from tipo_plano_contrato tpc
                                   where tpc.cdcontrato = tmp.cod_livre_3
                                     and tpc.tpplano = tmp.cod_livre_5
                                     and rownum = 1)
                                else
                                 '0'
                              end
                           end cd_registro_plano,

                           null perc_ultimo_reajuste,
                           cp.cdproduto_min_saude cod_reg_susep,
                           case
                             when cp.aonova_legislacao = 'S' then
                              'S'
                             else
                              'N'
                           end proposta_regulamentada,
                           '0365' qtd_validade_cartao, --fernanda, nao esta pegando do contrato pessoa somente tem que ver no padrao
                           'DD' unid_validade_cartao,
                           cp.cdcontratacao_ans tpcontratacao,
                           decode(cp.cdncontratacao_ptu,
                                  '1',
                                  '2',
                                  cp.cdncontratacao_ptu) tpnatureza,
                           '2' tp_val_doc_benef,
                           null nroficio_reajuste,
                           case
                             when (select v.cd_padrao_cobertura
                                     from t_v_plano_padrao v
                                    where tmp.cod_livre_3 = v.cdcontrato
                                      and tmp.cd_modalidade = v.cd_modalidade
                                      and tmp.cd_plano = v.cd_plano
                                      and tmp.cd_tipo_plano = v.cd_tipo_plano
                                      and rownum = 1) is null then
                              1
                             else
                              2
                           end ind_reg_plano, --proposta

                           case
                             when (select v.cd_padrao_cobertura
                                     from t_v_plano_padrao v
                                    where tmp.cod_livre_3 = v.cdcontrato
                                      and tmp.cd_modalidade = v.cd_modalidade
                                      and tmp.cd_plano = v.cd_plano
                                      and tmp.cd_tipo_plano = v.cd_tipo_plano
                                      and rownum = 1) is not null then
                              ' '
                             else
                              case
                                when cp.aonova_legislacao = 'N' then
                                 (select cdproduto_min_saude
                                    from tipo_plano_contrato tpc
                                   where tpc.cdcontrato = tmp.cod_livre_3
                                     and tpc.tpplano = tmp.cod_livre_5
                                     and rownum = 1)
                                else
                                 ' '
                              end
                           end reg_plano_operadora,

                           cdp.nrcontrato,
                           cdp.cdnivel_preco,
                           cp.tpusu_contrato,
                           nvl(tmp.cod_livre_4, 'SEMFAT') cdfat,
                           tmp.num_seqcial_control nrsequencial_controle,
                           tmp.num_seqcial_propost nrsequencial_proposta,
                           cdp.cdcontrato_padrao,
                           'N' ind_faixa_etaria_especial,
                           tmp.cd_forma_pagto forma_pagamento,
                           nvl((select nrcgc_cpf
                                 from pessoa p
                                where p.nrregistro = tmp.num_livre_2
                                  and rownum = 1),
                               0) nrcgccpf_contratante,
                           0 nrcgccpf_contrat_origem,
                           tmp.num_livre_2 nrregistro,
                           tmp.num_livre_5 nrpessoa_paga,
                           pcdtabcobr tab_qtd_moeda_cobranca,
                           tmp.cd_modalidade,
                           tmp.ind_sit_import,
                           tmp.nr_contrato_antigo,
                           case
                             when (cp.aoadaptado) = 'S' then
                              'AD'
                             when (cp.aonova_legislacao) = 'N' and
                                  (cp.aoadaptado) = 'N' then
                              'NR'
                             when (cp.aonova_legislacao) = 'S' then
                              'RG'
                           end cod_livre_8,
                           case
                             when cp.aonova_legislacao = 'S' then
                              1
                             else
                              case
                                when cp.aoadaptado = 'S' then
                                 3
                                else
                                 case
                                   when cp.aonova_legislacao = 'N' and
                                        cp.aoadaptado = 'N' then
                                    2
                                 end
                              end
                           end num_livre_8, -- indicador plano 1-regulamentado, 2-não regulamentado, 3-adaptado
                           tmp.num_livre_10, --NR_PROPOSTA
                           cdp.cdvendedor,
                           decode(cdp.tpnumeracao_familia, 'M', 0, 1) tpnumeracao_familia,
                           (Select nvl(max(cdn_tip_idx), 0) /*valor '0' é default*/
                            From   depara_indice_financeiro
                            Where  cdindice = cdp.cdindice) cdn_tip_idx,

                           nvl((SELECT cf.vlfixo_por_guia
                              from criterio_fator_moderador cf,
                                   fator_moderador          f,
                                   contrato_coparticipacao  ccp
                             WHERE cdp.nrregistro = ccp.nrregistro
                               AND cdp.nrcontrato = ccp.nrcontrato
                               AND (cdp.cdcontrato_padrao = ccp.cdcontrato OR ccp.cdcontrato IS NULL)
                               AND ccp.cdfator_moderador = f.cdfator_moderador
                               AND f.cdfator_moderador = cf.cdfator_moderador
                               AND cf.vlfixo_por_guia > '0'
                               and rownum = 1),'0') vl_franquia

                      from import_propost     tmp,
                           contrato_da_pessoa cdp,
                           contrato_padrao    cp
                     where tmp.num_livre_2 = cdp.nrregistro
                       and tmp.num_livre_3 = cdp.nrcontrato
                       and tmp.cod_livre_3 = cp.cdcontrato
                       and tmp.num_seqcial_propost = nrseq_proposta) a,
                   ti_pessoa t
             where t.nrregistro(+) = a.nrregistro) b,
           gp.contrat c
     where c.u##nome_abrev(+) = b.noabreviado_cliente;

/*  cursor c_criterios_regra(pnrtabela_contrato       preco_contrato_pessoa.nrtabela_contrato%type,
                           pinrperiodo_ult_reajuste preco_contrato_pessoa.nrperiodo_ult_reajuste%type,
                           ptpplano                 preco_contrato_pessoa.tpplano%type,
                           pnrsequencial_usuario    preco_contrato_pessoa.nrsequencial_usuario%type,
                           pnrfamilia               preco_contrato_pessoa.nrfamilia%type,
                           pcdlotacao               preco_contrato_pessoa.cdlotacao%type,
                           pcdusucateg              preco_contrato_pessoa.cdusucateg%type) is
    select null cd_id,
           null cdd_regra,
           ' ' cd_padrao_cobertura,
           (select cd_modulo
              from tm_modulos_mensa t
             where t.cdcategserv = pcp.cdcategserv) cd_modulo,
           0 cd_grau_parentesco,
           pcp.nridade_inicio,
           pcp.nridade_fim,
           pcp.vlpreco_mensal vl_mensalidade_base,
           pcp.vlpreco_inscricao vl_taxa_inscricao,
           null dat_inic,
           '31/12/9999' dat_fim,
           0 qt_repasse,
           pcp.nrqtusuario_inicio num_livre_1,
           pcp.nrqtusuario_fim num_livre_2,
           'GE' cdsituacao
      from preco_contrato_pessoa pcp
     where pcp.nrtabela_contrato = pnrtabela_contrato
       and pcp.nrperiodo_ult_reajuste = pinrperiodo_ult_reajuste
       and pcp.tpplano = ptpplano
       and pcp.nrsequencial_usuario = pnrsequencial_usuario
       and pcp.nrfamilia = pnrfamilia
       and pcp.cdlotacao = pcdlotacao
       and pcp.cdusucateg = pcdusucateg
    union
    select null cd_id,
           null cdd_regra,
           ' ' cd_padrao_cobertura,
           (select cd_modulo
              from tm_modulos_mensa t
             where t.cdcategserv = pcp.cdcategserv) cd_modulo,
           0 cd_grau_parentesco,
           pcp.nridade_inicio,
           pcp.nridade_fim,
           pcp.vlpreco_mensal vl_mensalidade_base,
           pcp.vlpreco_inscricao vl_taxa_inscricao,
           null dat_inic,
           '31/12/9999' dat_fim,
           0 qt_repasse,
           pcp.nrqtusuario_inicio num_livre_1,
           pcp.nrqtusuario_fim num_livre_2,
           'GE' cdsituacao
      from preco_contrato_pessoa pcp
     where pcp.nrtabela_contrato = pnrtabela_contrato
       and pcp.nrperiodo_ult_reajuste = pinrperiodo_ult_reajuste
       and pcp.tpplano = ptpplano
       and pcp.cdcategserv <> ' '
    union
    select null cd_id,
           null cdd_regra,
           ' ' cd_padrao_cobertura,
           (select cd_modulo
              from tm_modulos_mensa t
             where t.cdcategserv = pcp.cdcategserv) cd_modulo,
           0 cd_grau_parentesco,
           pcp.nridade_inicio,
           pcp.nridade_fim,
           pcp.vlpreco_mensal vl_mensalidade_base,
           pcp.vlpreco_inscricao vl_taxa_inscricao,
           null dat_inic,
           '31/12/9999' dat_fim,
           0 qt_repasse,
           pcp.nrqtusuario_inicio num_livre_1,
           pcp.nrqtusuario_fim num_livre_2,
           'GE' cdsituacao
      from preco_contrato_pessoa pcp
     where pcp.nrtabela_contrato = pnrtabela_contrato
       and pcp.nrperiodo_ult_reajuste = pinrperiodo_ult_reajuste
       and pcp.tpplano = '*'
       and pcp.cdcategserv <> ' ';
*/

  cursor cur_beneficiario(pnrsequencial_usuario in number) is
    select '1' tpregistro,
           (select max(ui.dtvalidade)
              from usuario_identificacao ui
             where ui.nrsequencial_usuario = tmb.num_seqcial_bnfciar) dat_livre_1,
           tmb.num_seqcial_control,
           0 inscricao_contratante, --vinicius
           tmp.nr_contrato_antigo proposta, --vinicius
           tmp.num_livre_10 nr_proposta,
           tmp.log_livre_1 lg_usa_ben_evetual,
           decode(upper(p.cdsexo), 'M', 'M', 'F', 'F', null) cdsexo,
           nvl((select cdvalor_externo
                 from mig_tab_conversao r, mig_tab_conversao_exp re
                where re.nrseq_tab_conversao = r.nrseq
                  and r.notabela = 'MIGRACAO_ESTADO_CIVIL'
                  and p.cdestadocivil = re.cdvalor_interno),
               9) estado_civil,
           nvl(to_char(p.dtnascimento, 'DD/MM/YYYY'), '01/01/1990') dtnascimento,
           nvl(us.aoinvalido, 'N') aoinvalido,
           nvl(us.aouniversitario, 'N') aouniversitario,
           (select tgp.cdvalores_externo from temp_grau_paren tgp where tgp.cdvalor_interno = tu.tpusuario)
                  grau_parentesco,

           case
             when tmb.cd_carteira_antiga = tmb.cdcarteiraorigemresponsavel then
              1
             else
              0
           end responsavel,

           to_char(us.dtinicio, 'DD/MM/YYYY') dtinicio,
           us.dtinicio_usuario_operadora,
           us.dtexclusao dtexclusao,

           --Alex Boeira 11/12/18 - alterado para forçar sempre 1 em AOCARENCIA, pois no Unicoo esse campo indica que
           --                       o usuario ja cumpriu a carencia, ja no TOTVS indica que nunca tera carencia, inclusive CPT
           --                       Solicitado por Elaine.
           --decode(us.tpcarencia, '0', 0, 1) aocarencia,
           1 aocarencia,

           1 cdusuario,
           to_char(us.dtadmissao_empresa, 'DD/MM/YYYY') dtadmissao_empresa,
           0 nrcbo,
           decode(p.tppessoa, 'F', p.nrcgc_cpf, null) nrcpf,
           decode(p.tppessoa, 'F', p.nrinscest_rg, ' ') nrrg,
           null endereco,
           null nrimovel,
           null nobairro,
           null cidade,
           null cdcidade,
           null cep,
           null estado,
           case
             when cdp.aocobrainscricao = 'S' then
               1
             else
               0
           end lg_cobrar_inscricao,
           --null padrao_cobertura,
           ' ' nome_cartao_magnetico,
           nvl(reverse(substr(reverse(p.nopessoa),
                              1,
                              instr(reverse(p.nopessoa), ' ') - 1)),
               ' ') nome_internacional,
           /*to_char(tmt.num_seqcial) || '-' || */
           ' ' info_especifica1,
           ' ' info_especifica2,
           ' ' info_especifica3,
           ' ' info_especifica4,
           0 cgc_cpf_contratante,
           tmp.nr_contrato_antigo contrato_antigo,
           tmb.cd_carteira_antiga carteira_antiga,
           tmb.num_livre_4 nr_familia,
           p.tppessoa,
           nvl(substr(replace(us.cdorigem, '.', ''), 1, 3), 0) nrunimed_origem,
           substr(replace(replace(replace(us.cdorigem, '.', ''), '-', ''),
                          ' ',
                          ''),
                  4,
                  13) nounimed_origem,
           ' ' plano_origem,
           ' ' noplano_origem,
           tmb.cdcarteiraorigemresponsavel carteira_antiga_resp,
           0 padrao_cobertura_ant,
           null dtalteracao_exp_prod,
           null dtfalecimento_titular,
           null dtatualizacao_carencia,
           us.nrregistro_usuario usuario_atualiz_carencia,
           0 aobonif_penal_carencia,
           0 nrdias_bonif_benef,
           decode(tmp.cod_livre_4, 'SEMFAT', 0, 1) aocobrar_fator_particip,
           --             to_char(us.dtcadastro_usuario, 'DDMMYYYY') dtvinculo, --luiz 05/07/2011
           to_char(us.dtinicio, 'DD/MM/YYYY') dtvinculo,
           --us.dtinicio_usuario_operadora,
           us.dtini_novo_plano,
           null dtfim_seguro_assit,

           --tmp.aa_ult_fat ultimo_ano_faturado,
           --tmp.num_mes_ult_faturam ultimo_mes_faturado,

           --campos que serao preenchidos em p_atualiza_beneficiario_g
           0 ultimo_ano_faturado,
           0 ultimo_mes_faturado,

           --buscar ultimo faturamento real no unicoo
           (select max(fat.nrperiodo)
              from detalhe_faturamento_premio dfp, faturamento fat
             where dfp.nrfatura = fat.nrfatura
               and fat.aosituacao_fatura = '0' --valida
               AND us.NRSEQUENCIAL_USUARIO = dfp.NRSEQUENCIAL_USUARIO) aa_mm_ultimo_faturamento,

           0 departamento,
           0 secao,
           0 setor,
           (us.cdserie_ctps || us.numero_ctps) carteira_trabalho,
           null dtprimeira_consulta,
           nvl(decode(us.dtexclusao,
                      null,
                      null,
                      nvl((select cdvalor_externo
                            from mig_tab_conversao     r,
                                 mig_tab_conversao_exp re
                           where re.nrseq_tab_conversao = r.nrseq
                             and r.notabela = 'MIGRACAO_MOTIVO_CANCELAMENTO'
                             and us.cdmotivo_cancelamento =
                                 re.cdvalor_interno),
                          PCDMOTIVOCANCEL_BENEF)),
               0) cdmotivo_canc,
           0 funcao,
           nvl(p.nrpis, 0) pis_pasep,
           nvl(p.nrcns, 0) cartao_nacional_saude,
           p.nopai,
           (select cp.cdcobertura_ans
              from contrato_padrao cp
             where cp.cdcontrato = us.cdcontrato) segmento_assist,
           null dtinclusao_unimed_origem,
           0 origem_responsavel,

           case
             when tmp.in_registro_plano = 2 and cpr.aonova_legislacao = 'S' then
             --
              nvl((select decode(r.cdn_plano_ans, 0, null, r.cdn_plano_ans) cd_registro
                    from gp.padr_cobert_plano_ans pc, gp.reg_plano_saude r
                   where pc.idi_plano_ans = r.idi_registro
                     and pc.cd_modalidade = tmp.cd_modalidade
                     and pc.cd_plano = tmp.cd_plano
                     and pc.cd_tipo_plano = tmp.cd_tipo_plano
                     and pc.cd_padrao_cobertura =
                         nvl((select v.cd_padrao_cobertura
                               from t_v_plano_padrao v
                              where v.cdcontrato_usu = us.cdcontrato
                                and rownum = 1),
                             ' ')),
                  nvl(tp.cdproduto_min_saude, cp.cdplano_ans))

             else
              null
           end cdregistro_plano,
           null cdemail,
           --se vendedor estiver nulo no Unicoo, enviar zero. o Progress assumira o vendedor da proposta (22/03/2018)
           nvl(us.cdvendedor, 0) cdvendedor,
           null noorgao_emissor_id,
           'BRASIL' nopais_emissor_id,

           case
             when tmp.in_registro_plano = 2 and cpr.aonova_legislacao = 'N' then

              nvl((select decode(r.cod_plano_operadora,
                                ' ',
                                null,
                                r.cod_plano_operadora) cd_registro
                    from gp.padr_cobert_plano_ans pc, gp.reg_plano_saude r
                   where pc.idi_plano_ans = r.idi_registro
                     and pc.cd_modalidade = tmp.cd_modalidade
                     and pc.cd_plano = tmp.cd_plano
                     and pc.cd_tipo_plano = tmp.cd_tipo_plano
                     and pc.cd_padrao_cobertura =
                         nvl((select v.cd_padrao_cobertura
                               from t_v_plano_padrao v
                              where v.cdcontrato_usu = us.cdcontrato
                                and rownum = 1),
                             ' ')),
                  nvl(cp.cdplano_ans, tp.cdproduto_min_saude))

             else
              ' '
           end registro_plano_operadora,

           null motivo_inclusao,
           case
             when trim(decode(p.tppessoa, 'F', p.nrinscest_rg, ' ')) is not null then
              'BRASILEIRO'
             else
              ' '
           end nacionalidade,
           case
             when trim(decode(p.tppessoa, 'F', p.nrinscest_rg, ' ')) is not null then
              'IDENTIDADE'
             else
              ' '
           end nat_ident,

           case
             when trim(decode(p.tppessoa, 'F', p.nrinscest_rg, ' ')) is not null then
              nvl(p.cdestado_emissor_rg, pcdestadodefault)
             else
              ' '
           end estado_emissor,

           case
             when trim(decode(p.tppessoa, 'F', p.nrinscest_rg, ' ')) is not null then
              p.dtexpedicao_rg
             else
              null
           end dtemissao,
           null telefone1,
           null telefone2,
           p.nopessoa,
           p.nomae,
           nvl(us.nroper_origem, 0) nrproduto_oper_origem,
           nvl(us.cdcco || us.nrdigito_cco, 0000000000) cod_controle_operacional,
           us.nrsequencial_usuario,
           ut.nrsequencial_usuario nrseq_usuario_titular,
           us.nrfamilia,
           us.tpusuario,
           us.cdlotacao,
           us.cdcontrato cdcontrato_padrao,
           us.cdcontrato,
           us.tpplano tpplanounicoo,
           us.nrcontrato,
           us.nrregistro,
           tmb.cod_livre_1 tpusu_contrato,
           tmb.num_livre_1, -- LOTAÇÃO JÁ GRAVADA NA CRIAÇÃO DA PROPOSTA
           tmb.num_livre_6,
           (select num_seqcial
              from import_bnfciar ib
             where ib.cd_carteira_antiga = tmb.cdcarteiraorigemresponsavel
               and rownum = 1) nrregistro_titular, --tmb.nrregistro_titular,
           (select num_seqcial_propost
              from import_bnfciar ib
             where ib.cd_carteira_antiga = tmb.cdcarteiraorigemresponsavel
               and rownum = 1) nrsequencial_prop_titular, --tmb.nrsequencial_prop_titular, hugo
           null dtiniciocontrato,
           tmp.cd_tipo_plano cd_tipo_plano_gps,
           tmp.cd_plano cd_plano_gps,
           tmp.cd_modalidade modalidade,
           us.cdareaacao,
           us.nrregistro_usuario,
           ' ' nrfuncional,
           0 cd_userid_carencia,
           us.cdmotivo_cancelamento cdmotivo_cancelamento_unicoo,
           nvl((select v.cd_padrao_cobertura
                 from t_v_plano_padrao v
                where v.cdcontrato_usu = us.cdcontrato
                  and rownum = 1),
               ' ') cd_padrao_cobertura,
           tmp.dat_fim_propost,
           case
             when tmp.in_registro_plano = 2 then
              case
                when cpr.aonova_legislacao = 'S' then
                 1
                when cpr.aoadaptado = 'S' then
                 3
                when cpr.aoadaptado = 'N' and cpr.aonova_legislacao = 'N' then
                 2
              end
           end ind_regulamentacao,
           tmp.log_segassist,
           cdp.tpfatura
      from pessoa              p,
           usuario             us,
           usuario             ut,
           tipo_de_usuario     tu,
           import_bnfciar      tmb,
           import_propost      tmp,
           tipo_plano_contrato tp,
           contrato_plano      cp,
           contrato_padrao     cpr,
           contrato_da_pessoa  cdp
     where p.nrregistro = us.nrregistro_usuario
       and us.tpusuario = tu.tpusuario
       and tmb.num_seqcial_bnfciar = us.nrsequencial_usuario
       and tmb.nr_contrato_antigo = tmp.nr_contrato_antigo --tmp.u##nr_contrato_antigo
       and tp.cdcontrato(+) = us.cdcontrato
       and tp.tpplano(+) = us.tpplano
       and cp.nrregistro = tmp.num_livre_2
       and cp.nrcontrato = tmp.num_livre_3
       and cp.cdcontrato = us.cdcontrato
       and cpr.cdcontrato = us.cdcontrato
       and us.nrsequencial_usuario = pnrsequencial_usuario
       and cdp.nrregistro = us.nrregistro
       and cdp.nrcontrato = us.nrcontrato
       and ut.nrregistro = us.nrregistro
       and ut.nrcontrato = us.nrcontrato
       and ut.nrfamilia  = us.nrfamilia
       and ut.tpusuario = '00' --responsavel no Unicoo
       ;

  function f_situacao_autorizacao_migra(pcdsituacao varchar2) return varchar2 is
    vretorno           varchar2(2);
  begin
      case
        when pcdsituacao = 'CA' then vretorno := '3'; --CANCELADO->CANCELADA
        when pcdsituacao = 'RE' then vretorno := '8'; --REPROVADO->NEGADA
        when pcdsituacao = 'EM' then vretorno := '2'; --EMITIDO->AUTORIZADA
        when pcdsituacao = 'AP' then vretorno := '5'; --APROVADO->FECHADO --'2'; --APROVADO->AUTORIZADA
        when pcdsituacao = 'AB' then vretorno := '5'; --ABERTO->FECHADO --'1'; --ABERTO->DIGITADA
        when pcdsituacao = 'ES' then vretorno := '10'; --PENDENTE LIBERACAO --'9'; --ESTUDO->PEND. AUDIT.
        when pcdsituacao = 'NA' then vretorno := '10'; --PENDENTE LIBERACAO --'9'; --ANALISE->PEND. AUDIT.
        when pcdsituacao = 'PA' then vretorno := '2';  --AUTORIZADA --'9'; --PARCIAL->PEND. AUDIT.
        when pcdsituacao = 'RT' then vretorno := '2'; --RETORNO DE CONSULTA->AUTORIZADA
        when pcdsituacao = 'U'  then vretorno := '5'; --UTILIZADO->FECHADO --'2'; --UTILIZADA->AUTORIZADA
        when pcdsituacao = 'SU' then vretorno := '3'; --SUBSTITUIDO->CANCELADA
        when pcdsituacao = 'AW' then vretorno := '1'; --AUTORIZADOR WEB EM DIGITACAO->DIGITADA
        else vretorno := 'ERRO';
      end case;
    return vretorno;
  end f_situacao_autorizacao_migra;

--concatenar todos os campos de IMPORT_PROPOST e tabelas relacionadas para gerar hash md5
/*function gerar_hash_import_propost(pnum_seqcial_bnfciar number, pnum_seqcial_propost number) return varchar2 is
  v_linha varchar2(32000) := ' ';
  v_linha_final varchar2(32000) := ' ';
  v_retorno varchar2(100);
begin
  select  num_seqcial               ||
          cod_livre_1               ||
          cod_livre_2               ||
          cod_livre_3               ||
          cod_livre_4               ||
          cod_livre_5               ||
          cod_livre_6               ||
          cod_livre_7               ||
          cod_livre_8               ||
          num_livre_1               ||
          num_livre_2               ||
          num_livre_3               ||
          num_livre_4               ||
          num_livre_5               ||
          num_livre_6               ||
          num_livre_7               ||
          num_livre_8               ||
          num_livre_9               ||
          num_livre_10              ||
          val_livre_1               ||
          val_livre_2               ||
          val_livre_3               ||
          val_livre_4               ||
          val_livre_5               ||
          val_livre_6               ||
          val_livre_7               ||
          val_livre_8               ||
          val_livre_9               ||
          val_livre_10              ||
          log_livre_1               ||
          log_livre_2               ||
          log_livre_3               ||
          log_livre_4               ||
          log_livre_5               ||
          log_livre_6               ||
          log_livre_7               ||
          log_livre_8               ||
          log_livre_9               ||
          log_livre_10              ||
          dat_livre_1               ||
          dat_livre_2               ||
          dat_livre_3               ||
          dat_livre_4               ||
          dat_livre_5               ||
          dat_livre_6               ||
          dat_livre_7               ||
          dat_livre_8               ||
          dat_livre_9               ||
          dat_livre_10              ||
          cod_usuar_ult_atualiz     ||
          nr_insc_contratante       ||
          nr_insc_contrat_origem    ||
          cd_modalidade             ||
          cd_plano                  ||
          cd_tipo_plano             ||
          cd_forma_pagto            ||
          cdn_tip_vencto            ||
          num_dia_vencto            ||
          log_inic_valid            ||
          cd_convenio               ||
          cd_tipo_participacao      ||
          cd_vendedor               ||
          cd_tab_preco              ||
          pc_acrescimo              ||
          dt_lim_acres_mens         ||
          pc_acrescimo_inscr        ||
          dat_lim_acresc_inscr      ||
          pc_desconto               ||
          dat_lim_desc_mensal       ||
          pc_desconto_inscr         ||
          dat_lim_desc_inscr        ||
          cd_tab_preco_proc         ||
          log_mascar                ||
          des_mascar                ||
          log_faixa_etaria_especial ||
          log_cobert_especial       ||
          log_proced_prestdor       ||
          log_consid_tax_coper      ||
          pc_acresc_taxa            ||
          log_medic_empres          ||
          num_mes_ult_faturam       ||
          aa_ult_fat                ||
          dat_propost               ||
          dat_fim_propost           ||
          nr_cgc_cpf                ||
          nr_cgc_cpf_contrat_orig   ||
          nr_contrato_antigo        ||
          ind_tip_pessoa            ||
          ind_pessoa_contrnte_orig  ||
          val_propost_migrac        ||
          cd_tab_preco_proc_cob     ||
          log_cartao                ||
          log_cobr_dif_pagto        ||
          pc_desc_prom_taxa         ||
          dat_valid_prom_tax        ||
          pc_desc_prom_pl           ||
          dat_valid_prom_plano      ||
          log_segassist             ||
          dat_fim_segassist         ||
          log_fatur_segassist       ||
          log_altera_fator_moder    ||
          log_altera_tax_inscr      ||
          log_altera_val_usuar      ||
          num_mm_ult_reaj           ||
          aa_ult_reajuste           ||
          pc_ult_reajuste           ||
          cd_registro_plano         ||
          log_altera_valid_prorrog  ||
          log_propost_regulam       ||
          qt_validade_termo         ||
          um_validade_termo         ||
          qt_validade_cartao        ||
          um_validade_cartao        ||
          um_validade_cart          ||
          qt_validade_cart          ||
          in_tipo_contratacao       ||
          in_tipo_natureza          ||
          in_validade_doc_ident     ||
          nr_oficio_reajuste        ||
          in_registro_plano         ||
          cd_plano_operadora        ||
          cdn_tip_idx               ||
          cdn_niv_reaj              ||
          num_seqcial_propost       ||
          num_seqcial_control       ||
          ind_faixa_etaria_especial ||
          ind_cobr                  ||
          progress_recid
     into v_linha
  from gp.import_propost ip
  where ip.num_seqcial_propost = pnum_seqcial_propost;

  v_linha_final := v_linha;

  for x in (select * from gp.import_modul_propost ib where ib.num_seqcial_propost = pnum_seqcial_propost
                          order by ib.num_seqcial) loop

    v_linha :=  x.num_seqcial_propost     ||
                x.cod_livre_1             ||
                x.cod_livre_2             ||
                x.cod_livre_3             ||
                x.cod_livre_4             ||
                x.cod_livre_5             ||
                x.cod_livre_6             ||
                x.cod_livre_7             ||
                x.cod_livre_8             ||
                x.cod_livre_9             ||
                x.num_livre_1             ||
                x.num_livre_2             ||
                x.num_livre_3             ||
                x.num_livre_4             ||
                x.num_livre_5             ||
                x.num_livre_6             ||
                x.num_livre_7             ||
                x.num_livre_8             ||
                x.num_livre_9             ||
                x.num_livre_10            ||
                x.val_livre_1             ||
                x.val_livre_2             ||
                x.val_livre_3             ||
                x.val_livre_4             ||
                x.val_livre_5             ||
                x.val_livre_6             ||
                x.val_livre_7             ||
                x.val_livre_8             ||
                x.val_livre_9             ||
                x.val_livre_10            ||
                x.log_livre_1             ||
                x.log_livre_2             ||
                x.log_livre_3             ||
                x.log_livre_4             ||
                x.log_livre_5             ||
                x.log_livre_6             ||
                x.log_livre_7             ||
                x.log_livre_8             ||
                x.log_livre_9             ||
                x.log_livre_10            ||
                x.dat_livre_1             ||
                x.dat_livre_2             ||
                x.dat_livre_3             ||
                x.dat_livre_4             ||
                x.dat_livre_5             ||
                x.dat_livre_6             ||
                x.dat_livre_7             ||
                x.dat_livre_8             ||
                x.dat_livre_9             ||
                x.dat_livre_10            ||
                x.cod_usuar_ult_atualiz   ||
                x.cd_modulo               ||
                x.cd_forma_pagto          ||
                x.log_carenc              ||
                x.ind_respons_autoriz     ||
                x.log_cobert_obrig        ||
                x.log_cobr_particip       ||
                x.dat_inicial             ||
                x.dat_cancel              ||
                x.log_bonif_penalid       ||
                x.nr_dias                 ||
                x.qt_caren_eletiva        ||
                x.qt_caren_urgencia       ||
                x.cd_motivo_cancel        ||
                x.in_ctrl_carencia_proced ||
                x.in_ctrl_carencia_insumo ||
                x.in_cobra_participacao;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  for x in (select * from gp.import_faixa_propost ib where ib.num_seqcial_propost = pnum_seqcial_propost
                          order by ib.num_seqcial) loop

    v_linha :=  x.num_seqcial_propost       ||
                x.cod_livre_1               ||
                x.cod_livre_2               ||
                x.cod_livre_3               ||
                x.cod_livre_4               ||
                x.cod_livre_5               ||
                x.cod_livre_6               ||
                x.cod_livre_7               ||
                x.cod_livre_8               ||
                x.cod_livre_9               ||
                x.num_livre_1               ||
                x.num_livre_2               ||
                x.num_livre_3               ||
                x.num_livre_4               ||
                x.num_livre_5               ||
                x.num_livre_6               ||
                x.num_livre_7               ||
                x.num_livre_8               ||
                x.num_livre_9               ||
                x.num_livre_10              ||
                x.val_livre_1               ||
                x.val_livre_2               ||
                x.val_livre_3               ||
                x.val_livre_4               ||
                x.val_livre_5               ||
                x.val_livre_6               ||
                x.val_livre_7               ||
                x.val_livre_8               ||
                x.val_livre_9               ||
                x.val_livre_10              ||
                x.log_livre_1               ||
                x.log_livre_2               ||
                x.log_livre_3               ||
                x.log_livre_4               ||
                x.log_livre_5               ||
                x.log_livre_6               ||
                x.log_livre_7               ||
                x.log_livre_8               ||
                x.log_livre_9               ||
                x.log_livre_10              ||
                x.dat_livre_1               ||
                x.dat_livre_2               ||
                x.dat_livre_3               ||
                x.dat_livre_4               ||
                x.dat_livre_5               ||
                x.dat_livre_6               ||
                x.dat_livre_7               ||
                x.dat_livre_8               ||
                x.dat_livre_9               ||
                x.dat_livre_10              ||
                x.cod_usuar_ult_atualiz     ||
                x.cd_grau_parentesco        ||
                x.nr_faixa_etaria           ||
                x.num_idade_min             ||
                x.num_idade_max             ||
                x.qtd_fator_multiplic       ||
                x.qtd_fator_multiplic_inscr;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  for x in (select * from gp.import_lotac_propost ib where ib.num_seqcial_propost = pnum_seqcial_propost
                          order by ib.num_seqcial) loop

    v_linha :=  x.num_seqcial_propost   ||
                x.cdn_lotac             ||
                x.cdn_respons_financ    ||
                x.cod_livre_1           ||
                x.cod_livre_2           ||
                x.cod_livre_3           ||
                x.cod_livre_4           ||
                x.cod_livre_5           ||
                x.cod_livre_6           ||
                x.cod_livre_7           ||
                x.cod_livre_8           ||
                x.cod_livre_9           ||
                x.num_livre_1           ||
                x.num_livre_2           ||
                x.num_livre_3           ||
                x.num_livre_4           ||
                x.num_livre_5           ||
                x.num_livre_6           ||
                x.num_livre_7           ||
                x.num_livre_8           ||
                x.num_livre_9           ||
                x.num_livre_10          ||
                x.val_livre_1           ||
                x.val_livre_2           ||
                x.val_livre_3           ||
                x.val_livre_4           ||
                x.val_livre_5           ||
                x.val_livre_6           ||
                x.val_livre_7           ||
                x.val_livre_8           ||
                x.val_livre_9           ||
                x.val_livre_10          ||
                x.log_livre_1           ||
                x.log_livre_2           ||
                x.log_livre_3           ||
                x.log_livre_4           ||
                x.log_livre_5           ||
                x.log_livre_6           ||
                x.log_livre_7           ||
                x.log_livre_8           ||
                x.log_livre_9           ||
                x.log_livre_10          ||
                x.dat_livre_1           ||
                x.dat_livre_2           ||
                x.dat_livre_3           ||
                x.dat_livre_4           ||
                x.dat_livre_5           ||
                x.dat_livre_6           ||
                x.dat_livre_7           ||
                x.dat_livre_8           ||
                x.dat_livre_9           ||
                x.dat_livre_10          ||
                x.cod_usuar_ult_atualiz;

        v_linha_final := v_linha_final || v_linha;
  end loop;

  for x in (select * from gp.importpadrcobertpropost ib where ib.num_seqcial_propost = pnum_seqcial_propost
                          order by ib.num_seqcial) loop

    v_linha :=  x.num_seqcial_propost   ||
                x.cod_livre_1           ||
                x.cod_livre_2           ||
                x.cod_livre_3           ||
                x.cod_livre_4           ||
                x.cod_livre_5           ||
                x.cod_livre_6           ||
                x.cod_livre_7           ||
                x.cod_livre_8           ||
                x.cod_livre_9           ||
                x.num_livre_1           ||
                x.num_livre_2           ||
                x.num_livre_3           ||
                x.num_livre_4           ||
                x.num_livre_5           ||
                x.num_livre_6           ||
                x.num_livre_7           ||
                x.num_livre_8           ||
                x.num_livre_9           ||
                x.num_livre_10          ||
                x.val_livre_1           ||
                x.val_livre_2           ||
                x.val_livre_3           ||
                x.val_livre_4           ||
                x.val_livre_5           ||
                x.val_livre_6           ||
                x.val_livre_7           ||
                x.val_livre_8           ||
                x.val_livre_9           ||
                x.val_livre_10          ||
                x.log_livre_1           ||
                x.log_livre_2           ||
                x.log_livre_3           ||
                x.log_livre_4           ||
                x.log_livre_5           ||
                x.log_livre_6           ||
                x.log_livre_7           ||
                x.log_livre_8           ||
                x.log_livre_9           ||
                x.log_livre_10          ||
                x.dat_livre_1           ||
                x.dat_livre_2           ||
                x.dat_livre_3           ||
                x.dat_livre_4           ||
                x.dat_livre_5           ||
                x.dat_livre_6           ||
                x.dat_livre_7           ||
                x.dat_livre_8           ||
                x.dat_livre_9           ||
                x.dat_livre_10          ||
                x.cod_usuar_ult_atualiz ||
                x.cd_padrao_cobertura   ||
                x.cd_modulo             ||
                x.pc_acrescimo_inscr    ||
                x.pc_desconto_inscr     ||
                x.pc_acresc_taxa        ||
                x.pc_desconto_taxa      ||
                x.num_dias_bonifi       ||
                x.cd_grau_parentesco    ||
                x.nr_faixa_etaria_ini   ||
                x.nr_faixa_etaria_fim   ||
                x.nr_faixa_etaria       ||
                x.qt_fator_mensalidade  ||
                x.qt_fator_inscricao;

        v_linha_final := v_linha_final || v_linha;
  end loop;

  for x in (select * from gp.import_negociac_propost ib where ib.num_seqcial_propost = pnum_seqcial_propost
                          order by ib.num_seqcial) loop

    v_linha :=  x.num_seqcial_propost   ||
                x.cod_livre_1           ||
                x.cod_livre_2           ||
                x.cod_livre_3           ||
                x.cod_livre_4           ||
                x.cod_livre_5           ||
                x.cod_livre_6           ||
                x.cod_livre_7           ||
                x.cod_livre_8           ||
                x.cod_livre_9           ||
                x.num_livre_1           ||
                x.num_livre_2           ||
                x.num_livre_3           ||
                x.num_livre_4           ||
                x.num_livre_5           ||
                x.num_livre_6           ||
                x.num_livre_7           ||
                x.num_livre_8           ||
                x.num_livre_9           ||
                x.num_livre_10          ||
                x.val_livre_1           ||
                x.val_livre_2           ||
                x.val_livre_3           ||
                x.val_livre_4           ||
                x.val_livre_5           ||
                x.val_livre_6           ||
                x.val_livre_7           ||
                x.val_livre_8           ||
                x.val_livre_9           ||
                x.val_livre_10          ||
                x.log_livre_1           ||
                x.log_livre_2           ||
                x.log_livre_3           ||
                x.log_livre_4           ||
                x.log_livre_5           ||
                x.log_livre_6           ||
                x.log_livre_7           ||
                x.log_livre_8           ||
                x.log_livre_9           ||
                x.log_livre_10          ||
                x.dat_livre_1           ||
                x.dat_livre_2           ||
                x.dat_livre_3           ||
                x.dat_livre_4           ||
                x.dat_livre_5           ||
                x.dat_livre_6           ||
                x.dat_livre_7           ||
                x.dat_livre_8           ||
                x.dat_livre_9           ||
                x.dat_livre_10          ||
                x.cod_usuar_ult_atualiz ||
                x.cd_unimed             ||
                x.cd_plano              ||
                x.cd_tipo_plano         ||
                x.cd_forma_pagto        ||
                x.um_carencia           ||
                x.qt_carencia           ||
                x.cd_tab_preco          ||
                x.cd_tab_preco_proc     ||
                x.cdn_tip_vencto        ||
                x.num_dia_vencto        ||
                x.in_tipo_valorizacao   ||
                x.pc_acrescimo_inscr    ||
                x.pc_desconto_inscr     ||
                x.pc_desconto           ||
                x.pc_acrescimo          ||
                x.log_impres_cart       ||
                x.log_calc_val          ||
                x.log_repas             ||
                x.dat_inic_repas        ||
                x.dat_fim_repas         ||
                x.aa_ult_repasse        ||
                x.num_mes_ult_repas;

        v_linha_final := v_linha_final || v_linha;
  end loop;

  v_retorno := md5(v_linha_final);

  p_insere_log('PROPOSTA',
               'gerar_hash_import_propost',
               'gerando hash proposta',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               'HASH: ' || v_retorno  || ' Linha completa: ',
               v_linha_final); --complemento

  return v_retorno;
end gerar_hash_import_propost;

--concatenar todos os campos de IMPORT_BNFCIAR e tabelas relacionadas para gerar hash md5
function gerar_hash_import_bnfciar(pnum_seqcial_bnfciar number) return varchar2 is
  v_linha varchar2(32000) := ' ';
  v_linha_final varchar2(32000) := ' ';
  v_retorno varchar2(100);
begin
  select
     ib.num_seqcial ||
     ib.nr_insc_contratante ||
     ib.cod_livre_1 ||
     ib.cod_livre_2 ||
     ib.cod_livre_3 ||
     ib.cod_livre_4 ||
     ib.cod_livre_5 ||
     ib.cod_livre_6 ||
     ib.cod_livre_7 ||
     ib.num_livre_1 ||
     ib.num_livre_2 ||
     ib.num_livre_3 ||
     ib.num_livre_4 ||
     ib.num_livre_5 ||
     ib.num_livre_6 ||
     ib.num_livre_7 ||
     ib.num_livre_8 ||
     ib.num_livre_9 ||
     ib.num_livre_10 ||
     ib.val_livre_1 ||
     ib.val_livre_2 ||
     ib.val_livre_3 ||
     ib.val_livre_4 ||
     ib.val_livre_5 ||
     ib.val_livre_6 ||
     ib.val_livre_7 ||
     ib.val_livre_8 ||
     ib.val_livre_9 ||
     ib.val_livre_10 ||
     ib.log_livre_1 ||
     ib.log_livre_2 ||
     ib.log_livre_3 ||
     ib.log_livre_4 ||
     ib.log_livre_5 ||
     ib.log_livre_6 ||
     ib.log_livre_7 ||
     ib.log_livre_8 ||
     ib.log_livre_9 ||
     ib.log_livre_10 ||
     ib.dat_livre_1 ||
     ib.dat_livre_2 ||
     ib.dat_livre_3 ||
     ib.dat_livre_4 ||
     ib.dat_livre_5 ||
     ib.dat_livre_6 ||
     ib.dat_livre_7 ||
     ib.dat_livre_8 ||
     ib.dat_livre_9 ||
     ib.dat_livre_10 ||
     ib.cod_usuar_ult_atualiz ||
     ib.cd_modalidade ||
     ib.nr_proposta ||
     ib.log_sexo ||
     ib.in_est_civil ||
     ib.dt_nascimento ||
     ib.cd_grau_parentesco ||
     ib.log_respons ||
     ib.dt_inclusao_plano ||
     ib.dt_exclusao_plano ||
     ib.log_carenc ||
     ib.cd_funcionario ||
     ib.dt_admissao ||
     ib.cd_cbo ||
     ib.cd_cpf ||
     ib.nr_identidade ||
     ib.en_rua ||
     ib.en_bairro ||
     ib.en_cidade ||
     ib.en_cep ||
     ib.en_uf ||
     ib.log_inscr_fatur ||
     ib.cd_padrao_cob ||
     ib.nom_usuar ||
     ib.nom_internac ||
     ib.des_espcif_1 ||
     ib.des_espcif_2 ||
     ib.des_espcif_3 ||
     ib.des_espcif_4 ||
     ib.nr_cgc_cpf ||
     ib.nr_contrato_antigo ||
     ib.cd_carteira_antiga ||
     ib.in_tipo_pessoa ||
     ib.cd_unimed_origem ||
     ib.cd_identific_uni_origem ||
     ib.cd_plano_origem ||
     ib.nom_plano_orig ||
     ib.cdcarteiraorigemresponsavel ||
     ib.cd_padrao_cob_ant ||
     ib.dt_mvto_alteracao ||
     ib.dt_falecimento_titular ||
     ib.dt_atualizacao_carencia ||
     ib.cd_userid_carencia ||
     ib.log_bonifi_penalid ||
     ib.nr_dias ||
     ib.log_cobr_fator_moder ||
     ib.dt_inicio_vinculo_unidade ||
     ib.aa_ult_fat_period ||
     ib.cd_departamento ||
     ib.cd_secao ||
     ib.cd_setor ||
     ib.cd_carteira_trabalho ||
     ib.dt_primeira_consulta ||
     ib.cd_motivo_cancel ||
     ib.cd_funcao ||
     ib.cd_pis_pasep ||
     ib.cd_cartao_nacional_saude ||
     ib.nom_pai ||
     ib.in_segmento_assistencial ||
     ib.dt_inclusao_origem ||
     ib.cd_identific_orig_resp ||
     ib.cd_registro_plano ||
     ib.nom_email ||
     ib.cd_vendedor ||
     ib.des_orgao_emissor_ident ||
     ib.nom_pais ||
     ib.cd_plano_operadora ||
     ib.in_via_transferencia ||
     ib.des_nacion ||
     ib.des_natur_docto ||
     ib.uf_emissor_ident ||
     ib.dt_emissao_ident ||
     ib.nr_telefone1 ||
     ib.nr_telefone2 ||
     ib.nom_usuario ||
     ib.nom_mae ||
     ib.cdn_produt_orig ||
     ib.cd_controle_oper_ans ||
     ib.num_mes_ult_faturam ||
     ib.num_matr_func ||
     ib.num_seqcial_bnfciar ||
     ib.des_histor ||
     ib.des_ocor_bnfciar
     into v_linha
  from gp.import_bnfciar ib
  where ib.num_seqcial_bnfciar = pnum_seqcial_bnfciar;

  v_linha_final := v_linha;

  for x in (select * from gp.import_modul_bnfciar ib where ib.num_seqcial_bnfciar = pnum_seqcial_bnfciar
                          order by ib.num_seqcial) loop

    v_linha :=     x.cod_livre_1 ||
                   x.cod_livre_2 ||
                   x.cod_livre_3 ||
                   x.cod_livre_4 ||
                   x.cod_livre_5 ||
                   x.cod_livre_6 ||
                   x.cod_livre_7 ||
                   x.cod_livre_8 ||
                   x.cod_livre_9 ||
                   x.num_livre_2 ||
                   x.num_livre_3 ||
                   x.num_livre_4 ||
                   x.num_livre_5 ||
                   x.num_livre_6 ||
                   x.num_livre_7 ||
                   x.num_livre_8 ||
                   x.num_livre_9 ||
                   x.num_livre_10 ||
                   x.val_livre_1 ||
                   x.val_livre_2 ||
                   x.val_livre_3 ||
                   x.val_livre_4 ||
                   x.val_livre_5 ||
                   x.val_livre_6 ||
                   x.val_livre_7 ||
                   x.val_livre_8 ||
                   x.val_livre_9 ||
                   x.val_livre_10 ||
                   x.log_livre_1 ||
                   x.log_livre_2 ||
                   x.log_livre_3 ||
                   x.log_livre_4 ||
                   x.log_livre_5 ||
                   x.log_livre_6 ||
                   x.log_livre_7 ||
                   x.log_livre_8 ||
                   x.log_livre_9 ||
                   x.log_livre_10 ||
                   x.dat_livre_1 ||
                   x.dat_livre_2 ||
                   x.dat_livre_3 ||
                   x.dat_livre_4 ||
                   x.dat_livre_5 ||
                   x.dat_livre_6 ||
                   x.dat_livre_7 ||
                   x.dat_livre_8 ||
                   x.dat_livre_9 ||
                   x.dat_livre_10 ||
                   x.dat_ult_atualiz ||
                   x.hra_ult_atualiz ||
                   x.cod_usuar_ult_atualiz ||
                   x.num_seqcial_bnfciar ||
                   x.cdn_modul ||
                   x.dat_inic ||
                   x.dat_fim ||
                   x.log_carenc ||
                   x.log_bonif_penalid ||
                   x.nr_dias ||
                   x.aa_ult_fat_period ||
                   x.num_mes_ult_faturam ||
                   x.cdn_motiv_cancel;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  for x in (select * from gp.import_negociac_bnfciar ib where ib.num_seqcial_bnfciar = pnum_seqcial_bnfciar
                          order by ib.num_seqcial) loop

    v_linha :=
                     x.num_seqcial_bnfciar ||

                     x.cod_livre_1 ||
                     x.cod_livre_2 ||
                     x.cod_livre_3 ||
                     x.cod_livre_4 ||
                     x.cod_livre_5 ||
                     x.cod_livre_6 ||
                     x.cod_livre_7 ||
                     x.cod_livre_8 ||
                     x.cod_livre_9 ||
                     x.num_livre_1 ||
                     x.num_livre_2 ||
                     x.num_livre_3 ||
                     x.num_livre_4 ||
                     x.num_livre_5 ||
                     x.num_livre_6 ||
                     x.num_livre_7 ||
                     x.num_livre_8 ||
                     x.num_livre_9 ||
                     x.num_livre_10 ||
                     x.val_livre_1 ||
                     x.val_livre_2 ||
                     x.val_livre_3 ||
                     x.val_livre_4 ||
                     x.val_livre_5 ||
                     x.val_livre_6 ||
                     x.val_livre_7 ||
                     x.val_livre_8 ||
                     x.val_livre_9 ||
                     x.val_livre_10 ||
                     x.log_livre_1 ||
                     x.log_livre_2 ||
                     x.log_livre_3 ||
                     x.log_livre_4 ||
                     x.log_livre_5 ||
                     x.log_livre_6 ||
                     x.log_livre_7 ||
                     x.log_livre_8 ||
                     x.log_livre_9 ||
                     x.log_livre_10 ||
                     x.dat_livre_1 ||
                     x.dat_livre_2 ||
                     x.dat_livre_3 ||
                     x.dat_livre_4 ||
                     x.dat_livre_5 ||
                     x.dat_livre_6 ||
                     x.dat_livre_7 ||
                     x.dat_livre_8 ||
                     x.dat_livre_9 ||
                     x.dat_livre_10 ||
                     x.dat_ult_atualiz ||
                     x.hra_ult_atualiz ||
                     x.cod_usuar_ult_atualiz ||
                     x.cd_unidade_destino ||
                     x.dt_intercambio ||
                     x.log_inscr_fatur ||
                     x.log_inscr_repas ||
                     x.num_ano_ult_repas ||
                     x.num_mes_ult_repas ||
                     x.dat_saida ||
                     x.cd_identific_uni_destino;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  for x in (select * from gp.import_atendim_bnfciar ib where ib.num_seqcial_bnfciar = pnum_seqcial_bnfciar
                          order by ib.num_seqcial) loop

    v_linha :=
                       x.num_seqcial_bnfciar ||
                       x.cod_livre_1 ||
                       x.cod_livre_2 ||
                       x.cod_livre_3 ||
                       x.cod_livre_4 ||
                       x.cod_livre_5 ||
                       x.cod_livre_6 ||
                       x.cod_livre_7 ||
                       x.cod_livre_8 ||
                       x.cod_livre_9 ||
                       x.num_livre_1 ||
                       x.num_livre_2 ||
                       x.num_livre_3 ||
                       x.num_livre_4 ||
                       x.num_livre_5 ||
                       x.num_livre_6 ||
                       x.num_livre_7 ||
                       x.num_livre_8 ||
                       x.num_livre_9 ||
                       x.num_livre_10 ||
                       x.val_livre_1 ||
                       x.val_livre_2 ||
                       x.val_livre_3 ||
                       x.val_livre_4 ||
                       x.val_livre_5 ||
                       x.val_livre_6 ||
                       x.val_livre_7 ||
                       x.val_livre_8 ||
                       x.val_livre_9 ||
                       x.val_livre_10 ||
                       x.log_livre_1 ||
                       x.log_livre_2 ||
                       x.log_livre_3 ||
                       x.log_livre_4 ||
                       x.log_livre_5 ||
                       x.log_livre_6 ||
                       x.log_livre_7 ||
                       x.log_livre_8 ||
                       x.log_livre_9 ||
                       x.log_livre_10 ||
                       x.dat_livre_1 ||
                       x.dat_livre_2 ||
                       x.dat_livre_3 ||
                       x.dat_livre_4 ||
                       x.dat_livre_5 ||
                       x.dat_livre_6 ||
                       x.dat_livre_7 ||
                       x.dat_livre_8 ||
                       x.dat_livre_9 ||
                       x.dat_livre_10 ||
                       x.dat_ult_atualiz ||
                       x.hra_ult_atualiz ||
                       x.cod_usuar_ult_atualiz ||
                       x.cd_unidade_destino ||
                       x.dat_intercam_atendim ||
                       x.dat_saida_atendim;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  v_retorno := md5(v_linha_final);

  p_insere_log('BENEFICIARIO',
               'gerar_hash_import_bnfciar',
               'gerando hash beneficiario',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               'HASH: ' || v_retorno  || ' Linha completa: ',
               v_linha_final); --complemento

  return v_retorno;
end gerar_hash_import_bnfciar;
*/
--concatenar todos os campos do SERVICO_DA_AUTORIZACAO e tabelas relacionadas para gerar hash md5

--TODO: retirar as colunas que nao sao usadas, para diminuir tamanho da linha de geracao do HASH.
--      ex: txobservacoes tem 4000 caracteres mas nao eh migrado, entao nao precisa fazer parte da comparacao
function gerar_hash_servico_da_autoriz(pnrseq_serv_autorizacao number,
                                       pnrautorizacao number,
                                       pnrocorrencia number) return varchar2 is
  v_linha varchar2(32000) := ' ';
  v_linha_final varchar2(32000) := ' ';
  v_retorno varchar2(100);
begin
  begin
    select  s.nrseq_serv_autorizacao         ||
            s.nrautorizacao                  ||
            s.cdservico                      ||
            s.qtservico_solicitado           ||
            s.qtservico_aprovado             ||
            s.cdsituacao                     ||
            s.cdfuncionario_digitacao        ||
            s.dtdigitacao                    ||
            s.cdfuncionario_aprovacao        ||
            s.dtaprovacao                    ||
            s.dtcancelamento                 ||
            s.cdservico_substitui            ||
            s.nrseq_serv_origem              ||
            s.nrseq_serv_subst               ||
            s.cdocorrencia                   ||
            s.aocobrar_em_custo              ||
            s.aoutiliza_via                  ||
            s.nrocorrencia                   ||
            s.vlservico                      ||
            s.nrtransacao_cancelamento       ||
            s.cdmotivo_cancelamento          ||
            s.aogera_serv_autogerado_autoriz ||
            s.cdarea_acao_requisitante       ||
            s.nrregistro_requisitante        ||
            s.nrseq_requisitante             ||
            s.nrseq_serv_pre_autoriz         ||
            s.nrseq_serv_pericia             ||
            s.nrseq_serv_requisicao          ||
            s.cdfuncionario_alteracao        ||
            s.dtultima_alteracao             ||
            s.valor_mat_med                  ||
            s.cdunidade_valor                ||
            s.nrseq_serv_original            ||
            s.cdservico_prest                ||
            s.cdservico_contrato             ||
            s.cdsituacao_intercambio         ||
            s.cdunidade_medida               ||
            s.txservico_prestador            ||
            s.nrseq_complemento              ||
            s.aosolrevisao                   ||
            s.txsenha_externa                ||
            s.aomatmed_consumo               ||
            s.cdtabela_tiss                  ||
            s.cdtipo_autoriz_ptu             ||
            s.cdmotivo_reprovacao            ||
            s.aoordemservico                 ||
            s.nrreg_anvisa                   ||
            s.nrautorizacao_fabricante       ||
            s.cdmaterial_fabricante          ||
            s.dtprovavel                     ||
            s.nrqtde_doses                   ||
            s.cdvia_administracao            ||
            s.nrfrequencia_diaria_doses      ||
            s.nropcao_fabricante             ||
            s.tpanexo                        ||
            s.dtenvio_decurso                ||
            s.dtresposta_decurso             ||
            s.aopacote                       ||
            s.aohonanestesico                ||
            s.nrdosagem_total                ||
            s.nrsq_item                      ||
            s.tptabela_ptu
       into v_linha
    from servico_da_autorizacao s
    where s.nrseq_serv_autorizacao = pnrseq_serv_autorizacao;
  exception
    when others then
      v_linha := pnrseq_serv_autorizacao;
  end;

  v_linha_final := v_linha;

  begin
    select  a.nrautorizacao                 ||
            a.cdtipo_guia                   ||
            a.cdtipo_atend                  ||
            a.cdsituacao                    ||
            a.cdunidade_atend               ||
            a.nrseq_usuario                 ||
            a.cdusuario_original            ||
            a.cdfuncionario_digitacao       ||
            a.dtdigitacao                   ||
            a.cdfuncionario_competente      ||
            a.cdfuncionario_aprovacao       ||
            a.dtaprovacao                   ||
            a.nrpericia                     ||
            a.nrseq_requisitante            ||
            a.dtrequisicao                  ||
            a.nrseq_prestador               ||
            a.dtinternacao                  ||
            a.dtalta                        ||
            a.cdcid                         ||
            a.nrarea_acao                   ||
            a.nrcontrato                    ||
            a.nrfamilia                     ||
            a.tpusuario                     ||
            a.nrdigito                      ||
            a.nousu_outraarea               ||
            a.cdarea_acao_requisitante      ||
            a.nrregistro_requisitante       ||
            a.cdarea_acao_prestador         ||
            a.nrregistro_prestador          ||
            a.cdtipo_acomod                 ||
            a.tpplano_usuario               ||
            a.dtnascimento                  ||
            a.dtvalidcar                    ||
            a.nrregistro_usuario            ||
            a.nrregistro_pessoa_contr       ||
            a.aorecem_nascido               ||
            a.aoemergencia                  ||
            a.nrocorrencia                  ||
            a.cdespecialidade               ||
            a.aourgencia                    ||
            a.cdlocal_digitacao             ||
            a.cdmotivo_autorizacao          ||
            a.aomeio_solicitacao            ||
            a.nrtransacao_cancelamento      ||
            a.cdmotivo_cancelamento         ||
            a.hrdigitacao                   ||
            a.txsenha_externa               ||
            a.nrtransacao_autorizacao       ||
            a.nrpos                         ||
            a.aotransfere_producao          ||
            a.tptrans_autoriz               ||
            a.cdsenha_interna               ||
            a.cdmedico                      ||
            a.nrregistro_medico             ||
            a.nrpos_solicitante             ||
            a.noarquivo_requisicao          ||
            a.cdocorrencia                  ||
            a.cdamb                         ||
            a.txsenha_autoriz               ||
            a.tplayout                      ||
            a.segmento_conexao              ||
            a.aoaprovacao_remota            ||
            a.noarquivo_resposta            ||
            a.hrenvio_ptu                   ||
            a.hrresposta_ptu                ||
            a.nrvia_cartao                  ||
            a.dtatendimento                 ||
            a.hratendimento                 ||
            a.codigo_resposta               ||
            a.tpautorizacao                 ||
            a.dtvalidade_pre_autoriz        ||
            a.txforma_solicitacao_pre       ||
            a.hrenvio_canc                  ||
            a.hrresposta_canc               ||
            a.cdabrangencia_usu             ||
            a.dtvalidade                    ||
            a.trilha2                       ||
            a.cdsexo                        ||
            a.cdfuncionario_cancelou        ||
            a.dtcancelamento                ||
            a.cdfuncionario_alteracao       ||
            a.dtultima_alteracao            ||
            a.nrprotocolo                   ||
            a.status_notificacao            ||
            a.txemail                       ||
            a.nrtelefone                    ||
            a.nocontato                     ||
            a.cdusuario_empresa             ||
            a.cdtransacao                   ||
            a.nrcheque_consulta             ||
            a.nrcns                         ||
            a.cdtipo_internacao             ||
            a.cdregime_internacao           ||
            a.txindicacao_clinica           ||
            a.cdbiometria_sensor            ||
            a.noplano_usuario               ||
            a.cdtipo_consulta               ||
            a.cdtipo_atendimento_tiss       ||
            a.cdtipo_acidente               ||
            a.cdtipo_saida                  ||
            a.cdmedico_solicitante          ||
            a.nrregistro_medico_solicitante ||
            a.aoemgestacao                  ||
            a.aoaborto                      ||
            a.aotranstorno                  ||
            a.aocomplpuerperio              ||
            a.aoatendrnsala                 ||
            a.aocomplneonatal               ||
            a.aobaixo_peso                  ||
            a.aoparto_cesareo               ||
            a.aoparto_normal                ||
            a.cdcond_obito_mulher           ||
            a.nrdeclaracao_nasc_vivos       ||
            a.cdcid_obito                   ||
            a.nrdeclaracao_obito            ||
            a.hrrealizacao                  ||
            a.hrfim_realizacao              ||
            a.cdtipo_doenca                 ||
            a.cdcid_2                       ||
            a.cdcid_3                       ||
            a.cdcid_4                       ||
            a.nofabricante                  ||
            a.cdbarra_servico               ||
            a.cdtipo_acomod_tiss            ||
            a.cdunidade_tempo_doenca        ||
            a.vltempo_doenca                ||
            a.aoutiliza_via                 ||
            a.cdtecnica_utilizada           ||
            a.cdserie_guia_principal        ||
            a.nrguia_principal              ||
            a.nrarea_acao_int               ||
            a.nrcontrato_int                ||
            a.nrfamilia_int                 ||
            a.tpusuario_int                 ||
            a.nrdigito_int                  ||
            a.aointerptu30                  ||
            a.cdschema_xml                  ||
            a.nrversao_ptu                  ||
            a.cdtipo_autoriz_ptu            ||
            a.tpacomodacao_ptu              ||
            a.nrtrans_solic_ptu             ||
            a.nrarea_acao_solic_ptu         ||
            a.nrddd_celular                 ||
            a.nrcelular                     ||
            a.aojustificativa               ||
            a.aoprevisaoopme                ||
            a.aoprevisaoquimioterapico      ||
            a.dtsugeridainternacao          ||
            a.cdtipo_guia_tiss              ||
            a.txnome_contratado             ||
            a.nrtelefone_cirurgiao          ||
            a.txemail_cirurgiao             ||
            a.txespecificacao_material      ||
            a.txjustificativa_tecnica       ||
            a.nrpeso                        ||
            a.nraltura                      ||
            a.nrsuperficie_corporal         ||
            a.cdestadiamento_tumor          ||
            a.cdfinalidade_tratamento       ||
            a.cdescala_cap_funcional        ||
            a.txdiag_cipa_histo             ||
            a.tpquimioterapia               ||
            a.txplano_terapeutico           ||
            a.nrciclo_quimio                ||
            a.nrciclo_quimio_atual          ||
            a.nrdias_entre_ciclos           ||
            a.cddiagnostico_imagem          ||
            a.nrcampo_irradiacao            ||
            a.nrdose_radio_dia              ||
            a.nrdose_radio_total            ||
            a.txcirurgia_anterior           ||
            a.dtcirurgia_anterior           ||
            a.txarea_irradiada_anterior     ||
            a.dtirradiada_anterior          ||
            a.txquimioterapia_anterior      ||
            a.dtquimioterapia_anterior      ||
            a.nrdias_prev_radioterapia      ||
            a.dtprevista_inicio             ||
            a.txinfo_relevantes             ||
            a.nrstatus_autorizacao_wsd      ||
            a.nrautorizacao_principal       ||
            a.cdmedico_auditor              ||
            a.cdenfermeiro_auditor          ||
            a.nrregistro_med_auditor        ||
            a.nrregistro_enf_auditor        ||
            a.txsenha_operadora             ||
            a.txdiag_cipa_histo_radio       ||
            a.txinfo_relevantes_radio       ||
            a.cdestadiamento_tumor_radio    ||
            a.cdfinalidade_tratamento_radio ||
            a.cdescala_cap_funcional_radio  ||
            a.txcirurgia_anterior_radio     ||
            a.dtcirurgia_anterior_radio     ||
            a.txobservacoes_quimio          ||
            a.txobservacoes_radio           ||
            a.txobservacoes_opme            ||
            a.dtdiagnostico_quimio          ||
            a.dtdiagnostico_radio           ||
            a.txnmprosolic_opme             ||
            a.nrtelefone_opme               ||
            a.txemail_opme                  ||
            a.txnmprosolic_quimio           ||
            a.nrtelefone_quimio             ||
            a.txemail_quimio                ||
            a.txnmprosolic_radio            ||
            a.nrtelefone_radio              ||
            a.txemail_radio                 ||
            a.cdprof_solic_opme             ||
            a.cdprof_solic_quimio           ||
            a.cdprof_solic_radio            ||
            a.nrautorizacao_os              ||
            a.nrseq_protocolo               ||
            a.cdmetastase                   ||
            a.cdnodulo                      ||
            a.cdtumor                       ||
            a.cdversao_padrao               ||
            a.cdforma_envio                 ||
            a.nrdias_ciclo_atual            ||
            a.aoliminar                     ||
            a.tprede_min                    ||
            a.txmotivo_cancelamento         ||
            a.cdlotacao                     ||
            a.nrseq_token
       into v_linha
    from autorizacao a where a.nrautorizacao = pnrautorizacao;
  exception
    when others then
      v_linha := pnrautorizacao;
  end;

  v_linha_final := v_linha_final || v_linha;

  for x in (select * from ocorrencia_autorizacao oa
                    where oa.nrocorrencia = pnrocorrencia
                          order by oa.cdocorrencia) loop

    v_linha :=  x.nrocorrencia            ||
                x.cdocorrencia            ||
                x.aoliberado              ||
                x.cdfuncionario_liberacao ||
                x.dtliberacao             ||
                x.cdmotivo_liberacao      ||
                x.txobservacoes           ||
                x.cdnivelaprovacao;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  v_retorno := md5(v_linha_final);

  p_insere_log('SERVICO_DA_AUTORIZACAO',
               'gerar_hash_servico_da_autoriz',
               'gerando hash servico_da_autorizacao',
               pnrseq_serv_autorizacao, --pnrsequencial_origem
               0, --pcdidentificador
               'HASH: ' || v_retorno  || ' Linha completa: ',
               substr(v_linha_final,1,4000)); --complemento

  return v_retorno;
end gerar_hash_servico_da_autoriz;

function gerar_hash_usuario_unicoo(pnrsequencial_usuario number) return varchar2 is
  v_linha varchar2(32000) := ' ';
  v_linha_final varchar2(32000) := ' ';
  v_retorno varchar2(100);
begin
  begin
    select  u.nrregistro                 ||
            u.nrcontrato                 ||
            u.nrfamilia                  ||
            u.tpusuario                  ||
            u.nrregistro_usuario         ||
            u.nrdigitoct                 ||
            u.nrdigitoan                 ||
            u.dtinicio                   ||
            u.nrficha                    ||
            u.tpplano                    ||
            u.tpplano_novo               ||
            u.dtini_novo_plano           ||
            u.dtrefercarenc              ||
            u.dtrefercar_nova            ||
            u.tpcarencia                 ||
            u.dtvalidcar                 ||
            u.dtexclusao                 ||
            u.dtbaixa                    ||
            u.dtvalidant                 ||
            u.cdorigem                   ||
            u.aoendereco                 ||
            u.aoemitcart                 ||
            u.tpcarteira                 ||
            u.cdcond_cadastro            ||
            u.aoinvalido                 ||
            u.cdintercambio              ||
            u.nrultimo_per_faturado      ||
            u.cdareaacao                 ||
            u.dtultimo_reajuste          ||
            u.nrparcela                  ||
            u.txobservacoes              ||
            u.cod_clipper                ||
            u.nooperador                 ||
            u.nrfuncional                ||
            u.nrsequencial_usuario       ||
            u.nrcontrato_origem          ||
            u.txobs_carteira             ||
            u.dtcadastro_usuario         ||
            u.cdmotivo_cancelamento      ||
            u.dtultima_alteracao         ||
            u.aodoenca_preexistente      ||
            u.dtadmissao_empresa         ||
            u.cdlotacao                  ||
            u.cdvinculo                  ||
            u.cdserie_ctps               ||
            u.numero_ctps                ||
            u.aoemite_guia               ||
            u.aobloqueia_guia            ||
            u.txmotivo_cancelamento      ||
            u.txmotivo_bloqueia_guia     ||
            u.nrdia_de_vencimento        ||
            u.aoemite_ac                 ||
            u.cdcontrato                 ||
            u.aouniversitario            ||
            u.dtreativacao               ||
            u.nrdigito_origem            ||
            u.cdusucateg                 ||
            u.cdusuario_empresa          ||
            u.nrtabela_padrao            ||
            u.nrtabela_contrato          ||
            u.cdvendedor                 ||
            u.dtinicio_usuario_operadora ||
            u.cdusucateg_origem          ||
            u.nroper_origem              ||
            u.nroper_transf              ||
            u.cdcco                      ||
            u.nrdigito_cco               ||
            u.dtdevolucaocart            ||
            u.cdproduto_min_saude_origem ||
            u.cdoperadora_ans_origem     ||
            u.aoprecousuario             ||
            u.aotransferido_sib_inc      ||
            u.aotransferido_sib_exc      ||
            u.aotransfere_preco          ||
            u.tpplano_anterior           ||
            u.ao_remido                  ||
            u.aodep_outros               ||
            u.aopericia                  ||
            u.cdpericia_admissao         ||
            u.cdmotivo_baixa_ad          ||
            u.txmotivo_baixa_ad          ||
            u.vlrenda_mensal             ||
            u.aocompart_risco            ||
            u.dtcompart_risco            ||
            u.cdmot_baixa_rem            ||
            u.txmot_baixa_rem            ||
            u.dtfimrem
          into v_linha
      from usuario u
     where u.nrsequencial_usuario = pnrsequencial_usuario;
  exception
    when others then
      v_linha := pnrsequencial_usuario;
  end;

  v_linha_final := v_linha;

  begin
    select    p.nrregistro             ||
              p.nopessoa               ||
              p.cdsitpessoa            ||
              p.tppessoa               ||
              p.nrcgc_cpf              ||
              p.nrinscest_rg           ||
              p.cdramoativ             ||
              p.dtnascimento           ||
              p.cdsexo                 ||
              p.cdestadocivil          ||
              p.nomae                  ||
              p.nrreg_nascto           ||
              p.nocartorio_reg         ||
              p.txobservacoes          ||
              p.nooperador             ||
              p.nonaturalidade         ||
              p.cdnacionalidade        ||
              p.noorgao_emissor_rg     ||
              p.nrpis                  ||
              p.cdgrau_de_instrucao    ||
              p.cdreligiao             ||
              p.nopai                  ||
              p.noesposo               ||
              p.cdetnia                ||
              p.nrinscmun              ||
              p.nrcei                  ||
              p.nrcartao_convenio      ||
              p.noabreviado            ||
              p.cdpais_emissor_id      ||
              p.nrcns                  ||
              p.dtexpedicao_rg         ||
              p.cdestado_emissor_rg    ||
              p.nrdeclaracao_nasc_vivo ||
              p.cdcidade_naturalidade  ||
              p.aoestrangeiro          ||
              p.nosocial               ||
              p.norazao_social         ||
              p.tpgenero_social
          into v_linha
      from pessoa p, usuario u
     where p.nrregistro = u.nrregistro_usuario
       and u.nrsequencial_usuario = pnrsequencial_usuario;
  exception
    when others then
      v_linha := pnrsequencial_usuario;
  end;

  v_linha_final := v_linha_final || v_linha;

  begin
    select  f.nrregistro                   ||
            f.nrcontrato                   ||
            f.nrfamilia                    ||
            f.nrpessoa_titular             ||
            f.tpcarencia                   ||
            f.txobservacoes                ||
            f.cdlotacao                    ||
            f.nrfuncional                  ||
            f.nrdia_de_vencimento          ||
            f.nrpessoa_paga                ||
            f.nooperador                   ||
            f.dtdesligamento               ||
            f.cdcontrato                   ||
            f.cdmotivo_cancelamento        ||
            f.dtinicio_contribuicao        ||
            f.dtinicio_contrato            ||
            f.dtfinal_contrato             ||
            f.cdgrupo_faturamento          ||
            f.cdvendedor                   ||
            f.cdtabela                     ||
            f.aogera_primeira_mens_paga    ||
            f.vlperc_mensalidade           ||
            f.vlperc_coparticip            ||
            f.vlperc_acessorios            ||
            f.nrseq_dados_canc_plano_benef
       into v_linha
      from familia f, usuario u
     where f.nrregistro = u.nrregistro
       and f.nrcontrato = u.nrcontrato
       and f.nrfamilia = u.nrfamilia
       and u.nrsequencial_usuario = pnrsequencial_usuario;
  exception
    when others then
      v_linha := pnrsequencial_usuario;
  end;

  v_linha_final := v_linha_final || v_linha;

  for c in (select * from producao.criterios_do_usuario@unicoo_homologa x
                    where x.nrsequencial_usuario = pnrsequencial_usuario
                          order by x.cdcategserv) loop

    v_linha :=  c.nrregistro           ||
                c.nrcontrato           ||
                c.nrfamilia            ||
                c.tpusuario            ||
                c.cdcategserv          ||
                c.dtfinal_carencia     ||
                c.qtlimite             ||
                c.qtlimite_familia     ||
                c.dtinclusao           ||
                c.dtexclusao           ||
                c.tpcriterio           ||
                c.nrsequencial_usuario ||
                c.dtcadastro           ||
                c.cdfuncionario        ||
                c.aogeracao            ||
                c.nooperador           ||
                c.nrtabela_padrao      ||
                c.nrtabela_contrato    ||
                c.dtinicio_faturamento ||
                c.cdvendedor          ;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  for x in (select e.* from endereco e, usuario u
             where e.nrregistro = u.nrregistro_usuario
               and u.nrsequencial_usuario = pnrsequencial_usuario
                          order by tpendereco) loop

    v_linha :=  x.nrregistro            ||
                x.tpendereco            ||
                x.nologradouro          ||
                x.nrimovel              ||
                x.txcomplemento         ||
                x.nobairro              ||
                x.cdcidade              ||
                x.cdestado              ||
                x.nrcep                 ||
                x.nrtelefone            ||
                x.nrfax                 ||
                x.nocontato             ||
                x.nocargocontato        ||
                x.cdemail               ||
                x.txobservacoes         ||
                x.aocorrespondencia     ||
                x.nooperador            ||
                x.nrcelular             ||
                x.aosituacao            ||
                x.nrddd                 ||
                x.txreferencia_endereco ||
                x.aoreside_exterior     ||
                x.tplogradouro_ptu      ||
                x.cdemail_adicional;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  v_retorno := md5(v_linha_final);

  p_insere_log('BENEFICIARIO',
               'gerar_hash_usuario_unicoo',
               'gerando hash tabelas usuario do UNICOO',
               pnrsequencial_usuario, --pnrsequencial_origem
               0, --pcdidentificador
               'HASH: ' || v_retorno  || ' Linha completa: ',
               substr(v_linha_final,1,4000)); --complemento

  return v_retorno;
end gerar_hash_usuario_unicoo;

function gerar_hash_contratante_unicoo(pnrregistro number) return varchar2 is
  v_linha varchar2(32000) := ' ';
  v_linha_final varchar2(32000) := ' ';
  v_retorno varchar2(100);
begin
  begin
    select    p.nrregistro             ||
              p.nopessoa               ||
              p.cdsitpessoa            ||
              p.tppessoa               ||
              p.nrcgc_cpf              ||
              p.nrinscest_rg           ||
              p.cdramoativ             ||
              p.dtnascimento           ||
              p.cdsexo                 ||
              p.cdestadocivil          ||
              p.nomae                  ||
              p.nrreg_nascto           ||
              p.nocartorio_reg         ||
              p.txobservacoes          ||
              p.nooperador             ||
              p.nonaturalidade         ||
              p.cdnacionalidade        ||
              p.noorgao_emissor_rg     ||
              p.nrpis                  ||
              p.cdgrau_de_instrucao    ||
              p.cdreligiao             ||
              p.nopai                  ||
              p.noesposo               ||
              p.cdetnia                ||
              p.nrinscmun              ||
              p.nrcei                  ||
              p.nrcartao_convenio      ||
              p.noabreviado            ||
              p.cdpais_emissor_id      ||
              p.nrcns                  ||
              p.dtexpedicao_rg         ||
              p.cdestado_emissor_rg    ||
              p.nrdeclaracao_nasc_vivo ||
              p.cdcidade_naturalidade  ||
              p.aoestrangeiro          ||
              p.nosocial               ||
              p.norazao_social         ||
              p.tpgenero_social
          into v_linha
      from pessoa p
     where p.nrregistro = pnrregistro;
  exception
    when others then
      v_linha := pnrregistro;
  end;

  v_linha_final := v_linha;

  begin
    select c.nrregistro_cliente || c.nrcontrato || c.cdgrupo_cliente ||
           c.cdsituacao_cliente || c.cdconta_contabil || c.dtexclusao ||
           c.dtultima_movimentacao || c.aoemite_titulo ||
           c.txmensagem_boleto || c.cdcliente || c.cdcategoria ||
           c.cdclassificacao || c.cdbloqueio || c.vllimitecredito ||
           c.nrprazomaximo || c.dtalteracaolimitecredito ||
           c.cdusuariolimitecredito || c.vltotaldebito ||
           c.vllimite_credito || c.nrprazo_maximo ||
           c.dtalteracao_limite_credito || c.cdusuario_limite_credito ||
           c.vltotal_debito || c.vltotal_credito ||
           c.dtinicio_libera_bloqueio || c.dtfim_libera_bloqueio ||
           c.aodebito_automatico || c.nrbanco || c.nragencia ||
           c.nrconta_corrente || c.cdgrupo_economico ||
           c.dtinicio_deb_automatico || c.dtfim_deb_automatico ||
           c.nrretorno || c.cdformapagamentopadrao || c.cdplanopagamento ||
           c.aogera_dmed
      into v_linha
      from producao.cliente@unicoo_homologa c
     where c.nrregistro_cliente = pnrregistro
       and c.cdgrupo_cliente is not null
       and rownum = 1;
  exception
    when others then
      v_linha := pnrregistro;
  end;

  v_linha_final := v_linha_final || v_linha;

  for x in (select e.* from endereco e
             where e.nrregistro = pnrregistro
                          order by tpendereco) loop

    v_linha :=  x.nrregistro            ||
                x.tpendereco            ||
                x.nologradouro          ||
                x.nrimovel              ||
                x.txcomplemento         ||
                x.nobairro              ||
                x.cdcidade              ||
                x.cdestado              ||
                x.nrcep                 ||
                x.nrtelefone            ||
                x.nrfax                 ||
                x.nocontato             ||
                x.nocargocontato        ||
                x.cdemail               ||
                x.txobservacoes         ||
                x.aocorrespondencia     ||
                x.nooperador            ||
                x.nrcelular             ||
                x.aosituacao            ||
                x.nrddd                 ||
                x.txreferencia_endereco ||
                x.aoreside_exterior     ||
                x.tplogradouro_ptu      ||
                x.cdemail_adicional;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  v_retorno := md5(v_linha_final);

  return v_retorno;
end gerar_hash_contratante_unicoo;

function gerar_hash_pessoa_unicoo(pnrregistro number) return varchar2 is
  v_linha varchar2(32000) := ' ';
  v_linha_final varchar2(32000) := ' ';
  v_retorno varchar2(100);
begin
  begin
    select    p.nrregistro             ||
              p.nopessoa               ||
              p.cdsitpessoa            ||
              p.tppessoa               ||
              p.nrcgc_cpf              ||
              p.nrinscest_rg           ||
              p.cdramoativ             ||
              p.dtnascimento           ||
              p.cdsexo                 ||
              p.cdestadocivil          ||
              p.nomae                  ||
              p.nrreg_nascto           ||
              p.nocartorio_reg         ||
              p.txobservacoes          ||
              p.nooperador             ||
              p.nonaturalidade         ||
              p.cdnacionalidade        ||
              p.noorgao_emissor_rg     ||
              p.nrpis                  ||
              p.cdgrau_de_instrucao    ||
              p.cdreligiao             ||
              p.nopai                  ||
              p.noesposo               ||
              p.cdetnia                ||
              p.nrinscmun              ||
              p.nrcei                  ||
              p.nrcartao_convenio      ||
              p.noabreviado            ||
              p.cdpais_emissor_id      ||
              p.nrcns                  ||
              p.dtexpedicao_rg         ||
              p.cdestado_emissor_rg    ||
              p.nrdeclaracao_nasc_vivo ||
              p.cdcidade_naturalidade  ||
              p.aoestrangeiro          ||
              p.nosocial               ||
              p.norazao_social         ||
              p.tpgenero_social
          into v_linha
      from pessoa p
     where p.nrregistro = pnrregistro;
  exception
    when others then
      v_linha := pnrregistro;
  end;

  v_linha_final := v_linha;

  v_retorno := md5(v_linha_final);

  return v_retorno;
end gerar_hash_pessoa_unicoo;

--concatenar dados da pessoa e todos os enderecos do Unicoo
function gerar_hash_endereco_unicoo(pnrregistro number) return varchar2 is
  v_linha varchar2(32000) := ' ';
  v_linha_final varchar2(32000) := ' ';
  v_retorno varchar2(100);
begin
  begin
    select    p.nrregistro             ||
              p.nopessoa               ||
              p.cdsitpessoa            ||
              p.tppessoa               ||
              p.nrcgc_cpf              ||
              p.nrinscest_rg           ||
              p.cdramoativ             ||
              p.dtnascimento           ||
              p.cdsexo                 ||
              p.cdestadocivil          ||
              p.nomae                  ||
              p.nrreg_nascto           ||
              p.nocartorio_reg         ||
              p.txobservacoes          ||
              p.nooperador             ||
              p.nonaturalidade         ||
              p.cdnacionalidade        ||
              p.noorgao_emissor_rg     ||
              p.nrpis                  ||
              p.cdgrau_de_instrucao    ||
              p.cdreligiao             ||
              p.nopai                  ||
              p.noesposo               ||
              p.cdetnia                ||
              p.nrinscmun              ||
              p.nrcei                  ||
              p.nrcartao_convenio      ||
              p.noabreviado            ||
              p.cdpais_emissor_id      ||
              p.nrcns                  ||
              p.dtexpedicao_rg         ||
              p.cdestado_emissor_rg    ||
              p.nrdeclaracao_nasc_vivo ||
              p.cdcidade_naturalidade  ||
              p.aoestrangeiro          ||
              p.nosocial               ||
              p.norazao_social         ||
              p.tpgenero_social
          into v_linha
      from pessoa p
     where p.nrregistro = pnrregistro;
  exception
    when others then
      v_linha := pnrregistro;
  end;

  v_linha_final := v_linha;

  for x in (select e.* from endereco e
             where e.nrregistro = pnrregistro
                          order by tpendereco) loop

    v_linha :=  x.nrregistro            ||
                x.tpendereco            ||
                x.nologradouro          ||
                x.nrimovel              ||
                x.txcomplemento         ||
                x.nobairro              ||
                x.cdcidade              ||
                x.cdestado              ||
                x.nrcep                 ||
                x.nrtelefone            ||
                x.nrfax                 ||
                x.nocontato             ||
                x.nocargocontato        ||
                x.cdemail               ||
                x.txobservacoes         ||
                x.aocorrespondencia     ||
                x.nooperador            ||
                x.nrcelular             ||
                x.aosituacao            ||
                x.nrddd                 ||
                x.txreferencia_endereco ||
                x.aoreside_exterior     ||
                x.tplogradouro_ptu      ||
                x.cdemail_adicional;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  v_retorno := md5(v_linha_final);

  return v_retorno;
end gerar_hash_endereco_unicoo;

function gerar_hash_contrato_unicoo(pnrregistro number, pnrcontrato number) return varchar2 is
  v_linha varchar2(32000) := ' ';
  v_linha_final varchar2(32000) := ' ';
  v_retorno varchar2(100);
begin
  begin
    select  cdp.nrregistro                   ||
            cdp.nrcontrato                   ||
            cdp.cdcontrato_padrao            ||
            cdp.cdsit_contr_pessoa           ||
            cdp.cdvendedor                   ||
            cdp.dtfimcontrato                ||
            cdp.dtiniciocontrato             ||
            cdp.nrpessoa_paga                ||
            cdp.tpfatura                     ||
            cdp.nrparcela                    ||
            cdp.vldesconto                   ||
            cdp.tpnumeracao_familia          ||
            cdp.txadministracao              ||
            cdp.txobservacoes                ||
            cdp.nrcontminimo                 ||
            cdp.cdnivel_preco                ||
            cdp.cdtabela_refer               ||
            cdp.dtultimo_reajuste            ||
            cdp.cdperiodo_reajuste           ||
            cdp.pedesconto                   ||
            cdp.nrdia_de_vencimento          ||
            cdp.nooperador                   ||
            cdp.txutilizacao_indevida        ||
            cdp.nrult_per_fat                ||
            cdp.nrult_familia                ||
            cdp.nrregistro_grupo             ||
            cdp.nrcontrato_grupo             ||
            cdp.nrcontrato_paga              ||
            cdp.nrpessoa_paga_custo          ||
            cdp.nrcontrato_paga_custo        ||
            cdp.aocobrainscricao             ||
            cdp.aocobramensalidade           ||
            cdp.cdnivel_fatormoderador       ||
            cdp.cdfator_moderador            ||
            cdp.pecobertura_empr_custo       ||
            cdp.dtvalidcar                   ||
            cdp.aorecolhe_ir                 ||
            cdp.aobase_inss                  ||
            cdp.aocontrola_validcar          ||
            cdp.nrdiasvalidade               ||
            cdp.noidentificacao_contrato     ||
            cdp.nrperiodo_venc_custo         ||
            cdp.nrperiodo_venc_pre           ||
            cdp.cdgrupo_faturamento          ||
            cdp.nrperiodo_proximo_reajuste   ||
            cdp.aofatura_categserv           ||
            cdp.aodia_de_vencimento          ||
            cdp.aofaturamento_proporcional   ||
            cdp.aocalc_por_media_etaria      ||
            cdp.aoaposentado_demitido        ||
            cdp.cdindice                     ||
            cdp.tpendereco_cobranca          ||
            cdp.tpendereco_correspondencia   ||
            cdp.cdarea_negocio               ||
            cdp.cdtabela                     ||
            cdp.aocobra_complementar         ||
            cdp.cdareaacao_intercambio_pre   ||
            cdp.aoinclusao_retroativa        ||
            cdp.dtinicio_coparticipacao      ||
            cdp.cdmotivo_cancelamento        ||
            cdp.dtreativacao                 ||
            cdp.aoutiliza_cheque_consulta    ||
            cdp.nrcontrato_grupo_pre         ||
            cdp.nrregistro_grupo_pre         ||
            cdp.aocobra_copart_junto_mens    ||
            cdp.dtfechamento_cadastro        ||
            cdp.cdnatureza                   ||
            cdp.cdnivel_reajuste             ||
            cdp.aolimite_tecnico             ||
            cdp.nrdias_validade_pre_autoriz  ||
            cdp.txemail                      ||
            cdp.aopreco_vigente              ||
            cdp.cdregistro_ans               ||
            cdp.aogera_primeira_mens_paga    ||
            cdp.aogera_nota_fiscal           ||
            cdp.cdprestador_operadora        ||
            cdp.aoexige_autoriz              ||
            cdp.aoinf_empresa                ||
            cdp.aocomplementar_diferenciado  ||
            cdp.aoretem_iss                  ||
            cdp.aoutiliza_criterio_pagamento ||
            cdp.aolimitaqtdguiasfatura       ||
            cdp.aoconsidera_envio_dados      ||
            cdp.aoempresario_individual      ||
            cdp.nrmeses_rem
       into v_linha
      from contrato_da_pessoa cdp
     where cdp.nrregistro = pnrregistro
       and cdp.nrcontrato = pnrcontrato;
  exception
    when others then
      v_linha :=   pnrregistro || pnrcontrato;
  end;

  v_linha_final := v_linha;

  for x in (select * from lotacao l
                    where l.nrregistro = pnrregistro
                      and l.nrcontrato = pnrcontrato
                          order by l.cdlotacao) loop

    v_linha :=  x.nrregistro            ||
                x.nrcontrato            ||
                x.cdlotacao             ||
                x.txdescricao           ||
                x.txabreviacao          ||
                x.nrregistro_lotacao    ||
                x.nrdia_de_vencimento   ||
                x.nrpessoa_paga         ||
                x.cdnatureza            ||
                x.dtinicio_vigencia     ||
                x.dtfim_vigencia        ||
                x.cdfinanceiro_lotacao  ||
                x.cdtabela_comissao     ||
                x.aoprecopraticado      ||
                x.cdmotivo_cancelamento;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  v_retorno := md5(v_linha_final);

  p_insere_log('PROPOSTA',
               'gerar_hash_contrato_unicoo',
               'gerando hash tabelas CONTRATO_DA_PESSOA do UNICOO',
               0, --pnrsequencial_origem
               0, --pcdidentificador
               'NRREGISTRO / NRCONTRATO / HASH: ' || pnrregistro || ' / ' || pnrcontrato || '/' ||
               v_retorno  || ' Linha completa: ',
               substr(v_linha_final,1,4000)); --complemento

  return v_retorno;
end gerar_hash_contrato_unicoo;

function gerar_hash_faturamento_unicoo(pnrfatura varchar2) return varchar2 is
  v_linha       varchar2(32000) := ' ';
  v_linha_final varchar2(32000) := ' ';
  v_retorno     varchar2(100);
begin
  begin
    select f.nrperiodo || f.nrregistro || f.nrcontrato || f.nrfamilia ||
           f.vltotal_faturado || f.dtvencimento || f.nrfatura || f.tpfatura ||
           f.vldesconto || f.vlir_fonte || f.vlato_principal ||
           f.peato_principal || f.nrparcela_contrato || f.aorecebimento ||
           f.aoemitido || f.vlbase_irrf || f.aosituacao_fatura ||
           f.txobservacoes || f.dtemissao || f.vlacrescimo ||
           f.aocontas_pagar || f.aocontabilizado || f.nrpessoa_paga ||
           f.dtdig_inicial || f.dtdig_final || f.nrcontrato_paga ||
           f.aoemite_cobranca || f.dtcalculo || f.cdfuncionario ||
           f.tpcontrato || f.cdvendedor || f.qtparcela_atrasada ||
           f.nopessoa_titular || f.dtcancelamento || f.aoavulsa ||
           f.nrnossonumero || f.vlato_nao_cooperativo || f.vlbase_inss ||
           f.cdfuncionario_cancelou || f.aofatura_agrupamento ||
           f.cdorigem_fatura || f.nrregistro_contrato_original ||
           f.cdoperacao_receber || f.nrmotivo_exclusao || f.dtrecalculo ||
           f.cdfuncionario_recalculo || f.nrgeracao_fatura || f.cdlotacao ||
           f.aoarquivo_ptu_gerado || f.dtgeracao_arquivo_ptu ||
           f.cdfuncionario_geracao_ptu || f.aoaposentado_demitido ||
           f.dtreativacao || f.cdfuncionario_reativou || f.pejuros ||
           f.pemulta || f.aoparcelamento || f.nrcalculo || f.nrrecalculo ||
           f.aofaturado_somente_evento || f.peato_nao_cooperativo ||
           f.vlato_auxiliar || f.ctrl_fat_mensdd_unica ||
           f.cdcarteira_cobranca || f.dtcontabilizado ||
           f.dtcontabilizado_vencto || f.dtcontabilizado_cancel ||
           f.vlbase_iss || f.vliss || f.aoplano_acessorio ||
           f.nrfatura_desmembramento || f.pemulta_fatura ||
           f.pejuros_fatura || f.dtinicio_sem_cobranca_juros ||
           f.dtfim_sem_cobranca_juros || f.nrseq_fatura_intercambio ||
           f.nrnota_fiscal || f.cdserie_nota_fiscal || f.nrperiodocobertura ||
           f.vlantecipadoperiodocobertura || f.nrperiodorateio1 ||
           f.vlantecipadoperiodorateio1 || f.nrperiodorateio2 ||
           f.vlantecipadoperiodorateio2 || f.nrrps ||
           f.aoarquivo_a600_gerado || f.dtgeracao_arquivo_a600 ||
           f.cdfuncionario_geracao_a600 || f.aosituacao_nfse ||
           f.cdserie_rps || f.tpentrada_nfse || f.cdserie_nfse ||
           f.nrprotocolo_nfse || f.aosituacao_cancel_nfse ||
           f.tp_fatura_intercambio || f.nrfat_unica ||
           f.vlbase_iss_nao_retido || f.vliss_nao_retido || f.nrnfse ||
           f.aobaixa_fatura || f.dtbaixa_fatura || f.dtenvio_a500 ||
           f.txurl_nfse
      into v_linha
      from faturamento f
     where f.nrfatura = pnrfatura;
  exception
    when others then
      v_linha := pnrfatura;
  end;

  v_linha_final := v_linha;

  for x in (select *
              from producao.titulo_a_receber@unicoo_homologa t
             where t.nrdocumento = pnrfatura
             order by t.nrregistro_titulo) loop

    v_linha := x.cdempresa || x.nrregistro_cliente || x.nrcontrato ||
               x.nrregistro_titulo || x.cdsituacao || x.nrdocumento ||
               x.tpdocumento || x.cdportador || x.cdoperacao ||
               x.nrnossonumero || x.nrvendedor || x.dttitulo ||
               x.dtvencimento || x.dtexclusao || x.dtreferencia ||
               x.vltitulo || x.vlabatimento || x.vlabatimento_2 ||
               x.dtultimo_recebimento || x.vlrecebido || x.vlmulta ||
               x.vljuros || x.vldesconto || x.dtenvio_banco ||
               x.dtconfirma_banco || x.txreferencia_banco || x.txhistorico ||
               x.dtprotesto || x.nocartorio_protesto || x.txobservacoes ||
               x.cdcentro_custo || x.nrregistro_tit_agrup ||
               x.nrregistro_tit_desm || x.cdhistorico || x.vlfaturado ||
               x.vlir_fonte || x.vl_ir_fonte_fat || x.dtintegracao ||
               x.nrparcela || x.cdfuncionario || x.cdvendedor || x.tptitulo ||
               x.nrultimoenvio || x.dtultimoenvio || x.cdultimoenvio ||
               x.nrultimoretorno || x.dtultimoretorno || x.cdultimoretorno ||
               x.cdcomando_envio || x.cdcomando_retorno ||
               x.cdmovimento_envio || x.cdmovimento_retorno || x.cdcliente ||
               x.cdcomando_atual || x.vltaxa_bancaria || x.dtultimo_envio ||
               x.dtultimo_retorno || x.nrultimo_envio || x.nrultimo_retorno ||
               x.pejuros || x.pemulta || x.nrbanco || x.nragencia ||
               x.nrsequencianotafiscalven || x.tptaxaformamulta ||
               x.tptaxaformajuros || x.vltaxamulta || x.vltaxajuros ||
               x.nrtaxadiacarencia || x.aodescontoantecipado ||
               x.nrdiadescontoantecipado || x.pedescontoantecipado ||
               x.petaxabancaria || x.nrdiaprotesto || x.nrdiasprotesto ||
               x.nrdiasdescontoantecipado || x.vldescontoantecipado ||
               x.nrrepresentante || x.nrnota_fiscal_devolucao ||
               x.cdportadoragencia || x.cdportadorcontacorrente ||
               x.nrcontacorrente || x.nrdiacarencia || x.vllucro_vendor ||
               x.vldespesa_cartorio || x.aoemite_cobranca ||
               x.nrconta_corrente || x.nrmotivo_exclusao ||
               x.nrperiodo_compet || x.vlrecebido_servico_oferecido ||
               x.rregistro_cliente || x.vldespesa_cartoria ||
               x.vldiferenca_recebimento || x.vldiferenca_juros ||
               x.aotrata_taxa || x.nrinstrucao || x.nrcomposicao_credito_ir ||
               x.dtencerramento || x.cdorigem || x.vlabatimento_imposto ||
               x.nrlote_faturamento || x.cdidentificador_deposito ||
               x.cdcomando_debaut || x.cdcarteira_cobranca ||
               x.nrperiodocobertura || x.vlantecipadoperiodocobertura ||
               x.nrperiodorateio1 || x.vlantecipadoperiodorateio1 ||
               x.nrperiodorateio2 || x.vlantecipadoperiodorateio2 ||
               x.vlutilizadoperiodocobertura || x.vlutilizadoperiodorateio1 ||
               x.vlutilizadoperiodorateio2 || x.dtvencimento_original;

    v_linha_final := v_linha_final || v_linha;
  end loop;

  v_retorno := md5(v_linha_final);

  return v_retorno;
end gerar_hash_faturamento_unicoo;

/*function f_import_bnfciar_hist_iguais(pnum_seqcial_bnfciar number) return varchar2 is
  qt_iguais number;
  p_iguais  varchar2(1) := 'S';
  v_complemento varchar2(10000);
begin

select
     ib.num_seqcial || ';' ||
     ib.nr_insc_contratante || ';' ||
     ib.cod_livre_1 || ';' ||
     ib.cod_livre_2 || ';' ||
     ib.cod_livre_3 || ';' ||
     ib.cod_livre_4 || ';' ||
     ib.cod_livre_5 || ';' ||
     ib.cod_livre_6 || ';' ||
     ib.cod_livre_7 || ';' ||
     ib.cod_livre_8 || ';' ||
     ib.cod_livre_9 || ';' ||
     ib.num_livre_1 || ';' ||
     ib.num_livre_2 || ';' ||
     ib.num_livre_3 || ';' ||
     ib.num_livre_4 || ';' ||
     ib.num_livre_5 || ';' ||
     ib.num_livre_6 || ';' ||
     ib.num_livre_7 || ';' ||
     ib.num_livre_8 || ';' ||
     ib.num_livre_9 || ';' ||
     ib.num_livre_10 || ';' ||
     ib.val_livre_1 || ';' ||
     ib.val_livre_2 || ';' ||
     ib.val_livre_3 || ';' ||
     ib.val_livre_4 || ';' ||
     ib.val_livre_5 || ';' ||
     ib.val_livre_6 || ';' ||
     ib.val_livre_7 || ';' ||
     ib.val_livre_8 || ';' ||
     ib.val_livre_9 || ';' ||
     ib.val_livre_10 || ';' ||
     ib.log_livre_1 || ';' ||
     ib.log_livre_2 || ';' ||
     ib.log_livre_3 || ';' ||
     ib.log_livre_4 || ';' ||
     ib.log_livre_5 || ';' ||
     ib.log_livre_6 || ';' ||
     ib.log_livre_7 || ';' ||
     ib.log_livre_8 || ';' ||
     ib.log_livre_9 || ';' ||
     ib.log_livre_10 || ';' ||
     ib.dat_livre_1 || ';' ||
     ib.dat_livre_2 || ';' ||
     ib.dat_livre_3 || ';' ||
     ib.dat_livre_4 || ';' ||
     ib.dat_livre_5 || ';' ||
     ib.dat_livre_6 || ';' ||
     ib.dat_livre_7 || ';' ||
     ib.dat_livre_8 || ';' ||
     ib.dat_livre_9 || ';' ||
     ib.dat_livre_10 || ';' ||
     ib.cod_usuar_ult_atualiz || ';' ||
     ib.cd_modalidade || ';' ||
     ib.nr_proposta || ';' ||
     ib.log_sexo || ';' ||
     ib.in_est_civil || ';' ||
     ib.dt_nascimento || ';' ||
     ib.cd_grau_parentesco || ';' ||
     ib.log_respons || ';' ||
     ib.dt_inclusao_plano || ';' ||
     ib.dt_exclusao_plano || ';' ||
     ib.log_carenc || ';' ||
     ib.cd_funcionario || ';' ||
     ib.dt_admissao || ';' ||
     ib.cd_cbo || ';' ||
     ib.cd_cpf || ';' ||
     ib.nr_identidade || ';' ||
     ib.en_rua || ';' ||
     ib.en_bairro || ';' ||
     ib.en_cidade || ';' ||
     ib.en_cep || ';' ||
     ib.en_uf || ';' ||
     ib.log_inscr_fatur || ';' ||
     ib.cd_padrao_cob || ';' ||
     ib.nom_usuar || ';' ||
     ib.nom_internac || ';' ||
     ib.des_espcif_1 || ';' ||
     ib.des_espcif_2 || ';' ||
     ib.des_espcif_3 || ';' ||
     ib.des_espcif_4 || ';' ||
     ib.nr_cgc_cpf || ';' ||
     ib.nr_contrato_antigo || ';' ||
     ib.cd_carteira_antiga || ';' ||
     ib.in_tipo_pessoa || ';' ||
     ib.cd_unimed_origem || ';' ||
     ib.cd_identific_uni_origem || ';' ||
     ib.cd_plano_origem || ';' ||
     ib.nom_plano_orig || ';' ||
     ib.cdcarteiraorigemresponsavel || ';' ||
     ib.cd_padrao_cob_ant || ';' ||
     ib.dt_mvto_alteracao || ';' ||
     ib.dt_falecimento_titular || ';' ||
     ib.dt_atualizacao_carencia || ';' ||
     ib.cd_userid_carencia || ';' ||
     ib.log_bonifi_penalid || ';' ||
     ib.nr_dias || ';' ||
     ib.log_cobr_fator_moder || ';' ||
     ib.dt_inicio_vinculo_unidade || ';' ||
     ib.aa_ult_fat_period || ';' ||
     ib.cd_departamento || ';' ||
     ib.cd_secao || ';' ||
     ib.cd_setor || ';' ||
     ib.cd_carteira_trabalho || ';' ||
     ib.dt_primeira_consulta || ';' ||
     ib.cd_motivo_cancel || ';' ||
     ib.cd_funcao || ';' ||
     ib.cd_pis_pasep || ';' ||
     ib.cd_cartao_nacional_saude || ';' ||
     ib.nom_pai || ';' ||
     ib.in_segmento_assistencial || ';' ||
     ib.dt_inclusao_origem || ';' ||
     ib.cd_identific_orig_resp || ';' ||
     ib.cd_registro_plano || ';' ||
     ib.nom_email || ';' ||
     ib.cd_vendedor || ';' ||
     ib.des_orgao_emissor_ident || ';' ||
     ib.nom_pais || ';' ||
     ib.cd_plano_operadora || ';' ||
     ib.in_via_transferencia || ';' ||
     ib.des_nacion || ';' ||
     ib.des_natur_docto || ';' ||
     ib.uf_emissor_ident || ';' ||
     ib.dt_emissao_ident || ';' ||
     ib.nr_telefone1 || ';' ||
     ib.nr_telefone2 || ';' ||
     ib.nom_usuario || ';' ||
     ib.nom_mae || ';' ||
     ib.cdn_produt_orig || ';' ||
     ib.cd_controle_oper_ans || ';' ||
     ib.num_mes_ult_faturam || ';' ||
     ib.num_matr_func || ';' ||
     ib.num_seqcial_bnfciar || ';' ||
     ib.des_histor || ';' ||
     ib.des_ocor_bnfciar
     into v_complemento
  from gp.import_bnfciar ib
  where ib.num_seqcial_bnfciar = pnum_seqcial_bnfciar;

  p_insere_log('BENEFICIARIO',
               'COMPARAR IMPORT_BNFCIAR COM HISTORICO',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               'ATUAL: ',
               v_complemento); --complemento

select
     ib.num_seqcial || ';' ||
     ib.nr_insc_contratante || ';' ||
     ib.cod_livre_1 || ';' ||
     ib.cod_livre_2 || ';' ||
     ib.cod_livre_3 || ';' ||
     ib.cod_livre_4 || ';' ||
     ib.cod_livre_5 || ';' ||
     ib.cod_livre_6 || ';' ||
     ib.cod_livre_7 || ';' ||
     ib.cod_livre_8 || ';' ||
     ib.cod_livre_9 || ';' ||
     ib.num_livre_1 || ';' ||
     ib.num_livre_2 || ';' ||
     ib.num_livre_3 || ';' ||
     ib.num_livre_4 || ';' ||
     ib.num_livre_5 || ';' ||
     ib.num_livre_6 || ';' ||
     ib.num_livre_7 || ';' ||
     ib.num_livre_8 || ';' ||
     ib.num_livre_9 || ';' ||
     ib.num_livre_10 || ';' ||
     ib.val_livre_1 || ';' ||
     ib.val_livre_2 || ';' ||
     ib.val_livre_3 || ';' ||
     ib.val_livre_4 || ';' ||
     ib.val_livre_5 || ';' ||
     ib.val_livre_6 || ';' ||
     ib.val_livre_7 || ';' ||
     ib.val_livre_8 || ';' ||
     ib.val_livre_9 || ';' ||
     ib.val_livre_10 || ';' ||
     ib.log_livre_1 || ';' ||
     ib.log_livre_2 || ';' ||
     ib.log_livre_3 || ';' ||
     ib.log_livre_4 || ';' ||
     ib.log_livre_5 || ';' ||
     ib.log_livre_6 || ';' ||
     ib.log_livre_7 || ';' ||
     ib.log_livre_8 || ';' ||
     ib.log_livre_9 || ';' ||
     ib.log_livre_10 || ';' ||
     ib.dat_livre_1 || ';' ||
     ib.dat_livre_2 || ';' ||
     ib.dat_livre_3 || ';' ||
     ib.dat_livre_4 || ';' ||
     ib.dat_livre_5 || ';' ||
     ib.dat_livre_6 || ';' ||
     ib.dat_livre_7 || ';' ||
     ib.dat_livre_8 || ';' ||
     ib.dat_livre_9 || ';' ||
     ib.dat_livre_10 || ';' ||
     ib.cod_usuar_ult_atualiz || ';' ||
     ib.cd_modalidade || ';' ||
     ib.nr_proposta || ';' ||
     ib.log_sexo || ';' ||
     ib.in_est_civil || ';' ||
     ib.dt_nascimento || ';' ||
     ib.cd_grau_parentesco || ';' ||
     ib.log_respons || ';' ||
     ib.dt_inclusao_plano || ';' ||
     ib.dt_exclusao_plano || ';' ||
     ib.log_carenc || ';' ||
     ib.cd_funcionario || ';' ||
     ib.dt_admissao || ';' ||
     ib.cd_cbo || ';' ||
     ib.cd_cpf || ';' ||
     ib.nr_identidade || ';' ||
     ib.en_rua || ';' ||
     ib.en_bairro || ';' ||
     ib.en_cidade || ';' ||
     ib.en_cep || ';' ||
     ib.en_uf || ';' ||
     ib.log_inscr_fatur || ';' ||
     ib.cd_padrao_cob || ';' ||
     ib.nom_usuar || ';' ||
     ib.nom_internac || ';' ||
     ib.des_espcif_1 || ';' ||
     ib.des_espcif_2 || ';' ||
     ib.des_espcif_3 || ';' ||
     ib.des_espcif_4 || ';' ||
     ib.nr_cgc_cpf || ';' ||
     ib.nr_contrato_antigo || ';' ||
     ib.cd_carteira_antiga || ';' ||
     ib.in_tipo_pessoa || ';' ||
     ib.cd_unimed_origem || ';' ||
     ib.cd_identific_uni_origem || ';' ||
     ib.cd_plano_origem || ';' ||
     ib.nom_plano_orig || ';' ||
     ib.cdcarteiraorigemresponsavel || ';' ||
     ib.cd_padrao_cob_ant || ';' ||
     ib.dt_mvto_alteracao || ';' ||
     ib.dt_falecimento_titular || ';' ||
     ib.dt_atualizacao_carencia || ';' ||
     ib.cd_userid_carencia || ';' ||
     ib.log_bonifi_penalid || ';' ||
     ib.nr_dias || ';' ||
     ib.log_cobr_fator_moder || ';' ||
     ib.dt_inicio_vinculo_unidade || ';' ||
     ib.aa_ult_fat_period || ';' ||
     ib.cd_departamento || ';' ||
     ib.cd_secao || ';' ||
     ib.cd_setor || ';' ||
     ib.cd_carteira_trabalho || ';' ||
     ib.dt_primeira_consulta || ';' ||
     ib.cd_motivo_cancel || ';' ||
     ib.cd_funcao || ';' ||
     ib.cd_pis_pasep || ';' ||
     ib.cd_cartao_nacional_saude || ';' ||
     ib.nom_pai || ';' ||
     ib.in_segmento_assistencial || ';' ||
     ib.dt_inclusao_origem || ';' ||
     ib.cd_identific_orig_resp || ';' ||
     ib.cd_registro_plano || ';' ||
     ib.nom_email || ';' ||
     ib.cd_vendedor || ';' ||
     ib.des_orgao_emissor_ident || ';' ||
     ib.nom_pais || ';' ||
     ib.cd_plano_operadora || ';' ||
     ib.in_via_transferencia || ';' ||
     ib.des_nacion || ';' ||
     ib.des_natur_docto || ';' ||
     ib.uf_emissor_ident || ';' ||
     ib.dt_emissao_ident || ';' ||
     ib.nr_telefone1 || ';' ||
     ib.nr_telefone2 || ';' ||
     ib.nom_usuario || ';' ||
     ib.nom_mae || ';' ||
     ib.cdn_produt_orig || ';' ||
     ib.cd_controle_oper_ans || ';' ||
     ib.num_mes_ult_faturam || ';' ||
     ib.num_matr_func || ';' ||
     ib.num_seqcial_bnfciar || ';' ||
     ib.des_histor || ';' ||
     ib.des_ocor_bnfciar
     into v_complemento
  from import_bnfciar_hist ib
  where ib.num_seqcial_bnfciar = pnum_seqcial_bnfciar;

  p_insere_log('BENEFICIARIO',
               'COMPARAR IMPORT_BNFCIAR COM HISTORICO',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               'HISTORICO: ',
               v_complemento); --complemento

  select count(*)
    into qt_iguais
    from (select ib.num_seqcial,
                 ib.nr_insc_contratante,
                 ib.cod_livre_1,
                 ib.cod_livre_2,
                 ib.cod_livre_3,
                 ib.cod_livre_4,
                 ib.cod_livre_5,
                 ib.cod_livre_6,
                 ib.cod_livre_7,
                 ib.cod_livre_8,
                 ib.cod_livre_9,
                 ib.num_livre_1,
                 ib.num_livre_2,
                 ib.num_livre_3,
                 ib.num_livre_4,
                 ib.num_livre_5,
                 ib.num_livre_6,
                 ib.num_livre_7,
                 ib.num_livre_8,
                 ib.num_livre_9,
                 ib.num_livre_10,
                 ib.val_livre_1,
                 ib.val_livre_2,
                 ib.val_livre_3,
                 ib.val_livre_4,
                 ib.val_livre_5,
                 ib.val_livre_6,
                 ib.val_livre_7,
                 ib.val_livre_8,
                 ib.val_livre_9,
                 ib.val_livre_10,
                 ib.log_livre_1,
                 ib.log_livre_2,
                 ib.log_livre_3,
                 ib.log_livre_4,
                 ib.log_livre_5,
                 ib.log_livre_6,
                 ib.log_livre_7,
                 ib.log_livre_8,
                 ib.log_livre_9,
                 ib.log_livre_10,
                 ib.dat_livre_1,
                 ib.dat_livre_2,
                 ib.dat_livre_3,
                 ib.dat_livre_4,
                 ib.dat_livre_5,
                 ib.dat_livre_6,
                 ib.dat_livre_7,
                 ib.dat_livre_8,
                 ib.dat_livre_9,
                 ib.dat_livre_10,
                 ib.cod_usuar_ult_atualiz,
                 ib.cd_modalidade,
                 ib.nr_proposta,
                 ib.log_sexo,
                 ib.in_est_civil,
                 ib.dt_nascimento,
                 ib.cd_grau_parentesco,
                 ib.log_respons,
                 ib.dt_inclusao_plano,
                 ib.dt_exclusao_plano,
                 ib.log_carenc,
                 ib.cd_funcionario,
                 ib.dt_admissao,
                 ib.cd_cbo,
                 ib.cd_cpf,
                 ib.nr_identidade,
                 ib.en_rua,
                 ib.en_bairro,
                 ib.en_cidade,
                 ib.en_cep,
                 ib.en_uf,
                 ib.log_inscr_fatur,
                 ib.cd_padrao_cob,
                 ib.nom_usuar,
                 ib.nom_internac,
                 ib.des_espcif_1,
                 ib.des_espcif_2,
                 ib.des_espcif_3,
                 ib.des_espcif_4,
                 ib.nr_cgc_cpf,
                 ib.nr_contrato_antigo,
                 ib.cd_carteira_antiga,
                 ib.in_tipo_pessoa,
                 ib.cd_unimed_origem,
                 ib.cd_identific_uni_origem,
                 ib.cd_plano_origem,
                 ib.nom_plano_orig,
                 ib.cdcarteiraorigemresponsavel,
                 ib.cd_padrao_cob_ant,
                 ib.dt_mvto_alteracao,
                 ib.dt_falecimento_titular,
                 ib.dt_atualizacao_carencia,
                 ib.cd_userid_carencia,
                 ib.log_bonifi_penalid,
                 ib.nr_dias,
                 ib.log_cobr_fator_moder,
                 ib.dt_inicio_vinculo_unidade,
                 ib.aa_ult_fat_period,
                 ib.cd_departamento,
                 ib.cd_secao,
                 ib.cd_setor,
                 ib.cd_carteira_trabalho,
                 ib.dt_primeira_consulta,
                 ib.cd_motivo_cancel,
                 ib.cd_funcao,
                 ib.cd_pis_pasep,
                 ib.cd_cartao_nacional_saude,
                 ib.nom_pai,
                 ib.in_segmento_assistencial,
                 ib.dt_inclusao_origem,
                 ib.cd_identific_orig_resp,
                 ib.cd_registro_plano,
                 ib.nom_email,
                 ib.cd_vendedor,
                 ib.des_orgao_emissor_ident,
                 ib.nom_pais,
                 ib.cd_plano_operadora,
                 ib.in_via_transferencia,
                 ib.des_nacion,
                 ib.des_natur_docto,
                 ib.uf_emissor_ident,
                 ib.dt_emissao_ident,
                 ib.nr_telefone1,
                 ib.nr_telefone2,
                 ib.nom_usuario,
                 ib.nom_mae,
                 ib.cdn_produt_orig,
                 ib.cd_controle_oper_ans,
                 ib.num_mes_ult_faturam,
                 ib.num_matr_func,
                 ib.num_seqcial_bnfciar,
                 ib.des_histor,
                 ib.des_ocor_bnfciar

            from gp.import_bnfciar ib
           where ib.num_seqcial_bnfciar = pnum_seqcial_bnfciar
          minus
          select ib.num_seqcial,
                 ib.nr_insc_contratante,
                 ib.cod_livre_1,
                 ib.cod_livre_2,
                 ib.cod_livre_3,
                 ib.cod_livre_4,
                 ib.cod_livre_5,
                 ib.cod_livre_6,
                 ib.cod_livre_7,
                 ib.cod_livre_8,
                 ib.cod_livre_9,
                 ib.num_livre_1,
                 ib.num_livre_2,
                 ib.num_livre_3,
                 ib.num_livre_4,
                 ib.num_livre_5,
                 ib.num_livre_6,
                 ib.num_livre_7,
                 ib.num_livre_8,
                 ib.num_livre_9,
                 ib.num_livre_10,
                 ib.val_livre_1,
                 ib.val_livre_2,
                 ib.val_livre_3,
                 ib.val_livre_4,
                 ib.val_livre_5,
                 ib.val_livre_6,
                 ib.val_livre_7,
                 ib.val_livre_8,
                 ib.val_livre_9,
                 ib.val_livre_10,
                 ib.log_livre_1,
                 ib.log_livre_2,
                 ib.log_livre_3,
                 ib.log_livre_4,
                 ib.log_livre_5,
                 ib.log_livre_6,
                 ib.log_livre_7,
                 ib.log_livre_8,
                 ib.log_livre_9,
                 ib.log_livre_10,
                 ib.dat_livre_1,
                 ib.dat_livre_2,
                 ib.dat_livre_3,
                 ib.dat_livre_4,
                 ib.dat_livre_5,
                 ib.dat_livre_6,
                 ib.dat_livre_7,
                 ib.dat_livre_8,
                 ib.dat_livre_9,
                 ib.dat_livre_10,
                 ib.cod_usuar_ult_atualiz,
                 ib.cd_modalidade,
                 ib.nr_proposta,
                 ib.log_sexo,
                 ib.in_est_civil,
                 ib.dt_nascimento,
                 ib.cd_grau_parentesco,
                 ib.log_respons,
                 ib.dt_inclusao_plano,
                 ib.dt_exclusao_plano,
                 ib.log_carenc,
                 ib.cd_funcionario,
                 ib.dt_admissao,
                 ib.cd_cbo,
                 ib.cd_cpf,
                 ib.nr_identidade,
                 ib.en_rua,
                 ib.en_bairro,
                 ib.en_cidade,
                 ib.en_cep,
                 ib.en_uf,
                 ib.log_inscr_fatur,
                 ib.cd_padrao_cob,
                 ib.nom_usuar,
                 ib.nom_internac,
                 ib.des_espcif_1,
                 ib.des_espcif_2,
                 ib.des_espcif_3,
                 ib.des_espcif_4,
                 ib.nr_cgc_cpf,
                 ib.nr_contrato_antigo,
                 ib.cd_carteira_antiga,
                 ib.in_tipo_pessoa,
                 ib.cd_unimed_origem,
                 ib.cd_identific_uni_origem,
                 ib.cd_plano_origem,
                 ib.nom_plano_orig,
                 ib.cdcarteiraorigemresponsavel,
                 ib.cd_padrao_cob_ant,
                 ib.dt_mvto_alteracao,
                 ib.dt_falecimento_titular,
                 ib.dt_atualizacao_carencia,
                 ib.cd_userid_carencia,
                 ib.log_bonifi_penalid,
                 ib.nr_dias,
                 ib.log_cobr_fator_moder,
                 ib.dt_inicio_vinculo_unidade,
                 ib.aa_ult_fat_period,
                 ib.cd_departamento,
                 ib.cd_secao,
                 ib.cd_setor,
                 ib.cd_carteira_trabalho,
                 ib.dt_primeira_consulta,
                 ib.cd_motivo_cancel,
                 ib.cd_funcao,
                 ib.cd_pis_pasep,
                 ib.cd_cartao_nacional_saude,
                 ib.nom_pai,
                 ib.in_segmento_assistencial,
                 ib.dt_inclusao_origem,
                 ib.cd_identific_orig_resp,
                 ib.cd_registro_plano,
                 ib.nom_email,
                 ib.cd_vendedor,
                 ib.des_orgao_emissor_ident,
                 ib.nom_pais,
                 ib.cd_plano_operadora,
                 ib.in_via_transferencia,
                 ib.des_nacion,
                 ib.des_natur_docto,
                 ib.uf_emissor_ident,
                 ib.dt_emissao_ident,
                 ib.nr_telefone1,
                 ib.nr_telefone2,
                 ib.nom_usuario,
                 ib.nom_mae,
                 ib.cdn_produt_orig,
                 ib.cd_controle_oper_ans,
                 ib.num_mes_ult_faturam,
                 ib.num_matr_func,
                 ib.num_seqcial_bnfciar,
                 ib.des_histor,
                 ib.des_ocor_bnfciar

            from import_bnfciar_hist ib
           where ib.num_seqcial_bnfciar = pnum_seqcial_bnfciar);

  p_insere_log('BENEFICIARIO',
               'COMPARAR IMPORT_BNFCIAR COM HISTORICO',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               'RESULTADO (QUANTIDADE DIFERENCAS): ',
               qt_iguais); --complemento

  if qt_iguais <> 0 then
    p_iguais := 'N';

  p_insere_log('BENEFICIARIO',
               'SAINDO - ENCONTROU DIFERENCAS IMPORT_BNFCIAR',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               null,
               null); --complemento

    return p_iguais;
  else

  p_insere_log('BENEFICIARIO_MODULO',
               'NAO ENCONTROU DIFERENCAS EM IMPORT_BNFCIAR',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               'VAI COMPARAR IMPORT_MODUL_BNFCIAR',
               null); --complemento

  --TODO - TRATAR TODAS AS LINHAS, E NAO APENAS A PRIMEIRA!
    select
                   cod_livre_1 || ';' ||
                   cod_livre_2 || ';' ||
                   cod_livre_3 || ';' ||
                   cod_livre_4 || ';' ||
                   cod_livre_5 || ';' ||
                   cod_livre_6 || ';' ||
                   cod_livre_7 || ';' ||
                   cod_livre_8 || ';' ||
                   cod_livre_9 || ';' ||
                   num_livre_2 || ';' ||
                   num_livre_3 || ';' ||
                   num_livre_4 || ';' ||
                   num_livre_5 || ';' ||
                   num_livre_6 || ';' ||
                   num_livre_7 || ';' ||
                   num_livre_8 || ';' ||
                   num_livre_9 || ';' ||
                   num_livre_10 || ';' ||
                   val_livre_1 || ';' ||
                   val_livre_2 || ';' ||
                   val_livre_3 || ';' ||
                   val_livre_4 || ';' ||
                   val_livre_5 || ';' ||
                   val_livre_6 || ';' ||
                   val_livre_7 || ';' ||
                   val_livre_8 || ';' ||
                   val_livre_9 || ';' ||
                   val_livre_10 || ';' ||
                   log_livre_1 || ';' ||
                   log_livre_2 || ';' ||
                   log_livre_3 || ';' ||
                   log_livre_4 || ';' ||
                   log_livre_5 || ';' ||
                   log_livre_6 || ';' ||
                   log_livre_7 || ';' ||
                   log_livre_8 || ';' ||
                   log_livre_9 || ';' ||
                   log_livre_10 || ';' ||
                   dat_livre_1 || ';' ||
                   dat_livre_2 || ';' ||
                   dat_livre_3 || ';' ||
                   dat_livre_4 || ';' ||
                   dat_livre_5 || ';' ||
                   dat_livre_6 || ';' ||
                   dat_livre_7 || ';' ||
                   dat_livre_8 || ';' ||
                   dat_livre_9 || ';' ||
                   dat_livre_10 || ';' ||
                   dat_ult_atualiz || ';' ||
                   hra_ult_atualiz || ';' ||
                   cod_usuar_ult_atualiz || ';' ||
                   num_seqcial_bnfciar || ';' ||
                   cdn_modul || ';' ||
                   dat_inic || ';' ||
                   dat_fim || ';' ||
                   log_carenc || ';' ||
                   log_bonif_penalid || ';' ||
                   nr_dias || ';' ||
                   aa_ult_fat_period || ';' ||
                   num_mes_ult_faturam || ';' ||
                   cdn_motiv_cancel
              into v_complemento
              from gp.import_modul_bnfciar imb
             where imb.num_seqcial_bnfciar = pnum_seqcial_bnfciar
               and rownum = 1;

  p_insere_log('BENEFICIARIO_MODULO',
               'COMPARAR IMPORT_MODUL_BNFCIAR COM HISTORICO',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               'ATUAL: ',
               v_complemento); --complemento

  --TODO - TRATAR TODAS AS LINHAS, E NAO APENAS A PRIMEIRA!
    select
                   cod_livre_1 || ';' ||
                   cod_livre_2 || ';' ||
                   cod_livre_3 || ';' ||
                   cod_livre_4 || ';' ||
                   cod_livre_5 || ';' ||
                   cod_livre_6 || ';' ||
                   cod_livre_7 || ';' ||
                   cod_livre_8 || ';' ||
                   cod_livre_9 || ';' ||
                   num_livre_2 || ';' ||
                   num_livre_3 || ';' ||
                   num_livre_4 || ';' ||
                   num_livre_5 || ';' ||
                   num_livre_6 || ';' ||
                   num_livre_7 || ';' ||
                   num_livre_8 || ';' ||
                   num_livre_9 || ';' ||
                   num_livre_10 || ';' ||
                   val_livre_1 || ';' ||
                   val_livre_2 || ';' ||
                   val_livre_3 || ';' ||
                   val_livre_4 || ';' ||
                   val_livre_5 || ';' ||
                   val_livre_6 || ';' ||
                   val_livre_7 || ';' ||
                   val_livre_8 || ';' ||
                   val_livre_9 || ';' ||
                   val_livre_10 || ';' ||
                   log_livre_1 || ';' ||
                   log_livre_2 || ';' ||
                   log_livre_3 || ';' ||
                   log_livre_4 || ';' ||
                   log_livre_5 || ';' ||
                   log_livre_6 || ';' ||
                   log_livre_7 || ';' ||
                   log_livre_8 || ';' ||
                   log_livre_9 || ';' ||
                   log_livre_10 || ';' ||
                   dat_livre_1 || ';' ||
                   dat_livre_2 || ';' ||
                   dat_livre_3 || ';' ||
                   dat_livre_4 || ';' ||
                   dat_livre_5 || ';' ||
                   dat_livre_6 || ';' ||
                   dat_livre_7 || ';' ||
                   dat_livre_8 || ';' ||
                   dat_livre_9 || ';' ||
                   dat_livre_10 || ';' ||
                   dat_ult_atualiz || ';' ||
                   hra_ult_atualiz || ';' ||
                   cod_usuar_ult_atualiz || ';' ||
                   num_seqcial_bnfciar || ';' ||
                   cdn_modul || ';' ||
                   dat_inic || ';' ||
                   dat_fim || ';' ||
                   log_carenc || ';' ||
                   log_bonif_penalid || ';' ||
                   nr_dias || ';' ||
                   aa_ult_fat_period || ';' ||
                   num_mes_ult_faturam || ';' ||
                   cdn_motiv_cancel
              into v_complemento
              from import_modul_bnfciar_hist imb
             where imb.num_seqcial_bnfciar = pnum_seqcial_bnfciar
               and rownum = 1;

  p_insere_log('BENEFICIARIO_MODULO',
               'COMPARAR IMPORT_MODUL_BNFCIAR COM HISTORICO',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               'HISTORICO: ',
               v_complemento); --complemento

    select count(*)
      into qt_iguais
      from (select cod_livre_1,
                   cod_livre_2,
                   cod_livre_3,
                   cod_livre_4,
                   cod_livre_5,
                   cod_livre_6,
                   cod_livre_7,
                   cod_livre_8,
                   cod_livre_9,
                   num_livre_2,
                   num_livre_3,
                   num_livre_4,
                   num_livre_5,
                   num_livre_6,
                   num_livre_7,
                   num_livre_8,
                   num_livre_9,
                   num_livre_10,
                   val_livre_1,
                   val_livre_2,
                   val_livre_3,
                   val_livre_4,
                   val_livre_5,
                   val_livre_6,
                   val_livre_7,
                   val_livre_8,
                   val_livre_9,
                   val_livre_10,
                   log_livre_1,
                   log_livre_2,
                   log_livre_3,
                   log_livre_4,
                   log_livre_5,
                   log_livre_6,
                   log_livre_7,
                   log_livre_8,
                   log_livre_9,
                   log_livre_10,
                   dat_livre_1,
                   dat_livre_2,
                   dat_livre_3,
                   dat_livre_4,
                   dat_livre_5,
                   dat_livre_6,
                   dat_livre_7,
                   dat_livre_8,
                   dat_livre_9,
                   dat_livre_10,
                   dat_ult_atualiz,
                   hra_ult_atualiz,
                   cod_usuar_ult_atualiz,
                   num_seqcial_bnfciar,
                   cdn_modul,
                   dat_inic,
                   dat_fim,
                   log_carenc,
                   log_bonif_penalid,
                   nr_dias,
                   aa_ult_fat_period,
                   num_mes_ult_faturam,
                   cdn_motiv_cancel

              from gp.import_modul_bnfciar imb
             where imb.num_seqcial_bnfciar = pnum_seqcial_bnfciar
            MINUS
            select cod_livre_1,
                   cod_livre_2,
                   cod_livre_3,
                   cod_livre_4,
                   cod_livre_5,
                   cod_livre_6,
                   cod_livre_7,
                   cod_livre_8,
                   cod_livre_9,
                   num_livre_2,
                   num_livre_3,
                   num_livre_4,
                   num_livre_5,
                   num_livre_6,
                   num_livre_7,
                   num_livre_8,
                   num_livre_9,
                   num_livre_10,
                   val_livre_1,
                   val_livre_2,
                   val_livre_3,
                   val_livre_4,
                   val_livre_5,
                   val_livre_6,
                   val_livre_7,
                   val_livre_8,
                   val_livre_9,
                   val_livre_10,
                   log_livre_1,
                   log_livre_2,
                   log_livre_3,
                   log_livre_4,
                   log_livre_5,
                   log_livre_6,
                   log_livre_7,
                   log_livre_8,
                   log_livre_9,
                   log_livre_10,
                   dat_livre_1,
                   dat_livre_2,
                   dat_livre_3,
                   dat_livre_4,
                   dat_livre_5,
                   dat_livre_6,
                   dat_livre_7,
                   dat_livre_8,
                   dat_livre_9,
                   dat_livre_10,
                   dat_ult_atualiz,
                   hra_ult_atualiz,
                   cod_usuar_ult_atualiz,
                   num_seqcial_bnfciar,
                   cdn_modul,
                   dat_inic,
                   dat_fim,
                   log_carenc,
                   log_bonif_penalid,
                   nr_dias,
                   aa_ult_fat_period,
                   num_mes_ult_faturam,
                   cdn_motiv_cancel

              from import_modul_bnfciar_hist imb
             where imb.num_seqcial_bnfciar = pnum_seqcial_bnfciar);

    p_insere_log('BENEFICIARIO_MODULO',
                 'COMPARAR IMPORT_MODUL_BNFCIAR COM HISTORICO',
                 pnum_seqcial_bnfciar, --pnrsequencial_origem
                 0, --pcdidentificador
                 'RESULTADO (QUANTIDADE DIFERENCAS): ',
                 qt_iguais); --complemento

    if qt_iguais <> 0 then
      p_iguais := 'N';

  p_insere_log('BENEFICIARIO_MODULO',
               'SAINDO - ENCONTROU DIFERENCAS IMPORT_MODUL_BNFCIAR',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               null,
               null); --complemento

      return p_iguais;
    else

  p_insere_log('BENEFICIARIO_MODULO',
               'NAO ENCONTROU DIFERENCAS IMPORT_MODUL_BNFCIAR',
               pnum_seqcial_bnfciar, --pnrsequencial_origem
               0, --pcdidentificador
               'VAI COMPARAR IMPORT_NEGOCIAC_BNFCIAR',
               null); --complemento

      select count(*)
        into qt_iguais
        from (select num_seqcial_bnfciar,
                     cod_livre_1,
                     cod_livre_2,
                     cod_livre_3,
                     cod_livre_4,
                     cod_livre_5,
                     cod_livre_6,
                     cod_livre_7,
                     cod_livre_8,
                     cod_livre_9,
                     num_livre_1,
                     num_livre_2,
                     num_livre_3,
                     num_livre_4,
                     num_livre_5,
                     num_livre_6,
                     num_livre_7,
                     num_livre_8,
                     num_livre_9,
                     num_livre_10,
                     val_livre_1,
                     val_livre_2,
                     val_livre_3,
                     val_livre_4,
                     val_livre_5,
                     val_livre_6,
                     val_livre_7,
                     val_livre_8,
                     val_livre_9,
                     val_livre_10,
                     log_livre_1,
                     log_livre_2,
                     log_livre_3,
                     log_livre_4,
                     log_livre_5,
                     log_livre_6,
                     log_livre_7,
                     log_livre_8,
                     log_livre_9,
                     log_livre_10,
                     dat_livre_1,
                     dat_livre_2,
                     dat_livre_3,
                     dat_livre_4,
                     dat_livre_5,
                     dat_livre_6,
                     dat_livre_7,
                     dat_livre_8,
                     dat_livre_9,
                     dat_livre_10,
                     dat_ult_atualiz,
                     hra_ult_atualiz,
                     cod_usuar_ult_atualiz,
                     cd_unidade_destino,
                     dt_intercambio,
                     log_inscr_fatur,
                     log_inscr_repas,
                     num_ano_ult_repas,
                     num_mes_ult_repas,
                     dat_saida,
                     cd_identific_uni_destino
                from gp.import_negociac_bnfciar inb
               where inb.num_seqcial_bnfciar = pnum_seqcial_bnfciar
              MINUS
              select num_seqcial_bnfciar,
                     cod_livre_1,
                     cod_livre_2,
                     cod_livre_3,
                     cod_livre_4,
                     cod_livre_5,
                     cod_livre_6,
                     cod_livre_7,
                     cod_livre_8,
                     cod_livre_9,
                     num_livre_1,
                     num_livre_2,
                     num_livre_3,
                     num_livre_4,
                     num_livre_5,
                     num_livre_6,
                     num_livre_7,
                     num_livre_8,
                     num_livre_9,
                     num_livre_10,
                     val_livre_1,
                     val_livre_2,
                     val_livre_3,
                     val_livre_4,
                     val_livre_5,
                     val_livre_6,
                     val_livre_7,
                     val_livre_8,
                     val_livre_9,
                     val_livre_10,
                     log_livre_1,
                     log_livre_2,
                     log_livre_3,
                     log_livre_4,
                     log_livre_5,
                     log_livre_6,
                     log_livre_7,
                     log_livre_8,
                     log_livre_9,
                     log_livre_10,
                     dat_livre_1,
                     dat_livre_2,
                     dat_livre_3,
                     dat_livre_4,
                     dat_livre_5,
                     dat_livre_6,
                     dat_livre_7,
                     dat_livre_8,
                     dat_livre_9,
                     dat_livre_10,
                     dat_ult_atualiz,
                     hra_ult_atualiz,
                     cod_usuar_ult_atualiz,
                     cd_unidade_destino,
                     dt_intercambio,
                     log_inscr_fatur,
                     log_inscr_repas,
                     num_ano_ult_repas,
                     num_mes_ult_repas,
                     dat_saida,
                     cd_identific_uni_destino
                from import_negociac_bnfciar_hist inb
               where inb.num_seqcial_bnfciar = pnum_seqcial_bnfciar);

      if qt_iguais <> 0 then
        p_iguais := 'N';
        return p_iguais;
      else
        select count(*)
          into qt_iguais
          from (select num_seqcial_bnfciar,
                       cod_livre_1,
                       cod_livre_2,
                       cod_livre_3,
                       cod_livre_4,
                       cod_livre_5,
                       cod_livre_6,
                       cod_livre_7,
                       cod_livre_8,
                       cod_livre_9,
                       num_livre_1,
                       num_livre_2,
                       num_livre_3,
                       num_livre_4,
                       num_livre_5,
                       num_livre_6,
                       num_livre_7,
                       num_livre_8,
                       num_livre_9,
                       num_livre_10,
                       val_livre_1,
                       val_livre_2,
                       val_livre_3,
                       val_livre_4,
                       val_livre_5,
                       val_livre_6,
                       val_livre_7,
                       val_livre_8,
                       val_livre_9,
                       val_livre_10,
                       log_livre_1,
                       log_livre_2,
                       log_livre_3,
                       log_livre_4,
                       log_livre_5,
                       log_livre_6,
                       log_livre_7,
                       log_livre_8,
                       log_livre_9,
                       log_livre_10,
                       dat_livre_1,
                       dat_livre_2,
                       dat_livre_3,
                       dat_livre_4,
                       dat_livre_5,
                       dat_livre_6,
                       dat_livre_7,
                       dat_livre_8,
                       dat_livre_9,
                       dat_livre_10,
                       dat_ult_atualiz,
                       hra_ult_atualiz,
                       cod_usuar_ult_atualiz,
                       cd_unidade_destino,
                       dat_intercam_atendim,
                       dat_saida_atendim
                  from gp.IMPORT_ATENDIM_BNFCIAR iab
                 where iab.num_seqcial_bnfciar = pnum_seqcial_bnfciar
                MINUS
                select num_seqcial_bnfciar,
                       cod_livre_1,
                       cod_livre_2,
                       cod_livre_3,
                       cod_livre_4,
                       cod_livre_5,
                       cod_livre_6,
                       cod_livre_7,
                       cod_livre_8,
                       cod_livre_9,
                       num_livre_1,
                       num_livre_2,
                       num_livre_3,
                       num_livre_4,
                       num_livre_5,
                       num_livre_6,
                       num_livre_7,
                       num_livre_8,
                       num_livre_9,
                       num_livre_10,
                       val_livre_1,
                       val_livre_2,
                       val_livre_3,
                       val_livre_4,
                       val_livre_5,
                       val_livre_6,
                       val_livre_7,
                       val_livre_8,
                       val_livre_9,
                       val_livre_10,
                       log_livre_1,
                       log_livre_2,
                       log_livre_3,
                       log_livre_4,
                       log_livre_5,
                       log_livre_6,
                       log_livre_7,
                       log_livre_8,
                       log_livre_9,
                       log_livre_10,
                       dat_livre_1,
                       dat_livre_2,
                       dat_livre_3,
                       dat_livre_4,
                       dat_livre_5,
                       dat_livre_6,
                       dat_livre_7,
                       dat_livre_8,
                       dat_livre_9,
                       dat_livre_10,
                       dat_ult_atualiz,
                       hra_ult_atualiz,
                       cod_usuar_ult_atualiz,
                       cd_unidade_destino,
                       dat_intercam_atendim,
                       dat_saida_atendim
                  from IMPORT_ATENDIM_BNFCIAR_HIST iab
                 where iab.num_seqcial_bnfciar = pnum_seqcial_bnfciar);

        if qt_iguais <> 0 then
          p_iguais := 'N';
          return p_iguais;
        end if;
      end if;
    end if;
  end if;
  return p_iguais;
end f_import_bnfciar_hist_iguais;*/

/*function f_import_propost_hist_iguais(pnr_contrato_antigo number) return varchar2 is
  qt_iguais number;
  p_iguais  varchar2(1) := 'S';
  v_complemento varchar2(10000);
begin
  --TODO: TRATAR COMPARACAO ENTRE HISTORICO E ATUAL PARA AS 6 TABELAS DE IMPORTACAO DE PROPOSTAS!!!!!
  return p_iguais;
end f_import_propost_hist_iguais;*/

FUNCTION md5 (valor VARCHAR) RETURN VARCHAR2 IS
   v_input VARCHAR2(32000) := valor;
   hexkey VARCHAR2(32) := NULL;
BEGIN
   hexkey := RAWTOHEX(DBMS_OBFUSCATION_TOOLKIT.md5(input => UTL_RAW.cast_to_raw(v_input)));
   RETURN NVL(hexkey,'');
END;

  /* retornar se o codigo da classe se refere a INSUMO (S). Caso contrário retorna N */
  function f_insumo(pcdclasse varchar2) return varchar2 is
  begin
    if ((pclsmater like '%' || pcdclasse || '%') or
       (pclsmedic like '%' || pcdclasse || '%') or
       (pcltaxa like '%' || pcdclasse || '%') or
       (pclasdia like '%' || pcdclasse || '%')) then
      return 'S';
    else
      return 'N';
    end if;
  end f_insumo;

  function fn_fator_benef(pnrcontrato        contrato_coparticipacao.nrcontrato%type,
                          pnrregistro        contrato_coparticipacao.nrregistro%type,
                          pcdcontrato_padrao contrato_coparticipacao.cdcontrato%type,
                          pnrfamilia         familia.nrfamilia%type,
                          pdtexclusao        usuario.dtexclusao%type)

   return varchar2 is

    vcdfator_modaderador varchar2(99);
    vtpusuario           char;

  begin

    select cp.tpusu_contrato
      into vtpusuario
      from contrato_padrao cp
     where cp.cdcontrato = pcdcontrato_padrao;

    begin
      select distinct cdfator_moderador
        into vcdfator_modaderador
        from contrato_coparticipacao cp
       where cp.nrregistro(+) = pnrregistro
         and cp.nrcontrato(+) = pnrcontrato
         and (cp.cdcontrato = pcdcontrato_padrao)
         and (cp.nrfamilia = pnrfamilia or cp.nrfamilia is null)
         and (cp.dtfinal_vigencia is null or
              cp.dtfinal_vigencia = pdtexclusao)
         and rownum = 1;

    exception
      when no_data_found then

        if vtpusuario = 'P' then
          begin
            select distinct cdfator_moderador
              into vcdfator_modaderador
              from contrato_coparticipacao cp
             where cp.nrregistro = pnrregistro
               and cp.nrcontrato = pnrcontrato
               and (cp.nrfamilia = pnrfamilia or cp.nrfamilia is null)
               and (cp.dtfinal_vigencia is null or
                   cp.dtfinal_vigencia = pdtexclusao)
               and rownum = 1;
          exception
            when no_data_found then

              vcdfator_modaderador := 'SEMFAT';
          end;

        else

          begin
            select distinct cdfator_moderador
              into vcdfator_modaderador
              from contrato_coparticipacao cp
             where cp.nrregistro(+) = pnrregistro
               and cp.nrcontrato(+) = pnrcontrato
               and (cp.cdcontrato = pcdcontrato_padrao or
                    cp.cdcontrato is null)
               and (cp.nrfamilia = pnrfamilia or cp.nrfamilia is null)
               and ((pdtexclusao between cp.dtinicio_vigencia and
                    cp.dtfinal_vigencia or pdtexclusao is null) or
                    (cp.dtfinal_vigencia is null or
                    cp.dtfinal_vigencia = pdtexclusao))
               and rownum = 1;
          exception
            when no_data_found then
              vcdfator_modaderador := 'SEMFAT';
          end;
        end if;
    end;

    return vcdfator_modaderador;

  end;

  function fn_nr_meses_criterio(ptpcriterio tipo_de_criterio.tpcriterio%type)
    return char is

    vnrmeses char;

  begin

    begin
      select 'N'
        into vnrmeses
        from mig_tab_conversao r, mig_tab_conversao_exp re
       where r.nrseq = re.nrseq_tab_conversao
         and re.cdvalor_interno = ptpcriterio
         and r.notabela = 'MIGRACAO_INDICADOR_PERIODO'
         and re.cdvalor_externo in ('M', 'R');
    exception
      when no_data_found then
        vnrmeses := 'S';
    end;

    return vnrmeses;

  end fn_nr_meses_criterio;

  function fn_retorna_controle(pnrseqorigem number, ptpintegracao varchar2)
    return number is
    vnrcontrolemigracao number;
  begin
    begin
      select c.num_seqcial
        into vnrcontrolemigracao
        from control_migrac c
       where c.num_seqcial_orig = pnrseqorigem
         and c.ind_tip_migrac = ptpintegracao
         and c.u##ind_sit_import not in ('CA', 'ER')
         and rownum = 1;
    exception
      when no_data_found then
        vnrcontrolemigracao := 0;
    end;
    return vnrcontrolemigracao;
  end;

  function isnumeric(pseq number, pvalor varchar2, pcampo varchar2)
    return number is
    pnumber number;
  begin
    begin
      pnumber := to_number(pvalor);
    exception
      when others then
        p_insere_falha(vnrcontrolemigracao,
                       'UT',
                       'Erro na conversão de dados.',
                       'Verificar valor do campo: ' || pcampo || ' Valor: ' ||
                       pvalor,
                       pseq);
        pnumber := 0;
    end;

    return pnumber;
  end;

  Function f_busca_cobranca_carteira(pDtReferencia   in Date,
                                     pCdcontrato     in Varchar2,
                                     pTpContrato     in Varchar2,
                                     pTpUsu_Contrato in Varchar2)
    Return number is

    vn_valor number := 0;

  begin
    begin
      Select vlcobranca
        into vn_valor
        From (Select *
                From CRITERIO_COBR_EMISSAO c
               Where c.cdtipo_emissao = 1
                 And NRREGISTRO is null
                 And NRCONTRATO is null
                 And CDLOTACAO is null
                 And (TPCONTRATO = pTpContrato Or pTpContrato Is Null Or
                     TPCONTRATO Is Null)
                 And (TPUSU_CONTRATO = pTpUsu_Contrato Or
                     pTpUsu_Contrato Is Null Or TPUSU_CONTRATO Is Null)
                 And (CDCONTRATO = pCdContrato Or pCdContrato Is Null Or
                     CDCONTRATO Is Null)
                 And (pDtReferencia >= DTVIGENCIA_INICIO And
                     (pDtReferencia <= DTVIGENCIA_FINAL Or
                     DTVIGENCIA_FINAL Is Null))
               Order By CDLOTACAO,
                        DECODE(NRREGISTRO, Null, Null, CDCONTRATO),
                        NRCONTRATO,
                        NRREGISTRO,
                        DECODE(NRREGISTRO, Null, CDCONTRATO, Null),
                        TPUSU_CONTRATO,
                        TPCONTRATO) x
       Where RowNum = 1;
    exception
      when no_data_found then
        vn_valor := 0;
    end;

    Return vn_valor;

  end f_busca_cobranca_carteira;

  --TESTE PARA CONTORNAR PROBLEMA DE CAMPOS LONG
  function f_to_long(valor_long long) return char is
--    vretorno           varchar2(2);
  begin
    return to_char(valor_long);
  end f_to_long;

  procedure show_errors(amsgerro varchar2) is
    cerros number := 99999999500;
  begin
    vcont_erro := vcont_erro + 1;
    insert into falha_processo_regra_menslid values (sysdate, amsgerro);
    --commit;
    if vcont_erro > cerros then
      raise_application_error(-20001,
                              'Quantidade de erros excedou limite definido. Limite erros: ' ||
                              cerros);
    end if;
  end;

  procedure pcheck(pprocesso in varchar2, pevolucao in varchar2) is
  begin
    insert into proc_check
    values
      (pprocesso, to_number(to_char(sysdate, 'sssss')), sysdate, pevolucao);
  end;

  procedure p_commit is
  begin
    if vcont >= pcommit then
      commit;
      vcont := 1;
    end if;
    vcont := vcont + 1;
  end;

  procedure p_insere_falha(pnrcontroleintegracao number,
                           pcdintegracao         varchar2,
                           ptxfalha              varchar2,
                           ptxajuda              varchar2,
                           pnrsequencialorigem   number) is
    vnrsequencial number;
  begin
    vaofalha := 'S';

    begin
      select gp.erro_process_import_seq.nextval into vnrsequencial from dual;
      insert into erro_process_import
        (num_seqcial,
         num_seqcial_control,
         des_erro,
         dat_erro,
         des_ajuda,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         progress_recid)
      values
        (vnrsequencial, --num_seqcial,
         pnrcontroleintegracao, --num_seqcial_control,
         substr(ptxfalha, 1, 2000), --des_erro,
         sysdate, --dat_erro,
         ptxajuda, --des_ajuda,
         trunc(sysdate), --dat_ult_atualiz,
         to_char(sysdate, 'HH24:MI:SS'), --hra_ult_atualiz,
         'MIGRACAO', --cod_usuar_ult_atualiz,
         vnrsequencial);

      update control_migrac
         set ind_sit_import = 'ER',
             des_observacao = substr(ptxfalha, 1, 500)
       where num_seqcial = pnrcontroleintegracao
         and num_seqcial_orig = pnrsequencialorigem
         and ind_tip_migrac = pcdintegracao;

      p_commit;
      vcont := vcont + 1;

      if vcont = pcommit then
        --commit;
        vcont := 1;
      end if;
    exception
      when others then
        raise_application_error(-20102,
                                'Erro na inclusão de falha.' || sqlerrm);
    end;
    --commit;
  end p_insere_falha;

  procedure p_insere_controle(ptpintegracao        varchar2,
                              pnrsequencial_origem number,
                              pcdidentificador     varchar2) is
  begin

    select control_migrac_seq.nextval into vnrcontrolemigracao from dual;

    vnrsequencialorigem := pnrsequencial_origem;

    insert into control_migrac
      (num_seqcial,
       u##ind_tip_migrac,
       ind_tip_migrac,
       dat_gerac,
       num_seqcial_orig,
       dt_processamento,
       ind_acao,
       des_observacao,
       u##ind_sit_import,
       ind_sit_import,
       u##identificacao,
       identificacao,
       dat_ult_atualiz,
       hra_ult_atualiz,
       cod_usuar_ult_atualiz,
       progress_recid)
    values
      (vnrcontrolemigracao, --num_seqcial,
       ptpintegracao, --u##ind_tip_migrac,
       ptpintegracao, --ind_tip_migrac,
       trunc(sysdate), --dat_gerac,
       vnrsequencialorigem, --num_seqcial_orig,
       trunc(sysdate), --dt_processamento,
       'I', --ind_acao,
       ' ', --des_observacao,
       'GE', --u##in_situacao,
       'GE', --in_situacao,
       pcdidentificador, --u##identificacao,
       pcdidentificador, --identificacao,
       trunc(sysdate), --dat_ult_atualiz,
       to_char(sysdate, 'HH24:MI:SS'), --hra_ult_atualiz,
       'MIGRACAO', --cod_usuar_ult_atualiz,
       vnrcontrolemigracao --progress_recid
       );
    p_commit;

    vcont := vcont + 1;

    if vcont = pcommit then
      --commit;
      vcont := 1;
    end if;

  end p_insere_controle;

  --log de acompanhamento em tabela do banco de dados
  procedure p_insere_log(ptpintegracao        varchar2,    --IDENTIFICADOR DA ENTIDADE
                         pmetodo              varchar2,
                         pind_acao            varchar2,
                         pnrsequencial_origem number,      --ID UNICO DO REGISTRO NO UNICOO
                         pcdidentificador     varchar2,
                         pobservacao          varchar2,    --ID UNICO DO REGISTRO NO TOTVS
                         p_complemento        varchar2) is
  begin
    if PAOLOG_TABELA = 'S' then
      insert into log_migracao(num_seqcial      ,
                               ind_tip_migrac   ,
                               metodo,
                               num_seqcial_orig ,
                               identificacao    ,
                               ind_acao         ,
                               des_observacao   ,
                               complemento,
                               dat_ult_atualiz  ,
                               hra_ult_atualiz)
                        values(log_migracao_seq.nextval,
                               substr(ptpintegracao,1,100),
                               substr(pmetodo,1,100),
                               pnrsequencial_origem,
                               substr(pcdidentificador,1,28),
                               substr(pind_acao,1,100),
                               substr(pobservacao,1,1000),
                               substr(p_complemento,1,4000),
                               sysdate, --trunc(sysdate),                  --dat_ult_atualiz
                               to_char(sysdate, 'HH24:MI:SS')); --hra_ult_atualiz
    end if;
  end p_insere_log;

  procedure p_gera_contrat is

    countofrecords number := 0;
    vaoimportado   char;
    vcont          number := 0;
    vcdsituacao    varchar2(2);
    vnr_insc_contrat number;
    vnr_insc_contrat_temp number;
    hash_atual varchar2(100);

    --ler contratantes do UNICOO que ainda nao existem na TEMP_MIGRACAO_CONTRATANTE,
    --ou existem em situacao 'RE' (reprocessar)
    cursor cur_contratante is
      select distinct '1' tpregistro,
                      p.nopessoa nopessoa,
                      p.tppessoa,
                      p.nrcgc_cpf,
                      p.noabreviado_cliente nom_abrev,

                      rpad(' ', 6, ' ') camporeservado1,
                      nvl(to_char(p.dtnascimento, 'DDMMYYYY'), '01011990') dtnascimento,
                      decode(p.tppessoa,
                             'J',
                             '0',
                             nvl(rec.cdvalor_externo, '9')) estado_civil,
                      decode(p.tppessoa,
                             'J',
                             ' ',
                             decode(upper(p.cdsexo), 'M', 'M', 'F')) cdsexo,
                      e.nologradouro endereco,
                      e.nrimovel,
                      e.nobairro nobairro,
                      cid.nocidade cidade,
                      cid.cdestado estado,
                      fn_tirarmascara(nvl(e.nrcep, '99999999'), 8) cep,
                      null nrcaixapostal,
                      lpad(e.nrddd || e.nrtelefone, 20, ' ') nrtelefone1,
                      '     ' ramal1,
                      lpad(nvl(e.nrcelular, ' '), 20, ' ') nrtelefone2,
                      '     ' ramal2,
                      decode(p.tppessoa,
                             'J',
                             nvl(p.nrinscest_rg, 'ISENTO'),
                             null) inscr_estadual,
                      null grupo_cliente,
                      null camporeservado2,
                      null junta_comercial,
                      null renda_fat_mens,
                      null capital_social,
                      decode(p.tppessoa, 'F', p.nrinscest_rg, ' ') cdidentidade,
                      --' ',
                      p.nomae,
                      ' ' noconjugue,
                      null situacao_cred,
                      null dtsituacao_cred,
                      f_abrevia_nome(nvl(p.noabreviado,p.nopessoa), /*25*/ 18, 'PEA') nome_cartao,
                      --decode(p.tppessoa,
                      --       'J',
                      --       f_abrevia_nome(p.nopessoa, 20, 'PEA'),
                      --       null) nome_internacional,
                      f_abrevia_nome(nvl(p.noabreviado,p.nopessoa), 20, 'PEA') nome_internacional,
                      null unidade_grupo,
                      null grupo,
                      null compl_grupo,
                      null local_trabalho,
                      null end_com,
                      null bairro_com,
                      null cidade_com,
                      null estado_com,
                      null cep_com,
                      null telefone_com,
                      null ramal_com,
                      null camporeservado3,
                      null nome_for,
                      null end_for,
                      null bairro_for,
                      null cidade_for,
                      null estado_for,
                      null cep_for,
                      null telefone_for,
                      null ramal_for,
                      null contato_for,
                      null nome_cli,
                      null end_cli,
                      null bairro_cli,
                      null cidade_cli,
                      null estado_cli,
                      null cep_cli,
                      null telefone_cli,
                      null ramal_cli,
                      null contato_cli,
                      null nome_ban,
                      null end_ban,
                      null bairro_ban,
                      null cidade_ban,
                      null estado_ban,
                      null cep_ban,
                      null telefone_ban,
                      null ramal_ban,
                      null contato_ban,
                      null moradia_propria,
                      null tpmoradia,
                      null tpconstrucao,
                      null local_moradia,
                      null vlmoradia,
                      --p.nrregistro vlmoradia, -- o campo vlmoradia foi definido para receber o registro da pessoa
                      null terreno,
                      null local_terreno,
                      p.cdn_cliente vlterreno, -- o campo vlterreno foi definido para receber o codigo do cliente ems5
                      null veiculo,
                      null marca,
                      null modelo,
                      null ano_fabr,
                      null vlveiculo,
                      null portador,
                      PCDMODALIDADE_PORT_REC modalidade,
                      null banco,
                      null nragencia,
                      null nrconta_corrente,
                      null end_eletronico,
                      null naopreencher,
                      '04' geracao_fatura,
                      null contato1,
                      null contato2,
                      e.nologradouro end_cobr,
                      e.nobairro bairro_cobr,
                      cid.nocidade cidade_cobr,
                      cid.cdestado estado_cobr,
                      fn_tirarmascara(nvl(e.nrcep, '99999999'), 8) cep_cobr,
                      null caixa_postal_cobr,
                      null gera_aviso_debto,
                      null emite_bloqueto,
                      null retem_imposto,
                      null necessita_spc,
                      '00' separa_fat_co,
                      '00' separa_fat_part,
                      '00' insumo_crend_co,
                      '00' insumo_crend_sust_part,
                      '01' utiliza_evento,
                      p.nrcei nrcei,
                      null dgto_agenc,
                      null dgto_cont,
                      'IDENTIDADE' nat_ident,
                      decode(p.tppessoa,
                             'F',
                             decode(p.nrinscest_rg,
                                    null,
                                    null,
                                    nvl((select cdvalor_externo
                                          from temp_depara_orgao_emissor o
                                         where o.cdvalor_interno = P.NOORGAO_EMISSOR_RG),
                                        'OUTROS EMISSORES')),
                             null) orgao_emiss,
                      decode(p.tppessoa,
                             'F',
                             decode(p.nrinscest_rg,
                                    null,
                                    null,
                                    pe.nopais_emissor_id),
                             null) pais_emiss,
                      decode(p.tppessoa,
                             'F',
                             decode(p.nrinscest_rg,
                                    null,
                                    null,
                                    p.cdestado_emissor_rg),
                             null) estado_emissor,
                      to_char(p.dtexpedicao_rg, 'DDMMYYYY') dtemissao,
                      pe.nonacionalidade nacionalidade,
                      999999 nrcbo,
                      p.nrregistro,
                      e.nrregistro nrregistro_endereco,
                      p.cdn_cliente,
                      p.cdramoativ,
                      nvl(tmc.nr_insc_contrat,0) nr_insc_contrat
        from (select a.*,
                     nvl(t.cdn_cliente, 0) cdn_cliente,
                     nvl(t.noabreviado_cliente, null) noabreviado_cliente -- deve ser gerado um tratamento de erro na pck - alecsandro
                from (select pe.nrregistro,
                             nvl(pe.nrcgc_cpf, 0) nrcgc_cpf,
                             pe.tppessoa,
                             pe.nopessoa,
                             pe.noabreviado,
                             pe.dtnascimento,
                             pe.cdpais_emissor_id,
                             pe.cdramoativ,
                             pe.noorgao_emissor_rg,
                             pe.cdestadocivil,
                             pe.dtexpedicao_rg,
                             pe.cdestado_emissor_rg,
                             pe.nrinscest_rg,
                             pe.nomae,
                             pe.cdsexo,
                             pe.nrcei
                        from producao.cliente@unicoo_homologa l, pessoa pe
                       where pe.nrregistro = l.nrregistro_cliente
                         and l.cdgrupo_cliente is not null) a, --cdgrupo_cliente nulo causava falha na proxima etapa
                     ti_pessoa t
               where a.nrregistro = t.nrregistro(+)) p,
             endereco e,
             cidade cid,
             pais_emissor_cart_identidade pe,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_ESTADO_CIVIL'
                 and tc.nrseq = ce.nrseq_tab_conversao) rec,
             temp_migracao_contratante tmc
       where rec.cdvalor_interno(+) = p.cdestadocivil
         and e.nrregistro(+) = p.nrregistro
         and e.tpendereco(+) = 'COBR'
         and e.cdcidade = cid.cdcidade(+)
         and pe.cdpais_emissor_id(+) = p.cdpais_emissor_id
         and tmc.nrregistro(+) = p.nrregistro
         and not exists (select 1
                from temp_migracao_contratante tmc
               --where tmc.vlmoradia = p.nrregistro) ANTIGO. SUBSTITUIDO PELO CAMPO NRREGISTRO
               where tmc.nrregistro = p.nrregistro
                 and tmc.cdsituacao <> 'RE' --reprocessar
                 )
       order by nopessoa;

  begin
    DBMS_OUTPUT.ENABLE(null);

    log_dbms('inicio p_gera_contrat');

    --se o contratante ja existe no TOTVS e sofreu alteracao no UNICOO, setar a situacao da temporaria para 'RE' (reprocessar),
    --preservando NR_INSC_CONTRATANTE devido aos relacionamentos no TOTVS
    for x in (select tmc.hash, tmc.nrregistro, tmc.nr_insc_contrat
                from temp_migracao_contratante tmc
                ) loop
      if x.hash <> gerar_hash_contratante_unicoo(x.nrregistro) then
        update temp_migracao_contratante tmc set tmc.cdsituacao = 'RE' --reprocessar
         where tmc.nrregistro = x.nrregistro;

        log_dbms('setando TEMP_MIGRACAO_CONTRATANTE para REPROCESSAR. NRREGISTRO: ' || x.nrregistro);

        --apagar contratante com relacionamentos no TOTVS, pois sera recriado
        delete from gp.contrat c where c.nr_insc_contratante = x.nr_insc_contrat;
        delete from gp.contrimp c where c.nr_insc_contratante = x.nr_insc_contrat;
        log_dbms('apagando contratante no TOTVS para RECRIAR. INSCRICAO: ' || x.nr_insc_contrat);
      else
        log_dbms('hash esta igual. INSCRICAO: ' || x.nr_insc_contrat);
      end if;
    end loop;

    for rcontratante in cur_contratante loop
      vnr_insc_contrat := 0;
      log_dbms('inicio loop rcontratante. INSCRICAO/NRREGISTRO: ' || rcontratante.nr_insc_contrat || ' / ' || rcontratante.nrregistro);

      --se NR_INSC_CONTRAT estiver informado, significa que eh um registro sendo REPROCESSADO.
      --apagar a temp para ser recriada e reutilizar o mesmo NR_INSC_CONTRAT.
      if rcontratante.nr_insc_contrat > 0 then
        vnr_insc_contrat := rcontratante.nr_insc_contrat;
        delete from temp_migracao_contratante c where c.nrregistro = rcontratante.nrregistro;
        log_dbms('deletou da temp para recriar. INSCRICAO: ' || rcontratante.nr_insc_contrat);
      end if;

      vaoimportado := 'N';

      begin
        select 'S'
          into vaoimportado
          from gp.contrat c
         where c.u##nr_cgc_cpf = rcontratante.nrcgc_cpf
           and c.in_tipo_pessoa = rcontratante.tppessoa
           and c.u##nome_abrev = rcontratante.nom_abrev
           and rownum = 1;
      exception
        when no_data_found then
          vaoimportado := 'N';
      end;

      if vaoimportado = 'N' then
        begin
          vcont := vcont + 1;

          p_insere_controle('CR', rcontratante.nrregistro, null);

          if rcontratante.nrregistro_endereco is null then
            begin
              select e.nologradouro endereco,
                     e.nrimovel,
                     e.nobairro nobairro,
                     cid.nocidade cidade,
                     cid.cdestado estado,
                     fn_tirarmascara(nvl(e.nrcep, '99999999'), 8) cep,
                     lpad(e.nrddd || e.nrtelefone, 20, ' ') nrtelefone1,
                     lpad(nvl(e.nrcelular, ' '), 20, ' ') nrtelefone2
                into rcontratante.endereco,
                     rcontratante.nrimovel,
                     rcontratante.nobairro,
                     rcontratante.cidade,
                     rcontratante.estado,
                     rcontratante.cep,
                     rcontratante.nrtelefone1,
                     rcontratante.nrtelefone2
                from endereco e, cidade cid
               where e.nrregistro = rcontratante.nrregistro
                 and e.cdcidade = cid.cdcidade
                 and rownum = 1;
            exception
              when others then
                null;
            end;
          end if;

          if trim(rcontratante.endereco) is null then
            rcontratante.endereco := 'SEM ENDERECO';
          end if;

          if trim(rcontratante.nobairro) is null then
            rcontratante.nobairro := 'SEM BAIRRO';
          end if;

          if trim(rcontratante.cidade) is null then
            rcontratante.cidade := pnocidadedefault;
          end if;

          if trim(rcontratante.estado) is null then
            rcontratante.estado := pcdestadodefault;
          end if;

          -- verifica se rg, orgão emissor ou pais de emissão foram preenchidos, e verifica se alguns deles estão nulos
          -- tais campos precisam estar preenchidos caso algum deles seja informado
          if (rcontratante.cdidentidade is not null or
             rcontratante.orgao_emiss is not null or
             rcontratante.pais_emiss is not null) and
             (rcontratante.cdidentidade is null or
             rcontratante.orgao_emiss is null or
             rcontratante.pais_emiss is null) then

            rcontratante.cdidentidade := '';
            rcontratante.orgao_emiss  := '';
            rcontratante.pais_emiss   := '';
          end if;

          begin
            select c.cod_grp_clien
              into rcontratante.grupo_cliente
              from ems5.cliente c
             where c.cdn_cliente = rcontratante.cdn_cliente;
          exception
            when no_data_found then
                 p_insere_falha(rcontratante.nrregistro,
                               'CR',
                               sqlerrm,
                               'Nao encontrou Grupo de Cliente para o Contratante',
                               null);
                 rcontratante.grupo_cliente := 0;
          end;

          begin
            select fc.cod_portador,
                   fc.cod_banco,
                   fc.cod_agenc_bcia,
                   fc.cod_cta_corren_bco,
                   fc.cod_digito_cta_corren,
                   fc.cod_digito_agenc_bcia
              into rcontratante.portador,
                   rcontratante.banco,
                   rcontratante.nragencia,
                   rcontratante.nrconta_corrente,
                   rcontratante.dgto_cont,
                   rcontratante.dgto_cont
              from ems5.clien_financ fc
             where fc.cdn_cliente = rcontratante.cdn_cliente;
          exception
            when no_data_found then
              rcontratante.portador         := pcdportador;
              rcontratante.banco            := pcdbanco;
              rcontratante.nragencia        := 0;
              rcontratante.nrconta_corrente := 0;
              rcontratante.dgto_cont        := 0;
              rcontratante.dgto_cont        := 0;

              p_insere_falha(rcontratante.nrregistro,
                            'CR',
                            sqlerrm,
                            'Nao encontrou EMS5.CLIEN_FINANC para o CDN_CLIENTE: ' || rcontratante.cdn_cliente,
                            null);
          end;


          vcdsituacao := 'RC';

          /*if rcontratante.nrimovel is not null then

            if rcontratante.endereco not like
               '%' || rcontratante.nrimovel || '%' then

              begin
                rcontratante.endereco := to_char(trim(rcontratante.endereco) || ', ' ||
                                                 to_char(trim(rcontratante.nrimovel)));
              exception
                when others then
                  vcdsituacao := 'ER';

                  p_insere_falha(vnrcontrolemigracao,
                                 'CR',
                                 sqlerrm,
                                 to_char(trim(rcontratante.endereco) || ', ' ||
                                         to_char(trim(rcontratante.nrimovel))),
                                 null);

              end;
            end if;

          end if;*/

          if (rcontratante.tppessoa = 'F') then
            begin
                select pf.nom_endereco,
                       pf.nom_bairro,
                       pf.nom_cidade,
                       pf.cod_unid_federac,
                       pf.cod_cep
                  into rcontratante.endereco,
                       rcontratante.nobairro,
                       rcontratante.cidade,
                       rcontratante.estado,
                       rcontratante.cep
                  from ems5.cliente c, ems5.pessoa_fisic pf
                 where c.cdn_cliente = rcontratante.cdn_cliente
                   and c.num_pessoa = pf.num_pessoa_fisic;
            exception
                when others then
                     rcontratante.endereco := null;
                     rcontratante.nobairro := null;
                     rcontratante.cidade := null;
                     rcontratante.estado := null;
                     rcontratante.cep := null;

--                     DBMS_OUTPUT.PUT_LINE( 'ERRO CONTRATANTE PF. CLIENTE: ' || rcontratante.cdn_cliente || ' ERRO: ' || sqlerrm );

                     p_insere_falha(rcontratante.nrregistro,
                                   'CR',
                                   sqlerrm,
                                   'Nao encontrou EMS5.CLIENTE para o CDN_CLIENTE: ' || rcontratante.cdn_cliente,
                                   null);
            end;

          else
              begin
                select pj.nom_endereco,
                       pj.nom_bairro,
                       pj.nom_cidade,
                       pj.cod_unid_federac,
                       pj.cod_cep
                  into rcontratante.endereco,
                       rcontratante.nobairro,
                       rcontratante.cidade,
                       rcontratante.estado,
                       rcontratante.cep
                  from ems5.cliente c, ems5.pessoa_jurid pj
                 where c.cdn_cliente = rcontratante.cdn_cliente
                   and c.num_pessoa = pj.num_pessoa_jurid;
              exception
                  when others then
                       rcontratante.endereco := null;
                       rcontratante.nobairro := null;
                       rcontratante.cidade := null;
                       rcontratante.estado := null;
                       rcontratante.cep := null;

--                       DBMS_OUTPUT.PUT_LINE( 'ERRO CONTRATANTE PJ. CLIENTE: ' || rcontratante.cdn_cliente || ' ERRO: ' || sqlerrm );

                       p_insere_falha(rcontratante.nrregistro,
                                     'CR',
                                     sqlerrm,
                                     'Nao encontrou EMS5.CLIENTE para o CDN_CLIENTE: ' || rcontratante.cdn_cliente,
                                     null);
              end;
          end if;

          rcontratante.end_cobr    := rcontratante.endereco;
          rcontratante.bairro_cobr := rcontratante.nobairro;
          rcontratante.cidade_cobr := rcontratante.cidade;
          rcontratante.estado_cobr := rcontratante.estado;
          rcontratante.cep_cobr    := rcontratante.cep;

          --se vnr_insc_contrat ja estiver preenchido, significa que o contratante ja existe
          --e sera recriado para atualizar o totvs com dados mais atuais do unicoo (tratado acima)
          if vnr_insc_contrat = 0 then

            log_dbms('vai gerar nova inscricao. NRREGISTRO: ' || rcontratante.nrregistro);

            --NR_INSCRICAO eh criado ao adicionar o registro do contratante na TEMP.
            --caso o contratante precise ser atualizado (reprocessamento), manter a mesma inscricao
            --devido aos relacionamentos no TOTVS
            begin
              --buscar maior inscricao ja existente na temporaria
              select nvl(max(nr_insc_contrat), 0)
                into vnr_insc_contrat_temp
                from temp_migracao_contratante;
            exception
              when others then
                vnr_insc_contrat_temp := 0;
            end;

            begin
              --buscar maior inscricao ja existente no TOTVS
              select nvl(max(nr_insc_contratante), 0)
                into vnr_insc_contrat
                from gp.contrat;
            exception
              when others then
                vnr_insc_contrat := 0;
            end;

            --considerar a maior inscricao encontrada
            if vnr_insc_contrat_temp > vnr_insc_contrat then
              vnr_insc_contrat := vnr_insc_contrat_temp + 1;
            else
              vnr_insc_contrat := vnr_insc_contrat + 1;
            end if;
          else
            log_dbms('vai reusar mesma inscricao. INSCRICAO: ' || vnr_insc_contrat);
          end if;

          hash_atual := gerar_hash_contratante_unicoo(rcontratante.nrregistro);

          insert into temp_migracao_contratante
            (nrsequencial,
             nr_insc_contrat,
             nocontratante,
             tppessoa,
             cgc_cpf,
             noabreviado,
             dtnascimento,
             cdestado_civil,
             cdsexo,
             endereco,
             bairro,
             cidade,
             cdestado,
             cep,
             cxpostal,
             nrtelefone1,
             nrramal1,
             nrtelefone2,
             nrramal2,
             inscestadual,
             nrgrupo_cliente,
             cdjunta_comercial,
             vlrenda_fat_mensal,
             vlcapital_social,
             cdidentidade,
             nopai,
             nomae,
             noconjuge,
             cdsituacao_credito,
             dtsituacao_credito,
             nocartao_magnetico,
             nointernacional,
             nrunidade_grupo,
             cdgrupo_contratante,
             complemento_grupo,
             local_trabalho,
             endereco_comercial,
             bairro_comercial,
             cidade_comercial,
             cdestado_comercial,
             cep_comercial,
             nrtelefone_comercial,
             nrramal_comercial,
             nofornecedor,
             endereco_fornecedor,
             bairro_fornecedor,
             cidade_fornecedor,
             cdestado_fornecedor,
             cep_fornecedor,
             nrtelefone_fornecedor,
             nrramal_fornecedor,
             contato_fornecedor,
             nocliente,
             endereco_cliente,
             bairro_cliente,
             cidade_cliente,
             cdestado_cliente,
             cep_cliente,
             nrtelefone_cliente,
             nrramal_cliente,
             contato_cliente,
             nobanco,
             endereco_banco,
             bairro_banco,
             cidade_banco,
             cdestado_banco,
             cep_banco,
             nrtelefone_banco,
             nrramal_banco,
             contato_banco,
             aomoradia_propria,
             tpmoradia,
             tpconstrucao,
             local_moradia,
             vlmoradia,
             aopossui_terreno,
             local_terreno,
             vlterreno,
             aopossui_veiculo,
             marca_veiculo,
             modelo_veiculo,
             ano_fabricacao_veiculo,
             vlveiculo,
             nrportador,
             nrmodalidade,
             nrbanco,
             cdagencia,
             cdconta_corrente,
             email,
             nrgeracao_fatura,
             contato1,
             contato2,
             endereco_cobranca,
             bairro_cobranca,
             cidade_cobranca,
             cdestado_cobranca,
             cep_cobranca,
             cxpostal_cobranca,
             aogera_aviso_debito,
             aoemite_boleto,
             aoretem_imposto,
             aonecessita_acomp_spc,
             aosepara_fatura_cust_op,
             aosepara_fatura_part,
             aoinsumos_crend_cust_op,
             aoinsumos_crend_cust_part,
             aoutiliza_evento,
             cdcei,
             cddigito_agencia,
             cddigito_conta,
             natureza_doc_ident,
             orgao_emissor_ident,
             pais_emissor_ident,
             cdestado_emissor_ident,
             dtemissao_doc_ident,
             nacionalidade,
             nrcbo,
             cdcontratante,
             cdsituacao,
             nrseq_controle,
             cd_ramo_atividade,
             nrregistro,
             hash)
          values
            (vcont,
             vnr_insc_contrat,
             rcontratante.nopessoa,
             rcontratante.tppessoa,
             rcontratante.nrcgc_cpf,
             rcontratante.nom_abrev,
             rcontratante.dtnascimento,
             rcontratante.estado_civil,
             rcontratante.cdsexo,
             rcontratante.endereco,
             rcontratante.nobairro,
             rcontratante.cidade,
             rcontratante.estado,
             rcontratante.cep,
             rcontratante.nrcaixapostal,
             rcontratante.nrtelefone1,
             rcontratante.ramal1,
             rcontratante.nrtelefone2,
             rcontratante.ramal2,
             rcontratante.inscr_estadual,
             rcontratante.grupo_cliente,
             rcontratante.junta_comercial,
             rcontratante.renda_fat_mens,
             rcontratante.capital_social,
             to_char(rcontratante.cdidentidade),
             ' ',
             rcontratante.nomae,
             rcontratante.noconjugue,
             rcontratante.situacao_cred,
             rcontratante.dtsituacao_cred,
             rcontratante.nome_cartao,
             rcontratante.nome_internacional,
             rcontratante.unidade_grupo,
             rcontratante.grupo,
             rcontratante.compl_grupo,
             rcontratante.local_trabalho,
             rcontratante.end_com,
             rcontratante.bairro_com,
             rcontratante.cidade_com,
             rcontratante.estado_com,
             rcontratante.cep_com,
             rcontratante.telefone_com,
             rcontratante.ramal_com,
             rcontratante.nome_for,
             rcontratante.end_for,
             rcontratante.bairro_for,
             rcontratante.cidade_for,
             rcontratante.estado_for,
             rcontratante.cep_for,
             rcontratante.telefone_for,
             rcontratante.ramal_for,
             rcontratante.contato_for,
             rcontratante.nome_cli,
             rcontratante.end_cli,
             rcontratante.bairro_cli,
             rcontratante.cidade_for,
             rcontratante.estado_cli,
             rcontratante.cep_cli,
             rcontratante.telefone_cli,
             rcontratante.ramal_cli,
             rcontratante.contato_cli,
             rcontratante.nome_ban,
             rcontratante.end_ban,
             rcontratante.bairro_ban,
             rcontratante.cidade_ban,
             rcontratante.estado_ban,
             rcontratante.cep_ban,
             rcontratante.telefone_ban,
             rcontratante.ramal_ban,
             rcontratante.contato_ban,
             rcontratante.moradia_propria,
             rcontratante.tpmoradia,
             rcontratante.tpconstrucao,
             rcontratante.local_moradia,
             rcontratante.vlmoradia,
             rcontratante.terreno,
             rcontratante.local_terreno,
             rcontratante.vlterreno,
             rcontratante.veiculo,
             rcontratante.marca,
             rcontratante.modelo,
             rcontratante.ano_fabr,
             rcontratante.vlveiculo,
             rcontratante.portador,
             rcontratante.modalidade,
             rcontratante.banco,
             rcontratante.nragencia,
             rcontratante.nrconta_corrente,
             rcontratante.end_eletronico,
             rcontratante.geracao_fatura,
             rcontratante.contato1,
             rcontratante.contato2,
             rcontratante.end_cobr,
             rcontratante.bairro_cobr,
             rcontratante.cidade_cobr,
             rcontratante.estado_cobr,
             rcontratante.cep_cobr,
             rcontratante.caixa_postal_cobr,
             rcontratante.gera_aviso_debto,
             rcontratante.emite_bloqueto,
             rcontratante.retem_imposto,
             rcontratante.necessita_spc,
             rcontratante.separa_fat_co,
             rcontratante.separa_fat_part,
             rcontratante.insumo_crend_co,
             rcontratante.insumo_crend_sust_part,
             rcontratante.utiliza_evento,
             rcontratante.nrcei,
             rcontratante.dgto_agenc,
             rcontratante.dgto_cont,
             rcontratante.nat_ident,
             rcontratante.orgao_emiss,
             rcontratante.pais_emiss,
             rcontratante.estado_emissor,
             rcontratante.dtemissao,
             rcontratante.nacionalidade,
             rcontratante.nrcbo,
             rcontratante.cdn_cliente,
             vcdsituacao,
             vnrcontrolemigracao,
             rcontratante.cdramoativ,
             rcontratante.nrregistro,
             hash_atual
             );

          countofrecords := countofrecords + 1;

          if (countofrecords >= 1000) then
            --commit;
            countofrecords := 0;
          end if;

          /*exception
          when others then
           null;*/
        end;

      end if;
    end loop;

  end p_gera_contrat;

  procedure p_migra_contratante is
    vaomigrado        varchar2(2);
    vaoimposto_migrado varchar2(2);
    vcd_cidade        number;
    vcd_cidade_cobr   number;
    vlg_gera_avideb   number;
    vlg_emite_boleto  number;
    vlg_retem_imposto number;
    vcd_imposto       gp.parafatu.cd_imposto_ir%type;
    temp_contrat      gp.contrat%rowtype;
    temp_contrimp     gp.contrimp%rowtype;
    v_texto_anexo varchar2(2000);
    v_pessoa_uni number;
    v_primeira_data  date;

    cursor ccontrat is

      select trim(nocontratante) nocontratante,
             tppessoa,
             cgc_cpf,
             nvl(noabreviado, 'p' || nrregistro) noabreviado,
             dtnascimento,
             cdestado_civil,
             cdsexo,
             endereco,
             bairro,
             cidade,
             cdestado,
             cep,
             cxpostal,
             nrtelefone1,
             nrramal1,
             nrtelefone2,
             nrramal2,
             inscestadual,
             nrgrupo_cliente,
             cdjunta_comercial,
             vlrenda_fat_mensal,
             vlcapital_social,
             cdidentidade,
             nopai,
             nomae,
             noconjuge,
             cdsituacao_credito,
             dtsituacao_credito,
             nocartao_magnetico,
             nointernacional,
             nrunidade_grupo,
             cdgrupo_contratante,
             complemento_grupo,
             local_trabalho,
             endereco_comercial,
             bairro_comercial,
             cidade_comercial,
             cdestado_comercial,
             cep_comercial,
             nrtelefone_comercial,
             nrramal_comercial,
             nofornecedor,
             endereco_fornecedor,
             bairro_fornecedor,
             cidade_fornecedor,
             cdestado_fornecedor,
             cep_fornecedor,
             nrtelefone_fornecedor,
             nrramal_fornecedor,
             contato_fornecedor,
             nocliente,
             endereco_cliente,
             bairro_cliente,
             cidade_cliente,
             cdestado_cliente,
             cep_cliente,
             nrtelefone_cliente,
             nrramal_cliente,
             contato_cliente,
             nobanco,
             endereco_banco,
             bairro_banco,
             cidade_banco,
             cdestado_banco,
             cep_banco,
             nrtelefone_banco,
             nrramal_banco,
             contato_banco,
             aomoradia_propria,
             tpmoradia,
             tpconstrucao,
             local_moradia,
             vlmoradia,
             aopossui_terreno,
             local_terreno,
             vlterreno,
             aopossui_veiculo,
             marca_veiculo,
             modelo_veiculo,
             ano_fabricacao_veiculo,
             vlveiculo,
             nrportador,
             nrmodalidade,
             nrbanco,
             cdagencia,
             cdconta_corrente,
             email,
             nrgeracao_fatura,
             contato1,
             contato2,
             endereco_cobranca,
             bairro_cobranca,
             cidade_cobranca,
             cdestado_cobranca,
             cep_cobranca,
             cxpostal_cobranca,
             aogera_aviso_debito,
             aoemite_boleto,
             aoretem_imposto,
             aonecessita_acomp_spc,
             aosepara_fatura_cust_op,
             aosepara_fatura_part,
             aoinsumos_crend_cust_op,
             aoinsumos_crend_cust_part,
             aoutiliza_evento,
             nvl(cdcei,' ') cdcei,
             cddigito_agencia,
             cddigito_conta,
             natureza_doc_ident,
             orgao_emissor_ident,
             pais_emissor_ident,
             cdestado_emissor_ident,
             dtemissao_doc_ident,
             nacionalidade,
             nrcbo, /*
nrsequencial,*/
             cdcontratante,
             nrseq_controle,
             nvl(to_number((select r.cd_ramo_atividade
                             from gp.ramoativ r
                            where to_char(r.cd_ramo_atividade) =
                                  tmc.cd_ramo_atividade)),
                 0) cd_ramo_atividade,
             nrregistro,
             nr_insc_contrat
        from temp_migracao_contratante tmc
       where tmc.cdcontratante <> 0
         and tmc.cdsituacao = 'RC'
         and not exists
       (select 1
                from gp.contrat c
               where tmc.noabreviado = c.u##nome_abrev);

    procedure p_gera_falha_cliente is

      vtxmensagem varchar2(4000);
      vtxajuda    varchar2(4000);

    begin
      for x in (select c.nrseq_controle, tg.cdgrupo_cliente_ems_pj
                  from temp_migracao_contratante        c,
                       producao.cliente@unicoo_homologa cl,
                       ems506unicoo.ti_grupo_de_cliente tg
                 where c.cdsituacao = 'RC'
                   and c.nrregistro = cl.nrregistro_cliente
                   and cl.cdgrupo_cliente = tg.cdgrupo_cliente(+))

       loop

        update temp_migracao_contratante tmc
           set tmc.cdsituacao = 'ER'
         where tmc.nrseq_controle = x.nrseq_controle;

        if x.cdgrupo_cliente_ems_pj = 'NAOM' then
          vtxmensagem := 'Cliente está no grupo NAOM';
          vtxajuda    := 'Verificar de/para';

        elsif x.cdgrupo_cliente_ems_pj is null then
          vtxmensagem := 'Cliente não possui grupo de cliente no Unicoo';
          vtxajuda    := 'Verifique registro';
        end if;

        p_insere_falha(x.nrseq_controle, 'CT', vtxmensagem, vtxajuda, 0);

      end loop;

      commit;

    end p_gera_falha_cliente;

  begin

    for cc in ccontrat loop

      vaomigrado := 'N';

      if vaomigrado = 'N' then

        begin

          select cd_cidade
            into vcd_cidade
            from gp.dzcidade dc
           where dc.nm_cidade =
                 translate(cc.cidade,
                           'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç',
                           'AAAAAAAAEEEEIIOOOOOOUUUUCC')
             and dc.estado = cc.cdestado
             and rownum = 1;
        exception
          when others then
            vcd_cidade := pcdcidadedefault;
        end;

        begin

          select cd_cidade
            into vcd_cidade_cobr
            from gp.dzcidade dc
           where dc.nm_cidade =
                 translate(cc.cidade_cobranca,
                           'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç',
                           'AAAAAAAAEEEEIIOOOOOOUUUUCC')
             and dc.estado = cc.cdestado_cobranca
             and rownum = 1;
        exception
          when others then
            vcd_cidade_cobr := pcdcidadedefault;

        end;

        begin
          select fc.log_habilit_gera_avdeb,
                 fc.loghabilitemisboleto,
                 fc.cod_tip_fluxo_financ
            into vlg_gera_avideb, vlg_emite_boleto, temp_contrat.char_16
            from ems5.clien_financ fc
           where fc.cdn_cliente = cc.cdcontratante;
        exception
          when no_data_found then
            vlg_gera_avideb      := 0;
            vlg_emite_boleto     := 0;
            temp_contrat.char_16 := ' ';
        end;

        if cc.tppessoa = 'J' THEN
          select cd_imposto_ir into vcd_imposto from gp.parafatu di;

          begin
            log_dbms('verificar se contrimp ja existe. inscricao;imposto: ' || cc.nr_insc_contrat || ';' || vcd_imposto);

            select 'S'
              into vaoimposto_migrado
              from gp.contrimp ct
             where ct.nr_insc_contratante = cc.nr_insc_contrat
               and ct.cd_imposto = vcd_imposto
               and ct.dt_vigencia_ini = '01/01/1900'
               and ct.dt_vigencia_fim = '31/12/9999';
          exception
            when no_data_found then
              vaoimposto_migrado := 'N';
          end;

          log_dbms('resultado verificacao se contrimp ja existe. inscricao;imposto;resultado: ' || cc.nr_insc_contrat || ';' || vcd_imposto || vaoimposto_migrado);

          if vaoimposto_migrado = 'N' then
              vlg_retem_imposto                 := 1;
              temp_contrimp.nr_insc_contratante := cc.nr_insc_contrat;
              temp_contrimp.cd_imposto          := vcd_imposto;
              temp_contrimp.dt_vigencia_ini     := '01/01/1900';
              temp_contrimp.dt_vigencia_fim     := '31/12/9999';
              temp_contrimp.vl_minimo_retencao  := '10,01';
              temp_contrimp.cd_userid           := 'migracao';
              temp_contrimp.dt_atualizacao      := trunc(sysdate);
              temp_contrimp.char_1              := ' ';
              temp_contrimp.char_2              := ' ';
              temp_contrimp.char_3              := ' ';
              temp_contrimp.char_4              := ' ';
              temp_contrimp.char_5              := ' ';
              temp_contrimp.int_1               := 0;
              temp_contrimp.int_2               := 0;
              temp_contrimp.int_3               := 0;
              temp_contrimp.int_4               := 0;
              temp_contrimp.int_5               := 0;
              temp_contrimp.dec_1               := 0;
              temp_contrimp.dec_2               := 0;
              temp_contrimp.dec_3               := 0;
              temp_contrimp.dec_4               := 0;
              temp_contrimp.dec_5               := 0;
              temp_contrimp.log_1               := 0;
              temp_contrimp.log_2               := 0;
              temp_contrimp.log_3               := 0;
              temp_contrimp.log_4               := 0;
              temp_contrimp.log_5               := 0;
              temp_contrimp.date_1              := '';
              temp_contrimp.date_2              := '';
              temp_contrimp.date_3              := '';
              temp_contrimp.date_4              := '';
              temp_contrimp.date_5              := '';
              temp_contrimp.u_char_1            := ' ';
              temp_contrimp.u_char_2            := ' ';
              temp_contrimp.u_char_3            := ' ';
              temp_contrimp.u_date_1            := '';
              temp_contrimp.u_date_2            := '';
              temp_contrimp.u_date_3            := '';
              temp_contrimp.u_dec_1             := 0;
              temp_contrimp.u_dec_2             := 0;
              temp_contrimp.u_dec_3             := 0;
              temp_contrimp.u_int_1             := 0;
              temp_contrimp.u_int_2             := 0;
              temp_contrimp.u_int_3             := 0;
              temp_contrimp.u_log_1             := 0;
              temp_contrimp.u_log_2             := 0;
              temp_contrimp.u_log_3             := 0;
              select gp.contrimp_seq.nextval
                into temp_contrimp.progress_recid
                from dual;

              insert into gp.contrimp values temp_contrimp;
           end if;
        else

          vlg_retem_imposto := 0;

        end if;

        temp_contrat.nr_insc_contratante       := cc.nr_insc_contrat;
        temp_contrat.cd_contratante            := nvl(cc.cdcontratante, 0);
        temp_contrat.u##nm_contratante         := cc.nocontratante;
        temp_contrat.nm_contratante            := cc.nocontratante;
        temp_contrat.u##in_tipo_pessoa         := cc.tppessoa;
        temp_contrat.in_tipo_pessoa            := cc.tppessoa;
        temp_contrat.u##nr_cgc_cpf             := nvl(cc.cgc_cpf, 0);
        temp_contrat.nr_cgc_cpf                := nvl(cc.cgc_cpf, 0);
        temp_contrat.u##nome_abrev             := nvl(cc.noabreviado, 0);
        temp_contrat.nome_abrev                := nvl(cc.noabreviado, 0);
        temp_contrat.cd_cbo_ramo_atividade     := cc.cd_ramo_atividade;
        temp_contrat.dt_nascimento_fundacao    := cc.dtnascimento;
        temp_contrat.in_est_civil              := nvl(cc.cdestado_civil,
                                                      ' ');
        temp_contrat.en_rua                    := cc.endereco;
        temp_contrat.en_bairro                 := cc.bairro;
        temp_contrat.ds_orgao_emissor_ident    := 'SSP-SECRET.SEGURANCA PUBLICA';
        temp_contrat.en_cep                    := cc.cep;
        temp_contrat.en_uf                     := cc.cdestado;
        temp_contrat.nr_telefone##1            := cc.nrtelefone1;
        temp_contrat.nr_telefone##2            := cc.nrtelefone2;
        temp_contrat.nr_ramal##1               := ' ';
        temp_contrat.nr_ramal##2               := ' ';
        temp_contrat.lg_sexo := case
                                  when cc.cdsexo = 'F' then
                                   '0'
                                  when cc.cdsexo = 'M' then
                                   '1'
                                  else
                                   0
                                end;
        temp_contrat.nr_caixa_postal           := ' ';
        temp_contrat.nr_insc_estadual          := nvl(cc.inscestadual,
                                                      'ISENTO');
        temp_contrat.lg_retem_imposto          := vlg_retem_imposto;
        temp_contrat.cd_sit_cadastro           := 1;
        temp_contrat.nm_local_trabalho         := ' ';
        temp_contrat.en_rua_comercial          := ' ';
        temp_contrat.en_bairro_comercial       := ' ';
        temp_contrat.nm_pais                   := 'BRASIL';
        temp_contrat.en_cep_comercial          := ' ';
        temp_contrat.en_uf_comercial           := ' ';
        temp_contrat.nr_telefone_comercial##1  := ' ';
        temp_contrat.nr_telefone_comercial##2  := ' ';
        temp_contrat.nr_ramal_comercial##1     := ' ';
        temp_contrat.nr_ramal_comercial##2     := ' ';
        temp_contrat.nm_contato##1             := ' ';
        temp_contrat.nm_contato##2             := ' ';
        temp_contrat.dt_atualizacao            := trunc(sysdate);
        temp_contrat.cd_userid                 := 'MIGRACAO';
        temp_contrat.cd_junta_comercial        := ' ';
        temp_contrat.vl_renda_mensal           := 0;
        temp_contrat.vl_capital_social         := 0;
        temp_contrat.nm_fornecedor##1          := ' ';
        temp_contrat.nm_fornecedor##2          := ' ';
        temp_contrat.en_rua_fornecedor##1      := ' ';
        temp_contrat.en_rua_fornecedor##2      := ' ';
        temp_contrat.en_bairro_fornecedor##1   := ' ';
        temp_contrat.en_bairro_fornecedor##2   := ' ';
        temp_contrat.char_8##1                 := ' ';
        temp_contrat.char_8##2                 := ' ';
        temp_contrat.en_cep_fornecedor##1      := ' ';
        temp_contrat.en_cep_fornecedor##2      := ' ';
        temp_contrat.en_uf_fornecedor##1       := ' ';
        temp_contrat.en_uf_fornecedor##2       := ' ';
        temp_contrat.nr_telefone_fornecedor##1 := ' ';
        temp_contrat.nr_telefone_fornecedor##2 := ' ';
        temp_contrat.nr_ramal_fornecedor##1    := ' ';
        temp_contrat.nr_ramal_fornecedor##2    := ' ';
        temp_contrat.nm_contato_fornecedor##1  := ' ';
        temp_contrat.nm_contato_fornecedor##2  := ' ';
        temp_contrat.nm_cliente##1             := ' ';
        temp_contrat.nm_cliente##2             := ' ';
        temp_contrat.en_rua_cliente##1         := ' ';
        temp_contrat.en_rua_cliente##2         := ' ';
        temp_contrat.en_bairro_cliente##1      := ' ';
        temp_contrat.en_bairro_cliente##2      := ' ';
        temp_contrat.char_9##1                 := ' ';
        temp_contrat.char_9##2                 := ' ';
        temp_contrat.en_cep_cliente##1         := ' ';
        temp_contrat.en_cep_cliente##2         := ' ';
        temp_contrat.en_uf_cliente##1          := ' ';
        temp_contrat.en_uf_cliente##2          := ' ';
        temp_contrat.nr_telefone_cliente##1    := ' ';
        temp_contrat.nr_telefone_cliente##2    := ' ';
        temp_contrat.nr_ramal_cliente##1       := ' ';
        temp_contrat.nr_ramal_cliente##2       := ' ';
        temp_contrat.nm_contato_cliente##1     := ' ';
        temp_contrat.nm_contato_cliente##2     := ' ';
        temp_contrat.nm_banco##1               := ' ';
        temp_contrat.nm_banco##2               := ' ';
        temp_contrat.en_rua_banco##1           := ' ';
        temp_contrat.en_rua_banco##2           := ' ';
        temp_contrat.en_bairro_banco##1        := ' ';
        temp_contrat.en_bairro_banco##2        := ' ';
        temp_contrat.char_10##1                := ' ';
        temp_contrat.char_10##2                := ' ';
        temp_contrat.en_cep_banco##1           := ' ';
        temp_contrat.en_cep_banco##2           := ' ';
        temp_contrat.en_uf_banco##1            := ' ';
        temp_contrat.en_uf_banco##2            := ' ';
        temp_contrat.nr_telefone_banco##1      := ' ';
        temp_contrat.nr_telefone_banco##2      := ' ';
        temp_contrat.nr_ramal_banco##1         := ' ';
        temp_contrat.nr_ramal_banco##2         := ' ';
        temp_contrat.nm_contato_banco##1       := ' ';
        temp_contrat.nm_contato_banco##2       := ' ';
        temp_contrat.lg_veiculo                := 0;
        temp_contrat.cd_marca                  := ' ';
        temp_contrat.cd_modelo                 := ' ';
        temp_contrat.aa_fabricacao             := 0;
        temp_contrat.vl_veiculo                := 0;
        temp_contrat.lg_moradia_propria        := 0;
        temp_contrat.in_tipo_moradia           := 0;
        temp_contrat.in_tipo_construcao        := 0;
        temp_contrat.nm_local_moradia          := ' ';
        temp_contrat.vl_moradia_propria        := 0;
        temp_contrat.lg_terreno                := 0;
        temp_contrat.nm_local_terreno          := ' ';
        temp_contrat.vl_terreno                := 0;
        temp_contrat.nm_filiacao_pai           := ' ';
        temp_contrat.nm_filiacao_mae           := cc.nomae;
        temp_contrat.nm_conjuge                := cc.noconjuge;
        temp_contrat.nr_identidade             := cc.cdidentidade;
        temp_contrat.cd_sit_cred               := 0;
        temp_contrat.ds_observacao##1          := ' ';
        temp_contrat.ds_observacao##2          := ' ';
        temp_contrat.ds_observacao##3          := ' ';
        temp_contrat.nr_insc_fiador            := 0;
        temp_contrat.dt_analise_credito        := null;
        temp_contrat.nm_email                  := ' ';
        temp_contrat.agencia                   := cc.cdagencia;
        temp_contrat.nr_fatura                 := 0;
        temp_contrat.cd_senha                  := 0;
        temp_contrat.dec_1                     := 0;
        temp_contrat.dec_2                     := 0;
        temp_contrat.lg_mantem_senha_termo     := 0;
        temp_contrat.dt_emissao_doc            := null;
        temp_contrat.lg_irf                    := 0;
        temp_contrat.en_rua_cob                := cc.endereco_cobranca;
        temp_contrat.en_bairro_cob             := cc.bairro_cobranca;
        temp_contrat.uf_emissor_doc            := cc.cdestado_emissor_ident;
        temp_contrat.en_cep_cob                := cc.cep_cobranca;
        temp_contrat.en_uf_cob                 := cc.cdestado_cobranca;
        temp_contrat.nr_caixa_postal_cob       := cc.cxpostal_cobranca;
        temp_contrat.cd_userid_analise         := ' ';
        temp_contrat.in_fiador                 := 'C';
--        temp_contrat.nm_contratante_cartao     := substr(cc.nointernacional,0,49);
        temp_contrat.nm_contratante_cartao     := substr(cc.nocartao_magnetico,0,49);
        temp_contrat.nm_internacional          := substr(cc.nointernacional,0,49);
        temp_contrat.cd_unimed                 := pnrunimed;
        temp_contrat.cod_gr_cli                := cc.nrgrupo_cliente;
        temp_contrat.lg_tem_proposta           := 1;
        temp_contrat.lgtempropostacontrorig    := 1;
        temp_contrat.char_1##1                 := ' ';
        temp_contrat.char_1##2                 := ' ';
        temp_contrat.date_2                    := null;
        temp_contrat.date_3                    := null;
        temp_contrat.dec_3                     := 0;

        if cc.nrportador = 'QUITA' then
          temp_contrat.portador := 331;
        else
          temp_contrat.portador             := nvl(cc.nrportador,'0');
        end if;
        temp_contrat.lg_gera_avideb            := vlg_gera_avideb;
        temp_contrat.lg_emite_boleto           := vlg_emite_boleto;
        temp_contrat.u_char_1                  := ' ';
        temp_contrat.u_char_2                  := ' ';
        temp_contrat.u_char_3                  := ' ';
        temp_contrat.u_date_1                  := null;
        temp_contrat.u_date_2                  := null;
        temp_contrat.u_date_3                  := null;
        temp_contrat.u_log_1                   := 0;
        temp_contrat.u_log_2                   := 0;
        temp_contrat.u_log_3                   := 0;
        temp_contrat.u_int_3                   := 0;
        temp_contrat.u_int_2                   := 0;
        temp_contrat.u_int_1                   := 0;
        temp_contrat.u_dec_1                   := 0;
        temp_contrat.u_dec_2                   := 0;
        temp_contrat.u_dec_3                   := 0;
        temp_contrat.cd_unidade_grupo          := 0;
        temp_contrat.u##cd_grupo_contratante   := ' ';
        temp_contrat.cd_grupo_contratante      := ' ';
        temp_contrat.u##cd_compl_grupo_contrat := ' ';
        temp_contrat.cd_compl_grupo_contrat    := ' ';
        temp_contrat.dig_conta_corren          := cc.cddigito_conta;
        temp_contrat.ds_natureza_doc           := 'IDENTIDADE';
        temp_contrat.date_4                    := null;
        temp_contrat.date_5                    := null;
        temp_contrat.dec_4                     := null;
        temp_contrat.dec_5                     := null;
        temp_contrat.modalidade                := cc.nrmodalidade;
        --
        begin
          temp_contrat.cod_banco := cc.nrbanco;
        exception
          when others then
            temp_contrat.cod_banco := pcdbanco;
        end;
        temp_contrat.lg_neces_acomp_spc      := 0;
        temp_contrat.conta_corren            := cc.cdconta_corrente;
        temp_contrat.in_agrupo_faturas       := 1; -- 0-Modalidade Contrato; 1-Contrato; 2-Contrato/Espécie; 3-Contrato/Espécie/Ano mês referência; 4-Contratante;
        temp_contrat.dig_agencia             := cc.cddigito_agencia;
        temp_contrat.char_3##1               := ' ';
        temp_contrat.char_3##2               := ' ';
        temp_contrat.cd_cidade               := vcd_cidade;
        temp_contrat.cd_cidade_cob           := vcd_cidade_cobr;
        temp_contrat.cd_cidade_comercial     := 0;
        temp_contrat.cd_cidade_cliente##1    := 0;
        temp_contrat.cd_cidade_cliente##2    := 0;
        temp_contrat.cd_cidade_fornecedor##1 := 0;
        temp_contrat.cd_cidade_fornecedor##2 := 0;
        temp_contrat.cd_cidade_banco##1      := 0;
        temp_contrat.cd_cidade_banco##2      := 0;
        temp_contrat.lg_repres_legal         := 0;
        temp_contrat.lg_controladora         := 0;
        temp_contrat.log_8                   := 1; -- EMITIR ETIQUETA
        temp_contrat.log_9                   := 0;
        temp_contrat.log_10                  := 0;
        temp_contrat.in_separa_fatura_co     := 0;
        temp_contrat.in_separa_fatura_part   := 0;
        temp_contrat.in_imp_insumos_coop_co  := 0;
        temp_contrat.inimpinsumoscooppart    := 0;
        temp_contrat.in_utiliza_evento       := 0;
        temp_contrat.nr_cei                  := cc.cdcei;
        temp_contrat.ds_nacionalidade := case
                                           when cc.tppessoa = 'J' then
                                            ' '
                                           else
                                            cc.nacionalidade
                                         end;
        --temp_contrat.char_16                 := ' ';
        temp_contrat.char_17               := ' ';
        temp_contrat.char_18               := ' ';
        temp_contrat.char_19               := ' ';
        temp_contrat.char_20               := ' ';
        temp_contrat.dec_15                := 0;
        temp_contrat.dec_16                := 0;
        temp_contrat.dec_17                := 0;
        temp_contrat.dec_18                := 0;
        temp_contrat.dec_19                := 0;
        temp_contrat.dec_20                := 0;
        temp_contrat.date_15               := null;
        temp_contrat.date_16               := null;
        temp_contrat.date_17               := null;
        temp_contrat.date_18               := null;
        temp_contrat.date_19               := null;
        temp_contrat.date_20               := null;
        temp_contrat.int_17                := 0;
        temp_contrat.int_18                := 0;
        temp_contrat.int_19                := 0;
        temp_contrat.int_20                := 0;
        temp_contrat.log_15                := 0;
        temp_contrat.log_16                := 0;
        temp_contrat.log_17                := 0;
        temp_contrat.log_18                := 0;
        temp_contrat.log_19                := 0;
        temp_contrat.log_20                := 0;
        temp_contrat.int_21                := 0;
        temp_contrat.int_22                := 0;
        temp_contrat.int_23                := 0;
        temp_contrat.int_24                := 0;
        temp_contrat.int_25                := 0;
        temp_contrat.int_26                := 0;
        temp_contrat.int_27                := 0;
        temp_contrat.char_21               := ' ';
        temp_contrat.char_22               := ' ';
        temp_contrat.char_23               := ' ';
        temp_contrat.char_24               := ' ';
        temp_contrat.char_25               := ' ';
        temp_contrat.log_21                := 0;
        temp_contrat.log_22                := 0;
        temp_contrat.date_21               := null;
        temp_contrat.id_pessoa_old         := cc.nrregistro;
        temp_contrat.cd_vendedor           := pCD_REPRESENTANTE;
        temp_contrat.id_pessoa             := cc.nrregistro;
        temp_contrat.des_observacao        := ' ';
        temp_contrat.nom_audit             := ' ';
        temp_contrat.idi_dat_incl          := 0;
        temp_contrat.idi_dat_exc           := 0;
        temp_contrat.num_dat_incl          := 0;
        temp_contrat.num_dat_exc           := 0;
        temp_contrat.cd_cbo_ramo_atividade := cc.cd_ramo_atividade;

        select gp.contrat_seq.nextval
          into temp_contrat.progress_recid
          from dual;

        begin
          insert into gp.contrat values temp_contrat; --progress_recid

          update temp_migracao_contratante t
             set cdsituacao = 'IT'
           where t.nrseq_controle = cc.nrseq_controle;

        exception
          when dup_val_on_index then
            null;

          when others then
            update temp_migracao_contratante t
               set cdsituacao = 'ER'
             where t.nrseq_controle = cc.nrseq_controle;

            p_insere_falha(cc.nrseq_controle,
                           'CR',
                           sqlerrm,
                           'Erro ao inserir contratante no gp',
                           null);

        end;
        p_commit;

        --Migracao das ocorrencias da Unimed (quando existir) como anexo da pessoa
        v_texto_anexo   := ' ';

        for hcu in (select dtocorrencia, txocorrencia, nooperador, temp_contrat.id_pessoa
                      from historico_contr_pessoa@unicoo_homologa hcp,
                           area_de_acao@unicoo_homologa ada,
                           gp.unimed gpu
                     where hcp.nrcontrato = ada.nrcontrato_custo
                       and gpu.cd_unimed  = ada.cdareaacao
                       and gpu.cod_emitente = temp_contrat.cd_contratante
                    order by dtocorrencia)
        loop

           if v_texto_anexo = ' ' then
              v_texto_anexo    := 'Data:' || hcu.dtocorrencia || ' Operador: ' || trim(hcu.nooperador) || ' - ' || trim(hcu.txocorrencia);
              v_pessoa_uni     := hcu.id_pessoa;
              v_primeira_data  := hcu.dtocorrencia;
           else
              v_texto_anexo    := v_texto_anexo || '<br><br>' || 'Data:' || hcu.dtocorrencia || ' Operador: ' || trim(hcu.nooperador) || ' - ' || trim(hcu.txocorrencia);
           end if;

        end loop;

        --se existe algum historico de ocorrencia do contrato da unimed
        if v_texto_anexo <> ' ' then

           v_texto_anexo := '<font face="Courier New" color="red"><b>=============================================================================================================================================================<br>' ||
                            '                                                            HISTORICO DAS OCORRENCIAS DA UNIMED                                                            <br>' ||
                            '                                                            -----------------------------------                                                            <br>' ||
                            '=============================================================================================================================================================<br>' ||
                            ' </b><br></font>' ||
                            '<font face="Courier New" color="black">' ||
                            v_texto_anexo || '</b></font>';

           insert into anexo(nom_anexo,
                             cdd_anexo,
                             dat_ult_atualiz,
                             blb_anexo,
                             cdn_tip_anexo,
                             progress_recid)
                     --values ('Historico_Ocorrencias.ureaj',
                     values ('Historico_Ocorrencias.html',
                             gp.seq_anexo.nextval,
                             v_primeira_data,
                             utl_raw.cast_to_raw(v_texto_anexo),
                             PTIPO_ANEXO_OUTROS,
                             gp.anexo_seq.nextval);

           insert into gp.anexo_pessoa (cdd_anexo,
                                        nom_anexo,
                                        idi_pessoa,
                                        des_dir_arq,
                                        hra_ult_atualiz,
                                        cod_usuar_ult_atualiz,
                                        cod_livre_1,
                                        cod_livre_2,
                                        cod_livre_3,
                                        cod_livre_4,
                                        cod_livre_5,
                                        progress_recid)
              values(gp.seq_anexo.currval,
                     ' ',
                     v_pessoa_uni,
                     ' ',
                     ' ',
                     ' ',
                     ' ',
                     ' ',
                     ' ',
                     ' ',
                     ' ',
                     gp.anexo_pessoa_seq.nextval);
        end if;


      end if;

    end loop;
    --commit;

    p_gera_falha_cliente;

  end p_migra_contratante;

  procedure p_valida_depara_familia is

  begin
    delete from tm_verifica_depara_familia;

    for x in (select distinct u.nrcontrato,
                              u.nrfamilia,
                              cd_modalidade,
                              cd_plano,
                              cd_tipo_plano,
                              u.cdcontrato
                from (select nrcontrato, nrfamilia, count(*)
                        from (select distinct u.nrcontrato,
                                              u.nrfamilia,
                                              mp.cd_modalidade,
                                              mp.cd_plano,
                                              mp.cd_tipo_plano
                                from usuario u, v_plano_padrao mp
                               where --u.nrcontrato = mp. --.nrcontrato
                                 /*and*/ u.cdcontrato = mp.cdcontrato
                                 and u.tpplano = mp.tpplano
                                 and u.nrfamilia <> 0 /*
                                                        and u.nrcontrato = 7046
                                                        and u.nrfamilia = 32*/
                              )
                       group by nrcontrato, nrfamilia
                      having count(*) > 1
                       order by 1, 2) a,
                     usuario u,
                     v_plano_padrao mp
               where --u.nrcontrato = mp.nrcontrato
                 /*and*/ u.cdcontrato = mp.cdcontrato
                 and u.tpplano = mp.tpplano
                 and u.nrfamilia <> 0
                 and a.nrcontrato = u.nrcontrato
                 and a.nrfamilia = u.nrfamilia
               order by 1, 2, 3) loop
      insert into tm_verifica_depara_familia values x;

    end loop;
    commit;

  end p_valida_depara_familia;

  procedure apagar_termos_e_benefs_erro(pnrregistro number,
                                        pnrcontrato char,
                                        pnrseqcial_bnfciar number) is
  begin
    --apagar registros de contratos com erro (ou marcados para reprocessar) para serem recriados
    for x in (select ip.num_seqcial_propost,
                     ip.nr_contrato_antigo,
                     ip.cd_modalidade,
                     ip.num_livre_10 nr_proposta
                from import_propost ip
               where ip.u##ind_sit_import in ('RE','ER','PE','DEPARA','CONTRAT','CORIGEM')
                 and (ip.num_livre_2 = pnrregistro or pnrregistro is null)
                 and (lpad(ip.num_livre_3,4,'0') = pnrcontrato or pnrcontrato is null)
               ) loop

      p_insere_log('PROPOSTA_TOTVS',
                   'apagar_termos_e_benefs_erro',
                   'VAI APAGAR PROPOSTA NO TOTVS E NAS TEMPORARIAS',
                   0, --pnrsequencial_origem
                   0, --pcdidentificador
                   'MODALIDADE;PROPOSTA: ',
                   x.cd_modalidade || ';' || x.nr_proposta); --complemento

      if x.cd_modalidade is not null then
        apaga_proposta_totvs(x.cd_modalidade, x.nr_proposta);
      end if;
      apaga_proposta_import(x.nr_contrato_antigo, x.num_seqcial_propost,'S');
      p_commit;
    end loop;

    --apagar registros de beneficiarios com erro para serem reprocessados
    for x in (select ib.num_seqcial_bnfciar
                from import_bnfciar ib, gp.import_propost ip
               where ib.u##ind_sit_import in ('RE','ER','PE','DEPARA')
                 and ib.nr_contrato_antigo = ip.nr_contrato_antigo
                 and (ip.num_livre_2 = pnrregistro or pnrregistro is null)
                 and (lpad(ip.num_livre_3,4,'0') = pnrcontrato or pnrcontrato is null)
                 and (ib.num_seqcial_bnfciar = pnrseqcial_bnfciar or pnrseqcial_bnfciar is null)
               ) loop
        apaga_beneficiario(x.num_seqcial_bnfciar);
        p_commit;
    end loop;
    commit;
  end apagar_termos_e_benefs_erro;

  --primeiro metodo a ser chamado para carregar IMPORT_BNFCIAR com a referencia aos beneficiarios
  --do Unicoo a serem migrados para o TOTVS
  procedure p_carga_beneficiarios(papenas_contratos_ativos char,
                                  pnrregistro number,
                                  pnrcontrato char,
                                  pnrseqcial_bnfciar number) is
    vapenas_contratos_ativos varchar2(1);
    vnrregistro number;
    vnrcontrato varchar2(4);
    vnrseqcial_bnfciar number;
    hash_atual varchar2(100);

  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    if papenas_contratos_ativos <> 'S' and papenas_contratos_ativos <> 'N' then
      vapenas_contratos_ativos := 'N';
    else
      vapenas_contratos_ativos := papenas_contratos_ativos;
    end if;
    if pnrregistro = 0 then
      vnrregistro := null;
    else
      vnrregistro := pnrregistro;
    end if;
    if pnrcontrato = 0 then
      vnrcontrato := null;
    else
      vnrcontrato := lpad(pnrcontrato,4,'0');
    end if;
    if pnrseqcial_bnfciar = 0 then
      vnrseqcial_bnfciar := null;
    else
      vnrseqcial_bnfciar := pnrseqcial_bnfciar;
    end if;
    if vnrseqcial_bnfciar is not null then
      begin
        select nrregistro, nrcontrato into vnrregistro, vnrcontrato
          from usuario u where u.nrsequencial_usuario = vnrseqcial_bnfciar;
      exception
        when others then
          null;
      end;
    end if;

    p_insere_log('BENEFICIARIO',
                 'p_carga_beneficiarios',
                 'INICIO',
                 0, --pnrsequencial_origem
                 0, --pcdidentificador
                 'PARAMETROS: SOMENTE_ATIVOS; NRREGISTRO; NRCONTRATO; NRSEQUENCIAL_USUARIO',
                 vapenas_contratos_ativos || '; ' || vnrregistro || '; ' ||
                 vnrcontrato || '; ' || vnrseqcial_bnfciar); --complemento

    --se parametros foram informados, indica que deseja-se reprocessar a proposta/beneficiario,
    --independente do seu status no TOTVS
    if vnrregistro is not null
    or vnrcontrato is not null then
      for x in (select ip.num_seqcial_control from gp.import_propost ip
                                             where ip.num_livre_2 = vnrregistro
                                               and lpad(ip.num_livre_3,4,'0') = vnrcontrato) loop
        update gp.import_propost ip set ip.u##ind_sit_import = 'RE', ip.ind_sit_import = 'RE'
               where ip.num_seqcial_control = x.num_seqcial_control;
        delete from gp.erro_process_import e where e.num_seqcial_control = x.num_seqcial_control;
      end loop;
    end if;
    if vnrseqcial_bnfciar is not null
    then
      for x in (select ib.num_seqcial_control from gp.import_bnfciar ib
                                             where ib.num_seqcial_bnfciar = vnrseqcial_bnfciar) loop
        update gp.import_bnfciar ib set ib.u##ind_sit_import = 'RE', ib.ind_sit_import = 'RE'
               where ib.num_seqcial_control = x.num_seqcial_control;
        delete from gp.erro_process_import e where e.num_seqcial_control = x.num_seqcial_control;
      end loop;
    end if;

    p_insere_log('BENEFICIARIO',
                 'p_carga_beneficiarios',
                 'INICIO',
                 0, --pnrsequencial_origem
                 0, --pcdidentificador
                 'VAI APAGAR ERROS DE PROCESSOS ANTERIORES',
                 null); --complemento

    apagar_termos_e_benefs_erro(vnrregistro,
                                vnrcontrato,
                                vnrseqcial_bnfciar);

/*    p_insere_log('BENEFICIARIO',
                 'p_carga_beneficiarios',
                 'ANTES DE BUSCAR ATUALIZACOES EM CRITERIOS_DO_USUARIO',
                 0, --pnrsequencial_origem
                 0, --pcdidentificador
                 null,
                 null); --complemento

    p_carga_estrutura_modulos;
*/
    p_insere_log('BENEFICIARIO',
                 'p_carga_beneficiarios',
                 'ANTES DE PROCURAR POR BENEFICIARIOS ALTERADOS NO UNICOO',
                 0, --pnrsequencial_origem
                 0, --pcdidentificador
                 null,
                 null); --complemento

    --varrer todos os beneficiarios ativos do Unicoo ja mapeados na temporaria.
    --ignora inativos, pois nao podem ser alterados.
    --se algum tiver hash diferente, apagar temporarias relacionadas e setar
    --IMPORT_BNFCIAR em status 'GA', indicando que esta gerenciando uma ATUALIZACAO

    DBMS_OUTPUT.PUT_LINE(vnrregistro || ';' || vnrcontrato || ';' || vnrseqcial_bnfciar);

    for x in (select u.nrsequencial_usuario, ib.progress_recid, ib.cod_livre_8, ib.num_seqcial_control
                from usuario u,
                     gp.import_bnfciar ib
               where u.nrsequencial_usuario = ib.num_seqcial_bnfciar
                 and (u.dtexclusao is null or u.dtexclusao > sysdate)
                 and (u.nrregistro = vnrregistro or vnrregistro is null)
                 and (u.nrcontrato = vnrcontrato or vnrcontrato is null)
                 and (u.nrsequencial_usuario = vnrseqcial_bnfciar or vnrseqcial_bnfciar is null)) loop

            DBMS_OUTPUT.PUT_LINE('ENTROU NO LOOP!' || x.nrsequencial_usuario);

            hash_atual := gerar_hash_usuario_unicoo(x.nrsequencial_usuario);

            p_insere_log('BENEFICIARIO',
                         'p_carga_beneficiarios',
                         'COMPARAR HASH',
                         x.nrsequencial_usuario, --pnrsequencial_origem
                         0, --pcdidentificador
                         'ANTERIOR; ATUAL',
                         x.cod_livre_8 || '; ' || hash_atual); --complemento

            if hash_atual <> x.cod_livre_8 then
              p_insere_log('BENEFICIARIO',
                           'p_carga_beneficiarios',
                           'APAGAR BENEFICIARIO NO TOTVS POIS HASH MUDOU',
                           x.nrsequencial_usuario, --pnrsequencial_origem
                           0, --pcdidentificador
                           'VAI APAGAR BENEFICIARIO NO TOTVS POIS ENCONTROU DIFERENCAS',
                           null); --complemento

              --retirado daqui, levado para o final da atualizacao do beneficiario, quando seta para 'RC'
              --apaga_beneficiario_totvs(x.nrsequencial_usuario);

              --setar situacao de 'GE' para 'GA', para diferenciar novas inclusoes das atualizacoes nos controles externos
              update gp.import_bnfciar ib set ib.u##ind_sit_import = 'GA',
                                              ib.ind_sit_import = 'GA'
               where ib.num_seqcial_bnfciar = x.nrsequencial_usuario;
              delete from gp.erro_process_import e where e.num_seqcial_control = x.num_seqcial_control;
             else
                p_insere_log('BENEFICIARIO',
                             'p_carga_beneficiarios',
                             'HASH NAO MUDOU. NADA PARA FAZER',
                             x.nrsequencial_usuario, --pnrsequencial_origem
                             0, --pcdidentificador
                             null,
                             null); --complemento
             end if;
    end loop;

    p_insere_log('BENEFICIARIO',
                 'p_carga_beneficiarios',
                 'ANTES DE PROCURAR POR PROPOSTAS ALTERADAS NO UNICOO',
                 0, --pnrsequencial_origem
                 0, --pcdidentificador
                 null,
                 null); --complemento

    --varrer todos os contratos ativos do Unicoo ja mapeados na temporaria.
    --ignora inativos, pois nao podem ser alterados.
    --se algum tiver hash diferente, apagar temporarias relacionadas e setar
    --IMPORT_PROPOST e IMPORT_BNFCIAR em status 'GA', indicando que esta gerenciando uma ATUALIZACAO
    for x in (select cdp.nrregistro, cdp.nrcontrato, ip.progress_recid,
                     ip.num_seqcial_propost, ip.nr_contrato_antigo, ip.cd_modalidade, ip.num_livre_10 nr_proposta,
                     ip.cod_livre_8, ip.num_seqcial_control
                from contrato_da_pessoa cdp,
                     gp.import_propost ip
               where ip.num_livre_2 = cdp.nrregistro
                 and ip.num_livre_3 = cdp.nrcontrato
                 and (cdp.dtfimcontrato is null or cdp.dtfimcontrato > sysdate)
                 and (cdp.nrregistro = vnrregistro or vnrregistro is null)
                 and (cdp.nrcontrato = vnrcontrato or vnrcontrato is null)) loop

            hash_atual := gerar_hash_contrato_unicoo(x.nrregistro, x.nrcontrato);

            if hash_atual <> x.cod_livre_8 then

              p_insere_log('PROPOSTA',
                           'p_carga_beneficiarios',
                           'APAGAR PROPOSTA NO TOTVS POIS HASH MUDOU',
                           x.num_seqcial_propost, --pnrsequencial_origem
                           0, --pcdidentificador
                           'VAI APAGAR PROPOSTA NO TOTVS POIS ENCONTROU DIFERENCAS',
                           null); --complemento

              --* retirado daqui, levado para o final da atualizacao da proposta, quando sai como 'RC'
              --apaga proposta com todos os relacionamentos, inclusive beneficiarios, para ser recriado
              --apaga_proposta_totvs(x.cd_modalidade, x.nr_proposta);

              --setar situacao de 'GE' para 'GA', para diferenciar novas inclusoes das atualizacoes nos controles externos
              update gp.import_propost ip set ip.u##ind_sit_import = 'GA',
                                              ip.ind_sit_import = 'GA'
               where ip.num_seqcial_propost = x.num_seqcial_propost;
              delete from gp.erro_process_import e where e.num_seqcial_control = x.num_seqcial_control;

              for y in (select ib.num_seqcial_control from gp.import_bnfciar ib
                         where ib.nr_contrato_antigo = x.nr_contrato_antigo) loop
                update gp.import_bnfciar ib set ib.u##ind_sit_import = 'GA',
                                                ib.ind_sit_import = 'GA'
                 where ib.num_seqcial_control = y.num_seqcial_control;
                delete from gp.erro_process_import e where e.num_seqcial_control = y.num_seqcial_control;
              end loop;
             else
                p_insere_log('PROPOSTA',
                             'p_carga_beneficiarios',
                             'HASH PROPOSTA NAO MUDOU. NADA PARA FAZER',
                             x.num_seqcial_propost, --pnrsequencial_origem
                             0, --pcdidentificador
                             null,
                             null); --complemento
             end if;
    end loop;

    p_insere_log('BENEFICIARIO',
                 'p_carga_beneficiarios',
                 'ANTES DE ATUALIZAR T_V_PLANO_PADRAO (DEPARAS)',
                 0, --pnrsequencial_origem
                 0, --pcdidentificador
                 null,
                 null); --complemento

    --garantir que a temporaria T_V_PLANO_PADRAO esteja atualizada com os DEPARAs da Estrutura de Produto
    p_carga_t_v_plano_padrao;

    DBMS_OUTPUT.PUT_LINE( 'VAI CRIAR BENEFS GE' );

    if vapenas_contratos_ativos = 'S' then
      for cc in (select cdp.nrregistro, cdp.nrcontrato
                   from contrato_da_pessoa cdp
                  where (vnrregistro is null or vnrregistro = cdp.nrregistro)
                    AND (vnrcontrato is null or vnrcontrato = cdp.nrcontrato)
                    and exists (select 1
                           from usuario us
                          where cdp.nrregistro = us.nrregistro
                            and cdp.nrcontrato = us.nrcontrato
                            and (vnrseqcial_bnfciar is null or vnrseqcial_bnfciar = us.nrsequencial_usuario)
                            and (us.dtexclusao is null or
                                us.dtexclusao > trunc(sysdate) and
                                us.nrfamilia <> 0))
                  order by 2) loop
        p_gera_beneficiario(cc.nrregistro, cc.nrcontrato, null);
      end loop;

    else
      p_gera_beneficiario(vNRREGISTRO, vNRCONTRATO, vNRSEQCIAL_BNFCIAR);
    end if;
    DBMS_OUTPUT.PUT_LINE( 'TERMINOU DE CRIAR BENEFS GE' );
    commit;
  end p_carga_beneficiarios;

  procedure p_gera_proposta_r2 (pnrregistro number,
                                pnrcontrato char,
                                pnrseqcial_bnfciar number) is
    vnrproposta_prox number;
    vnrproposta_ip_prox number;
    --aotem_historico varchar2(1);
    v_complemento varchar2(10000);
    --hash_atual varchar2(100);
    vnrregistro number;
    vnrcontrato varchar2(4);
    vnrseqcial_bnfciar number;
  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;
    if pnrregistro = 0 then
      vnrregistro := null;
    else
      vnrregistro := pnrregistro;
    end if;
    if pnrcontrato = 0 then
      vnrcontrato := null;
    else
      vnrcontrato := lpad(pnrcontrato,4,'0');
    end if;
    if pnrseqcial_bnfciar = 0 then
      vnrseqcial_bnfciar := null;
    else
      vnrseqcial_bnfciar := pnrseqcial_bnfciar;
    end if;
    if vnrseqcial_bnfciar is not null then
      begin
        select nrregistro, nrcontrato into vnrregistro, vnrcontrato
          from usuario u where u.nrsequencial_usuario = vnrseqcial_bnfciar;
      exception
        when others then
          null;
      end;
    end if;

    --carga inicial das temporarias de lotacao
    p_migra_lotacao;

    /* REINICIAR AS SEQUENCES DE CADA MODALIDADE, POIS PODEM TER SIDO CRIADAS PROPOSTAS MANUALMENTE NO SISTEMA,
       GERANDO CONFLITO NA NUMERACAO */
    for m in (select cd_modalidade from gp.modalid) loop

      select nvl(max(p.nr_proposta), 0) + 1
        into vnrproposta_prox
        from gp.propost p
       where p.cd_modalidade = m.cd_modalidade;

      select nvl(max(ip.num_livre_10), 0) + 1
        into vnrproposta_ip_prox
        from gp.import_propost ip
       where ip.cd_modalidade = m.cd_modalidade;

      if vnrproposta_ip_prox > vnrproposta_prox then
        vnrproposta_prox := vnrproposta_ip_prox;
      end if;

      for i in (select 'DROP SEQUENCE SEQ_MODALIDADE_' || m.cd_modalidade comando, 1 ordem from dual
                union
                select 'CREATE SEQUENCE SEQ_MODALIDADE_' || m.cd_modalidade || ' start with ' ||
                       vnrproposta_prox comando, 2 ordem from dual
                 order by ordem) loop
        begin
          execute immediate i.comando;
        exception
          when others then
            null;
        end;
      end loop;
    end loop;

    DBMS_OUTPUT.PUT_LINE( 'ANTES do LOOP CUSUARIO_2 PARA CRIAR AS PROPOSTAS' );

    for ccu in
      (select b.num_seqcial_bnfciar,
             b.nr_contrato_antigo,
             b.num_seqcial_control,
             b.ind_sit_import sit_benef,
             ip.ind_sit_import sit_propost
        from import_bnfciar b, import_propost ip
       where b.u##ind_sit_import in ('GE','GA','EV') --GE: gerando novo; GA: gerenciando alteracao; EV: benef. eventual (criar a proposta)
         and ip.nr_contrato_antigo(+) = b.nr_contrato_antigo
         and (b.num_seqcial_bnfciar = vnrseqcial_bnfciar or vnrseqcial_bnfciar is null)
         and (ip.num_livre_2 = vnrregistro or vnrregistro is null)
         and (lpad(ip.num_livre_3,4,'0') = vnrcontrato or vnrcontrato is null)
       order by decode(b.log_respons, 1, 1, 0, 5, 5)) loop --loop de beneficiarios em situacao GE, processando antes os titulares

      begin
        dbms_output.put_line('P1 (num_seqcial_bnfciar):' || ccu.num_seqcial_bnfciar);

        p_insere_log('BENEFICIARIO_PROPOSTA',
                     'p_gera_proposta_r2',
                     'VARRENDO BENEFICIARIOS GE',
                     ccu.num_seqcial_bnfciar, --pnrsequencial_origem
                     0, --pcdidentificador
                     'CHECAR SE JA EXISTE PROPOSTA ADEQUADA OU SE PRECISARA CRIAR NOVA PROPOSTA PARA ESSE BENEFICIARIO',
                     null); --complemento

        for ccp in c_ctrl_propost(ccu.num_seqcial_bnfciar) loop

          v_complemento := ccp.nrpessoa_paga || ';' ||
                           ccp.in_tipo_pessoa || ';' ||
                           ccp.nrregistro || ';' ||
                           ccp.nrcontrato || ';' ||
                           ccp.nrfamilia || ';' ||
                           ccp.cdlotacao || ';' ||
                           ccp.cdlotacao_benef || ';' ||
                           ccp.cdcontrato || ';' ||
                           ccp.tpplano || ';' ||
                           ccp.tpusu_contrato || ';' ||
                           ccp.cdcontratacao_ans || ';' ||
                           ccp.tpfatura || ';' ||
                           ccp.cd_modalidade || ';' ||
                           ccp.cd_plano || ';' ||
                           ccp.cd_tipo_plano || ';' ||
                           ccp.ao_contr_orig_resp_financ;

          p_insere_log('BENEFICIARIO_PROPOSTA',
                       'p_gera_proposta_r2',
                       'VARRENDO BENEFICIARIOS GE P2',
                       ccu.num_seqcial_bnfciar, --pnrsequencial_origem
                       0, --pcdidentificador
                       'NRPESSOA_PAGA;IN_TIPO_PESSOA;NRREGISTRO;NRCONTRATO;NRFAMILIA;CDLOTACAO;CDLOTACAO_BENEF;' ||
                       'CDCONTRATO;TPPLANO;TPUSU_CONTRATO;CDCONTRATACAO_ANS;TPFATURA;CD_MODALIDADE;CD_PLANO;CD_TIPO_PLANO;AO_CONTR_ORIG_RESP_FINANC',
                       v_complemento); --complemento

          dbms_output.put_line('P2 (nrcontrato): ' || ccp.nrcontrato);

          --buscar indicador se cobra participacao

          dbms_output.put_line('P2.1 (nrcontrato;nrregistro;cdcontrato;nrfamilia;dtfimcontrato): '
                  || ccp.nrcontrato || ';' || ccp.nrregistro || ';' || ccp.cdcontrato || ';' ||
                               ccp.nrfamilia || ';' || ccp.dtfimcontrato);

          begin
            ccp.cdfator_moderador := pck_unicoogps.fn_fator_benef(ccp.nrcontrato,
                                                                  ccp.nrregistro,
                                                                  ccp.cdcontrato,
                                                                  ccp.nrfamilia,
                                                                  ccp.dtfimcontrato);
          exception
            when others then
              dbms_output.put_line('ERRO10: ' || sqlerrm);
          end;

          --gerar numeracao da proposta - vai manter esse numero ao reprocessar, preservando relacionamentos
          begin
            for i in (select 'SELECT ' || sequence_name || '.NEXTVAL FROM DUAL' comando
                        from user_sequences
                       where sequence_name like 'SEQ_MODALIDADE_' || ccp.cd_modalidade) loop
              execute immediate i.comando
                into vnrproposta;
            end loop;

          end;

          --grava propostas na tabela import_propost
          begin
            dbms_output.put_line('P3');

            --SE AO_CONTR_ORIG_RESP_FINANC ESTIVER INFORMADO, INDICARA QUAL METODO SERA CHAMADO.
            --SE ESTIVER NULO, SEGUE A REGRA ANTERIOR.
            if ccp.ao_contr_orig_resp_financ = 'CONTR_ORIG' then
                DBMS_OUTPUT.PUT_LINE( 'ANTES p_grava_proposta_sem_lotacao - CONTR_ORIG' );
                p_grava_proposta_sem_lotacao(ccp, ccu.nr_contrato_antigo, ccu.sit_propost);
                DBMS_OUTPUT.PUT_LINE( 'DEPOIS p_grava_proposta_sem_lotacao - CONTR_ORIG' );
            else
              if ccp.ao_contr_orig_resp_financ = 'RESP_FINANC' then
                 DBMS_OUTPUT.PUT_LINE( 'ANTES p_grava_proposta_com_lotacao - RESP_FINANC' );
                 p_grava_proposta_com_lotacao(ccp, ccu.nr_contrato_antigo, ccu.sit_propost);
                 DBMS_OUTPUT.PUT_LINE( 'DEPOIS p_grava_proposta_com_lotacao - RESP_FINANC' );
              else
                if (pAOMIGRA_COM_LOTACAO = 'N'
                or  ccp.in_tipo_pessoa   = 'F' --modalid.in_tipo_pessoa - LOTAÇÃO somente se aplica para MODALIDADE JURÍDICA
                or  ccp.cdorigem is not null)  --CONTRATOS DE REPASSE DEVEM ENTRAR NA REGRA ANTIGA
                then
                    DBMS_OUTPUT.PUT_LINE( 'ANTES p_grava_proposta_sem_lotacao' );
                    p_grava_proposta_sem_lotacao(ccp, ccu.nr_contrato_antigo, ccu.sit_propost);
                    DBMS_OUTPUT.PUT_LINE( 'DEPOIS p_grava_proposta_sem_lotacao' );
                else
                   DBMS_OUTPUT.PUT_LINE( 'ANTES p_grava_proposta_com_lotacao' );
                   p_grava_proposta_com_lotacao(ccp, ccu.nr_contrato_antigo, ccu.sit_propost);
                   DBMS_OUTPUT.PUT_LINE( 'DEPOIS p_grava_proposta_com_lotacao' );
                end if;
              end if;
            end if;
          end;

          if ccu.sit_benef <> 'EV' then
            DBMS_OUTPUT.PUT_LINE( 'ANTES p_atualiza_beneficiario_g' );
            p_atualiza_beneficiario_g(ccu.num_seqcial_bnfciar);
            DBMS_OUTPUT.PUT_LINE( 'DEPOIS p_atualiza_beneficiario_g' );
          end if;

          --terminou de atualizar dados do beneficiario.
          --se hash nao mudou, voltar para situacao 'IT', e TOTVS nao sera afetado;
          --se hash mudou, apagar no TOTVS e manter em situacao 'RC' para ser recriado;

/*          hash_atual := gerar_hash_import_bnfciar(ccu.num_seqcial_bnfciar);

          p_insere_log('BENEFICIARIO',
                       'p_gera_proposta_r2',
                       'COMPARAR HASH DO BENEFICIARIO',
                       ccu.num_seqcial_bnfciar, --pnrsequencial_origem
                       0, --pcdidentificador
                       'HASH ANTERIOR; NOVO: ',
                       ccu.cod_livre_9 || ';' || hash_atual); --complemento

          if hash_atual = ccu.cod_livre_9 then

            p_insere_log('BENEFICIARIO',
                         'p_gera_proposta_r2',
                         'BENEFICIARIO NAO MUDOU',
                         ccu.num_seqcial_bnfciar, --pnrsequencial_origem
                         0, --pcdidentificador
                         'VAI VOLTAR PARA SITUACAO IT',
                         null); --complemento
                         */
            /* alex 14/02/19 - descomentar isso!!!
            update gp.import_bnfciar i
               set ind_sit_import = 'IT', u##ind_sit_import = 'IT'
             where i.num_seqcial_bnfciar = ccu.num_seqcial_bnfciar;*/
/*          else
            p_insere_log('BENEFICIARIO',
                         'p_gera_proposta_r2',
                         'APAGAR BENEFICIARIO NO TOTVS POIS HASH MUDOU',
                         ccu.num_seqcial_bnfciar, --pnrsequencial_origem
                         0, --pcdidentificador
                         'VAI APAGAR NO TOTVS POIS ENCONTROU DIFERENCAS',
                         null); --complemento
*/
            /*alex 14/02/19 - descomentar isso!!!
            --gravar hash mais atual
            update gp.import_bnfciar ib
               set ib.cod_livre_9 = hash_atual
             where ib.num_seqcial_bnfciar = ccu.num_seqcial_bnfciar;

            apaga_beneficiario_totvs(ccu.num_seqcial_bnfciar);*/
--          end if;

/*          --se existir historico desse beneficiario, checar se houve mudanca.
          --se nao houve, restaurar registro.
          DBMS_OUTPUT.PUT_LINE('VERIFICANDO SE BENEFICIARIO POSSUI HISTORICO...');
          begin
            select 'S' into aotem_historico
              from import_bnfciar_hist ibh where ibh.num_seqcial_bnfciar = ccu.num_seqcial_bnfciar;
          exception
            when no_data_found then
              aotem_historico := 'N';
          end;

          DBMS_OUTPUT.PUT_LINE('POSSUI HISTORICO? ' || aotem_historico);

          p_insere_log('BENEFICIARIO',
                       'FINALIZANDO ATUALIZACAO TEMPORARIAS',
                       ccu.num_seqcial_bnfciar, --pnrsequencial_origem
                       0, --pcdidentificador
                       'BENEFICIARIO POSSUI HISTORICO PARA COMPARAR? ' || aotem_historico,
                       null); --complemento

          if aotem_historico = 'S' then
            --checar se houve alguma mudanca nas temporarias
            if f_import_bnfciar_hist_iguais(ccu.num_seqcial_bnfciar) = 'S' then
              dbms_output.put_line('EXISTE HISTORICO MAS NADA MUDOU. RESTAURANDO TEMPORARIAS NUM_SEQCIAL_BNFCIAR: ' || ccu.num_seqcial_bnfciar);
              -- se nada mudou, restaurar o registro conforme historico, para que nao seja reprocessado no progress

              p_insere_log('BENEFICIARIO',
                           'VAI APAGAR IMPORT_BNFCIAR E RESTAURAR - SEM MUDANCAS',
                           ccu.num_seqcial_bnfciar, --pnrsequencial_origem
                           0, --pcdidentificador
                           null,
                           null); --complemento

              apaga_beneficiario_import(ccu.num_seqcial_bnfciar);
              restaurar_import_bnfciar_hist(ccu.num_seqcial_bnfciar);
            else
              -- apagar fisicamente beneficiario e relacionamentos no TOTVS, pois sera recriado no cg0310v.p (progress)
              dbms_output.put_line('EXISTE HISTORICO E TEVE MUDANCA NA ORIGEM. APAGANDO NO TOTVS PARA RECRIAR! NUM_SEQCIAL_BNFCIAR: ' || ccu.num_seqcial_bnfciar);

              p_insere_log('BENEFICIARIO',
                           'APAGAR NO TOTVS',
                           ccu.num_seqcial_bnfciar, --pnrsequencial_origem
                           0, --pcdidentificador
                           'VAI APAGAR NO TOTVS POIS ENCONTROU DIFERENCAS',
                           null); --complemento
              apaga_beneficiario_totvs(ccu.num_seqcial_bnfciar);
            end if;

            p_insere_log('BENEFICIARIO',
                         'APAGANDO HISTORICO IMPORT_BNFCIAR(SAIDA)',
                         ccu.num_seqcial_bnfciar, --pnrsequencial_origem
                         0, --pcdidentificador
                         'APAGANDO TABELAS DE HISTORICO DO BENEFICIARIO',
                         null); --complemento

            \*delete from import_bnfciar_hist ibh where ibh.num_seqcial_bnfciar = ccu.num_seqcial_bnfciar;
            delete from import_modul_bnfciar_hist imbh where imbh.num_seqcial_bnfciar = ccu.num_seqcial_bnfciar;
            delete from import_negociac_bnfciar_hist inbh where inbh.num_seqcial_bnfciar = ccu.num_seqcial_bnfciar;
            delete from import_atendim_bnfciar_hist iabh where iabh.num_seqcial_bnfciar = ccu.num_seqcial_bnfciar;*\
          end if;
*/
          p_commit;
        end loop;

      exception
        when others then
          DBMS_OUTPUT.PUT_LINE( '#################VAI GRAVAR FALHA' );
          p_insere_falha(ccu.num_seqcial_control,
                         'BE',
                         'OCORREU FALHA AO GERAR PROPOSTA PARA O BENEF',
                         'NRSEQUENCIAL_USUARIO: ' || ccu.num_seqcial_bnfciar || '. Mensagem tecnica: ' || sqlerrm,
                         ccu.num_seqcial_bnfciar);

          update gp.import_bnfciar i
             set ind_sit_import = 'ER', u##ind_sit_import = 'ER'
           where i.num_seqcial_bnfciar = ccu.num_seqcial_bnfciar;
          commit;

--TEMPORARIO APENAS PARA PARAR QUANDO O ERRO OCORRER!!!
/*      raise_application_error(-20001,
                              'ERRO AO CRIAR PROPOSTA BENEFICIARIO!!!: ' ||
                              sqlerrm);
*/
      end;
      p_commit;
    end loop;
    commit;

    if pAOMIGRA_COM_LOTACAO = 'N'
    then p_grava_benef_aposdem_sem_lot;
    end if;
    commit;
  end p_gera_proposta_r2;

  /**
   * Carga inicial dos beneficiários, em situação 'GE'.
   * Essa etapa ocorre antes da criação das PROPOSTAS em que serão associados.
   * 04/02/2019: tratamento para buscar tambem alteracoes do UNICOO (manter TOTVS sincronizado - Jenkins)
   */
  procedure p_gera_beneficiario(pnrregistro number, pnrcontrato number, pnrseqcial_bnfciar number) is
    vexistedepara varchar2(1);
    vcdsituacao   varchar2(10);
    --hash_import_benef varchar2(100);
  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    p_insere_log('BENEFICIARIO',
                 'p_gera_beneficiario',
                 'INCLUSAO GE',
                 0, --pnrsequencial_origem
                 0, --pcdidentificador
                 'INICIO DE P_GERA_BENEFICIARIO (LER DO UNICOO E CRIAR EM IMPORT_BNFCIAR COMO GE)',
                 null); --complemento

    for rbeneficiario in (select u.nrsequencial_usuario, -- nrsequencial_usuario,
                                 trim(replace(p.nopessoa, '  ', ' ')) nopessoa, -- nobeneficiario,
                                 u.cdcco || u.nrdigito_cco cdcco, --nrcco,
                                 to_number(u.nrcontrato ||
                                           lpad(u.nrfamilia, 6, '0') ||
                                           u.tpusuario || u.nrdigitoct) carteira_antiga,
                                 u.nrcontrato,
                                 u.nrregistro,
                                 u.nrfamilia,
                                 u.tpplano,
                                 0 cdfator_moderador,
                                 u.nrregistro_usuario,
                                 u.cdcontrato,
                                 (select to_number(u2.nrcontrato ||
                                                   lpad(u2.nrfamilia, 6, '0') ||
                                                   u2.tpusuario ||
                                                   u2.nrdigitoct)
                                    from usuario u2
                                   where u2.nrregistro = u.nrregistro
                                     and u2.nrcontrato = u.nrcontrato
                                     and u2.nrfamilia = u.nrfamilia
                                     and u2.tpusuario = 00) cdcarteiraantigaresp,

                                 case
                                   when u.tpusuario = 0 then
                                    1
                                   else
                                    0
                                 end log_respons /*,

                                 (select ib.nr_contrato_antigo
                                    from import_bnfciar ib
                                   where ib.num_seqcial_bnfciar = u.nrsequencial_usuario
                                     and ib.u##ind_sit_import = 'IT') nr_contrato_antigo,

                                 (select ib.num_livre_6 --cd_usuario
                                    from import_bnfciar ib
                                   where ib.num_seqcial_bnfciar = u.nrsequencial_usuario
                                     and ib.u##ind_sit_import = 'IT') cd_usuario,

                                 nvl((select ib.u##ind_sit_import
                                    from import_bnfciar ib
                                   where ib.num_seqcial_bnfciar = u.nrsequencial_usuario),' ') aosit_ja_existe*/

                            from usuario u, pessoa p, familia f, contrato_da_pessoa cdp
                           where p.nrregistro = u.nrregistro_usuario
                             and u.nrregistro = f.nrregistro
                             and u.nrcontrato = f.nrcontrato
                             and u.nrfamilia = f.nrfamilia
                             and cdp.nrregistro = u.nrregistro
                             and cdp.nrcontrato = u.nrcontrato
                             /*18/01/2019 - logica comentada para atender issue NIG-1463 - migrar contratos
                                            mesmo que tenham apenas beneficiario eventual*/
                             /*and(   u.nrfamilia <> 0 -- nrfamilia = 0 indica BENEFICIÁRIO EVENTUAL

                             -- TESTE IMPLEMENTADO EM 18/04/2018 - ALEX. VALIDAR AO CRIAR AMBIENTE HML-PROD
                             -- TRATAMENTO PARA ATENDER NECESSIDADE DE NOVA IGUACU, PARA MIGRAR CONTRATOS DE MEDICINA OCUPACIONAL
                                 or (u.nrcontrato >= 5000 and u.nrcontrato <= 5999))*/ -- faixa de contratos de MEDICINA OCUPACIONAL

                             and (u.nrregistro = pnrregistro or pnrregistro is null)
                             and (u.nrcontrato = pnrcontrato or pnrcontrato is null)
                             and (u.nrsequencial_usuario = pnrseqcial_bnfciar or pnrseqcial_bnfciar is null)
                             and (exists (select 1
                                           from gp.pessoa_fisica pf
                                          where pf.id_pessoa = p.nrregistro)
                                  or u.nrfamilia = 0) -- BENEFICIARIO EVENTUAL
                             and not exists
                             (select 1 from temp_plano_nao_migrar t
                                      where t.cdcontrato = cdp.cdcontrato_padrao)
                             and not exists
                             (select 1 from temp_contrato_nao_migrar t
                                      where t.nrcontrato = u.nrcontrato)

                             --se ja existe como IT, ver se teve mudanças;
                             --se ja existe com outra situacao, nao fazer nada;
                             --se nao existe, tratar como novo;
                             and not exists
                           (select 1
                                    from import_bnfciar ib
                                   where ib.num_seqcial_bnfciar = u.nrsequencial_usuario
                                     /*and ib.u##ind_sit_import <> 'IT'*/)
                   ) loop

/*      if  rbeneficiario.cd_usuario is not null
      and rbeneficiario.cd_usuario > 0 then

        DBMS_OUTPUT.PUT_LINE('Beneficiario ja existe. Validar se sofreu alteracao no Unicoo. NRSEQUENCIAL_USUARIO: '
        || rbeneficiario.nrsequencial_usuario);
*/
        -- gravar tabelas relacionadas ao beneficiario no historico;
        -- eliminar temporarias para o processo seguir como se fosse a primeira inclusao;
        -- ao final, checar se algo mudou nas temporarias:
        -- Sim?
        --   Eliminar registros correspondentes no TOTVS e deixar registro em situacao 'RC' para o progress recriar;
        -- Nao?
        --   restaurar e apagar os historicos;

        --esse hash sera gravado em campo reserva de import_bnfciar e sua situacao alterada para 'GE'.
        --assim, seus dados serao atualizados, e ao final, se o hash mudar, sera recriado no TOTVS.
        --se o hash estiver igual, nada sera reprocessado.
/*        hash_import_benef := gerar_hash_import_bnfciar(rbeneficiario.nrsequencial_usuario);

        p_insere_log('BENEFICIARIO',
                     'p_gera_beneficiario',
                     'GERAR HASH IMPORT_BNFCIAR',
                     rbeneficiario.nrsequencial_usuario, --pnrsequencial_origem
                     rbeneficiario.carteira_antiga, --pcdidentificador
                     'BENEFICIARIO JA EXISTE EM IMPORT_BNFCIAR COMO IT. HASH PARA COMPARAR COM SITUACAO ATUAL: ',
                     hash_import_benef); --complemento
*/
        /* alex 14/02/19 teste! descomentar isso!
        update gp.import_bnfciar ib set ib.cod_livre_9 = hash_import_benef,
                                        ib.u##ind_sit_import = 'GE',
                                        ib.ind_sit_import = 'GE'
               where ib.num_seqcial_bnfciar = rbeneficiario.nrsequencial_usuario;

        --apagar tabelas relacionadas para serem recriadas
        delete import_modul_bnfciar
         where num_seqcial_bnfciar = rbeneficiario.nrsequencial_usuario;
        delete import_negociac_bnfciar
         where num_seqcial_bnfciar = rbeneficiario.nrsequencial_usuario;
        delete import_atendim_bnfciar
         where num_seqcial_bnfciar = rbeneficiario.nrsequencial_usuario;
     */
--      else
        p_insere_controle('BE',
                          rbeneficiario.nrsequencial_usuario,
                          rbeneficiario.carteira_antiga);

        vexistedepara := 'S';

        begin
          select 'S'
            into vexistedepara
            from t_v_plano_padrao t
           where t.cdcontrato_usu = rbeneficiario.cdcontrato
             and t.tpplano        = rbeneficiario.tpplano
             and rownum = 1;
        exception
          when no_data_found then
            vexistedepara := 'N';
        end;

        if rbeneficiario.nrfamilia = 0 or rbeneficiario.nrfamilia is null then --eventual
          vcdsituacao := 'EV';
        else
          if vexistedepara = 'S' then
            vcdsituacao := 'GE';
          else
            vcdsituacao := 'DEPARA';
          end if;
        end if;

        begin
          if vexistedepara = 'N' then
            p_insere_falha(vnrcontrolemigracao,
                           'BE',
                           'BENEFICIÁRIO NÃO POSSUI DE/PARA DA ESTRURA DO PRODUTO! NRCONTRATO: ' ||
                           rbeneficiario.nrcontrato || ', PLANO: ' ||
                           rbeneficiario.tpplano || ', CONTRATO PADRAO: ' ||
                           rbeneficiario.cdcontrato,
                           'REALIZAR DEPARA TABELA T_V_PLANO_PADRAO',
                           rbeneficiario.nrsequencial_usuario);
          end if;
        end;

        begin

          DBMS_OUTPUT.PUT_LINE( 'INSERT IMPORT_BNFCIAR... NUM_SEQCIAL' || rbeneficiario.nrregistro_usuario ||
                                 ' cd_carteira_antiga: ' || rbeneficiario.carteira_antiga ||
                                 ' cdcarteiraorigemresponsavel: ' || rbeneficiario.cdcarteiraantigaresp);

          /*if rbeneficiario.aosit_ja_existe <> ' ' then
            p_insere_log('BENEFICIARIO',
                         'p_gera_beneficiario',
                         'BENEFICIARIO JA ESTA NA TEMP SIT: ' || rbeneficiario.aosit_ja_existe,
                         rbeneficiario.nrsequencial_usuario, --pnrsequencial_origem
                         rbeneficiario.carteira_antiga, --pcdidentificador
                         'BENEFICIARIO JA EXISTE NA TEMP. NADA SERA FEITO NESSE ESCOPO.',
                         null); --complemento
          else
            if rbeneficiario.cd_usuario is not null and rbeneficiario.cd_usuario > 0 then
              p_insere_log('BENEFICIARIO',
                           'p_gera_beneficiario',
                           'BENEFICIARIO JA EXISTE E SERA VERIFICADO SE TEVE MUDANCA',
                           rbeneficiario.nrsequencial_usuario, --pnrsequencial_origem
                           rbeneficiario.carteira_antiga, --pcdidentificador
                           'GERAR NOVA COPIA DAS TEMPS PARA COMPARAR NO FINAL SE TEVE MUDANCA',
                           null); --complemento
            else
              p_insere_log('BENEFICIARIO',
                           'p_gera_beneficiario',
                           'BENEFICIARIO EH NOVO',
                           rbeneficiario.nrsequencial_usuario, --pnrsequencial_origem
                           rbeneficiario.carteira_antiga, --pcdidentificador
                           'BENEFICIARIO AINDA NAO EXISTE EM IMPORT_BNFCIAR. SERA TRATADO COMO NOVO',
                           null); --complemento
          end if;*/

            insert into gp.import_bnfciar
              (num_seqcial,
               cd_controle_oper_ans,
               cd_carteira_antiga,
               nom_usuario,
               ind_sit_import, --cdsituacao
               u##ind_sit_import,
               num_seqcial_control, --nrsequencial_controle
               num_seqcial_bnfciar,
               --nom_cartao??
               progress_recid,
               cod_livre_1,
               cdcarteiraorigemresponsavel,
               log_respons,
               num_livre_4) -- nrfamilia do UNICOO
            values
              (rbeneficiario.nrregistro_usuario, --num_seqcial,
               decode(rbeneficiario.cdcco, 0, null, rbeneficiario.cdcco), --cd_controle_oper_ans,
               rbeneficiario.carteira_antiga, --cd_carteira_antiga,
               rbeneficiario.nopessoa, --nom_usuario,
               vcdsituacao, --ind_sit_import,
               vcdsituacao,
               vnrcontrolemigracao, --num_seqcial_control, --nrsequencial_controle
               rbeneficiario.nrsequencial_usuario, --num_seqcial_bnfciar,
               --f_abrevia_nome(rbeneficiario.nopessoa,50),??
               gp.import_bnfciar_seq.nextval,
               rbeneficiario.cdcontrato,
               rbeneficiario.cdcarteiraantigaresp,
               rbeneficiario.log_respons,
               rbeneficiario.nrfamilia);
          --END IF;
        exception
          when others then
            null;
        end;
--      end if;
      p_commit;

    end loop;
    commit;
  end p_gera_beneficiario;

  /*procedure gravar_historico_import_benef(pnum_seqcial_bnfciar number) is
    v_complemento varchar2(10000);
  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    for ib in (select * from gp.import_bnfciar x where x.num_seqcial_bnfciar = pnum_seqcial_bnfciar) loop

        dbms_output.put_line('GRAVANDO IMPORT_BNFCIAR_HIST PARA NUM_SEQCIAL_BNFCIAR: ' || pnum_seqcial_bnfciar);

        v_complemento :=
                 ib.num_seqcial || ';' ||
                 ib.nr_insc_contratante || ';' ||
                 ib.cod_livre_1 || ';' ||
                 ib.cod_livre_2 || ';' ||
                 ib.cod_livre_3 || ';' ||
                 ib.cod_livre_4 || ';' ||
                 ib.cod_livre_5 || ';' ||
                 ib.cod_livre_6 || ';' ||
                 ib.cod_livre_7 || ';' ||
                 ib.cod_livre_8 || ';' ||
                 ib.cod_livre_9 || ';' ||
                 ib.num_livre_1 || ';' ||
                 ib.num_livre_2 || ';' ||
                 ib.num_livre_3 || ';' ||
                 ib.num_livre_4 || ';' ||
                 ib.num_livre_5 || ';' ||
                 ib.num_livre_6 || ';' ||
                 ib.num_livre_7 || ';' ||
                 ib.num_livre_8 || ';' ||
                 ib.num_livre_9 || ';' ||
                 ib.num_livre_10 || ';' ||
                 ib.val_livre_1 || ';' ||
                 ib.val_livre_2 || ';' ||
                 ib.val_livre_3 || ';' ||
                 ib.val_livre_4 || ';' ||
                 ib.val_livre_5 || ';' ||
                 ib.val_livre_6 || ';' ||
                 ib.val_livre_7 || ';' ||
                 ib.val_livre_8 || ';' ||
                 ib.val_livre_9 || ';' ||
                 ib.val_livre_10 || ';' ||
                 ib.log_livre_1 || ';' ||
                 ib.log_livre_2 || ';' ||
                 ib.log_livre_3 || ';' ||
                 ib.log_livre_4 || ';' ||
                 ib.log_livre_5 || ';' ||
                 ib.log_livre_6 || ';' ||
                 ib.log_livre_7 || ';' ||
                 ib.log_livre_8 || ';' ||
                 ib.log_livre_9 || ';' ||
                 ib.log_livre_10 || ';' ||
                 ib.dat_livre_1 || ';' ||
                 ib.dat_livre_2 || ';' ||
                 ib.dat_livre_3 || ';' ||
                 ib.dat_livre_4 || ';' ||
                 ib.dat_livre_5 || ';' ||
                 ib.dat_livre_6 || ';' ||
                 ib.dat_livre_7 || ';' ||
                 ib.dat_livre_8 || ';' ||
                 ib.dat_livre_9 || ';' ||
                 ib.dat_livre_10 || ';' ||
                 ib.cod_usuar_ult_atualiz || ';' ||
                 ib.cd_modalidade || ';' ||
                 ib.nr_proposta || ';' ||
                 ib.log_sexo || ';' ||
                 ib.in_est_civil || ';' ||
                 ib.dt_nascimento || ';' ||
                 ib.cd_grau_parentesco || ';' ||
                 ib.log_respons || ';' ||
                 ib.dt_inclusao_plano || ';' ||
                 ib.dt_exclusao_plano || ';' ||
                 ib.log_carenc || ';' ||
                 ib.cd_funcionario || ';' ||
                 ib.dt_admissao || ';' ||
                 ib.cd_cbo || ';' ||
                 ib.cd_cpf || ';' ||
                 ib.nr_identidade || ';' ||
                 ib.en_rua || ';' ||
                 ib.en_bairro || ';' ||
                 ib.en_cidade || ';' ||
                 ib.en_cep || ';' ||
                 ib.en_uf || ';' ||
                 ib.log_inscr_fatur || ';' ||
                 ib.cd_padrao_cob || ';' ||
                 ib.nom_usuar || ';' ||
                 ib.nom_internac || ';' ||
                 ib.des_espcif_1 || ';' ||
                 ib.des_espcif_2 || ';' ||
                 ib.des_espcif_3 || ';' ||
                 ib.des_espcif_4 || ';' ||
                 ib.nr_cgc_cpf || ';' ||
                 ib.nr_contrato_antigo || ';' ||
                 ib.cd_carteira_antiga || ';' ||
                 ib.in_tipo_pessoa || ';' ||
                 ib.cd_unimed_origem || ';' ||
                 ib.cd_identific_uni_origem || ';' ||
                 ib.cd_plano_origem || ';' ||
                 ib.nom_plano_orig || ';' ||
                 ib.cdcarteiraorigemresponsavel || ';' ||
                 ib.cd_padrao_cob_ant || ';' ||
                 ib.dt_mvto_alteracao || ';' ||
                 ib.dt_falecimento_titular || ';' ||
                 ib.dt_atualizacao_carencia || ';' ||
                 ib.cd_userid_carencia || ';' ||
                 ib.log_bonifi_penalid || ';' ||
                 ib.nr_dias || ';' ||
                 ib.log_cobr_fator_moder || ';' ||
                 ib.dt_inicio_vinculo_unidade || ';' ||
                 ib.aa_ult_fat_period || ';' ||
                 ib.cd_departamento || ';' ||
                 ib.cd_secao || ';' ||
                 ib.cd_setor || ';' ||
                 ib.cd_carteira_trabalho || ';' ||
                 ib.dt_primeira_consulta || ';' ||
                 ib.cd_motivo_cancel || ';' ||
                 ib.cd_funcao || ';' ||
                 ib.cd_pis_pasep || ';' ||
                 ib.cd_cartao_nacional_saude || ';' ||
                 ib.nom_pai || ';' ||
                 ib.in_segmento_assistencial || ';' ||
                 ib.dt_inclusao_origem || ';' ||
                 ib.cd_identific_orig_resp || ';' ||
                 ib.cd_registro_plano || ';' ||
                 ib.nom_email || ';' ||
                 ib.cd_vendedor || ';' ||
                 ib.des_orgao_emissor_ident || ';' ||
                 ib.nom_pais || ';' ||
                 ib.cd_plano_operadora || ';' ||
                 ib.in_via_transferencia || ';' ||
                 ib.des_nacion || ';' ||
                 ib.des_natur_docto || ';' ||
                 ib.uf_emissor_ident || ';' ||
                 ib.dt_emissao_ident || ';' ||
                 ib.nr_telefone1 || ';' ||
                 ib.nr_telefone2 || ';' ||
                 ib.nom_usuario || ';' ||
                 ib.nom_mae || ';' ||
                 ib.cdn_produt_orig || ';' ||
                 ib.cd_controle_oper_ans || ';' ||
                 ib.num_mes_ult_faturam || ';' ||
                 ib.num_matr_func || ';' ||
                 ib.num_seqcial_bnfciar || ';' ||
                 ib.des_histor || ';' ||
                 ib.des_ocor_bnfciar;

        p_insere_log('BENEFICIARIO',
                     'GERAR HISTORICO',
                     ib.num_seqcial_bnfciar, --pnrsequencial_origem
                     ib.cd_carteira_antiga, --pcdidentificador
                     'GRAVANDO IMPORT_BNFCIAR_HIST',
                     v_complemento);

        insert into import_bnfciar_hist
          (
          num_seqcial                 ,
          nr_insc_contratante         ,
          cod_livre_1                 ,
          cod_livre_2                 ,
          cod_livre_3                 ,
          cod_livre_4                 ,
          cod_livre_5                 ,
          cod_livre_6                 ,
          cod_livre_7                 ,
          cod_livre_8                 ,
          cod_livre_9                 ,
          num_livre_1                 ,
          num_livre_2                 ,
          num_livre_3                 ,
          num_livre_4                 ,
          num_livre_5                 ,
          num_livre_6                 ,
          num_livre_7                 ,
          num_livre_8                 ,
          num_livre_9                 ,
          num_livre_10                ,
          val_livre_1                 ,
          val_livre_2                 ,
          val_livre_3                 ,
          val_livre_4                 ,
          val_livre_5                 ,
          val_livre_6                 ,
          val_livre_7                 ,
          val_livre_8                 ,
          val_livre_9                 ,
          val_livre_10                ,
          log_livre_1                 ,
          log_livre_2                 ,
          log_livre_3                 ,
          log_livre_4                 ,
          log_livre_5                 ,
          log_livre_6                 ,
          log_livre_7                 ,
          log_livre_8                 ,
          log_livre_9                 ,
          log_livre_10                ,
          dat_livre_1                 ,
          dat_livre_2                 ,
          dat_livre_3                 ,
          dat_livre_4                 ,
          dat_livre_5                 ,
          dat_livre_6                 ,
          dat_livre_7                 ,
          dat_livre_8                 ,
          dat_livre_9                 ,
          dat_livre_10                ,
          dat_ult_atualiz             ,
          hra_ult_atualiz             ,
          cod_usuar_ult_atualiz       ,
          cd_modalidade               ,
          nr_proposta                 ,
          log_sexo                    ,
          in_est_civil                ,
          dt_nascimento               ,
          cd_grau_parentesco          ,
          log_respons                 ,
          dt_inclusao_plano           ,
          dt_exclusao_plano           ,
          log_carenc                  ,
          cd_funcionario              ,
          dt_admissao                 ,
          cd_cbo                      ,
          cd_cpf                      ,
          nr_identidade               ,
          en_rua                      ,
          en_bairro                   ,
          en_cidade                   ,
          en_cep                      ,
          en_uf                       ,
          log_inscr_fatur             ,
          cd_padrao_cob               ,
          nom_usuar                   ,
          nom_internac                ,
          des_espcif_1                ,
          des_espcif_2                ,
          des_espcif_3                ,
          des_espcif_4                ,
          nr_cgc_cpf                  ,
          nr_contrato_antigo          ,
          cd_carteira_antiga          ,
          in_tipo_pessoa              ,
          cd_unimed_origem            ,
          cd_identific_uni_origem     ,
          cd_plano_origem             ,
          nom_plano_orig              ,
          cdcarteiraorigemresponsavel ,
          cd_padrao_cob_ant           ,
          dt_mvto_alteracao           ,
          dt_falecimento_titular      ,
          dt_atualizacao_carencia     ,
          cd_userid_carencia          ,
          log_bonifi_penalid          ,
          nr_dias                     ,
          log_cobr_fator_moder        ,
          dt_inicio_vinculo_unidade   ,
          aa_ult_fat_period           ,
          cd_departamento             ,
          cd_secao                    ,
          cd_setor                    ,
          cd_carteira_trabalho        ,
          dt_primeira_consulta        ,
          cd_motivo_cancel            ,
          cd_funcao                   ,
          cd_pis_pasep                ,
          cd_cartao_nacional_saude    ,
          nom_pai                     ,
          in_segmento_assistencial    ,
          dt_inclusao_origem          ,
          cd_identific_orig_resp      ,
          cd_registro_plano           ,
          nom_email                   ,
          cd_vendedor                 ,
          des_orgao_emissor_ident     ,
          nom_pais                    ,
          cd_plano_operadora          ,
          in_via_transferencia        ,
          des_nacion                  ,
          des_natur_docto             ,
          uf_emissor_ident            ,
          dt_emissao_ident            ,
          nr_telefone1                ,
          nr_telefone2                ,
          nom_usuario                 ,
          nom_mae                     ,
          cdn_produt_orig             ,
          cd_controle_oper_ans        ,
          num_mes_ult_faturam         ,
          num_matr_func               ,
          num_seqcial_control         ,
          num_seqcial_bnfciar         ,
          u##ind_sit_import           ,
          ind_sit_import              ,
          des_histor                  ,
          des_ocor_bnfciar            ,
          progress_recid
        )
        values
        (
          ib.num_seqcial                 ,
          ib.nr_insc_contratante         ,
          ib.cod_livre_1                 ,
          ib.cod_livre_2                 ,
          ib.cod_livre_3                 ,
          ib.cod_livre_4                 ,
          ib.cod_livre_5                 ,
          ib.cod_livre_6                 ,
          ib.cod_livre_7                 ,
          ib.cod_livre_8                 ,
          ib.cod_livre_9                 ,
          ib.num_livre_1                 ,
          ib.num_livre_2                 ,
          ib.num_livre_3                 ,
          ib.num_livre_4                 ,
          ib.num_livre_5                 ,
          ib.num_livre_6                 ,
          ib.num_livre_7                 ,
          ib.num_livre_8                 ,
          ib.num_livre_9                 ,
          ib.num_livre_10                ,
          ib.val_livre_1                 ,
          ib.val_livre_2                 ,
          ib.val_livre_3                 ,
          ib.val_livre_4                 ,
          ib.val_livre_5                 ,
          ib.val_livre_6                 ,
          ib.val_livre_7                 ,
          ib.val_livre_8                 ,
          ib.val_livre_9                 ,
          ib.val_livre_10                ,
          ib.log_livre_1                 ,
          ib.log_livre_2                 ,
          ib.log_livre_3                 ,
          ib.log_livre_4                 ,
          ib.log_livre_5                 ,
          ib.log_livre_6                 ,
          ib.log_livre_7                 ,
          ib.log_livre_8                 ,
          ib.log_livre_9                 ,
          ib.log_livre_10                ,
          ib.dat_livre_1                 ,
          ib.dat_livre_2                 ,
          ib.dat_livre_3                 ,
          ib.dat_livre_4                 ,
          ib.dat_livre_5                 ,
          ib.dat_livre_6                 ,
          ib.dat_livre_7                 ,
          ib.dat_livre_8                 ,
          ib.dat_livre_9                 ,
          ib.dat_livre_10                ,
          ib.dat_ult_atualiz             ,
          ib.hra_ult_atualiz             ,
          ib.cod_usuar_ult_atualiz       ,
          ib.cd_modalidade               ,
          ib.nr_proposta                 ,
          ib.log_sexo                    ,
          ib.in_est_civil                ,
          ib.dt_nascimento               ,
          ib.cd_grau_parentesco          ,
          ib.log_respons                 ,
          ib.dt_inclusao_plano           ,
          ib.dt_exclusao_plano           ,
          ib.log_carenc                  ,
          ib.cd_funcionario              ,
          ib.dt_admissao                 ,
          ib.cd_cbo                      ,
          ib.cd_cpf                      ,
          ib.nr_identidade               ,
          ib.en_rua                      ,
          ib.en_bairro                   ,
          ib.en_cidade                   ,
          ib.en_cep                      ,
          ib.en_uf                       ,
          ib.log_inscr_fatur             ,
          ib.cd_padrao_cob               ,
          ib.nom_usuar                   ,
          ib.nom_internac                ,
          ib.des_espcif_1                ,
          ib.des_espcif_2                ,
          ib.des_espcif_3                ,
          ib.des_espcif_4                ,
          ib.nr_cgc_cpf                  ,
          ib.nr_contrato_antigo          ,
          ib.cd_carteira_antiga          ,
          ib.in_tipo_pessoa              ,
          ib.cd_unimed_origem            ,
          ib.cd_identific_uni_origem     ,
          ib.cd_plano_origem             ,
          ib.nom_plano_orig              ,
          ib.cdcarteiraorigemresponsavel ,
          ib.cd_padrao_cob_ant           ,
          ib.dt_mvto_alteracao           ,
          ib.dt_falecimento_titular      ,
          ib.dt_atualizacao_carencia     ,
          ib.cd_userid_carencia          ,
          ib.log_bonifi_penalid          ,
          ib.nr_dias                     ,
          ib.log_cobr_fator_moder        ,
          ib.dt_inicio_vinculo_unidade   ,
          ib.aa_ult_fat_period           ,
          ib.cd_departamento             ,
          ib.cd_secao                    ,
          ib.cd_setor                    ,
          ib.cd_carteira_trabalho        ,
          ib.dt_primeira_consulta        ,
          ib.cd_motivo_cancel            ,
          ib.cd_funcao                   ,
          ib.cd_pis_pasep                ,
          ib.cd_cartao_nacional_saude    ,
          ib.nom_pai                     ,
          ib.in_segmento_assistencial    ,
          ib.dt_inclusao_origem          ,
          ib.cd_identific_orig_resp      ,
          ib.cd_registro_plano           ,
          ib.nom_email                   ,
          ib.cd_vendedor                 ,
          ib.des_orgao_emissor_ident     ,
          ib.nom_pais                    ,
          ib.cd_plano_operadora          ,
          ib.in_via_transferencia        ,
          ib.des_nacion                  ,
          ib.des_natur_docto             ,
          ib.uf_emissor_ident            ,
          ib.dt_emissao_ident            ,
          ib.nr_telefone1                ,
          ib.nr_telefone2                ,
          ib.nom_usuario                 ,
          ib.nom_mae                     ,
          ib.cdn_produt_orig             ,
          ib.cd_controle_oper_ans        ,
          ib.num_mes_ult_faturam         ,
          ib.num_matr_func               ,
          ib.num_seqcial_control         ,
          ib.num_seqcial_bnfciar         ,
          ib.u##ind_sit_import           ,
          ib.ind_sit_import              ,
          ib.des_histor                  ,
          ib.des_ocor_bnfciar            ,
          ib.progress_recid
          );
    end loop;

    for imb in (select * from gp.import_modul_bnfciar x where x.num_seqcial_bnfciar = pnum_seqcial_bnfciar) loop

        dbms_output.put_line('GRAVANDO IMPORT_MODUL_BNFCIAR_HIST PARA NUM_SEQCIAL_BNFCIAR;MODULO: '
                             || pnum_seqcial_bnfciar || '; ' || imb.cdn_modul );

        v_complemento :=
                   imb.cod_livre_1 || ';' ||
                   imb.cod_livre_2 || ';' ||
                   imb.cod_livre_3 || ';' ||
                   imb.cod_livre_4 || ';' ||
                   imb.cod_livre_5 || ';' ||
                   imb.cod_livre_6 || ';' ||
                   imb.cod_livre_7 || ';' ||
                   imb.cod_livre_8 || ';' ||
                   imb.cod_livre_9 || ';' ||
                   imb.num_livre_2 || ';' ||
                   imb.num_livre_3 || ';' ||
                   imb.num_livre_4 || ';' ||
                   imb.num_livre_5 || ';' ||
                   imb.num_livre_6 || ';' ||
                   imb.num_livre_7 || ';' ||
                   imb.num_livre_8 || ';' ||
                   imb.num_livre_9 || ';' ||
                   imb.num_livre_10 || ';' ||
                   imb.val_livre_1 || ';' ||
                   imb.val_livre_2 || ';' ||
                   imb.val_livre_3 || ';' ||
                   imb.val_livre_4 || ';' ||
                   imb.val_livre_5 || ';' ||
                   imb.val_livre_6 || ';' ||
                   imb.val_livre_7 || ';' ||
                   imb.val_livre_8 || ';' ||
                   imb.val_livre_9 || ';' ||
                   imb.val_livre_10 || ';' ||
                   imb.log_livre_1 || ';' ||
                   imb.log_livre_2 || ';' ||
                   imb.log_livre_3 || ';' ||
                   imb.log_livre_4 || ';' ||
                   imb.log_livre_5 || ';' ||
                   imb.log_livre_6 || ';' ||
                   imb.log_livre_7 || ';' ||
                   imb.log_livre_8 || ';' ||
                   imb.log_livre_9 || ';' ||
                   imb.log_livre_10 || ';' ||
                   imb.dat_livre_1 || ';' ||
                   imb.dat_livre_2 || ';' ||
                   imb.dat_livre_3 || ';' ||
                   imb.dat_livre_4 || ';' ||
                   imb.dat_livre_5 || ';' ||
                   imb.dat_livre_6 || ';' ||
                   imb.dat_livre_7 || ';' ||
                   imb.dat_livre_8 || ';' ||
                   imb.dat_livre_9 || ';' ||
                   imb.dat_livre_10 || ';' ||
                   imb.dat_ult_atualiz || ';' ||
                   imb.hra_ult_atualiz || ';' ||
                   imb.cod_usuar_ult_atualiz || ';' ||
                   imb.num_seqcial_bnfciar || ';' ||
                   imb.cdn_modul || ';' ||
                   imb.dat_inic || ';' ||
                   imb.dat_fim || ';' ||
                   imb.log_carenc || ';' ||
                   imb.log_bonif_penalid || ';' ||
                   imb.nr_dias || ';' ||
                   imb.aa_ult_fat_period || ';' ||
                   imb.num_mes_ult_faturam || ';' ||
                   imb.cdn_motiv_cancel;

        p_insere_log('BENEFICIARIO_MODULO',
                     'GERAR HISTORICO',
                     imb.num_seqcial_bnfciar, --pnrsequencial_origem
                     imb.cdn_modul, --pcdidentificador
                     'GRAVANDO IMPORT_MODUL_BNFCIAR_HIST',
                     v_complemento);

      insert into IMPORT_MODUL_BNFCIAR_HIST
        (
        num_seqcial           ,
        cod_livre_1           ,
        cod_livre_2           ,
        cod_livre_3           ,
        cod_livre_4           ,
        cod_livre_5           ,
        cod_livre_6           ,
        cod_livre_7           ,
        cod_livre_8           ,
        cod_livre_9           ,
        num_livre_1           ,
        num_livre_2           ,
        num_livre_3           ,
        num_livre_4           ,
        num_livre_5           ,
        num_livre_6           ,
        num_livre_7           ,
        num_livre_8           ,
        num_livre_9           ,
        num_livre_10          ,
        val_livre_1           ,
        val_livre_2           ,
        val_livre_3           ,
        val_livre_4           ,
        val_livre_5           ,
        val_livre_6           ,
        val_livre_7           ,
        val_livre_8           ,
        val_livre_9           ,
        val_livre_10          ,
        log_livre_1           ,
        log_livre_2           ,
        log_livre_3           ,
        log_livre_4           ,
        log_livre_5           ,
        log_livre_6           ,
        log_livre_7           ,
        log_livre_8           ,
        log_livre_9           ,
        log_livre_10          ,
        dat_livre_1           ,
        dat_livre_2           ,
        dat_livre_3           ,
        dat_livre_4           ,
        dat_livre_5           ,
        dat_livre_6           ,
        dat_livre_7           ,
        dat_livre_8           ,
        dat_livre_9           ,
        dat_livre_10          ,
        dat_ult_atualiz       ,
        hra_ult_atualiz       ,
        cod_usuar_ult_atualiz ,
        num_seqcial_bnfciar   ,
        cdn_modul             ,
        dat_inic              ,
        dat_fim               ,
        log_carenc            ,
        log_bonif_penalid     ,
        nr_dias               ,
        aa_ult_fat_period     ,
        num_mes_ult_faturam   ,
        cdn_motiv_cancel      ,
        progress_recid
      )
      values
      (
        imb.num_seqcial           ,
        imb.cod_livre_1           ,
        imb.cod_livre_2           ,
        imb.cod_livre_3           ,
        imb.cod_livre_4           ,
        imb.cod_livre_5           ,
        imb.cod_livre_6           ,
        imb.cod_livre_7           ,
        imb.cod_livre_8           ,
        imb.cod_livre_9           ,
        imb.num_livre_1           ,
        imb.num_livre_2           ,
        imb.num_livre_3           ,
        imb.num_livre_4           ,
        imb.num_livre_5           ,
        imb.num_livre_6           ,
        imb.num_livre_7           ,
        imb.num_livre_8           ,
        imb.num_livre_9           ,
        imb.num_livre_10          ,
        imb.val_livre_1           ,
        imb.val_livre_2           ,
        imb.val_livre_3           ,
        imb.val_livre_4           ,
        imb.val_livre_5           ,
        imb.val_livre_6           ,
        imb.val_livre_7           ,
        imb.val_livre_8           ,
        imb.val_livre_9           ,
        imb.val_livre_10          ,
        imb.log_livre_1           ,
        imb.log_livre_2           ,
        imb.log_livre_3           ,
        imb.log_livre_4           ,
        imb.log_livre_5           ,
        imb.log_livre_6           ,
        imb.log_livre_7           ,
        imb.log_livre_8           ,
        imb.log_livre_9           ,
        imb.log_livre_10          ,
        imb.dat_livre_1           ,
        imb.dat_livre_2           ,
        imb.dat_livre_3           ,
        imb.dat_livre_4           ,
        imb.dat_livre_5           ,
        imb.dat_livre_6           ,
        imb.dat_livre_7           ,
        imb.dat_livre_8           ,
        imb.dat_livre_9           ,
        imb.dat_livre_10          ,
        imb.dat_ult_atualiz       ,
        imb.hra_ult_atualiz       ,
        imb.cod_usuar_ult_atualiz ,
        imb.num_seqcial_bnfciar   ,
        imb.cdn_modul             ,
        imb.dat_inic              ,
        imb.dat_fim               ,
        imb.log_carenc            ,
        imb.log_bonif_penalid     ,
        imb.nr_dias               ,
        imb.aa_ult_fat_period     ,
        imb.num_mes_ult_faturam   ,
        imb.cdn_motiv_cancel      ,
        imb.progress_recid
      );
    end loop;

    for inb in (select * from gp.import_negociac_bnfciar x where x.num_seqcial_bnfciar = pnum_seqcial_bnfciar) loop

      dbms_output.put_line('GRAVANDO IMPORT_NEGOCIAC_BNFCIAR_HIST PARA NUM_SEQCIAL_BNFCIAR: '
                           || pnum_seqcial_bnfciar);

      insert into IMPORT_NEGOCIAC_BNFCIAR_HIST
      (
        num_seqcial              ,
        num_seqcial_bnfciar      ,
        cod_livre_1              ,
        cod_livre_2              ,
        cod_livre_3              ,
        cod_livre_4              ,
        cod_livre_5              ,
        cod_livre_6              ,
        cod_livre_7              ,
        cod_livre_8              ,
        cod_livre_9              ,
        num_livre_1              ,
        num_livre_2              ,
        num_livre_3              ,
        num_livre_4              ,
        num_livre_5              ,
        num_livre_6              ,
        num_livre_7              ,
        num_livre_8              ,
        num_livre_9              ,
        num_livre_10             ,
        val_livre_1              ,
        val_livre_2              ,
        val_livre_3              ,
        val_livre_4              ,
        val_livre_5              ,
        val_livre_6              ,
        val_livre_7              ,
        val_livre_8              ,
        val_livre_9              ,
        val_livre_10             ,
        log_livre_1              ,
        log_livre_2              ,
        log_livre_3              ,
        log_livre_4              ,
        log_livre_5              ,
        log_livre_6              ,
        log_livre_7              ,
        log_livre_8              ,
        log_livre_9              ,
        log_livre_10             ,
        dat_livre_1              ,
        dat_livre_2              ,
        dat_livre_3              ,
        dat_livre_4              ,
        dat_livre_5              ,
        dat_livre_6              ,
        dat_livre_7              ,
        dat_livre_8              ,
        dat_livre_9              ,
        dat_livre_10             ,
        dat_ult_atualiz          ,
        hra_ult_atualiz          ,
        cod_usuar_ult_atualiz    ,
        cd_unidade_destino       ,
        dt_intercambio           ,
        log_inscr_fatur          ,
        log_inscr_repas          ,
        num_ano_ult_repas        ,
        num_mes_ult_repas        ,
        dat_saida                ,
        cd_identific_uni_destino ,
        progress_recid
      )
      values
      (
        inb.num_seqcial              ,
        inb.num_seqcial_bnfciar      ,
        inb.cod_livre_1              ,
        inb.cod_livre_2              ,
        inb.cod_livre_3              ,
        inb.cod_livre_4              ,
        inb.cod_livre_5              ,
        inb.cod_livre_6              ,
        inb.cod_livre_7              ,
        inb.cod_livre_8              ,
        inb.cod_livre_9              ,
        inb.num_livre_1              ,
        inb.num_livre_2              ,
        inb.num_livre_3              ,
        inb.num_livre_4              ,
        inb.num_livre_5              ,
        inb.num_livre_6              ,
        inb.num_livre_7              ,
        inb.num_livre_8              ,
        inb.num_livre_9              ,
        inb.num_livre_10             ,
        inb.val_livre_1              ,
        inb.val_livre_2              ,
        inb.val_livre_3              ,
        inb.val_livre_4              ,
        inb.val_livre_5              ,
        inb.val_livre_6              ,
        inb.val_livre_7              ,
        inb.val_livre_8              ,
        inb.val_livre_9              ,
        inb.val_livre_10             ,
        inb.log_livre_1              ,
        inb.log_livre_2              ,
        inb.log_livre_3              ,
        inb.log_livre_4              ,
        inb.log_livre_5              ,
        inb.log_livre_6              ,
        inb.log_livre_7              ,
        inb.log_livre_8              ,
        inb.log_livre_9              ,
        inb.log_livre_10             ,
        inb.dat_livre_1              ,
        inb.dat_livre_2              ,
        inb.dat_livre_3              ,
        inb.dat_livre_4              ,
        inb.dat_livre_5              ,
        inb.dat_livre_6              ,
        inb.dat_livre_7              ,
        inb.dat_livre_8              ,
        inb.dat_livre_9              ,
        inb.dat_livre_10             ,
        inb.dat_ult_atualiz          ,
        inb.hra_ult_atualiz          ,
        inb.cod_usuar_ult_atualiz    ,
        inb.cd_unidade_destino       ,
        inb.dt_intercambio           ,
        inb.log_inscr_fatur          ,
        inb.log_inscr_repas          ,
        inb.num_ano_ult_repas        ,
        inb.num_mes_ult_repas        ,
        inb.dat_saida                ,
        inb.cd_identific_uni_destino ,
        inb.progress_recid
      );
    end loop;

    for iab in (select * from gp.import_atendim_bnfciar x where x.num_seqcial_bnfciar = pnum_seqcial_bnfciar) loop

      dbms_output.put_line('GRAVANDO IMPORT_ATENDIM_BNFCIAR_HIST PARA NUM_SEQCIAL_BNFCIAR: '
                           || pnum_seqcial_bnfciar);

      insert into IMPORT_ATENDIM_BNFCIAR_HIST
      (
        num_seqcial           ,
        num_seqcial_bnfciar   ,
        cod_livre_1           ,
        cod_livre_2           ,
        cod_livre_3           ,
        cod_livre_4           ,
        cod_livre_5           ,
        cod_livre_6           ,
        cod_livre_7           ,
        cod_livre_8           ,
        cod_livre_9           ,
        num_livre_1           ,
        num_livre_2           ,
        num_livre_3           ,
        num_livre_4           ,
        num_livre_5           ,
        num_livre_6           ,
        num_livre_7           ,
        num_livre_8           ,
        num_livre_9           ,
        num_livre_10          ,
        val_livre_1           ,
        val_livre_2           ,
        val_livre_3           ,
        val_livre_4           ,
        val_livre_5           ,
        val_livre_6           ,
        val_livre_7           ,
        val_livre_8           ,
        val_livre_9           ,
        val_livre_10          ,
        log_livre_1           ,
        log_livre_2           ,
        log_livre_3           ,
        log_livre_4           ,
        log_livre_5           ,
        log_livre_6           ,
        log_livre_7           ,
        log_livre_8           ,
        log_livre_9           ,
        log_livre_10          ,
        dat_livre_1           ,
        dat_livre_2           ,
        dat_livre_3           ,
        dat_livre_4           ,
        dat_livre_5           ,
        dat_livre_6           ,
        dat_livre_7           ,
        dat_livre_8           ,
        dat_livre_9           ,
        dat_livre_10          ,
        dat_ult_atualiz       ,
        hra_ult_atualiz       ,
        cod_usuar_ult_atualiz ,
        cd_unidade_destino    ,
        dat_intercam_atendim  ,
        dat_saida_atendim     ,
        progress_recid
      )
      values
      (
        iab.num_seqcial           ,
        iab.num_seqcial_bnfciar   ,
        iab.cod_livre_1           ,
        iab.cod_livre_2           ,
        iab.cod_livre_3           ,
        iab.cod_livre_4           ,
        iab.cod_livre_5           ,
        iab.cod_livre_6           ,
        iab.cod_livre_7           ,
        iab.cod_livre_8           ,
        iab.cod_livre_9           ,
        iab.num_livre_1           ,
        iab.num_livre_2           ,
        iab.num_livre_3           ,
        iab.num_livre_4           ,
        iab.num_livre_5           ,
        iab.num_livre_6           ,
        iab.num_livre_7           ,
        iab.num_livre_8           ,
        iab.num_livre_9           ,
        iab.num_livre_10          ,
        iab.val_livre_1           ,
        iab.val_livre_2           ,
        iab.val_livre_3           ,
        iab.val_livre_4           ,
        iab.val_livre_5           ,
        iab.val_livre_6           ,
        iab.val_livre_7           ,
        iab.val_livre_8           ,
        iab.val_livre_9           ,
        iab.val_livre_10          ,
        iab.log_livre_1           ,
        iab.log_livre_2           ,
        iab.log_livre_3           ,
        iab.log_livre_4           ,
        iab.log_livre_5           ,
        iab.log_livre_6           ,
        iab.log_livre_7           ,
        iab.log_livre_8           ,
        iab.log_livre_9           ,
        iab.log_livre_10          ,
        iab.dat_livre_1           ,
        iab.dat_livre_2           ,
        iab.dat_livre_3           ,
        iab.dat_livre_4           ,
        iab.dat_livre_5           ,
        iab.dat_livre_6           ,
        iab.dat_livre_7           ,
        iab.dat_livre_8           ,
        iab.dat_livre_9           ,
        iab.dat_livre_10          ,
        iab.dat_ult_atualiz       ,
        iab.hra_ult_atualiz       ,
        iab.cod_usuar_ult_atualiz ,
        iab.cd_unidade_destino    ,
        iab.dat_intercam_atendim  ,
        iab.dat_saida_atendim     ,
        iab.progress_recid
      );
    end loop;
  end gravar_historico_import_benef;*/

  /*procedure restaurar_import_bnfciar_hist(pnum_seqcial_bnfciar number) is
  begin
    for ib in (select * from import_bnfciar_hist x where x.num_seqcial_bnfciar = pnum_seqcial_bnfciar) loop

      p_insere_log('BENEFICIARIO',
                   'RESTAURAR TEMPORARIAS',
                   ib.num_seqcial_bnfciar, --pnrsequencial_origem
                   ib.cd_carteira_antiga, --pcdidentificador
                   null,
                   null); --complemento

        insert into gp.import_bnfciar
          (
          num_seqcial                 ,
          nr_insc_contratante         ,
          cod_livre_1                 ,
          cod_livre_2                 ,
          cod_livre_3                 ,
          cod_livre_4                 ,
          cod_livre_5                 ,
          cod_livre_6                 ,
          cod_livre_7                 ,
          cod_livre_8                 ,
          cod_livre_9                 ,
          num_livre_1                 ,
          num_livre_2                 ,
          num_livre_3                 ,
          num_livre_4                 ,
          num_livre_5                 ,
          num_livre_6                 ,
          num_livre_7                 ,
          num_livre_8                 ,
          num_livre_9                 ,
          num_livre_10                ,
          val_livre_1                 ,
          val_livre_2                 ,
          val_livre_3                 ,
          val_livre_4                 ,
          val_livre_5                 ,
          val_livre_6                 ,
          val_livre_7                 ,
          val_livre_8                 ,
          val_livre_9                 ,
          val_livre_10                ,
          log_livre_1                 ,
          log_livre_2                 ,
          log_livre_3                 ,
          log_livre_4                 ,
          log_livre_5                 ,
          log_livre_6                 ,
          log_livre_7                 ,
          log_livre_8                 ,
          log_livre_9                 ,
          log_livre_10                ,
          dat_livre_1                 ,
          dat_livre_2                 ,
          dat_livre_3                 ,
          dat_livre_4                 ,
          dat_livre_5                 ,
          dat_livre_6                 ,
          dat_livre_7                 ,
          dat_livre_8                 ,
          dat_livre_9                 ,
          dat_livre_10                ,
          dat_ult_atualiz             ,
          hra_ult_atualiz             ,
          cod_usuar_ult_atualiz       ,
          cd_modalidade               ,
          nr_proposta                 ,
          log_sexo                    ,
          in_est_civil                ,
          dt_nascimento               ,
          cd_grau_parentesco          ,
          log_respons                 ,
          dt_inclusao_plano           ,
          dt_exclusao_plano           ,
          log_carenc                  ,
          cd_funcionario              ,
          dt_admissao                 ,
          cd_cbo                      ,
          cd_cpf                      ,
          nr_identidade               ,
          en_rua                      ,
          en_bairro                   ,
          en_cidade                   ,
          en_cep                      ,
          en_uf                       ,
          log_inscr_fatur             ,
          cd_padrao_cob               ,
          nom_usuar                   ,
          nom_internac                ,
          des_espcif_1                ,
          des_espcif_2                ,
          des_espcif_3                ,
          des_espcif_4                ,
          nr_cgc_cpf                  ,
          nr_contrato_antigo          ,
          cd_carteira_antiga          ,
          in_tipo_pessoa              ,
          cd_unimed_origem            ,
          cd_identific_uni_origem     ,
          cd_plano_origem             ,
          nom_plano_orig              ,
          cdcarteiraorigemresponsavel ,
          cd_padrao_cob_ant           ,
          dt_mvto_alteracao           ,
          dt_falecimento_titular      ,
          dt_atualizacao_carencia     ,
          cd_userid_carencia          ,
          log_bonifi_penalid          ,
          nr_dias                     ,
          log_cobr_fator_moder        ,
          dt_inicio_vinculo_unidade   ,
          aa_ult_fat_period           ,
          cd_departamento             ,
          cd_secao                    ,
          cd_setor                    ,
          cd_carteira_trabalho        ,
          dt_primeira_consulta        ,
          cd_motivo_cancel            ,
          cd_funcao                   ,
          cd_pis_pasep                ,
          cd_cartao_nacional_saude    ,
          nom_pai                     ,
          in_segmento_assistencial    ,
          dt_inclusao_origem          ,
          cd_identific_orig_resp      ,
          cd_registro_plano           ,
          nom_email                   ,
          cd_vendedor                 ,
          des_orgao_emissor_ident     ,
          nom_pais                    ,
          cd_plano_operadora          ,
          in_via_transferencia        ,
          des_nacion                  ,
          des_natur_docto             ,
          uf_emissor_ident            ,
          dt_emissao_ident            ,
          nr_telefone1                ,
          nr_telefone2                ,
          nom_usuario                 ,
          nom_mae                     ,
          cdn_produt_orig             ,
          cd_controle_oper_ans        ,
          num_mes_ult_faturam         ,
          num_matr_func               ,
          num_seqcial_control         ,
          num_seqcial_bnfciar         ,
          u##ind_sit_import           ,
          ind_sit_import              ,
          des_histor                  ,
          des_ocor_bnfciar            ,
          progress_recid
        )
        values
        (
          ib.num_seqcial                 ,
          ib.nr_insc_contratante         ,
          ib.cod_livre_1                 ,
          ib.cod_livre_2                 ,
          ib.cod_livre_3                 ,
          ib.cod_livre_4                 ,
          ib.cod_livre_5                 ,
          ib.cod_livre_6                 ,
          ib.cod_livre_7                 ,
          ib.cod_livre_8                 ,
          ib.cod_livre_9                 ,
          ib.num_livre_1                 ,
          ib.num_livre_2                 ,
          ib.num_livre_3                 ,
          ib.num_livre_4                 ,
          ib.num_livre_5                 ,
          ib.num_livre_6                 ,
          ib.num_livre_7                 ,
          ib.num_livre_8                 ,
          ib.num_livre_9                 ,
          ib.num_livre_10                ,
          ib.val_livre_1                 ,
          ib.val_livre_2                 ,
          ib.val_livre_3                 ,
          ib.val_livre_4                 ,
          ib.val_livre_5                 ,
          ib.val_livre_6                 ,
          ib.val_livre_7                 ,
          ib.val_livre_8                 ,
          ib.val_livre_9                 ,
          ib.val_livre_10                ,
          ib.log_livre_1                 ,
          ib.log_livre_2                 ,
          ib.log_livre_3                 ,
          ib.log_livre_4                 ,
          ib.log_livre_5                 ,
          ib.log_livre_6                 ,
          ib.log_livre_7                 ,
          ib.log_livre_8                 ,
          ib.log_livre_9                 ,
          ib.log_livre_10                ,
          ib.dat_livre_1                 ,
          ib.dat_livre_2                 ,
          ib.dat_livre_3                 ,
          ib.dat_livre_4                 ,
          ib.dat_livre_5                 ,
          ib.dat_livre_6                 ,
          ib.dat_livre_7                 ,
          ib.dat_livre_8                 ,
          ib.dat_livre_9                 ,
          ib.dat_livre_10                ,
          ib.dat_ult_atualiz             ,
          ib.hra_ult_atualiz             ,
          ib.cod_usuar_ult_atualiz       ,
          ib.cd_modalidade               ,
          ib.nr_proposta                 ,
          ib.log_sexo                    ,
          ib.in_est_civil                ,
          ib.dt_nascimento               ,
          ib.cd_grau_parentesco          ,
          ib.log_respons                 ,
          ib.dt_inclusao_plano           ,
          ib.dt_exclusao_plano           ,
          ib.log_carenc                  ,
          ib.cd_funcionario              ,
          ib.dt_admissao                 ,
          ib.cd_cbo                      ,
          ib.cd_cpf                      ,
          ib.nr_identidade               ,
          ib.en_rua                      ,
          ib.en_bairro                   ,
          ib.en_cidade                   ,
          ib.en_cep                      ,
          ib.en_uf                       ,
          ib.log_inscr_fatur             ,
          ib.cd_padrao_cob               ,
          ib.nom_usuar                   ,
          ib.nom_internac                ,
          ib.des_espcif_1                ,
          ib.des_espcif_2                ,
          ib.des_espcif_3                ,
          ib.des_espcif_4                ,
          ib.nr_cgc_cpf                  ,
          ib.nr_contrato_antigo          ,
          ib.cd_carteira_antiga          ,
          ib.in_tipo_pessoa              ,
          ib.cd_unimed_origem            ,
          ib.cd_identific_uni_origem     ,
          ib.cd_plano_origem             ,
          ib.nom_plano_orig              ,
          ib.cdcarteiraorigemresponsavel ,
          ib.cd_padrao_cob_ant           ,
          ib.dt_mvto_alteracao           ,
          ib.dt_falecimento_titular      ,
          ib.dt_atualizacao_carencia     ,
          ib.cd_userid_carencia          ,
          ib.log_bonifi_penalid          ,
          ib.nr_dias                     ,
          ib.log_cobr_fator_moder        ,
          ib.dt_inicio_vinculo_unidade   ,
          ib.aa_ult_fat_period           ,
          ib.cd_departamento             ,
          ib.cd_secao                    ,
          ib.cd_setor                    ,
          ib.cd_carteira_trabalho        ,
          ib.dt_primeira_consulta        ,
          ib.cd_motivo_cancel            ,
          ib.cd_funcao                   ,
          ib.cd_pis_pasep                ,
          ib.cd_cartao_nacional_saude    ,
          ib.nom_pai                     ,
          ib.in_segmento_assistencial    ,
          ib.dt_inclusao_origem          ,
          ib.cd_identific_orig_resp      ,
          ib.cd_registro_plano           ,
          ib.nom_email                   ,
          ib.cd_vendedor                 ,
          ib.des_orgao_emissor_ident     ,
          ib.nom_pais                    ,
          ib.cd_plano_operadora          ,
          ib.in_via_transferencia        ,
          ib.des_nacion                  ,
          ib.des_natur_docto             ,
          ib.uf_emissor_ident            ,
          ib.dt_emissao_ident            ,
          ib.nr_telefone1                ,
          ib.nr_telefone2                ,
          ib.nom_usuario                 ,
          ib.nom_mae                     ,
          ib.cdn_produt_orig             ,
          ib.cd_controle_oper_ans        ,
          ib.num_mes_ult_faturam         ,
          ib.num_matr_func               ,
          ib.num_seqcial_control         ,
          ib.num_seqcial_bnfciar         ,
          ib.u##ind_sit_import           ,
          ib.ind_sit_import              ,
          ib.des_histor                  ,
          ib.des_ocor_bnfciar            ,
          ib.progress_recid
          );
    end loop;

    for imb in (select * from import_modul_bnfciar_hist x where x.num_seqcial_bnfciar = pnum_seqcial_bnfciar) loop

      p_insere_log('BENEFICIARIO_MODULO',
                   'RESTAURAR TEMPORARIAS',
                   imb.num_seqcial_bnfciar, --pnrsequencial_origem
                   imb.cdn_modul, --pcdidentificador
                   null,
                   null); --complemento

      insert into gp.IMPORT_MODUL_BNFCIAR
        (
        num_seqcial           ,
        cod_livre_1           ,
        cod_livre_2           ,
        cod_livre_3           ,
        cod_livre_4           ,
        cod_livre_5           ,
        cod_livre_6           ,
        cod_livre_7           ,
        cod_livre_8           ,
        cod_livre_9           ,
        num_livre_1           ,
        num_livre_2           ,
        num_livre_3           ,
        num_livre_4           ,
        num_livre_5           ,
        num_livre_6           ,
        num_livre_7           ,
        num_livre_8           ,
        num_livre_9           ,
        num_livre_10          ,
        val_livre_1           ,
        val_livre_2           ,
        val_livre_3           ,
        val_livre_4           ,
        val_livre_5           ,
        val_livre_6           ,
        val_livre_7           ,
        val_livre_8           ,
        val_livre_9           ,
        val_livre_10          ,
        log_livre_1           ,
        log_livre_2           ,
        log_livre_3           ,
        log_livre_4           ,
        log_livre_5           ,
        log_livre_6           ,
        log_livre_7           ,
        log_livre_8           ,
        log_livre_9           ,
        log_livre_10          ,
        dat_livre_1           ,
        dat_livre_2           ,
        dat_livre_3           ,
        dat_livre_4           ,
        dat_livre_5           ,
        dat_livre_6           ,
        dat_livre_7           ,
        dat_livre_8           ,
        dat_livre_9           ,
        dat_livre_10          ,
        dat_ult_atualiz       ,
        hra_ult_atualiz       ,
        cod_usuar_ult_atualiz ,
        num_seqcial_bnfciar   ,
        cdn_modul             ,
        dat_inic              ,
        dat_fim               ,
        log_carenc            ,
        log_bonif_penalid     ,
        nr_dias               ,
        aa_ult_fat_period     ,
        num_mes_ult_faturam   ,
        cdn_motiv_cancel      ,
        progress_recid
      )
      values
      (
        imb.num_seqcial           ,
        imb.cod_livre_1           ,
        imb.cod_livre_2           ,
        imb.cod_livre_3           ,
        imb.cod_livre_4           ,
        imb.cod_livre_5           ,
        imb.cod_livre_6           ,
        imb.cod_livre_7           ,
        imb.cod_livre_8           ,
        imb.cod_livre_9           ,
        imb.num_livre_1           ,
        imb.num_livre_2           ,
        imb.num_livre_3           ,
        imb.num_livre_4           ,
        imb.num_livre_5           ,
        imb.num_livre_6           ,
        imb.num_livre_7           ,
        imb.num_livre_8           ,
        imb.num_livre_9           ,
        imb.num_livre_10          ,
        imb.val_livre_1           ,
        imb.val_livre_2           ,
        imb.val_livre_3           ,
        imb.val_livre_4           ,
        imb.val_livre_5           ,
        imb.val_livre_6           ,
        imb.val_livre_7           ,
        imb.val_livre_8           ,
        imb.val_livre_9           ,
        imb.val_livre_10          ,
        imb.log_livre_1           ,
        imb.log_livre_2           ,
        imb.log_livre_3           ,
        imb.log_livre_4           ,
        imb.log_livre_5           ,
        imb.log_livre_6           ,
        imb.log_livre_7           ,
        imb.log_livre_8           ,
        imb.log_livre_9           ,
        imb.log_livre_10          ,
        imb.dat_livre_1           ,
        imb.dat_livre_2           ,
        imb.dat_livre_3           ,
        imb.dat_livre_4           ,
        imb.dat_livre_5           ,
        imb.dat_livre_6           ,
        imb.dat_livre_7           ,
        imb.dat_livre_8           ,
        imb.dat_livre_9           ,
        imb.dat_livre_10          ,
        imb.dat_ult_atualiz       ,
        imb.hra_ult_atualiz       ,
        imb.cod_usuar_ult_atualiz ,
        imb.num_seqcial_bnfciar   ,
        imb.cdn_modul             ,
        imb.dat_inic              ,
        imb.dat_fim               ,
        imb.log_carenc            ,
        imb.log_bonif_penalid     ,
        imb.nr_dias               ,
        imb.aa_ult_fat_period     ,
        imb.num_mes_ult_faturam   ,
        imb.cdn_motiv_cancel      ,
        imb.progress_recid
      );

    end loop;

    for inb in (select * from import_negociac_bnfciar_hist x where x.num_seqcial_bnfciar = pnum_seqcial_bnfciar) loop
      insert into gp.IMPORT_NEGOCIAC_BNFCIAR
      (
        num_seqcial              ,
        num_seqcial_bnfciar      ,
        cod_livre_1              ,
        cod_livre_2              ,
        cod_livre_3              ,
        cod_livre_4              ,
        cod_livre_5              ,
        cod_livre_6              ,
        cod_livre_7              ,
        cod_livre_8              ,
        cod_livre_9              ,
        num_livre_1              ,
        num_livre_2              ,
        num_livre_3              ,
        num_livre_4              ,
        num_livre_5              ,
        num_livre_6              ,
        num_livre_7              ,
        num_livre_8              ,
        num_livre_9              ,
        num_livre_10             ,
        val_livre_1              ,
        val_livre_2              ,
        val_livre_3              ,
        val_livre_4              ,
        val_livre_5              ,
        val_livre_6              ,
        val_livre_7              ,
        val_livre_8              ,
        val_livre_9              ,
        val_livre_10             ,
        log_livre_1              ,
        log_livre_2              ,
        log_livre_3              ,
        log_livre_4              ,
        log_livre_5              ,
        log_livre_6              ,
        log_livre_7              ,
        log_livre_8              ,
        log_livre_9              ,
        log_livre_10             ,
        dat_livre_1              ,
        dat_livre_2              ,
        dat_livre_3              ,
        dat_livre_4              ,
        dat_livre_5              ,
        dat_livre_6              ,
        dat_livre_7              ,
        dat_livre_8              ,
        dat_livre_9              ,
        dat_livre_10             ,
        dat_ult_atualiz          ,
        hra_ult_atualiz          ,
        cod_usuar_ult_atualiz    ,
        cd_unidade_destino       ,
        dt_intercambio           ,
        log_inscr_fatur          ,
        log_inscr_repas          ,
        num_ano_ult_repas        ,
        num_mes_ult_repas        ,
        dat_saida                ,
        cd_identific_uni_destino ,
        progress_recid
      )
      values
      (
        inb.num_seqcial              ,
        inb.num_seqcial_bnfciar      ,
        inb.cod_livre_1              ,
        inb.cod_livre_2              ,
        inb.cod_livre_3              ,
        inb.cod_livre_4              ,
        inb.cod_livre_5              ,
        inb.cod_livre_6              ,
        inb.cod_livre_7              ,
        inb.cod_livre_8              ,
        inb.cod_livre_9              ,
        inb.num_livre_1              ,
        inb.num_livre_2              ,
        inb.num_livre_3              ,
        inb.num_livre_4              ,
        inb.num_livre_5              ,
        inb.num_livre_6              ,
        inb.num_livre_7              ,
        inb.num_livre_8              ,
        inb.num_livre_9              ,
        inb.num_livre_10             ,
        inb.val_livre_1              ,
        inb.val_livre_2              ,
        inb.val_livre_3              ,
        inb.val_livre_4              ,
        inb.val_livre_5              ,
        inb.val_livre_6              ,
        inb.val_livre_7              ,
        inb.val_livre_8              ,
        inb.val_livre_9              ,
        inb.val_livre_10             ,
        inb.log_livre_1              ,
        inb.log_livre_2              ,
        inb.log_livre_3              ,
        inb.log_livre_4              ,
        inb.log_livre_5              ,
        inb.log_livre_6              ,
        inb.log_livre_7              ,
        inb.log_livre_8              ,
        inb.log_livre_9              ,
        inb.log_livre_10             ,
        inb.dat_livre_1              ,
        inb.dat_livre_2              ,
        inb.dat_livre_3              ,
        inb.dat_livre_4              ,
        inb.dat_livre_5              ,
        inb.dat_livre_6              ,
        inb.dat_livre_7              ,
        inb.dat_livre_8              ,
        inb.dat_livre_9              ,
        inb.dat_livre_10             ,
        inb.dat_ult_atualiz          ,
        inb.hra_ult_atualiz          ,
        inb.cod_usuar_ult_atualiz    ,
        inb.cd_unidade_destino       ,
        inb.dt_intercambio           ,
        inb.log_inscr_fatur          ,
        inb.log_inscr_repas          ,
        inb.num_ano_ult_repas        ,
        inb.num_mes_ult_repas        ,
        inb.dat_saida                ,
        inb.cd_identific_uni_destino ,
        inb.progress_recid
      );
    end loop;

    for iab in (select * from import_atendim_bnfciar_hist x where x.num_seqcial_bnfciar = pnum_seqcial_bnfciar) loop
      insert into gp.IMPORT_ATENDIM_BNFCIAR
      (
        num_seqcial           ,
        num_seqcial_bnfciar   ,
        cod_livre_1           ,
        cod_livre_2           ,
        cod_livre_3           ,
        cod_livre_4           ,
        cod_livre_5           ,
        cod_livre_6           ,
        cod_livre_7           ,
        cod_livre_8           ,
        cod_livre_9           ,
        num_livre_1           ,
        num_livre_2           ,
        num_livre_3           ,
        num_livre_4           ,
        num_livre_5           ,
        num_livre_6           ,
        num_livre_7           ,
        num_livre_8           ,
        num_livre_9           ,
        num_livre_10          ,
        val_livre_1           ,
        val_livre_2           ,
        val_livre_3           ,
        val_livre_4           ,
        val_livre_5           ,
        val_livre_6           ,
        val_livre_7           ,
        val_livre_8           ,
        val_livre_9           ,
        val_livre_10          ,
        log_livre_1           ,
        log_livre_2           ,
        log_livre_3           ,
        log_livre_4           ,
        log_livre_5           ,
        log_livre_6           ,
        log_livre_7           ,
        log_livre_8           ,
        log_livre_9           ,
        log_livre_10          ,
        dat_livre_1           ,
        dat_livre_2           ,
        dat_livre_3           ,
        dat_livre_4           ,
        dat_livre_5           ,
        dat_livre_6           ,
        dat_livre_7           ,
        dat_livre_8           ,
        dat_livre_9           ,
        dat_livre_10          ,
        dat_ult_atualiz       ,
        hra_ult_atualiz       ,
        cod_usuar_ult_atualiz ,
        cd_unidade_destino    ,
        dat_intercam_atendim  ,
        dat_saida_atendim     ,
        progress_recid
      )
      values
      (
        iab.num_seqcial           ,
        iab.num_seqcial_bnfciar   ,
        iab.cod_livre_1           ,
        iab.cod_livre_2           ,
        iab.cod_livre_3           ,
        iab.cod_livre_4           ,
        iab.cod_livre_5           ,
        iab.cod_livre_6           ,
        iab.cod_livre_7           ,
        iab.cod_livre_8           ,
        iab.cod_livre_9           ,
        iab.num_livre_1           ,
        iab.num_livre_2           ,
        iab.num_livre_3           ,
        iab.num_livre_4           ,
        iab.num_livre_5           ,
        iab.num_livre_6           ,
        iab.num_livre_7           ,
        iab.num_livre_8           ,
        iab.num_livre_9           ,
        iab.num_livre_10          ,
        iab.val_livre_1           ,
        iab.val_livre_2           ,
        iab.val_livre_3           ,
        iab.val_livre_4           ,
        iab.val_livre_5           ,
        iab.val_livre_6           ,
        iab.val_livre_7           ,
        iab.val_livre_8           ,
        iab.val_livre_9           ,
        iab.val_livre_10          ,
        iab.log_livre_1           ,
        iab.log_livre_2           ,
        iab.log_livre_3           ,
        iab.log_livre_4           ,
        iab.log_livre_5           ,
        iab.log_livre_6           ,
        iab.log_livre_7           ,
        iab.log_livre_8           ,
        iab.log_livre_9           ,
        iab.log_livre_10          ,
        iab.dat_livre_1           ,
        iab.dat_livre_2           ,
        iab.dat_livre_3           ,
        iab.dat_livre_4           ,
        iab.dat_livre_5           ,
        iab.dat_livre_6           ,
        iab.dat_livre_7           ,
        iab.dat_livre_8           ,
        iab.dat_livre_9           ,
        iab.dat_livre_10          ,
        iab.dat_ult_atualiz       ,
        iab.hra_ult_atualiz       ,
        iab.cod_usuar_ult_atualiz ,
        iab.cd_unidade_destino    ,
        iab.dat_intercam_atendim  ,
        iab.dat_saida_atendim     ,
        iab.progress_recid
      );
    end loop;
  end restaurar_import_bnfciar_hist;*/

  /*procedure gravar_hist_import_propost(pnr_contrato_antigo number) is
  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    for ip in (select *
                 from gp.import_propost x
                where x.nr_contrato_antigo = pnr_contrato_antigo) loop

      dbms_output.put_line('GRAVANDO IMPORT_PROPOST_HIST PARA NR_CONTRATO_ANTIGO: ' ||
                           pnr_contrato_antigo);

      insert into import_propost_hist
        (num_seqcial,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         nr_insc_contratante,
         nr_insc_contrat_origem,
         cd_modalidade,
         cd_plano,
         cd_tipo_plano,
         cd_forma_pagto,
         cdn_tip_vencto,
         num_dia_vencto,
         log_inic_valid,
         cd_convenio,
         cd_tipo_participacao,
         cd_vendedor,
         cd_tab_preco,
         pc_acrescimo,
         dt_lim_acres_mens,
         pc_acrescimo_inscr,
         dat_lim_acresc_inscr,
         pc_desconto,
         dat_lim_desc_mensal,
         pc_desconto_inscr,
         dat_lim_desc_inscr,
         cd_tab_preco_proc,
         log_mascar,
         des_mascar,
         log_faixa_etaria_especial,
         log_cobert_especial,
         log_proced_prestdor,
         log_consid_tax_coper,
         pc_acresc_taxa,
         log_medic_empres,
         num_mes_ult_faturam,
         aa_ult_fat,
         dat_propost,
         dat_fim_propost,
         nr_cgc_cpf,
         nr_cgc_cpf_contrat_orig,
         nr_contrato_antigo,
         ind_tip_pessoa,
         ind_pessoa_contrnte_orig,
         val_propost_migrac,
         cd_tab_preco_proc_cob,
         log_cartao,
         log_cobr_dif_pagto,
         pc_desc_prom_taxa,
         dat_valid_prom_tax,
         pc_desc_prom_pl,
         dat_valid_prom_plano,
         log_segassist,
         dat_fim_segassist,
         log_fatur_segassist,
         log_altera_fator_moder,
         log_altera_tax_inscr,
         log_altera_val_usuar,
         num_mm_ult_reaj,
         aa_ult_reajuste,
         pc_ult_reajuste,
         cd_registro_plano,
         log_altera_valid_prorrog,
         log_propost_regulam,
         qt_validade_termo,
         um_validade_termo,
         qt_validade_cartao,
         um_validade_cartao,
         um_validade_cart,
         qt_validade_cart,
         in_tipo_contratacao,
         in_tipo_natureza,
         in_validade_doc_ident,
         nr_oficio_reajuste,
         in_registro_plano,
         cd_plano_operadora,
         cdn_tip_idx,
         cdn_niv_reaj,
         num_seqcial_propost,
         num_seqcial_control,
         u##ind_sit_import,
         ind_sit_import,
         ind_faixa_etaria_especial,
         ind_cobr,
         progress_recid)
      values
        (ip.num_seqcial,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.nr_insc_contratante,
         ip.nr_insc_contrat_origem,
         ip.cd_modalidade,
         ip.cd_plano,
         ip.cd_tipo_plano,
         ip.cd_forma_pagto,
         ip.cdn_tip_vencto,
         ip.num_dia_vencto,
         ip.log_inic_valid,
         ip.cd_convenio,
         ip.cd_tipo_participacao,
         ip.cd_vendedor,
         ip.cd_tab_preco,
         ip.pc_acrescimo,
         ip.dt_lim_acres_mens,
         ip.pc_acrescimo_inscr,
         ip.dat_lim_acresc_inscr,
         ip.pc_desconto,
         ip.dat_lim_desc_mensal,
         ip.pc_desconto_inscr,
         ip.dat_lim_desc_inscr,
         ip.cd_tab_preco_proc,
         ip.log_mascar,
         ip.des_mascar,
         ip.log_faixa_etaria_especial,
         ip.log_cobert_especial,
         ip.log_proced_prestdor,
         ip.log_consid_tax_coper,
         ip.pc_acresc_taxa,
         ip.log_medic_empres,
         ip.num_mes_ult_faturam,
         ip.aa_ult_fat,
         ip.dat_propost,
         ip.dat_fim_propost,
         ip.nr_cgc_cpf,
         ip.nr_cgc_cpf_contrat_orig,
         ip.nr_contrato_antigo,
         ip.ind_tip_pessoa,
         ip.ind_pessoa_contrnte_orig,
         ip.val_propost_migrac,
         ip.cd_tab_preco_proc_cob,
         ip.log_cartao,
         ip.log_cobr_dif_pagto,
         ip.pc_desc_prom_taxa,
         ip.dat_valid_prom_tax,
         ip.pc_desc_prom_pl,
         ip.dat_valid_prom_plano,
         ip.log_segassist,
         ip.dat_fim_segassist,
         ip.log_fatur_segassist,
         ip.log_altera_fator_moder,
         ip.log_altera_tax_inscr,
         ip.log_altera_val_usuar,
         ip.num_mm_ult_reaj,
         ip.aa_ult_reajuste,
         ip.pc_ult_reajuste,
         ip.cd_registro_plano,
         ip.log_altera_valid_prorrog,
         ip.log_propost_regulam,
         ip.qt_validade_termo,
         ip.um_validade_termo,
         ip.qt_validade_cartao,
         ip.um_validade_cartao,
         ip.um_validade_cart,
         ip.qt_validade_cart,
         ip.in_tipo_contratacao,
         ip.in_tipo_natureza,
         ip.in_validade_doc_ident,
         ip.nr_oficio_reajuste,
         ip.in_registro_plano,
         ip.cd_plano_operadora,
         ip.cdn_tip_idx,
         ip.cdn_niv_reaj,
         ip.num_seqcial_propost,
         ip.num_seqcial_control,
         ip.u##ind_sit_import,
         ip.ind_sit_import,
         ip.ind_faixa_etaria_especial,
         ip.ind_cobr,
         ip.progress_recid);
    end loop;

    for ip in (select *
                 from gp.importpadrcobertpropost x
                where x.num_seqcial_propost = pnr_contrato_antigo) loop

      dbms_output.put_line('GRAVANDO IMPORTPADRCOBERTPROPOSTHIST PARA NUM_SEQCIAL_PROPOST: ' ||
                           pnr_contrato_antigo);

      insert into importpadrcobertproposthist
        (num_seqcial,
         num_seqcial_propost,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         cod_livre_10,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         cd_padrao_cobertura,
         cd_modulo,
         pc_acrescimo_inscr,
         pc_desconto_inscr,
         pc_acresc_taxa,
         pc_desconto_taxa,
         num_dias_bonifi,
         cd_grau_parentesco,
         nr_faixa_etaria_ini,
         nr_faixa_etaria_fim,
         nr_faixa_etaria,
         qt_fator_mensalidade,
         qt_fator_inscricao,
         progress_recid)
      values
        (ip.num_seqcial,
         ip.num_seqcial_propost,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.cod_livre_10,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.cd_padrao_cobertura,
         ip.cd_modulo,
         ip.pc_acrescimo_inscr,
         ip.pc_desconto_inscr,
         ip.pc_acresc_taxa,
         ip.pc_desconto_taxa,
         ip.num_dias_bonifi,
         ip.cd_grau_parentesco,
         ip.nr_faixa_etaria_ini,
         ip.nr_faixa_etaria_fim,
         ip.nr_faixa_etaria,
         ip.qt_fator_mensalidade,
         ip.qt_fator_inscricao,
         ip.progress_recid);
    end loop;

    for ip in (select *
                 from gp.import_negociac_propost x
                where x.num_seqcial_propost = pnr_contrato_antigo) loop

      dbms_output.put_line('GRAVANDO IMPORT_NEGOCIAC_PROPOST_HIST PARA NUM_SEQCIAL_PROPOST: ' ||
                           pnr_contrato_antigo);

      insert into import_negociac_propost_hist
        (num_seqcial,
         num_seqcial_propost,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         cod_livre_10,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         cd_unimed,
         cd_plano,
         cd_tipo_plano,
         cd_forma_pagto,
         um_carencia,
         qt_carencia,
         cd_tab_preco,
         cd_tab_preco_proc,
         cdn_tip_vencto,
         num_dia_vencto,
         in_tipo_valorizacao,
         pc_acrescimo_inscr,
         pc_desconto_inscr,
         pc_desconto,
         pc_acrescimo,
         log_impres_cart,
         log_calc_val,
         log_repas,
         dat_inic_repas,
         dat_fim_repas,
         aa_ult_repasse,
         num_mes_ult_repas,
         progress_recid

         )
      values
        (ip.num_seqcial,
         ip.num_seqcial_propost,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.cod_livre_10,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.cd_unimed,
         ip.cd_plano,
         ip.cd_tipo_plano,
         ip.cd_forma_pagto,
         ip.um_carencia,
         ip.qt_carencia,
         ip.cd_tab_preco,
         ip.cd_tab_preco_proc,
         ip.cdn_tip_vencto,
         ip.num_dia_vencto,
         ip.in_tipo_valorizacao,
         ip.pc_acrescimo_inscr,
         ip.pc_desconto_inscr,
         ip.pc_desconto,
         ip.pc_acrescimo,
         ip.log_impres_cart,
         ip.log_calc_val,
         ip.log_repas,
         ip.dat_inic_repas,
         ip.dat_fim_repas,
         ip.aa_ult_repasse,
         ip.num_mes_ult_repas,
         ip.progress_recid);
    end loop;

    for ip in (select *
                 from gp.import_modul_propost x
                where x.num_seqcial_propost = pnr_contrato_antigo) loop

      dbms_output.put_line('GRAVANDO IMPORT_MODUL_PROPOST_HIST PARA NUM_SEQCIAL_PROPOST: ' ||
                           pnr_contrato_antigo);

      insert into import_modul_propost_hist
        (num_seqcial,
         num_seqcial_propost,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         cod_livre_10,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         cd_modulo,
         cd_forma_pagto,
         log_carenc,
         ind_respons_autoriz,
         log_cobert_obrig,
         log_cobr_particip,
         dat_inicial,
         dat_cancel,
         log_bonif_penalid,
         nr_dias,
         qt_caren_eletiva,
         qt_caren_urgencia,
         cd_motivo_cancel,
         in_ctrl_carencia_proced,
         in_ctrl_carencia_insumo,
         in_cobra_participacao,
         progress_recid)
      values
        (ip.num_seqcial,
         ip.num_seqcial_propost,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.cod_livre_10,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.cd_modulo,
         ip.cd_forma_pagto,
         ip.log_carenc,
         ip.ind_respons_autoriz,
         ip.log_cobert_obrig,
         ip.log_cobr_particip,
         ip.dat_inicial,
         ip.dat_cancel,
         ip.log_bonif_penalid,
         ip.nr_dias,
         ip.qt_caren_eletiva,
         ip.qt_caren_urgencia,
         ip.cd_motivo_cancel,
         ip.in_ctrl_carencia_proced,
         ip.in_ctrl_carencia_insumo,
         ip.in_cobra_participacao,
         ip.progress_recid);
    end loop;

    for ip in (select *
                 from gp.import_lotac_propost x
                where x.num_seqcial_propost = pnr_contrato_antigo) loop

      dbms_output.put_line('GRAVANDO IMPORT_LOTAC_PROPOST_HIST PARA NUM_SEQCIAL_PROPOST: ' ||
                           pnr_contrato_antigo);

      insert into import_lotac_propost_hist
        (num_seqcial,
         num_seqcial_propost,
         cdn_lotac,
         cdn_respons_financ,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         cod_livre_10,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         progress_recid

         )
      values
        (ip.num_seqcial,
         ip.num_seqcial_propost,
         ip.cdn_lotac,
         ip.cdn_respons_financ,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.cod_livre_10,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.progress_recid);
    end loop;

    for ip in (select *
                 from gp.import_faixa_propost x
                where x.num_seqcial_propost = pnr_contrato_antigo) loop

      dbms_output.put_line('GRAVANDO IMPORT_FAIXA_PROPOST_HIST PARA NUM_SEQCIAL_PROPOST: ' ||
                           pnr_contrato_antigo);

      insert into import_faixa_propost_hist
        (num_seqcial,
         num_seqcial_propost,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         cod_livre_10,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         cd_grau_parentesco,
         nr_faixa_etaria,
         num_idade_min,
         num_idade_max,
         qtd_fator_multiplic,
         qtd_fator_multiplic_inscr,
         progress_recid

         )
      values
        (ip.num_seqcial,
         ip.num_seqcial_propost,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.cod_livre_10,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.cd_grau_parentesco,
         ip.nr_faixa_etaria,
         ip.num_idade_min,
         ip.num_idade_max,
         ip.qtd_fator_multiplic,
         ip.qtd_fator_multiplic_inscr,
         ip.progress_recid);
    end loop;

  end gravar_hist_import_propost;*/

  /*procedure restaurar_import_propost_hist(pnr_contrato_antigo number) is
  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    for ip in (select *
                 from import_propost_hist x
                where x.nr_contrato_antigo = pnr_contrato_antigo) loop

      dbms_output.put_line('RESTAURANDO IMPORT_PROPOST_HIST PARA NR_CONTRATO_ANTIGO: ' ||
                           pnr_contrato_antigo);

      insert into gp.import_propost
        (num_seqcial,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         nr_insc_contratante,
         nr_insc_contrat_origem,
         cd_modalidade,
         cd_plano,
         cd_tipo_plano,
         cd_forma_pagto,
         cdn_tip_vencto,
         num_dia_vencto,
         log_inic_valid,
         cd_convenio,
         cd_tipo_participacao,
         cd_vendedor,
         cd_tab_preco,
         pc_acrescimo,
         dt_lim_acres_mens,
         pc_acrescimo_inscr,
         dat_lim_acresc_inscr,
         pc_desconto,
         dat_lim_desc_mensal,
         pc_desconto_inscr,
         dat_lim_desc_inscr,
         cd_tab_preco_proc,
         log_mascar,
         des_mascar,
         log_faixa_etaria_especial,
         log_cobert_especial,
         log_proced_prestdor,
         log_consid_tax_coper,
         pc_acresc_taxa,
         log_medic_empres,
         num_mes_ult_faturam,
         aa_ult_fat,
         dat_propost,
         dat_fim_propost,
         nr_cgc_cpf,
         nr_cgc_cpf_contrat_orig,
         nr_contrato_antigo,
         ind_tip_pessoa,
         ind_pessoa_contrnte_orig,
         val_propost_migrac,
         cd_tab_preco_proc_cob,
         log_cartao,
         log_cobr_dif_pagto,
         pc_desc_prom_taxa,
         dat_valid_prom_tax,
         pc_desc_prom_pl,
         dat_valid_prom_plano,
         log_segassist,
         dat_fim_segassist,
         log_fatur_segassist,
         log_altera_fator_moder,
         log_altera_tax_inscr,
         log_altera_val_usuar,
         num_mm_ult_reaj,
         aa_ult_reajuste,
         pc_ult_reajuste,
         cd_registro_plano,
         log_altera_valid_prorrog,
         log_propost_regulam,
         qt_validade_termo,
         um_validade_termo,
         qt_validade_cartao,
         um_validade_cartao,
         um_validade_cart,
         qt_validade_cart,
         in_tipo_contratacao,
         in_tipo_natureza,
         in_validade_doc_ident,
         nr_oficio_reajuste,
         in_registro_plano,
         cd_plano_operadora,
         cdn_tip_idx,
         cdn_niv_reaj,
         num_seqcial_propost,
         num_seqcial_control,
         u##ind_sit_import,
         ind_sit_import,
         ind_faixa_etaria_especial,
         ind_cobr,
         progress_recid)
      values
        (ip.num_seqcial,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.nr_insc_contratante,
         ip.nr_insc_contrat_origem,
         ip.cd_modalidade,
         ip.cd_plano,
         ip.cd_tipo_plano,
         ip.cd_forma_pagto,
         ip.cdn_tip_vencto,
         ip.num_dia_vencto,
         ip.log_inic_valid,
         ip.cd_convenio,
         ip.cd_tipo_participacao,
         ip.cd_vendedor,
         ip.cd_tab_preco,
         ip.pc_acrescimo,
         ip.dt_lim_acres_mens,
         ip.pc_acrescimo_inscr,
         ip.dat_lim_acresc_inscr,
         ip.pc_desconto,
         ip.dat_lim_desc_mensal,
         ip.pc_desconto_inscr,
         ip.dat_lim_desc_inscr,
         ip.cd_tab_preco_proc,
         ip.log_mascar,
         ip.des_mascar,
         ip.log_faixa_etaria_especial,
         ip.log_cobert_especial,
         ip.log_proced_prestdor,
         ip.log_consid_tax_coper,
         ip.pc_acresc_taxa,
         ip.log_medic_empres,
         ip.num_mes_ult_faturam,
         ip.aa_ult_fat,
         ip.dat_propost,
         ip.dat_fim_propost,
         ip.nr_cgc_cpf,
         ip.nr_cgc_cpf_contrat_orig,
         ip.nr_contrato_antigo,
         ip.ind_tip_pessoa,
         ip.ind_pessoa_contrnte_orig,
         ip.val_propost_migrac,
         ip.cd_tab_preco_proc_cob,
         ip.log_cartao,
         ip.log_cobr_dif_pagto,
         ip.pc_desc_prom_taxa,
         ip.dat_valid_prom_tax,
         ip.pc_desc_prom_pl,
         ip.dat_valid_prom_plano,
         ip.log_segassist,
         ip.dat_fim_segassist,
         ip.log_fatur_segassist,
         ip.log_altera_fator_moder,
         ip.log_altera_tax_inscr,
         ip.log_altera_val_usuar,
         ip.num_mm_ult_reaj,
         ip.aa_ult_reajuste,
         ip.pc_ult_reajuste,
         ip.cd_registro_plano,
         ip.log_altera_valid_prorrog,
         ip.log_propost_regulam,
         ip.qt_validade_termo,
         ip.um_validade_termo,
         ip.qt_validade_cartao,
         ip.um_validade_cartao,
         ip.um_validade_cart,
         ip.qt_validade_cart,
         ip.in_tipo_contratacao,
         ip.in_tipo_natureza,
         ip.in_validade_doc_ident,
         ip.nr_oficio_reajuste,
         ip.in_registro_plano,
         ip.cd_plano_operadora,
         ip.cdn_tip_idx,
         ip.cdn_niv_reaj,
         ip.num_seqcial_propost,
         ip.num_seqcial_control,
         ip.u##ind_sit_import,
         ip.ind_sit_import,
         ip.ind_faixa_etaria_especial,
         ip.ind_cobr,
         ip.progress_recid);
    end loop;

    for ip in (select *
                 from importpadrcobertproposthist x
                where x.num_seqcial_propost = pnr_contrato_antigo) loop

      dbms_output.put_line('RESTAURANDO IMPORTPADRCOBERTPROPOSTHIST PARA NUM_SEQCIAL_PROPOST: ' ||
                           pnr_contrato_antigo);

      insert into gp.importpadrcobertpropost
        (num_seqcial,
         num_seqcial_propost,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         cod_livre_10,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         cd_padrao_cobertura,
         cd_modulo,
         pc_acrescimo_inscr,
         pc_desconto_inscr,
         pc_acresc_taxa,
         pc_desconto_taxa,
         num_dias_bonifi,
         cd_grau_parentesco,
         nr_faixa_etaria_ini,
         nr_faixa_etaria_fim,
         nr_faixa_etaria,
         qt_fator_mensalidade,
         qt_fator_inscricao,
         progress_recid)
      values
        (ip.num_seqcial,
         ip.num_seqcial_propost,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.cod_livre_10,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.cd_padrao_cobertura,
         ip.cd_modulo,
         ip.pc_acrescimo_inscr,
         ip.pc_desconto_inscr,
         ip.pc_acresc_taxa,
         ip.pc_desconto_taxa,
         ip.num_dias_bonifi,
         ip.cd_grau_parentesco,
         ip.nr_faixa_etaria_ini,
         ip.nr_faixa_etaria_fim,
         ip.nr_faixa_etaria,
         ip.qt_fator_mensalidade,
         ip.qt_fator_inscricao,
         ip.progress_recid);
    end loop;

    for ip in (select *
                 from import_negociac_propost_hist x
                where x.num_seqcial_propost = pnr_contrato_antigo) loop

      dbms_output.put_line('RESTAURANDO IMPORT_NEGOCIAC_PROPOST_HIST PARA NUM_SEQCIAL_PROPOST: ' ||
                           pnr_contrato_antigo);

      insert into gp.import_negociac_propost
        (num_seqcial,
         num_seqcial_propost,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         cod_livre_10,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         cd_unimed,
         cd_plano,
         cd_tipo_plano,
         cd_forma_pagto,
         um_carencia,
         qt_carencia,
         cd_tab_preco,
         cd_tab_preco_proc,
         cdn_tip_vencto,
         num_dia_vencto,
         in_tipo_valorizacao,
         pc_acrescimo_inscr,
         pc_desconto_inscr,
         pc_desconto,
         pc_acrescimo,
         log_impres_cart,
         log_calc_val,
         log_repas,
         dat_inic_repas,
         dat_fim_repas,
         aa_ult_repasse,
         num_mes_ult_repas,
         progress_recid

         )
      values
        (ip.num_seqcial,
         ip.num_seqcial_propost,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.cod_livre_10,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.cd_unimed,
         ip.cd_plano,
         ip.cd_tipo_plano,
         ip.cd_forma_pagto,
         ip.um_carencia,
         ip.qt_carencia,
         ip.cd_tab_preco,
         ip.cd_tab_preco_proc,
         ip.cdn_tip_vencto,
         ip.num_dia_vencto,
         ip.in_tipo_valorizacao,
         ip.pc_acrescimo_inscr,
         ip.pc_desconto_inscr,
         ip.pc_desconto,
         ip.pc_acrescimo,
         ip.log_impres_cart,
         ip.log_calc_val,
         ip.log_repas,
         ip.dat_inic_repas,
         ip.dat_fim_repas,
         ip.aa_ult_repasse,
         ip.num_mes_ult_repas,
         ip.progress_recid);
    end loop;

    for ip in (select *
                 from import_modul_propost_hist x
                where x.num_seqcial_propost = pnr_contrato_antigo) loop

      dbms_output.put_line('RESTAURANDO IMPORT_MODUL_PROPOST_HIST PARA NUM_SEQCIAL_PROPOST: ' ||
                           pnr_contrato_antigo);

      insert into gp.import_modul_propost
        (num_seqcial,
         num_seqcial_propost,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         cod_livre_10,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         cd_modulo,
         cd_forma_pagto,
         log_carenc,
         ind_respons_autoriz,
         log_cobert_obrig,
         log_cobr_particip,
         dat_inicial,
         dat_cancel,
         log_bonif_penalid,
         nr_dias,
         qt_caren_eletiva,
         qt_caren_urgencia,
         cd_motivo_cancel,
         in_ctrl_carencia_proced,
         in_ctrl_carencia_insumo,
         in_cobra_participacao,
         progress_recid)
      values
        (ip.num_seqcial,
         ip.num_seqcial_propost,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.cod_livre_10,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.cd_modulo,
         ip.cd_forma_pagto,
         ip.log_carenc,
         ip.ind_respons_autoriz,
         ip.log_cobert_obrig,
         ip.log_cobr_particip,
         ip.dat_inicial,
         ip.dat_cancel,
         ip.log_bonif_penalid,
         ip.nr_dias,
         ip.qt_caren_eletiva,
         ip.qt_caren_urgencia,
         ip.cd_motivo_cancel,
         ip.in_ctrl_carencia_proced,
         ip.in_ctrl_carencia_insumo,
         ip.in_cobra_participacao,
         ip.progress_recid);
    end loop;

    for ip in (select *
                 from import_lotac_propost_hist x
                where x.num_seqcial_propost = pnr_contrato_antigo) loop

      dbms_output.put_line('RESTAURANDO IMPORT_LOTAC_PROPOST_HIST PARA NUM_SEQCIAL_PROPOST: ' ||
                           pnr_contrato_antigo);

      insert into gp.import_lotac_propost
        (num_seqcial,
         num_seqcial_propost,
         cdn_lotac,
         cdn_respons_financ,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         cod_livre_10,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         progress_recid

         )
      values
        (ip.num_seqcial,
         ip.num_seqcial_propost,
         ip.cdn_lotac,
         ip.cdn_respons_financ,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.cod_livre_10,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.progress_recid);
    end loop;

    for ip in (select *
                 from import_faixa_propost_hist x
                where x.num_seqcial_propost = pnr_contrato_antigo) loop

      dbms_output.put_line('RESTAURANDO IMPORT_FAIXA_PROPOST_HIST PARA NUM_SEQCIAL_PROPOST: ' ||
                           pnr_contrato_antigo);

      insert into gp.import_faixa_propost
        (num_seqcial,
         num_seqcial_propost,
         cod_livre_1,
         cod_livre_2,
         cod_livre_3,
         cod_livre_4,
         cod_livre_5,
         cod_livre_6,
         cod_livre_7,
         cod_livre_8,
         cod_livre_9,
         cod_livre_10,
         num_livre_1,
         num_livre_2,
         num_livre_3,
         num_livre_4,
         num_livre_5,
         num_livre_6,
         num_livre_7,
         num_livre_8,
         num_livre_9,
         num_livre_10,
         val_livre_1,
         val_livre_2,
         val_livre_3,
         val_livre_4,
         val_livre_5,
         val_livre_6,
         val_livre_7,
         val_livre_8,
         val_livre_9,
         val_livre_10,
         log_livre_1,
         log_livre_2,
         log_livre_3,
         log_livre_4,
         log_livre_5,
         log_livre_6,
         log_livre_7,
         log_livre_8,
         log_livre_9,
         log_livre_10,
         dat_livre_1,
         dat_livre_2,
         dat_livre_3,
         dat_livre_4,
         dat_livre_5,
         dat_livre_6,
         dat_livre_7,
         dat_livre_8,
         dat_livre_9,
         dat_livre_10,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         cd_grau_parentesco,
         nr_faixa_etaria,
         num_idade_min,
         num_idade_max,
         qtd_fator_multiplic,
         qtd_fator_multiplic_inscr,
         progress_recid

         )
      values
        (ip.num_seqcial,
         ip.num_seqcial_propost,
         ip.cod_livre_1,
         ip.cod_livre_2,
         ip.cod_livre_3,
         ip.cod_livre_4,
         ip.cod_livre_5,
         ip.cod_livre_6,
         ip.cod_livre_7,
         ip.cod_livre_8,
         ip.cod_livre_9,
         ip.cod_livre_10,
         ip.num_livre_1,
         ip.num_livre_2,
         ip.num_livre_3,
         ip.num_livre_4,
         ip.num_livre_5,
         ip.num_livre_6,
         ip.num_livre_7,
         ip.num_livre_8,
         ip.num_livre_9,
         ip.num_livre_10,
         ip.val_livre_1,
         ip.val_livre_2,
         ip.val_livre_3,
         ip.val_livre_4,
         ip.val_livre_5,
         ip.val_livre_6,
         ip.val_livre_7,
         ip.val_livre_8,
         ip.val_livre_9,
         ip.val_livre_10,
         ip.log_livre_1,
         ip.log_livre_2,
         ip.log_livre_3,
         ip.log_livre_4,
         ip.log_livre_5,
         ip.log_livre_6,
         ip.log_livre_7,
         ip.log_livre_8,
         ip.log_livre_9,
         ip.log_livre_10,
         ip.dat_livre_1,
         ip.dat_livre_2,
         ip.dat_livre_3,
         ip.dat_livre_4,
         ip.dat_livre_5,
         ip.dat_livre_6,
         ip.dat_livre_7,
         ip.dat_livre_8,
         ip.dat_livre_9,
         ip.dat_livre_10,
         ip.dat_ult_atualiz,
         ip.hra_ult_atualiz,
         ip.cod_usuar_ult_atualiz,
         ip.cd_grau_parentesco,
         ip.nr_faixa_etaria,
         ip.num_idade_min,
         ip.num_idade_max,
         ip.qtd_fator_multiplic,
         ip.qtd_fator_multiplic_inscr,
         ip.progress_recid);
    end loop;

  end restaurar_import_propost_hist;*/

  procedure p_grava_benef_aposdem_sem_lot is

    cursor c_aposdem is
      select ib.num_seqcial,
             ib.nr_insc_contratante,
             ib.cd_modalidade,
             ib.nr_proposta,
             ib.log_sexo,
             ib.in_est_civil,
             ib.dt_nascimento,
             ib.cd_grau_parentesco,
             ib.log_respons,
             u.dtinicio dt_inclusao_plano,
             u.dtbaixa dt_exclusao_plano,
             ib.log_carenc,
             ib.cd_funcionario,
             ib.dt_admissao,
             ib.cd_cbo,
             ib.cd_cpf,
             ib.nr_identidade,
             ib.en_rua,
             ib.en_bairro,
             ib.en_cidade,
             ib.en_cep,
             ib.en_uf,
             ib.log_inscr_fatur,
             ib.cd_padrao_cob,
             ib.nom_usuar,
             ib.nom_internac,
             ib.des_espcif_1,
             ib.des_espcif_2,
             ib.des_espcif_3,
             ib.des_espcif_4,
             ib.nr_cgc_cpf,
             pr2.nr_contrato_antigo nr_contrato_antigo,
             to_number(u.nrcontrato || lpad(u.nrfamilia, 6, '0') + pnrfamilia_demitidos /*600000*/ ||
                       u.tpusuario || u.nrdigitoct) cd_carteira_antiga,
             ib.in_tipo_pessoa,
             ib.cd_unimed_origem,
             ib.cd_identific_uni_origem,
             ib.cd_plano_origem,
             ib.nom_plano_orig,
             case
               when ib.cdcarteiraorigemresponsavel = ib.cd_carteira_antiga

                then

                to_number(u.nrcontrato || lpad(u.nrfamilia, 6, '0') + pnrfamilia_demitidos /*600000*/ ||
                          u.tpusuario || u.nrdigitoct)

               else
                (select to_number(u2.nrcontrato || lpad(u2.nrfamilia, 6, '0')
                                  + pnrfamilia_demitidos /*600000*/ || u2.tpusuario || u2.nrdigitoct)
                   from usuario u2
                  where u2.nrregistro = u.nrregistro
                    and u2.nrcontrato = u.nrcontrato
                    and u2.nrfamilia = u.nrfamilia
                    and u2.tpusuario = 00)
             end cdcarteiraorigemresponsavel,

             ib.cd_padrao_cob_ant,
             ib.dt_mvto_alteracao,
             ib.dt_falecimento_titular,
             ib.dt_atualizacao_carencia,
             ib.cd_userid_carencia,
             ib.log_bonifi_penalid,
             ib.nr_dias,
             ib.log_cobr_fator_moder,
             ib.dt_inicio_vinculo_unidade,
             null aa_ult_fat_period,
             ib.cd_departamento,
             ib.cd_secao,
             ib.cd_setor,
             ib.cd_carteira_trabalho,
             ib.dt_primeira_consulta,
             nvl((select cdvalor_externo
                   from mig_tab_conversao r, mig_tab_conversao_exp re
                  where re.nrseq_tab_conversao = r.nrseq
                    and r.notabela = 'MIGRACAO_MOTIVO_CANCELAMENTO'
                    and u.cdmotivo_cancelamento = re.cdvalor_interno),
                 '0') cd_motivo_cancel,
             ib.cd_funcao,
             ib.cd_pis_pasep,
             ib.cd_cartao_nacional_saude,
             ib.nom_pai,
             ib.in_segmento_assistencial,
             ib.dt_inclusao_origem,
             ib.cd_identific_orig_resp,
             ib.cd_registro_plano,
             ib.nom_email,
             ib.cd_vendedor,
             ib.des_orgao_emissor_ident,
             ib.nom_pais,
             ib.cd_plano_operadora,
             ib.in_via_transferencia,
             ib.des_nacion,
             ib.des_natur_docto,
             ib.uf_emissor_ident,
             ib.dt_emissao_ident,
             ib.nr_telefone1,
             ib.nr_telefone2,
             ib.nom_usuario,
             ib.nom_mae,
             ib.cdn_produt_orig,
             ib.cd_controle_oper_ans,
             null num_mes_ult_faturam,
             ib.num_matr_func,
             null num_seqcial_control,
             ib.num_seqcial_bnfciar,
             ib.u##ind_sit_import,
             ib.ind_sit_import,
             ib.des_histor,
             ib.des_ocor_bnfciar,
             null progress_recid,
             'A' cod_livre_2,
             ib.dat_livre_1
        from import_bnfciar ib,
             usuario        u,
             familia        f,
             import_propost pr,
             import_propost pr2
       where u.nrsequencial_usuario = ib.num_seqcial_bnfciar
         and f.nrregistro = u.nrregistro
         and f.nrcontrato = u.nrcontrato
         and f.nrfamilia = u.nrfamilia
         and pr.nr_contrato_antigo = ib.nr_contrato_antigo --u##nr_contrato_antigo
         and pr.num_livre_2 = pr2.num_livre_2 --NRREGISTRO
         and pr.num_livre_3 = pr2.num_livre_3 --NRCONTRATO
         and pr.cod_livre_2 = pr2.cod_livre_2 --CDCONTRATO
         and pr.cd_modalidade = pr2.cd_modalidade
         and pr.cd_plano = pr2.cd_plano
         and pr.cd_tipo_plano = pr2.cd_tipo_plano
         and pr2.num_livre_4 = 0              --NRFAMILIA
         and f.dtinicio_contrato is not null
         and not exists
       (select 1
                from import_bnfciar ib2
               where ib2.num_seqcial_bnfciar = ib.num_seqcial_bnfciar
                 and nvl(ib2.cod_livre_2, ' ') = 'A'); --cod_livre_2 = 'A' indica DEMITIDO/APOSENTADO

    cursor c_modulos_benef(pnrsequencial_bnfciar import_bnfciar.num_seqcial_bnfciar%type) is

      select null                num_seqcial,
             num_seqcial_bnfciar,
             cdn_modul,
             null                dat_inic,
             null                dat_fim,
             log_carenc,
             log_bonif_penalid,
             nr_dias,
             null                aa_ult_fat_period,
             null                num_mes_ult_faturam,
             cdn_motiv_cancel,
             null                num_livre_1,
             null                progress_recid
        from import_modul_bnfciar imb
       where imb.num_seqcial_bnfciar = pnrsequencial_bnfciar;

  begin

    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;
    for cp in c_aposdem loop

      p_insere_controle('BE',
                        cp.num_seqcial_bnfciar,
                        cp.cd_carteira_antiga);

      cp.num_seqcial_control := vnrcontrolemigracao;
      cp.u##ind_sit_import   := 'RC'; -- teste ALEX. Antes gravava 'AP'
      cp.ind_sit_import      := 'RC';
      cp.aa_ult_fat_period   := to_char(cp.dt_exclusao_plano, 'YYYY');
      cp.num_mes_ult_faturam := to_char(cp.dt_exclusao_plano, 'MM');

DBMS_OUTPUT.PUT_LINE( '@@@@@@@@@@@@@DEMITIDO GANHANDO DATA EXCLUSAO NO ULTIMO FATURAMENTO!: ' || cp.dt_exclusao_plano );

      select gp.import_bnfciar_seq.nextval into cp.progress_recid from dual;

      /*if cp.dt_admissao < cp.dt_nascimento then
         cp.dt_admissao := null;
      end if;*/

      insert into import_bnfciar
        (num_seqcial,
         nr_insc_contratante,
         cd_modalidade,
         nr_proposta,
         log_sexo,
         in_est_civil,
         dt_nascimento,
         cd_grau_parentesco,
         log_respons,
         dt_inclusao_plano,
         dt_exclusao_plano,
         log_carenc,
         cd_funcionario,
         dt_admissao,
         cd_cbo,
         cd_cpf,
         nr_identidade,
         en_rua,
         en_bairro,
         en_cidade,
         en_cep,
         en_uf,
         log_inscr_fatur,
         cd_padrao_cob,
         nom_usuar,
         nom_internac,
         des_espcif_1,
         des_espcif_2,
         des_espcif_3,
         des_espcif_4,
         nr_cgc_cpf,
         nr_contrato_antigo,
         cd_carteira_antiga,
         in_tipo_pessoa,
         cd_unimed_origem,
         cd_identific_uni_origem,
         cd_plano_origem,
         nom_plano_orig,
         cdcarteiraorigemresponsavel,
         cd_padrao_cob_ant,
         dt_mvto_alteracao,
         dt_falecimento_titular,
         dt_atualizacao_carencia,
         cd_userid_carencia,
         log_bonifi_penalid,
         nr_dias,
         log_cobr_fator_moder,
         dt_inicio_vinculo_unidade,
         aa_ult_fat_period,
         cd_departamento,
         cd_secao,
         cd_setor,
         cd_carteira_trabalho,
         dt_primeira_consulta,
         cd_motivo_cancel,
         cd_funcao,
         cd_pis_pasep,
         cd_cartao_nacional_saude,
         nom_pai,
         in_segmento_assistencial,
         dt_inclusao_origem,
         cd_identific_orig_resp,
         cd_registro_plano,
         nom_email,
         cd_vendedor,
         des_orgao_emissor_ident,
         nom_pais,
         cd_plano_operadora,
         in_via_transferencia,
         des_nacion,
         des_natur_docto,
         uf_emissor_ident,
         dt_emissao_ident,
         nr_telefone1,
         nr_telefone2,
         nom_usuario,
         nom_mae,
         cdn_produt_orig,
         cd_controle_oper_ans,
         num_mes_ult_faturam,
         num_matr_func,
         num_seqcial_control,
         num_seqcial_bnfciar,
         u##ind_sit_import,
         ind_sit_import,
         des_histor,
         des_ocor_bnfciar,
         progress_recid,
         cod_livre_2,
         dat_livre_1)

      values
        (cp.num_seqcial,
         cp.nr_insc_contratante,
         cp.cd_modalidade,
         cp.nr_proposta,
         cp.log_sexo,
         cp.in_est_civil,
         cp.dt_nascimento,
         cp.cd_grau_parentesco,
         cp.log_respons,
         cp.dt_inclusao_plano,
         cp.dt_exclusao_plano,
         cp.log_carenc,
         cp.cd_funcionario,
         cp.dt_admissao,
         cp.cd_cbo,
         cp.cd_cpf,
         cp.nr_identidade,
         cp.en_rua,
         cp.en_bairro,
         cp.en_cidade,
         cp.en_cep,
         cp.en_uf,
         cp.log_inscr_fatur,
         cp.cd_padrao_cob,
         cp.nom_usuar,
         cp.nom_internac,
         cp.des_espcif_1,
         cp.des_espcif_2,
         cp.des_espcif_3,
         cp.des_espcif_4,
         cp.nr_cgc_cpf,
         cp.nr_contrato_antigo,
         cp.cd_carteira_antiga,
         cp.in_tipo_pessoa,
         cp.cd_unimed_origem,
         cp.cd_identific_uni_origem,
         cp.cd_plano_origem,
         cp.nom_plano_orig,
         cp.cdcarteiraorigemresponsavel,
         cp.cd_padrao_cob_ant,
         cp.dt_mvto_alteracao,
         cp.dt_falecimento_titular,
         cp.dt_atualizacao_carencia,
         cp.cd_userid_carencia,
         cp.log_bonifi_penalid,
         cp.nr_dias,
         cp.log_cobr_fator_moder,
         cp.dt_inicio_vinculo_unidade,
         cp.aa_ult_fat_period,
         cp.cd_departamento,
         cp.cd_secao,
         cp.cd_setor,
         cp.cd_carteira_trabalho,
         cp.dt_primeira_consulta,
         cp.cd_motivo_cancel,
         cp.cd_funcao,
         cp.cd_pis_pasep,
         cp.cd_cartao_nacional_saude,
         cp.nom_pai,
         cp.in_segmento_assistencial,
         cp.dt_inclusao_origem,
         cp.cd_identific_orig_resp,
         cp.cd_registro_plano,
         cp.nom_email,
         cp.cd_vendedor,
         cp.des_orgao_emissor_ident,
         cp.nom_pais,
         cp.cd_plano_operadora,
         cp.in_via_transferencia,
         cp.des_nacion,
         cp.des_natur_docto,
         cp.uf_emissor_ident,
         cp.dt_emissao_ident,
         cp.nr_telefone1,
         cp.nr_telefone2,
         cp.nom_usuario,
         cp.nom_mae,
         cp.cdn_produt_orig,
         cp.cd_controle_oper_ans,
         cp.num_mes_ult_faturam,
         cp.num_matr_func,
         cp.num_seqcial_control,
         cp.num_seqcial_bnfciar,
         cp.u##ind_sit_import,
         cp.ind_sit_import,
         cp.des_histor,
         cp.des_ocor_bnfciar,
         cp.progress_recid,
         cp.cod_livre_2, --cod_livre_2 = 'A' indica DEMITIDO/APOSENTADO
         cp.dat_livre_1);

--DBMS_OUTPUT.PUT_LINE('P1;ADMISSAO/NASCIMENTO;' || cp.dt_admissao || ';' || cp.dt_nascimento );

      --cursor dos módulos
      for m in c_modulos_benef(cp.num_seqcial_bnfciar) loop

        m.dat_inic            := cp.dt_inclusao_plano;
        m.dat_fim             := cp.dt_exclusao_plano;
        m.cdn_motiv_cancel    := pcdmotivocancel;
        m.num_livre_1         := vnrcontrolemigracao;
        m.num_mes_ult_faturam := cp.num_mes_ult_faturam;
        m.aa_ult_fat_period   := cp.aa_ult_fat_period;

        select gp.import_modul_bnfciar_seq.nextval,
               gp.import_modul_bnfciar_seq.currval
          into m.progress_recid, m.num_seqcial
          from dual;

        insert into import_modul_bnfciar
          (num_seqcial,
           num_seqcial_bnfciar,
           cdn_modul,
           dat_inic,
           dat_fim,
           log_carenc,
           log_bonif_penalid,
           nr_dias,
           aa_ult_fat_period,
           num_mes_ult_faturam,
           cdn_motiv_cancel,
           num_livre_1,
           progress_recid)
        values
          (m.num_seqcial,
           m.num_seqcial_bnfciar,
           m.cdn_modul,
           m.dat_inic,
           m.dat_fim,
           m.log_carenc,
           m.log_bonif_penalid,
           m.nr_dias,
           m.aa_ult_fat_period,
           m.num_mes_ult_faturam,
           m.cdn_motiv_cancel,
           m.num_livre_1,
           m.progress_recid);

        p_commit;

      end loop;

      p_commit;

    end loop;

    p_commit;

  end p_grava_benef_aposdem_sem_lot;

  procedure p_grava_proposta_sem_lotacao(pproposta c_ctrl_propost%rowtype,
                                         pnr_contrato_antigo number,
                                         psit_proposta varchar2) is
    vnrpessoapaga  number;
    vtppessoa_paga pessoa.tppessoa%type;
    v_complemento varchar2(10000);
  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    DBMS_OUTPUT.PUT_LINE( 'ENTROU EM P_GRAVA_PROPOSTA_SEM_LOTACAO' );

    --se pnr_contrato_antigo estiver preenchido, o beneficiario ja existe e esta associado a uma proposta. manter mesmo numero
    if pnr_contrato_antigo is not null and pnr_contrato_antigo > 0 then
      seqproposta := pnr_contrato_antigo;
    else
      seqproposta := 0;
    end if;

    if pproposta.nrfamilia <> 0 then
       -- quem paga o plano é o responsável da família

      select tppessoa
        into vtppessoa_paga
        from pessoa p
       where p.nrregistro = pproposta.nrpessoa_paga;

      if vtppessoa_paga = 'F' then

        vnrpessoapaga := pproposta.nrpessoa_paga;

      else

        begin
          select nvl(f.nrpessoa_paga, us.nrregistro_usuario)
            into vnrpessoapaga
            from familia f, usuario us
           where f.nrregistro = pproposta.nrregistro
             and f.nrcontrato = pproposta.nrcontrato
             and f.nrfamilia = pproposta.nrfamilia
             and us.nrregistro = f.nrregistro
             and us.nrcontrato = f.nrcontrato
             and us.nrfamilia = f.nrfamilia
             and us.tpusuario = '00';
        end;

      end if;

    elsif pproposta.cdlotacao <> '0' then
      begin
        select nvl(l.nrpessoa_paga, l.nrregistro_lotacao)
          into vnrpessoapaga
          from lotacao l
         where l.nrregistro = pproposta.nrregistro
           and l.nrcontrato = pproposta.nrcontrato
           and l.cdlotacao = pproposta.cdlotacao;
      end;

    elsif pproposta.nrfamilia = 0 and pproposta.cdlotacao = '0' then
      begin
        select nvl(nrpessoa_paga, nrregistro)
          into vnrpessoapaga
          from contrato_da_pessoa cdp
         where cdp.nrregistro = pproposta.nrregistro
           and cdp.nrcontrato = pproposta.nrcontrato;
      end;
    end if;

    if vnrpessoapaga = pproposta.nrregistro then
      vnrpessoapaga := 0;
    end if;

    if seqproposta is not null and seqproposta > 0 then
      p_insere_log('BENEFICIARIO_PROPOSTA_SEM_LOTACAO',
                   'p_grava_proposta_sem_lotacao',
                   'BENEFICIARIO JA ESTA ASSOCIADO A PROPOSTA. NAO PROCURAR NOVA',
                   pproposta.nrsequencial_usuario, --pnrsequencial_origem
                   0, --pcdidentificador
                   'NUM_SEQCIAL_PROPOST: ',
                   seqproposta); --complemento
    else
      begin
        --legenda
        /*
        num_livre_2 = nrregistro
        num_livre_3 = nrcontrato
        num_livre_4 = nrfamilia
        cod_livre_2 = cdlotacao
        num_livre_5 = nrpessoa_paga
        cod_livre_4 = cdfator_moderador
        */

        v_complemento := pproposta.cd_modalidade || ';' ||
                         pproposta.cd_plano || ';' ||
                         pproposta.cd_tipo_plano || ';' ||
                         pproposta.nrregistro || ';' ||
                         pproposta.nrcontrato || ';' ||
                         pproposta.nrfamilia || ';' ||
                         vnrpessoapaga || ';' ||
                         pproposta.cdlotacao;
        p_insere_log('BENEFICIARIO_PROPOSTA_SEM_LOTACAO',
                     'p_grava_proposta_sem_lotacao',
                     'PROCURANDO PROPOSTA (SEM LOTACAO) PARA O BENEFICIARIO',
                     pproposta.nrsequencial_usuario, --pnrsequencial_origem
                     0, --pcdidentificador
                     'CD_MODALIDADE;CD_PLANO;CD_TIPO_PLANO;NRREGISTRO;NRCONTRATO;NRFAMILIA;VNRPESSOAPAGA;PPROPOSTA.CDLOTACAO',
                     v_complemento); --complemento

        /**
         *checar se ja existe proposta adequada para esse beneficiario
         */
        -- PERFORMANCE REVISADA 24/05/17. indice explícito não fez diferença
        select --/*+ INDEX_ASC(t SRG09573##IMPRTPRP_IX5) */
          t.num_seqcial_propost
          into seqproposta
          from import_propost t
         where t.cd_modalidade = pproposta.cd_modalidade
           and t.cd_plano      = pproposta.cd_plano
           and t.cd_tipo_plano = pproposta.cd_tipo_plano
           and t.num_livre_2 = pproposta.nrregistro
           and t.num_livre_3 = pproposta.nrcontrato
           and t.num_livre_4 = pproposta.nrfamilia
           and t.num_livre_5 = vnrpessoapaga
           and t.cod_livre_2 = pproposta.cdlotacao;
      exception
        when no_data_found then
          seqproposta := 0;
      end;
      p_insere_log('BENEFICIARIO_PROPOSTA_SEM_LOTACAO',
                   'p_grava_proposta_sem_lotacao',
                   'PROCUROU PROPOSTA PARA O BENEFICIARIO',
                   pproposta.nrsequencial_usuario, --pnrsequencial_origem
                   0, --pcdidentificador
                   'NUM_SEQCIAL_PROPOST ENCONTRADO: ',
                   seqproposta); --complemento
    end if;


    /* se nao encontrou, sera criada nova proposta */
    if seqproposta = 0 then
      begin
        select gp.import_propost_seq.nextval into seqproposta from dual;

        vtabelapreco := '';

        p_insere_log('BENEFICIARIO_PROPOSTA',
                     'p_grava_proposta_sem_lotacao',
                     'NAO ACHOU PROPOSTA SEM LOTACAO',
                     pproposta.nrsequencial_usuario, --pnrsequencial_origem
                     0, --pcdidentificador
                     'VAI CRIAR NOVA. NUM_SEQCIAL_PROPOST: ',
                     seqproposta); --complemento

        p_insere_controle('PR',
                          seqproposta,
                          pproposta.cdcontrato || vnrfamilia);

        dbms_output.put_line('PROPOSTA_SEM_LOTACAO P1');
        insert into gp.import_propost
          (num_seqcial,
           dat_ult_atualiz,
           hra_ult_atualiz,
           cod_usuar_ult_atualiz,
           --u##nr_contrato_antigo, esse campo foi criado in loco na 12.1.12. não existe na 12.1.18. criar apenas se comprometer performance.
           nr_contrato_antigo,
           nr_insc_contratante,
           cd_modalidade,
           cd_plano,
           cd_tipo_plano,
           num_livre_10, --nr_proposta
           cd_plano_operadora,
           num_seqcial_propost,
           num_seqcial_control,
           cd_forma_pagto,
           ind_sit_import,
           u##ind_sit_import,
           num_livre_2,
           num_livre_3,
           num_livre_4,
           cod_livre_2,
           num_livre_5,
           --num_livre_6,
           cod_livre_3,
           cod_livre_4,
           cod_livre_5,
           progress_recid,
           num_livre_7, -- regra de mensalidade
           log_consid_tax_coper)

        values
          (seqproposta, --num_seqcial,
           trunc(sysdate), --dat_ult_atualiz,
           to_char(sysdate, 'HH24:MI:SS'), --hra_ult_atualiz,
           'MIGRACAO', --cod_usuar_ult_atualiz,
           -- não existe na 12.1.18 upper(seqproposta), --nr_contrato_antigo,
           seqproposta, --nr_contrato_antigo,
           0, --nr_insc_contratante,
           pproposta.cd_modalidade, --cd_modalidade,
           pproposta.cd_plano, --cd_plano,
           pproposta.cd_tipo_plano, --cd_tipo_plano,
           vnrproposta, -- numero da proposta, gerado sequencialmente para cada modalidade
           0, --cd_plano_operadora,
           seqproposta, --num_seqcial_propost,
           vnrcontrolemigracao, --num_seqcial_control,
           pproposta.cd_forma_pagto, --cd_forma_pagto,
           'GE', --ind_sit_import,
           'GE',
           pproposta.nrregistro, --num_livre_2
           pproposta.nrcontrato, --num_livre_3
           pproposta.nrfamilia, --num_livre_4
           pproposta.cdlotacao, --cod_livre_2
           vnrpessoapaga, --num_livre_5
           --vnrregistropessoaorigem,
           pproposta.cdcontrato, --cod_livre_3
           pproposta.cdfator_moderador, --cod_livre_4
           pproposta.tpplano, --cod_livre_5
           seqproposta, --progress_recid);
           0, -- regra de mensalidade
           decode(pproposta.lg_considera_taxa_co,'S',1,0));

        dbms_output.put_line('PROPOSTA_SEM_LOTACAO P2');

        --p_atualiza_proposta(seqproposta,'N');

        dbms_output.put_line('PROPOSTA_SEM_LOTACAO P3');

      exception
        when others then
          p_insere_falha(vnrcontrolemigracao,
                         'PR',
                         'OCORREU ERRO NA PROPOSTA SEM LOTACAO ' || seqproposta,
                         sqlerrm,
                         pproposta.cdcontrato);
      end;

    end if;

    --se a proposta estiver em situacao GE ou GA, atualizar.
    if psit_proposta in ('GE','GA') then
      p_atualiza_proposta(seqproposta,'N',pproposta.nrsequencial_usuario);
    end if;

    begin
      update gp.import_bnfciar ib
         set ib.nr_contrato_antigo = seqproposta
       where ib.num_seqcial_bnfciar = pproposta.nrsequencial_usuario;
    end;
    p_commit;

  end p_grava_proposta_sem_lotacao;

  procedure p_grava_proposta_com_lotacao(pproposta c_ctrl_propost%rowtype,
                                         pnr_contrato_antigo number,
                                         psit_proposta varchar2) is

    vnrpessoapaga  number;
    vtppessoa_paga pessoa.tppessoa%type;
--    seqlotacproposta integer;
--    vlong long;
--    lp integer;
    vachou_lotacao varchar2(1);
    vnrfamilia_aux number;
    v_complemento varchar2(10000);

  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    --se pnr_contrato_antigo estiver preenchido, o beneficiario ja existe e esta associado a uma proposta. manter mesmo numero
    if pnr_contrato_antigo is not null and pnr_contrato_antigo > 0 then
      seqproposta := pnr_contrato_antigo;
    else
      seqproposta := 0;
    end if;

    p_insere_controle('PR',
                      seqproposta,
                      pproposta.cdcontrato || vnrfamilia);

    DBMS_OUTPUT.PUT_LINE( 'CDLOTACAO@@@@@@: ' || pproposta.cdlotacao);

    if pproposta.cdlotacao <> '0' then
      begin
        select 'S' into vachou_lotacao
          from temp_depara_lotacao tl
         where tl.nrregistro = pproposta.nrregistro
           and tl.nrcontrato = pproposta.nrcontrato
           and tl.cdlotacao  = pproposta.cdlotacao
           and rownum = 1;
      exception
        when others then
          DBMS_OUTPUT.PUT_LINE( 'TRATAR ERRO AQUI! NAO ACHOU LOTACAO! controle/seqproposta/sqlerrm/propost.cdcontrato: ' ||
          vnrcontrolemigracao || ' - ' || seqproposta || ' - ' || sqlerrm || ' - ' || pproposta.nrregistro);
          /*
          p_insere_falha(vnrcontrolemigracao,
                         'PR',
                         'NÃO FOI ENCONTRADA A LOTACAO PARA A PROPOSTA NO TOTVS.',
                         sqlerrm,
                         pproposta.nrregistro);*/
          --aqui não é possível usar p_insere_falha pois import_propost ainda não existe para ser relacionada à mensagem.
          raise_application_error(-20001,
                                  'NÃO FOI ENCONTRADA A LOTAÇÃO PARA A PROPOSTA NO TOTVS. NRREGISTRO: ' || pproposta.nrregistro);
      end;
    end if;

    if pproposta.nrfamilia <> 0 then
       -- quem paga o plano é o responsável da família

      select tppessoa
        into vtppessoa_paga
        from pessoa p
       where p.nrregistro = pproposta.nrpessoa_paga;

      -- quando o plano é Físico, NRPESSOA_PAGA fica nulo na familia,
      -- pois deve ser considerado CONTRATO_DA_PESSOA.NRPESSOA_PAGA
      if vtppessoa_paga = 'F' then

        vnrpessoapaga := pproposta.nrpessoa_paga;

      else

        begin
          select nvl(f.nrpessoa_paga, us.nrregistro_usuario)
            into vnrpessoapaga
            from familia f, usuario us
           where f.nrregistro = pproposta.nrregistro
             and f.nrcontrato = pproposta.nrcontrato
             and f.nrfamilia = pproposta.nrfamilia
             and us.nrregistro = f.nrregistro
             and us.nrcontrato = f.nrcontrato
             and us.nrfamilia = f.nrfamilia
             and us.tpusuario = '00';
        end;

      end if;

    elsif pproposta.cdlotacao <> '0' then
      begin
        select nvl(l.nrpessoa_paga, l.nrregistro_lotacao)
          into vnrpessoapaga
          from lotacao l
         where l.nrregistro = pproposta.nrregistro
           and l.nrcontrato = pproposta.nrcontrato
           and l.cdlotacao = pproposta.cdlotacao;
      end;

    elsif pproposta.nrfamilia = 0 and pproposta.cdlotacao = '0' then
      begin
        select nvl(nrpessoa_paga, nrregistro)
          into vnrpessoapaga
          from contrato_da_pessoa cdp
         where cdp.nrregistro = pproposta.nrregistro
           and cdp.nrcontrato = pproposta.nrcontrato;
      end;
    end if;

    if vnrpessoapaga = pproposta.nrregistro then
      vnrpessoapaga := 0;
    end if;

    if seqproposta is not null and seqproposta > 0 then
      p_insere_log('BENEFICIARIO_PROPOSTA_COM_LOTACAO',
                   'p_grava_proposta_com_lotacao',
                   'BENEFICIARIO JA ESTA ASSOCIADO A PROPOSTA. NAO PROCURAR NOVA',
                   pproposta.nrsequencial_usuario, --pnrsequencial_origem
                   0, --pcdidentificador
                   'NUM_SEQCIAL_PROPOST: ',
                   seqproposta); --complemento
    else
      begin
        --legenda
        /*
        num_livre_2 = nrregistro
        num_livre_3 = nrcontrato
        num_livre_4 = nrfamilia
        cod_livre_2 = cdlotacao
        num_livre_5 = nrpessoa_paga
        */

        dbms_output.put_line('GRAVA_PROPOSTA_COM_LOTACAO P1 ANTES BUSCAR NUM_SEQCIAL_PROPOST. ' ||
                             'modalidade;plano;tipo;nrregistro;nrcontrato: ' ||
                             pproposta.cd_modalidade || ';' || pproposta.cd_plano || ';' ||
                             pproposta.cd_tipo_plano || ';' || pproposta.nrregistro || ';' ||
                             pproposta.nrcontrato);

            v_complemento := pproposta.cd_modalidade || ';' ||
                             pproposta.cd_plano || ';' ||
                             pproposta.cd_tipo_plano || ';' ||
                             pproposta.nrregistro || ';' ||
                             pproposta.nrcontrato;

            p_insere_log('BENEFICIARIO_PROPOSTA_COM_LOTACAO',
                         'p_grava_proposta_com_lotacao',
                         'PROCURANDO PROPOSTA (COM LOTACAO) PARA O BENEFICIARIO',
                         pproposta.nrsequencial_usuario, --pnrsequencial_origem
                         0, --pcdidentificador
                         'CD_MODALIDADE;CD_PLANO;CD_TIPO_PLANO;NRREGISTRO;NRCONTRATO',
                         v_complemento); --complemento

        select t.num_seqcial_propost
          into seqproposta
          from import_propost t
         where t.cd_modalidade = pproposta.cd_modalidade
           and t.cd_plano = pproposta.cd_plano
           and t.cd_tipo_plano = pproposta.cd_tipo_plano
           and t.num_livre_2 = pproposta.nrregistro
           and t.num_livre_3 = pproposta.nrcontrato;
      exception
        when no_data_found then
          seqproposta := 0;
      end;
      p_insere_log('BENEFICIARIO_PROPOSTA_COM_LOTACAO',
                   'p_grava_proposta_com_lotacao',
                   'PROCUROU PROPOSTA PARA O BENEFICIARIO',
                   pproposta.nrsequencial_usuario, --pnrsequencial_origem
                   0, --pcdidentificador
                   'NUM_SEQCIAL_PROPOST ENCONTRADO: ',
                   seqproposta); --complemento
    end if;

    dbms_output.put_line('GRAVA_PROPOSTA_COM_LOTACAO P2 NUM_SEQCIAL_PROPOST: ' ||
                         seqproposta);

    /**
     * Se nao encontrou proposta na lógica acima, vai criar uma nova para esse beneficiário.
     */
    if seqproposta = 0 then

      begin

        select gp.import_propost_seq.nextval into seqproposta from dual;

        p_insere_log('BENEFICIARIO_PROPOSTA',
                     'p_grava_proposta_com_lotacao',
                     'NAO ACHOU PROPOSTA COM LOTACAO',
                     pproposta.nrsequencial_usuario, --pnrsequencial_origem
                     0, --pcdidentificador
                     'VAI CRIAR NOVA. NUM_SEQCIAL_PROPOST: ',
                     seqproposta); --complemento

        vtabelapreco := '';

/*
        p_insere_controle('PR',
                          seqproposta,
                          pproposta.cdcontrato || vnrfamilia);
*/

        if pproposta.cdcontratacao_ans = 1 Or
           pproposta.tpusu_contrato = 'P' then
           vnrfamilia_aux := pproposta.nrfamilia;
        else
           vnrfamilia_aux := 0;
        end if;

        dbms_output.put_line('PROPOSTA_COM_LOTACAO P1');

        insert into gp.import_propost
          (num_seqcial,
           dat_ult_atualiz,
           hra_ult_atualiz,
           cod_usuar_ult_atualiz,
           --u##nr_contrato_antigo, não existe na 12.1.18
           nr_contrato_antigo,
           nr_insc_contratante,
           cd_modalidade,
           cd_plano,
           cd_tipo_plano,
           num_livre_10, --nr_proposta
           cd_plano_operadora,
           num_seqcial_propost,
           num_seqcial_control,
           cd_forma_pagto,
           ind_sit_import,
           u##ind_sit_import,
           num_livre_2,
           num_livre_3,
           num_livre_4,
           cod_livre_2,
           num_livre_5,
           --num_livre_6,
           cod_livre_3,
           cod_livre_4,
           cod_livre_5,
           progress_recid,
           num_livre_7, -- regra de mensalidade
           log_consid_tax_coper)
        values
          (seqproposta, --num_seqcial,
           trunc(sysdate), --dat_ult_atualiz,
           to_char(sysdate, 'HH24:MI:SS'), --hra_ult_atualiz,
           'MIGRACAO', --cod_usuar_ult_atualiz,
           -- NÃO EXISTE NA 12.1.18 upper(seqproposta), --nr_contrato_antigo,
           seqproposta, --nr_contrato_antigo,
           0, --nr_insc_contratante,
           pproposta.cd_modalidade, --cd_modalidade,
           pproposta.cd_plano, --cd_plano,
           pproposta.cd_tipo_plano, --cd_tipo_plano,
           vnrproposta,
           0, --cd_plano_operadora,
           seqproposta, --num_seqcial_propost,
           vnrcontrolemigracao, --num_seqcial_control,
           pproposta.cd_forma_pagto, --cd_forma_pagto,
           'GE', --ind_sit_import,
           'GE',
           pproposta.nrregistro, --num_livre_2
           pproposta.nrcontrato, --num_livre_3
           vnrfamilia_aux, --pproposta.nrfamilia, --num_livre_4
           pproposta.cdlotacao, --cod_livre_2
           vnrpessoapaga, --num_livre_5
           --vnrregistropessoaorigem,
           pproposta.cdcontrato, --cod_livre_3
           pproposta.cdfator_moderador, --cod_livre_4
           pproposta.tpplano, --cod_livre_5
           seqproposta, --progress_recid);
           0, -- regra de mensalidade
           decode(pproposta.lg_considera_taxa_co,'S',1,0));

           dbms_output.put_line('PROPOSTA_COM_LOTACAO P2');

        --p_atualiza_proposta(seqproposta,'S');

        dbms_output.put_line('PROPOSTA_COM_LOTACAO P5');

      exception
        when others then

          dbms_output.put_line('@@@@@@@@@@@@@@@@@ERRO CRIANDO PROPOSTA COM LOTACAO! ' || sqlerrm);

          p_insere_falha(vnrcontrolemigracao,
                         'PR',
                         'OCORREU ERRO NA PROPOSTA COM LOTACAO. NRSEQ_PROPOSTA' || seqproposta,
                         sqlerrm,
                         pproposta.nrregistro);
      end;

    end if;

    --se a proposta estiver em situacao GE ou GA, atualizar.
    if psit_proposta in ('GE','GA') then

      dbms_output.put_line('VAI ATUALIZAR A PROPOSTA POIS EH GE OU GA. ' ||
                           seqproposta);

      p_atualiza_proposta(seqproposta,'S',pproposta.nrsequencial_usuario);
    end if;

    begin
      update gp.import_bnfciar ib
         set ib.nr_contrato_antigo = seqproposta,
             ib.num_livre_1        = nvl((select tdl.cdlotacao_gp
                                           from temp_depara_lotacao tdl
                                           where tdl.nrregistro = pproposta.nrregistro
                                           and   tdl.nrcontrato = pproposta.nrcontrato
                                           and   tdl.cdlotacao  = pproposta.cdlotacao_benef),'0') -- se benef. não tiver lotação no Unicoo, atribui '0'
       where ib.num_seqcial_bnfciar = pproposta.nrsequencial_usuario;
    end;
    p_commit;

  end p_grava_proposta_com_lotacao;

procedure p_atualiza_proposta(pnrsequencial_proposta import_propost.num_seqcial_propost%type,
                              paocom_lotacao varchar,
                              pnrsequencial_usuario number) is
    vind_si_import   import_propost.u##ind_sit_import%type;
    vutilizamascara  char;
    vdesc_masrcara   varchar2(40);
    vaoativo         varchar2(1);
    vaoimportado     varchar2(1);
    vtppessoatitular varchar2(1);
    nao_aceita_repasse exception;
    vnom_abrev_cliente       ti_pessoa.noabreviado_fornecedor%type;
    vaoexiste_cliente_ems5   char;
    vaoexiste_cliente_unicoo char;
    vtxmensagem              varchar2(4000);
    vdata                    date;
    vaobenef_eventual        import_propost.log_livre_1%type;
    vaa_mm_ult_fat           number := null;
    vnrproposta_alt          number;
    seqlotacproposta integer;
    vlong long;
    --aotem_historico varchar2(1);
    --hash_import_propost varchar2(100) := null;
    --hash_atual varchar2(100);

    cursor c_lotacao is
        select tl.cd_cliente_gp,
               to_number(tl.cdlotacao_gp) lotacao_gp,
               tl.nrdia_de_vencimento,
               to_date(tl.dtinicio_vigencia,'dd/mm/yyyy') dtinicio_vigencia,
               to_date(tl.dtfim_vigencia,'dd/mm/yyyy') dtfim_vigencia,
               Decode((Select Count(*) From CONTRATO_PESSOA_TIPCARTEIRA cpt
                       Where cpt.nrregistro = tl.nrregistro
                       and   cpt.nrcontrato = tl.nrcontrato
                       And   cpt.tpcarteira in ('1','2')),0,0,1) tpcarteira
          from temp_depara_lotacao tl, gp.import_propost ip
         where ip.num_seqcial_propost = pnrsequencial_proposta
           and tl.nrregistro = ip.num_livre_2
           and tl.nrcontrato = lpad(ip.num_livre_3,4,'0')
           -- union para forçar criação da lotação DEMITIDO/APOSENTADO - código fixo 1
           union
           select 0, 1, 0, to_date('01/01/1900','dd/mm/yyyy'), to_date('31/12/9999','dd/mm/yyyy'), 1 from dual -- lotacao DEMITIDO/APOSENTADO
           union
           select 0, 0, 0, to_date('01/01/1900','dd/mm/yyyy'), to_date('31/12/9999','dd/mm/yyyy'), 0 from dual -- permitir zero no codigo da lotação, quando não possuir no Unicoo.
           ;

  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    dbms_output.put_line('P_ATULIZA_PROPOSTA P1 ' || seqproposta);

    --apagar tabelas relacionadas para serem recriadas em p_atualiza_proposta
    apaga_proposta_import(pnrsequencial_proposta, pnrsequencial_proposta,'N');

    dbms_output.put_line('P_ATULIZA_PROPOSTA P1.1 ' || seqproposta);

    p_insere_log('PROPOSTA_TOTVS',
                 'p_atualiza_proposta',
                 'DEPOIS DE APAGAR TEMPORARIAS DA PROPOSTA GE',
                 pnrsequencial_usuario, --pnrsequencial_origem
                 pnrsequencial_proposta, --pcdidentificador
                 null,
                 null); --complemento

    dbms_output.put_line('P_ATULIZA_PROPOSTA P1.2 ' || seqproposta);

    for x in (select p.num_seqcial_propost,
                     p.num_seqcial_control,
                     p.nr_contrato_antigo,
                     p.num_livre_2 nrregistro,
                     lpad(p.num_livre_3,4,'0') nrcontrato,
                     p.cd_modalidade,
                     p.num_livre_10 nr_proposta,
                     p.cod_livre_9 --hash import_propost
                from import_propost p
               where p.num_seqcial_propost = pnrsequencial_proposta
               order by p.num_seqcial_propost) loop

        dbms_output.put_line('P_ATULIZA_PROPOSTA P1.3 ' || seqproposta);

      --begin
        for rproposta in cur_proposta(x.num_seqcial_propost) loop

          dbms_output.put_line('P_ATULIZA_PROPOSTA P1.4 ' || seqproposta);

          /**
           * Tratamento para verificar se a proposta ja existe no TOTVS e sofreu alteracao.
           * Se sim, apagar para recriar no cg0310x.p (progress)
           */
          /*if rproposta.ind_sit_import = 'IT' then
            DBMS_OUTPUT.PUT_LINE('Proposta ja existe. Validar se sofreu alteracao no Unicoo. NR_CONTRATO_ANTIGO: '
            || rproposta.nr_contrato_antigo);

            --esse hash sera gravado em campo reserva de import_propost e sua situacao alterada para 'GE'.
            --assim, seus dados serao atualizados, e ao final, se o hash mudar, sera recriado no TOTVS.
            --se o hash estiver igual, nada sera reprocessado.
            hash_import_propost := gerar_hash_import_propost(pnrsequencial_usuario,rproposta.nr_contrato_antigo);

            p_insere_log('BENEFICIARIO_PROPOSTA',
                         'p_atualiza_proposta',
                         'ATUALIZANDO PROPOSTA QUE JA EXISTE',
                         pnrsequencial_usuario, --pnrsequencial_origem
                         rproposta.nr_contrato_antigo, --pcdidentificador
                         'PROPOSTA JA EXISTE. GERAR HASH E APAGAR TEMPORARIAS. HASH: ',
                         hash_import_propost); --complemento
            \* alex 14/02/19 - descomentar isso!!!
            update gp.import_propost ip set ip.cod_livre_9 = hash_import_propost,
                                            ip.u##ind_sit_import = 'GE',
                                            ip.ind_sit_import = 'GE'
                         where ip.nr_contrato_antigo = rproposta.nr_contrato_antigo;

            --apagar tabelas relacionadas para serem recriadas
            delete from importpadrcobertpropost i
             where i.num_seqcial_propost = rproposta.nr_contrato_antigo;

            delete from import_negociac_propost inp
             where inp.num_seqcial_propost = rproposta.nr_contrato_antigo;

            delete from import_modul_propost p
             where p.num_seqcial_propost = rproposta.nr_contrato_antigo;

            delete from gp.import_lotac_propost ilp
             where ilp.num_seqcial_propost = rproposta.nr_contrato_antigo;

            delete from gp.import_faixa_propost ifp
             where ifp.num_seqcial_propost = rproposta.nr_contrato_antigo;
até aqui!             *\

          end if;*/

          dbms_output.put_line('P_ATULIZA_PROPOSTA P2 ' || seqproposta);

          vnrproposta_alt := 0;
          --SE NR_PROPOSTA ESTIVER ZERADO, GERAR PROXIMO NUMERO LIVRE
          if rproposta.num_livre_10 = 0 or rproposta.num_livre_10 is null then
            for i in (select 'SELECT ' || sequence_name || '.NEXTVAL FROM DUAL' comando
                        from user_sequences
                       where sequence_name like 'SEQ_MODALIDADE_' || rproposta.cd_modalidade) loop
              execute immediate i.comando
                into vnrproposta_alt;
            end loop;

            dbms_output.put_line('P_ATULIZA_PROPOSTA P3 ' || seqproposta);

            p_insere_log('BENEFICIARIO_PROPOSTA',
                         'p_atualiza_proposta',
                         'ATUALIZANDO PROPOSTA',
                         pnrsequencial_usuario, --pnrsequencial_origem
                         rproposta.nr_contrato_antigo, --pcdidentificador
                         'PRECISOU GERAR NOVO NR_PROPOSTA: ',
                         vnrproposta_alt); --complemento
          end if;

          dbms_output.put_line('P_ATULIZA_PROPOSTA P4 ' || seqproposta);

          -- ajustar mes/ano ultimo faturamento conforme tabela FATURA do Unicoo
          begin
            if rproposta.tpfatura = 'U' then -- adesao e/ou familiar
              select max(f.nrperiodo) into vaa_mm_ult_fat
                from faturamento f, familia ff
               where (   f.nrpessoa_paga = nvl(ff.nrpessoa_paga,ff.nrpessoa_titular)
                      or f.nrregistro = nvl(ff.nrpessoa_paga,ff.nrpessoa_titular))
                 and f.nrcontrato = ff.nrcontrato
                 and f.tpfatura = '7' /*mensalidade*/
                 and ff.nrregistro = rproposta.nrregistro
                 and ff.nrcontrato = rproposta.nrcontrato
                 and f.aosituacao_fatura = '0'; --valida
            else if rproposta.tpfatura in ('L','I') then --lotacao
                    select max(f.nrperiodo) into vaa_mm_ult_fat
                      from faturamento f, lotacao l
                     where (   f.nrpessoa_paga = nvl(l.nrpessoa_paga, l.nrregistro_lotacao)
                            or f.nrregistro = nvl(l.nrpessoa_paga, l.nrregistro_lotacao))
                       and f.nrcontrato = l.nrcontrato
                       and f.tpfatura = '7' /*mensalidade*/
                       and l.nrregistro = rproposta.nrregistro
                       and l.nrcontrato = rproposta.nrcontrato
                       and f.aosituacao_fatura = '0'; --valida
                 else if rproposta.tpfatura = 'N' then
                        select max(f.nrperiodo) into vaa_mm_ult_fat
                          from faturamento f
                         where (   f.nrpessoa_paga = rproposta.nrregistro
                                or f.nrregistro = rproposta.nrregistro)
                           and f.nrcontrato = rproposta.nrcontrato
                           and f.tpfatura = '7'/*mensalidade*/
                           and f.aosituacao_fatura = '0'; --valida
                      end if;
                 end if;
            end if;
          exception
            when others then vaa_mm_ult_fat := null;
          end;

          if vaa_mm_ult_fat is not null then
            rproposta.ultimo_mes_faturado := substr(vaa_mm_ult_fat,5,2);
            rproposta.ultimo_ano_faturado := substr(vaa_mm_ult_fat,1,4);
          else
            --se o contrato for novo, deve ficar zerado para que as taxas de inscricao sejam cobradas no TOTVS
            rproposta.ultimo_mes_faturado := 0;
            rproposta.ultimo_ano_faturado := 0;
          end if;

          dbms_output.put_line('P_ATULIZA_PROPOSTA P5 ' || seqproposta);

          vaoativo := '';

          vaoimportado := 'N';

          if vaoimportado = 'N' then

            begin
              select 1
                into vaobenef_eventual -- indica se a proposta possui beneficiário eventual
                from gp.modalid m
               where m.cd_modalidade = rproposta.cd_modalidade
                 and m.in_tipo_pessoa = 'J';
            exception
              when no_data_found then
                vaobenef_eventual := 0;
            end;

            vcont            := vcont + 1;
            vtppessoatitular := '';

              begin
                select 'S'
                  into vutilizamascara
                  from contrato_da_pessoa cpd
                 where cpd.nrregistro = rproposta.nrregistro
                   and cpd.nrcontrato = rproposta.nrcontrato
                   and exists
                 (select 1
                          from usuario us
                         where us.nrregistro = cpd.nrregistro
                           and us.nrcontrato = cpd.nrcontrato
                           and us.cdusuario_empresa is not null);
              exception
                when no_data_found then
                  vutilizamascara := 'N';
              end;

              if vutilizamascara = 'S' then
                rproposta.aomascara := 1;
                vdesc_masrcara      := 'xxxxxxxxxxxxxxxxxxxx';
              else
                rproposta.aomascara := 0;
                vdesc_masrcara      := ' ';
              end if;

              vind_si_import := 'RC';

              begin

                if rproposta.nrpessoa_paga <> 0 then

                  begin
                    select p.noabreviado_cliente
                      into vnom_abrev_cliente
                      from ti_pessoa p
                     where p.nrregistro = rproposta.nrpessoa_paga;
                  exception
                    when others then
                      vind_si_import := 'CORIGEM';
                      p_insere_falha(rproposta.nrsequencial_controle,
                                     'PR',
                                     '(1)Contratante origem nao encontra-se na TI_PESSOA. NRREGISTRO: '
                                     || rproposta.nrpessoa_paga,
                                     sqlerrm,
                                     rproposta.contrato_antigo);
                  end;

                  if paocom_lotacao = 'N' then
                    if vind_si_import = 'RC' then
                      begin
                        select cc.nr_insc_contratante
                          into rproposta.nr_insc_contrat_origem
                          from gp.contrat cc
                         where cc.u##nome_abrev = vnom_abrev_cliente;
                      exception
                        when others then
                          vind_si_import := 'CORIGEM';
                          p_insere_falha(rproposta.nrsequencial_controle,
                                         'PR',
                                         'Contratante origem nao está migrado',
                                         sqlerrm || ';NOM_ABREV;' || vnom_abrev_cliente,
                                         rproposta.contrato_antigo);
                      end;
                    end if;

                    if vind_si_import = 'CORIGEM' and
                       rproposta.tppessoa = 'F' then
                      rproposta.nr_insc_contrat_origem := null;
                      vind_si_import                   := 'RC';
                    end if;
                  end if;
                end if;

                dbms_output.put_line('P_ATULIZA_PROPOSTA P6 ' || seqproposta);

                if rproposta.nr_insc_contratante is null then

                  vtxmensagem := 'Contratante não está migrado (nr_insc_contratante = null)';

                  vind_si_import := 'CONTRAT';

                  p_commit;

                  ---inicio integracao unicoo
                  --verifica se existe na tabela cliente

                  begin
                    select 'S'
                      into vaoexiste_cliente_unicoo
                      from producao.cliente@unicoo_homologa c
                     where nrregistro_cliente = rproposta.nrregistro
                       and rownum = 1;
                  exception
                    when no_data_found then
                      --se nao existe integra cliente no unicoo
                      begin
                        producao.p_gera_cliente@unicoo_homologa('M' ||
                                                                rproposta.nrregistro,
                                                                rproposta.nrregistro,
                                                                'M' ||
                                                                rproposta.nrregistro,
                                                                null,
                                                                case when
                                                                rproposta.tppessoa = 'F' then 'P' else 'E' end,
                                                                null,
                                                                'N');
                        vtxmensagem := vtxmensagem ||
                                       ' Criado cliente no Unicoo pelo processo de propostas';

                      end;
                  end;
                  --fim
                  --inicio integracao ems5

                  begin
                    select 'S'
                      into vaoexiste_cliente_ems5
                      from ti_pessoa tp
                     where tp.nrregistro = rproposta.nrregistro;

                    vtxmensagem := vtxmensagem ||
                                   ' Cliente está com erro na integracao.';

                  exception
                    when no_data_found then
                      for x in (select nvl(trim(replace(replace(replace(p.nrcgc_cpf,
                                                                        '-',
                                                                        null),
                                                                ',',
                                                                null),
                                                        '.',
                                                        null)),
                                           '00000000000000') nrcgc_cpf,
                                       p.nopessoa,
                                       p.noabreviado,
                                       p.dtnascimento,
                                       p.tppessoa,
                                       c.nrregistro_cliente,
                                       'CLIENTE' tipo,
                                       '' vnom_abrev_fornecedor,
                                       '' vcdn_fornecedor,
                                       '' vnom_abrev_cliente,
                                       '' vcdn_cliente,
                                       'S' incluir,
                                       c.cdcliente
                                  from producao.cliente@unicoo_homologa c,
                                       pessoa                           p,
                                       ti_grupo_de_cliente              t
                                 where p.nrregistro = c.nrregistro_cliente
                                   and t.cdgrupo_cliente = c.cdgrupo_cliente
                                   and t.cdgrupo_cliente_ems_pj <> 'NAOM'
                                   and p.nrregistro = rproposta.nrregistro
                                 order by p.nrregistro desc) loop
                        begin
                          ems506unicoo.pck_ems506unicoo.p_define_ti_pessoa(x.nrcgc_cpf,
                                                                           x.nopessoa,
                                                                           x.noabreviado,
                                                                           x.dtnascimento,
                                                                           x.tppessoa,
                                                                           x.nrregistro_cliente,
                                                                           x.tipo,
                                                                           x.vnom_abrev_fornecedor,
                                                                           x.vcdn_fornecedor,
                                                                           x.vnom_abrev_cliente,
                                                                           x.vcdn_cliente,
                                                                           x.incluir);

                        exception
                          when others then
                            raise_application_error(-20100,
                                                    ' Pessoa : ' ||
                                                    x.nrregistro_cliente ||
                                                    ' - ' || sqlerrm);
                            null;
                        end;

                        ems506unicoo.pck_ems506unicoo.p_ins_ti_controle_integracao('CL',
                                                                                   'I',
                                                                                   x.cdcliente,
                                                                                   x.nrregistro_cliente,
                                                                                   null,
                                                                                   null,
                                                                                   null);

                        --commit;

                        vtxmensagem := vtxmensagem ||
                                       ' Rodar API de integracao do cliente no ems5';

                      end loop;

                  end;

                  p_insere_falha(rproposta.nrsequencial_controle,
                                 'PR',
                                 vtxmensagem,
                                 sqlerrm,
                                 rproposta.contrato_antigo);

                end if;

                dbms_output.put_line('P_ATULIZA_PROPOSTA P7 ' || seqproposta);

                -- ultimo dia do mês de último faturamento
                if  rproposta.ultimo_ano_faturado <> 0
                and rproposta.ultimo_mes_faturado <> 0 then
                  vdata := last_day(to_date(to_char(rproposta.ultimo_ano_faturado ||
                                        lpad(rproposta.ultimo_mes_faturado,
                                             2, 0)), 'YYYYMM'));

                  if vdata < rproposta.dtinicio_proposta then

                    rproposta.ultimo_ano_faturado := to_char(rproposta.dtinicio_proposta,
                                                             'YYYY');
                    rproposta.ultimo_mes_faturado := to_char(rproposta.dtinicio_proposta,
                                                             'MM');
                  end if;
                end if;

 --Evandro Levi (11/01/2018): Ajuste no período do último reajuste e percentual aplicado ao contrato.
    --  26/03/2018: Durante a virada oficial de SSP e com aceite do cliente, o período que será apresentado no TOTVS
    --                é o Período do Próximo Reajuste - 1ano.
                Begin
                  Select substr(rcp.NRPERIODO_PROXIMO_REAJUSTE - 100, 1, 4) ano_reajuste,
                         substr(rcp.NRPERIODO_PROXIMO_REAJUSTE - 100, 5, 2) mes_reajuste --,
                  --                         vlindice_mensalidade
                    Into rproposta.ultimo_ano_reajuste, rproposta.ultimo_mes_reajuste --,
                  --                         rproposta.perc_ultimo_reajuste
                    From reajuste_contrato_pessoa rcp, contrato_da_pessoa cp
                   Where rcp.nrperiodo in
                         (Select Max(nrperiodo)
                            From reajuste_contrato_pessoa
                           Where nrregistro = rcp.nrregistro
                             And nrcontrato = rcp.nrcontrato
                             And Cdsituacao_reajuste <> 'C'
                             And nrperiodo_proximo_reajuste - 100 <=
                                 to_number(to_char(cp.dtfimcontrato, 'yyyymm')))
                     And cp.nrregistro = rproposta.nrregistro
                     And cp.nrcontrato = rproposta.nrcontrato
                     And rcp.nrregistro = cp.nrregistro
                     And rcp.nrcontrato = cp.nrcontrato
                     And rcp.Cdsituacao_reajuste <> 'C'
                     And rownum = 1;
                      --Evandro Levi (17/01/2018): Foi identificado que a informação de reajuste com valor, positivo ou negativo,
                  --                              impactam na exibição do valor da mensalidade no TOTVS.
                  --                           Portanto, a solicitação foi gravar somente o período do último reajuste com
                  --                              percentual zerado.
                  --Solicitação: Moacir Junior em Consultoria em SSParaíso.
                  rproposta.perc_ultimo_reajuste := 0;
                Exception
                  When Others Then
                    Select To_Char(rproposta.dtinicio_proposta, 'YYYY'),
                           To_Char(rproposta.dtinicio_proposta, 'MM')
                    Into   rproposta.ultimo_ano_reajuste,
                           rproposta.ultimo_mes_reajuste
                    From   Dual;
                    --
                    --rproposta.ultimo_ano_reajuste := substr(PNRPERIODO_ULT_REAJUSTE,1,4);
                    --rproposta.ultimo_mes_reajuste := substr(PNRPERIODO_ULT_REAJUSTE,5,2);
                    rproposta.perc_ultimo_reajuste := 0;
                End;

                -- ultimo dia do mês de último reajuste
                /*vdata := last_day(to_date(to_char(rproposta.ultimo_ano_reajuste ||
                                      lpad(rproposta.ultimo_mes_reajuste,
                                           2, 0)), 'YYYYMM'));

                if vdata < rproposta.dtinicio_proposta then

                  rproposta.ultimo_ano_reajuste := to_char(rproposta.dtinicio_proposta,
                                                           'YYYY');
                  rproposta.ultimo_mes_reajuste := to_char(rproposta.dtinicio_proposta,
                                                           'MM');
                end if;
*/

     dbms_output.put_line('P_ATULIZA_PROPOSTA P8 ' || seqproposta);

     if paocom_lotacao = 'S' then
       for lp in c_lotacao loop

          dbms_output.put_line('LOOP LOTACAO - CLIENTE: ' || lp.cd_cliente_gp || ' LOTACAO: ' || lp.lotacao_gp);

          select gp.import_lotac_propost_seq.nextval into seqlotacproposta from dual;

          insert into gp.import_lotac_propost (
                 num_seqcial,
                 num_seqcial_propost,
                 cdn_lotac,
                 cdn_respons_financ,
                 cod_livre_1, --nrcontrato
                 cod_livre_2,
                 cod_livre_3,
                 cod_livre_4,
                 cod_livre_5,
                 cod_livre_6,
                 cod_livre_7,
                 cod_livre_8,
                 cod_livre_9,
                 cod_livre_10,
                 num_livre_1,
                 num_livre_2,
                 num_livre_3, -- nrdia_de_vencimento
                 num_livre_4,
                 num_livre_5,
                 num_livre_6,
                 num_livre_7,
                 num_livre_8,
                 num_livre_9,
                 num_livre_10,
                 val_livre_1,
                 val_livre_2,
                 val_livre_3,
                 val_livre_4,
                 val_livre_5,
                 val_livre_6,
                 val_livre_7,
                 val_livre_8,
                 val_livre_9,
                 val_livre_10,
                 log_livre_1,  --tpcarteira
                 log_livre_2,
                 log_livre_3,
                 log_livre_4,
                 log_livre_5,
                 log_livre_6,
                 log_livre_7,
                 log_livre_8,
                 log_livre_9,
                 log_livre_10,
                 dat_livre_1, /*inicio lotacao na proposta*/
                 dat_livre_2, /*fim lotacao na proposta*/
                 dat_livre_3,
                 dat_livre_4,
                 dat_livre_5,
                 dat_livre_6,
                 dat_livre_7,
                 dat_livre_8,
                 dat_livre_9,
                 dat_livre_10,
                 dat_ult_atualiz,
                 hra_ult_atualiz,
                 cod_usuar_ult_atualiz,
                 progress_recid)
          values (
                 seqlotacproposta,   --num_seqcial,
                 x.num_seqcial_propost,        --num_seqcial_propost,
                 nvl(lp.lotacao_gp,'1'),         --cdn_lotac,
                 lp.cd_cliente_gp,  --cdn_respons_financ,
                 rproposta.nrcontrato,--cod_livre_1,
                 ' ',--cod_livre_2,
                 ' ',--cod_livre_3,
                 ' ',--cod_livre_4,
                 ' ',--cod_livre_5,
                 ' ',--cod_livre_6,
                 ' ',--cod_livre_7,
                 ' ',--cod_livre_8,
                 ' ',--cod_livre_9,
                 vlong,--cod_livre_10,
                 rproposta.nrregistro,--num_livre_1
                 0,--num_livre_2
                 lp.nrdia_de_vencimento,--num_livre_3
                 0,--num_livre_4,
                 0,--num_livre_5,
                 0,--vnum_livre_6,
                 0,--num_livre_7,
                 0,--num_livre_8,
                 0,--num_livre_9,
                 0,--num_livre_10,
                 0,--val_livre_1,
                 0,--val_livre_2,
                 0,--val_livre_3,
                 0,--val_livre_4,
                 0,--val_livre_5,
                 0,--val_livre_6,
                 0,--val_livre_7,
                 0,--val_livre_8,
                 0,--val_livre_9,
                 0,--val_livre_10,
                 lp.tpcarteira,--log_livre_1,  1: lotacao sai na carteira. 0: empresa sai na carteira
                 0,--log_livre_2,
                 0,--log_livre_3,
                 0,--log_livre_4,
                 0,--log_livre_5,
                 0,--log_livre_6,
                 0,--log_livre_7,
                 0,--log_livre_8,
                 0,--log_livre_9,
                 0,--log_livre_10,
                 lp.dtinicio_vigencia,--dat_livre_1, INICIO LOTACAO NA PROPOSTA
                 lp.dtfim_vigencia,--dat_livre_2, FIM LOTACAO NA PROPOSTA
                 null,--dat_livre_3,
                 null,--dat_livre_4,
                 null,--dat_livre_5,
                 null,--dat_livre_6,
                 null,--dat_livre_7,
                 null,--dat_livre_8,
                 null,--dat_livre_9,
                 null,--dat_livre_10,
                 trunc(sysdate),--dat_ult_atualiz,
                 to_char(sysdate, 'HH24:MI:SS'),--hra_ult_atualiz,
                 'MIGRACAO',--cod_usuar_ult_atualiz,
                 seqlotacproposta--progress_recid
                 );
       end loop;
     end if;

      dbms_output.put_line('P_ATUALIZA_PROPOSTA ANTES DO UPDATE');

                update import_propost p
                   set num_livre_8               = rproposta.num_livre_8, -- indicador plano 1-regulamentado, 2-não regulamentado, 3-adaptado
                       num_livre_10              = decode(rproposta.num_livre_10,
                                                            0,vnrproposta_alt,
                                                            null,vnrproposta_alt,
                                                            rproposta.num_livre_10),
                       nr_insc_contrat_origem    = decode(paocom_lotacao,'S',0,rproposta.nr_insc_contrat_origem), -- SE USA LOTAÇÃO, CONTRATANTE ORIGEM DEVE SER ZERO
                       nr_insc_contratante       = rproposta.nr_insc_contratante,
                       dat_ult_atualiz           = trunc(sysdate),
                       hra_ult_atualiz           = to_char(sysdate,
                                                           'HH24:MI:SS'),
                       cod_usuar_ult_atualiz     = 'MIGRACAO',
                       cdn_tip_vencto            = rproposta.tpvencimento,
                       num_dia_vencto            = rproposta.dia_vencimento,
                       log_inic_valid            = decode(rproposta.inicio_validade,
                                                          'S',
                                                          1,
                                                          0), --
                       cd_convenio               = rproposta.convenio,
                       cd_tipo_participacao      = rproposta.tpparticipacao,
                       cd_vendedor               = rproposta.vendedor,
                       cd_tab_preco              = rproposta.tab_preco_plano,
                       pc_acrescimo              = 0, --rproposta.perc_acres_mensalidade,
                       dt_lim_acres_mens         = null, --rproposta.dtlimite_acres_mensalidade,
                       pc_acrescimo_inscr        = 0, --rproposta.perc_acres_inscricao,
                       dat_lim_acresc_inscr      = null, -- rproposta.dtlimite_acres_inscricao,

                       pc_desconto               = rproposta.perc_desc_mensalidade,
                       dat_lim_desc_mensal       = rproposta.dtlimite_desc_mensalidade,

                       pc_desconto_inscr         = rproposta.perc_desc_inscricao,
                       dat_lim_desc_inscr        = rproposta.dtlimite_desc_inscricao,
                       cd_tab_preco_proc         = rproposta.tab_qtd_moeda_cobranca,
                       log_mascar                = 0,
                       des_mascar                = ' ',
                       p.log_faixa_etaria_especial  = rproposta.faixa_etaria_especial,
                       log_cobert_especial       = decode(rproposta.cobertura_especial,
                                                          'S',
                                                          1,
                                                          0),
                       log_proced_prestdor       = decode(rproposta.considera_prestador,
                                                          'S',
                                                          1,
                                                          0),
                       log_consid_tax_coper      = rproposta.log_consid_tax_coper, /*decode(rproposta.considera_taxa_co,
                                                          'S',
                                                          1,
                                                          0),*/
                       log_medic_empres          = decode(rproposta.medico_na_empresa,
                                                          'S',
                                                          1,
                                                          0),
                       num_mes_ult_faturam       = rproposta.ultimo_mes_faturado,
                       aa_ult_fat                = rproposta.ultimo_ano_faturado,
                       dat_propost               = rproposta.dtinicio_proposta,
                       dat_fim_propost           = nvl((decode(decode(rproposta.prop_seguro_assist,
                                                                      'S',
                                                                      1,
                                                                      0),
                                                               1,
                                                               '31/12/9999',
                                                               null)),
                                                       rproposta.dtcancelamento_proposta),
                       nr_cgc_cpf                = rproposta.nrcgccpf_contratante,
                       p.nr_cgc_cpf_contrat_orig    = rproposta.nrcgccpf_contrat_origem,
                       --u##nr_contrato_antigo     = upper(p.num_seqcial_propost), --não existe na 12.1.18
                       nr_contrato_antigo        = p.num_seqcial_propost,
                       ind_tip_pessoa            = rproposta.tppessoa,
                       p.ind_pessoa_contrnte_orig   = rproposta.tppessoa_origem,
                       val_propost_migrac        = rproposta.vlproposta,
                       cd_tab_preco_proc_cob     = rproposta.tab_qtd_moeda_cobranca,
                       log_cartao                = decode(rproposta.doc_identificacao_benef,
                                                          'S',
                                                          1,
                                                          0), --
                       log_cobr_dif_pagto        = decode(rproposta.tabela_difer_cobr,
                                                          'S',
                                                          1,
                                                          0), --
                       pc_desc_prom_taxa         = nvl(rproposta.perc_desc_prom_s_tx_inscricao,
                                                       0),
                       dat_valid_prom_tax        = rproposta.dt_valid_desc_pro_s_dtinscr,
                       pc_desc_prom_pl           = nvl(rproposta.perc_desc_promoc_s_mens,
                                                       0),
                       dat_valid_prom_plano      = rproposta.dt_valid_desc_promoc_s_mens,
                       log_segassist             = decode(rproposta.prop_seguro_assist,
                                                          'S',
                                                          1,
                                                          0), --
                       dat_fim_segassist         = decode(decode(rproposta.prop_seguro_assist,
                                                                 'S',
                                                                 1,
                                                                 0),
                                                          1,
                                                          '31/12/9999',
                                                          null),
                       log_fatur_segassist       = decode(rproposta.prop_seguro_assist,
                                                          'S',
                                                          1,
                                                          0),
                       ind_cobr                  = decode(rproposta.prop_seguro_assist,
                                                          'S',
                                                          1,
                                                          0),

                       log_altera_fator_moder = decode(rproposta.altera_participacao,
                                                       'S',
                                                       1,
                                                       0),
                       log_altera_tax_inscr   = decode(rproposta.altera_tx_inscricao,
                                                       'S',
                                                       1,
                                                       0),
                       log_altera_val_usuar   = decode(rproposta.validade_benef_movimento,
                                                       'S',
                                                       1,
                                                       0),
                       num_mm_ult_reaj        = nvl(rproposta.ultimo_mes_reajuste,
                                                    substr(PNRPERIODO_ULT_REAJUSTE, 5)),
                       aa_ult_reajuste        = nvl(rproposta.ultimo_ano_reajuste,
                                                    substr(PNRPERIODO_ULT_REAJUSTE, 0, 4)),
                       pc_ult_reajuste        = nvl(rproposta.perc_ultimo_reajuste,
                                                    0),
                       --cd_registro_plano            = rproposta.reg_plano_operadora,--number / varchar
                       p.log_altera_valid_prorrog = decode(rproposta.val_prorrog_benef_mov,
                                                         'S',
                                                         1,
                                                         0),
                       log_propost_regulam      = decode(rproposta.proposta_regulamentada,
                                                         'S',
                                                         1,
                                                         0),
                       qt_validade_termo        = pqtvalidtermo, --number/char
                       um_validade_termo        = punvalidtermo,
                       qt_validade_cartao       = pqtvalidcart, --number/char
                       um_validade_cartao       = punvalidcart,
                       um_validade_cart         = punvalidcart,
                       qt_validade_cart         = pqtvalidcart, --number/char
                       in_tipo_contratacao      = rproposta.tpcontratacao, --number/char
                       in_tipo_natureza         = rproposta.tpnatureza, --number/char
                       in_validade_doc_ident    = rproposta.tp_val_doc_benef, --number/char
                       nr_oficio_reajuste       = rproposta.nroficio_reajuste,
                       in_registro_plano        = rproposta.ind_reg_plano, --number/char
                       cd_plano_operadora       = rproposta.reg_plano_operadora,
                       p.cd_registro_plano      = nvl(rproposta.cd_registro_plano,
                                                      0),
                       /*correções 25/02*/
                       --p.cdn_tip_idx             = 0,
                       p.cdn_tip_idx            = rproposta.cdn_tip_idx,
                       p.IND_FAIXA_ETARIA_ESPECIAL = rproposta.ind_faixa_etaria_especial,
                       p.cdn_niv_reaj            = decode(rproposta.forma_pagamento,
                                                          2,
                                                          null,
                                                          0),
                       p.log_livre_2             = rproposta.tpnumeracao_familia,
                       p.log_livre_1             =  vaobenef_eventual,
                       p.log_livre_3             = rproposta.aoempresario_individual,
                       p.dat_livre_1             = rproposta.dtvalidcar, -- CONTRATO_DA_PESSOA.DTVALIDCAR - VALIDADE DA CARTEIRA
                       p.log_livre_5             = decode(rproposta.vl_franquia,0,'0','1'),
                       p.cod_livre_8             = gerar_hash_contrato_unicoo(rproposta.nrregistro, rproposta.nrcontrato)

                 where p.num_seqcial_control =
                       rproposta.nrsequencial_controle
                   and p.num_seqcial_propost =
                       rproposta.nrsequencial_proposta;

                vqtregistro1 := vqtregistro1 + 1;

                begin
                  p_gera_modulo_proposta_r2(rproposta.nrsequencial_proposta);

                exception
                  when others then
                    p_insere_falha(rproposta.nrsequencial_controle,
                                   'PR',
                                   'Ocorreu falha ao gerar modulo para proposta.',
                                   sqlerrm,
                                   rproposta.nrsequencial_proposta);

                    update import_propost pr
                       set pr.u##ind_sit_import = 'ER',
                           pr.ind_sit_import    = 'ER'
                     where pr.num_seqcial_propost =
                           rproposta.nrsequencial_proposta;
                end;

                begin
                  p_repasse_proposta(rproposta.nrsequencial_proposta);
                exception
                  when others then
                    p_insere_falha(rproposta.nrsequencial_controle,
                                   'PR',
                                   'Ocorreu falha ao criar registro de repasse proposta.',
                                   sqlerrm,
                                   rproposta.nrsequencial_proposta);

                    update import_propost pr
                       set pr.u##ind_sit_import = 'ER',
                           pr.ind_sit_import    = 'ER'
                     where pr.num_seqcial_propost =
                           rproposta.nrsequencial_proposta;
                end;

--DBMS_OUTPUT.PUT_LINE('P1090 ANTES P_FAIXA_ESPECIAL_PROPOSTA');

                begin
                  p_faixa_especial_proposta(rproposta.nrsequencial_proposta);
                exception
                  when others then
                    p_insere_falha(rproposta.nrsequencial_controle,
                                   'PR',
                                   'Ocorreu falha ao criar faixa etaria especial da proposta.',
                                   sqlerrm,
                                   rproposta.nrsequencial_proposta);

                    update import_propost pr
                       set pr.u##ind_sit_import = 'ER',
                           pr.ind_sit_import    = 'ER'
                     where pr.num_seqcial_propost =
                           rproposta.nrsequencial_proposta;
                end;

                -- atualizando situação (RC) para que a proposta fique apta a ser importada no TOTVS12.

                p_insere_log('PROPOSTA_TOTVS',
                             'p_atualiza_proposta',
                             'FINAL DA ATUALIZACAO. VAI TROCAR SITUACAO PARA: ' || vind_si_import,
                             pnrsequencial_usuario, --pnrsequencial_origem
                             pnrsequencial_proposta, --pcdidentificador
                             null,
                             null); --complemento

                update import_propost p set
                       p.ind_sit_import         = vind_si_import,
                       p.u##ind_sit_import      = vind_si_import
                 where p.num_seqcial_control =
                       rproposta.nrsequencial_controle
                   and p.num_seqcial_propost =
                       rproposta.nrsequencial_proposta;

                --se a situacao ficou 'RC' (pronto para importar no TOTVS), apagar dados no TOTVS, pois
                --pode ser uma atualizacao
                if vind_si_import = 'RC' then
                  if rproposta.num_livre_10 = 0 or rproposta.num_livre_10 is null then
                    apaga_proposta_totvs(rproposta.cd_modalidade,
                                         vnrproposta_alt);
                  else
                    apaga_proposta_totvs(rproposta.cd_modalidade,
                                         rproposta.num_livre_10);
                  end if;
                end if;

                --commit;

              exception
                when others then
                  p_insere_falha(rproposta.nrsequencial_controle,
                                 'PR',
                                 'Ocorreu falha ao atualizar proposta.',
                                 sqlerrm,
                                 rproposta.nrsequencial_proposta);

                  update import_propost pr
                     set pr.u##ind_sit_import = 'ER',
                         pr.ind_sit_import    = 'ER'
                   where pr.num_seqcial_propost =
                         rproposta.nrsequencial_proposta;
              end;
          end if;
        end loop;

        dbms_output.put_line('P_ATULIZA_PROPOSTA P1.5 ' || seqproposta);

/*
        --terminou de atualizar dados da proposta.
        --se hash nao mudou, voltar para situacao 'IT', e TOTVS nao sera afetado;
        --se hash mudou, apagar no TOTVS e manter em situacao 'RC' para ser recriado;

        hash_atual := gerar_hash_import_propost(pnrsequencial_usuario, pnrsequencial_proposta);

        p_insere_log('BENEFICIARIO_PROPOSTA',
                     'p_atualiza_proposta',
                     'COMPARAR HASH DA PROPOSTA',
                     pnrsequencial_usuario, --pnrsequencial_origem
                     0, --pcdidentificador
                     'NRSEQUENCIAL_PROPOSTA; HASH ANTERIOR; NOVO: ',
                     pnrsequencial_proposta || ';' || hash_import_propost || ';' || hash_atual); --complemento

        if hash_atual = hash_import_propost then

          p_insere_log('BENEFICIARIO_PROPOSTA',
                       'p_atualiza_proposta',
                       'HASH FICOU IGUAL!!!',
                       pnrsequencial_usuario, --pnrsequencial_origem
                       0, --pcdidentificador
                       'NRSEQUENCIAL_PROPOSTA; HASH ANTERIOR; NOVO: ',
                       pnrsequencial_proposta || ';' || hash_import_propost || ';' || hash_atual); --complemento

          p_insere_log('BENEFICIARIO_PROPOSTA',
                       'p_atualiza_proposta',
                       'PROPOSTA NAO MUDOU',
                       pnrsequencial_usuario, --pnrsequencial_origem
                       0, --pcdidentificador
                       'VAI VOLTAR PARA SITUACAO IT',
                       pnrsequencial_proposta); --complemento
\*alex 14/02/19 descomentar isso!!!
          update gp.import_propost ip
             set ip.ind_sit_import = 'IT', ip.u##ind_sit_import = 'IT'
           where ip.num_seqcial_propost = x.num_seqcial_propost;*\
        else

          p_insere_log('BENEFICIARIO_PROPOSTA',
                       'p_atualiza_proposta',
                       'HASH FICOU DIFERENTE!!!',
                       pnrsequencial_usuario, --pnrsequencial_origem
                       0, --pcdidentificador
                       'NRSEQUENCIAL_PROPOSTA; HASH ANTERIOR; NOVO: ',
                       pnrsequencial_proposta || ';' || hash_import_propost || ';' || hash_atual); --complemento

          p_insere_log('BENEFICIARIO_PROPOSTA',
                       'p_atualiza_proposta',
                       'APAGAR PROPOSTA NO TOTVS PARA RECRIAR',
                       pnrsequencial_usuario, --pnrsequencial_origem
                       0, --pcdidentificador
                       'VAI APAGAR NO TOTVS POIS ENCONTROU DIFERENCAS. NR_CONTRATO_ANTIGO: ',
                       pnrsequencial_proposta); --complemento

\*alex 14/02/19 descomentar isso!!!
          update gp.import_propost ip
             set ip.cod_livre_9 = hash_atual
           where ip.num_seqcial_propost = x.num_seqcial_propost;

          apaga_proposta_totvs(x.cd_modalidade, x.nr_proposta);*\
        end if;*/

      /*exception
        when others then
          p_insere_falha(x.num_seqcial_control,
                         'PR',
                         'Erro no metodo p_atualiza_proposta;',
                         sqlerrm,
                         x.num_seqcial_propost);
          update import_propost ip
             set ip.u##ind_sit_import = 'ER', ip.ind_sit_import = 'ER'
           where ip.num_seqcial_propost = x.num_seqcial_propost;

          p_commit;
      end;*/
    end loop;

          dbms_output.put_line('P_ATULIZA_PROPOSTA P1.6 ' || seqproposta);


    /*
    &&&&&
    \**
     * Verificar se a proposta ja existia e sofreu alguma alteracao.
     * Se SIM, apagar tabelas do TOTVS e deixar temp como RC para recriar;
     * Se NAO, restaurar temporarias com base nos historicos.
     *\
    DBMS_OUTPUT.PUT_LINE('VERIFICANDO SE PROPOSTA POSSUI HISTORICO...');
    begin
      select 'S' into aotem_historico
        from import_propost_hist iph where iph.num_seqcial_propost = pnrsequencial_proposta;
    exception
      when no_data_found then
        aotem_historico := 'N';
    end;

    DBMS_OUTPUT.PUT_LINE('POSSUI HISTORICO? ' || aotem_historico);

    if aotem_historico = 'S' then

      p_insere_log('BENEFICIARIO_PROPOSTA',
                   'ATUALIZANDO PROPOSTA',
                   pnrsequencial_usuario, --pnrsequencial_origem
                   pnrsequencial_proposta, --pcdidentificador
                   'PROPOSTA TEM HISTORICO. VERIFICAR SE ALGO MUDOU',
                   null); --complemento

      --checar se houve alguma mudanca nas temporarias
      if f_import_propost_hist_iguais(pnrsequencial_proposta) = 'S' then
        -- se nada mudou, restaurar o registro conforme historico, para que nao seja reprocessado no progress
        dbms_output.put_line('EXISTE HISTORICO MAS NADA MUDOU. RESTAURANDO TEMPORARIAS NR_CONTRATO_ANTIGO: ' || pnrsequencial_proposta);

        p_insere_log('BENEFICIARIO_PROPOSTA',
                     'EXISTE HISTORICO DA PROPOSTA, MAS SEM ALTERACOES. RESTAURAR.',
                     pnrsequencial_usuario, --pnrsequencial_origem
                     pnrsequencial_proposta, --pcdidentificador
                     null,
                     null); --complemento

        apaga_proposta_import(pnrsequencial_proposta, pnrsequencial_proposta);
        restaurar_import_propost_hist(pnrsequencial_proposta);
      else
        -- apagar fisicamente proposta e relacionamentos no TOTVS, pois sera recriado em cg0310x.p e cg0310v.p (progress)
        dbms_output.put_line('EXISTE HISTORICO E TEVE MUDANCA NA ORIGEM. APAGANDO NO TOTVS PARA RECRIAR! NR_CONTRATO_ANTIGO: ' || pnrsequencial_proposta);

        p_insere_log('BENEFICIARIO_PROPOSTA',
                     'EXISTE HISTORICO DA PROPOSTA E HOUVERAM ALTERACOES!',
                     pnrsequencial_usuario, --pnrsequencial_origem
                     pnrsequencial_proposta, --pcdidentificador
                     'VAI APAGAR PROPOSTA E RELACIONAMENTOS NO TOTVS PARA RECRIAR!',
                     null); --complemento
        for ip in (select cd_modalidade, num_livre_10 nr_proposta
                     from gp.import_propost ip where ip.nr_contrato_antigo = pnrsequencial_proposta) loop
          apaga_proposta_totvs(ip.cd_modalidade, ip.nr_proposta);
        end loop;
      end if;
      delete from import_propost_hist iph where iph.num_seqcial_propost = pnrsequencial_proposta;
      delete from importpadrcobertproposthist ipph where ipph.num_seqcial_propost = pnrsequencial_proposta;
      delete from import_negociac_propost_hist inph where inph.num_seqcial_propost = pnrsequencial_proposta;
      delete from import_modul_propost_hist imph where imph.num_seqcial_propost = pnrsequencial_proposta;
      delete from import_lotac_propost_hist ilph where ilph.num_seqcial_propost = pnrsequencial_proposta;
      delete from import_faixa_propost_hist ifph where ifph.num_seqcial_propost = pnrsequencial_proposta;
    end if;
*/
  end p_atualiza_proposta;

procedure p_atualiza_beneficiario_g(pnrsequencial_usuario import_bnfciar.num_seqcial_bnfciar%type) is

    vnr_contrato_antigo_titular  import_propost.nr_contrato_antigo%type;
    vmodalidade_titular          import_propost.cd_modalidade%type;
    vpadrao_cobertura_tituar     import_bnfciar.cd_padrao_cob%type;
    vaogera_dados_benef          char;
    vtitular_old                 import_bnfciar.cdcarteiraorigemresponsavel%type;
    vcdcarteira_antiga_resp      import_bnfciar.cdcarteiraorigemresponsavel%type;
    vcdcliente                   number;
    vnrsequencial_titular        number;
    vaoexiste_titular_sinistrado char;
    vnocidade                    varchar2(100);
    vnrcarteiraantiga            number;
    vnrunimedorigem              number;
    vcdorigemresp                number;
    vaogerafalha                 char;
    vnrsequencialrepasse         number;
    vdtinicio                    date;
    vdtiniciopropost             date;
    vcdsituacao                  varchar2(2);
    vultimo_mes_faturado         number;
    vultimo_ano_faturado         number;
    vdtinicio_aposdem            date;
    vdtdesligamento_aposdem      date;
    vdtfinal_aposdem             date;
    vcdlotacao                   number;
    vnrpessoa_paga               number;
    vnrpessoa_titular            number;
    vcdresponsavel_financeiro    number;
    vultimo_faturamento          date;
    vin_tipo_dependencia         number;
    vdtnascimento_titular        date;
    vnrdia_de_vencimento         number;
    vdtvalidade                  date;
    vtpremido                    varchar2(1);
    vcd_usuario                  number := 0;
    vcd_usuario_gp               number := 0;
    vcdmotivo_canc_demap         number := 0;

    vaoaposentado_demitido varchar2(1) := 'N';
    vdtinicio_contribuicao date := null;
    vdtfinal_contrato date := null;

    function retornaendereconumero(pnologradouro in varchar2,
                                   pnrimovel     in varchar2) return varchar2 is
      vtamanhologradouro number;
    begin
      if instr(pnologradouro, pnrimovel) = 0 then
        if (length(pnologradouro) + length(pnrimovel) + 2) < 41 then
          return pnologradouro || ', ' || pnrimovel;
        else
          -- busca qual será o tamanho do endereco para que nao ultrapasse
          --o limite de 40 caracteres ao concatenar o numero do imovel
          vtamanhologradouro := length(pnologradouro) -
                                ((length(pnrimovel) + 2) -
                                 (40 - length(pnologradouro)));
          return substr(pnologradouro, 1, vtamanhologradouro) || ', ' || pnrimovel;
        end if;
      else
        return pnologradouro;
      end if;
    end retornaendereconumero;

  begin

    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    --iniciaprocesso;
    vaogravar := 'N';
    -- atualiza o vinculo das propostas com os beneficiarios
    -- atualizando os dependentes sem titulares na tabela temporaria

    vaomigrado     := 'N';
    countofrecords := 0;
    vaogerafalha   := 'N';

    /* cursor com os registros relacionados ao IMPORT_BNFCIAR.IND_SIT_IMPORT = 'GE', para preenchimento
     * das demais colunas.
     */

    DBMS_OUTPUT.PUT_LINE('P109 ANTES DO LOOP CUR_BENEFICIARIO. pnrsequencial_usuario: ' || pnrsequencial_usuario);

    --apagar tabelas relacionadas para serem recriadas em p_atualiza_beneficiario
    apaga_beneficiario_import(pnrsequencial_usuario);

    for rbeneficiario in cur_beneficiario(pnrsequencial_usuario) loop

      DBMS_OUTPUT.PUT_LINE('P1101 REGISTRO/CARTEIRA/CART.RESP/LG_RESP;' || rbeneficiario.nrsequencial_usuario || ';' ||
        rbeneficiario.carteira_antiga || ';' || rbeneficiario.carteira_antiga_resp || ';' || rbeneficiario.responsavel);

      --DBMS_OUTPUT.PUT_LINE('P110 REGISTRO:;' || rbeneficiario.nrsequencial_usuario || ';' || pnrsequencial_usuario);

      --DBMS_OUTPUT.PUT_LINE('P500.1 REGISTRO/CPF/CPF COM MASCARA: ' || rbeneficiario.nrsequencial_usuario ||
      --'/' || rbeneficiario.nrcpf || '/' || lpad(trim(rbeneficiario.nrcpf), 11, '0') );


      DBMS_OUTPUT.PUT_LINE( 'P3000 nrregistro_usuario/vcdcarteira_antiga_resp/rbeneficiario.carteira_antiga_resp: ' ||
            rbeneficiario.nrregistro_usuario || ' / ' || vcdcarteira_antiga_resp ||
            ' / ' || rbeneficiario.carteira_antiga_resp);

      vcdcarteira_antiga_resp := rbeneficiario.carteira_antiga_resp;

      vcdsituacao  := 'GE';
      vaogerafalha := 'N';
      vdtinicio    := rbeneficiario.dtinicio;

      /* Alex Boeira 03/01/2019 - preencher variaveis de controle com ultimo faturamento real do beneficiario, pois um contrato
                                  pode ser faturado no Unicoo e em seguida incluido um beneficiario para o mesmo mes,
                                  ficando com ultimo mes/ano faturamento
                                  incorreto, e assim nao calcularia taxa de inscricao quando entra no TOTVS
      */

      rbeneficiario.ultimo_ano_faturado := nvl(substr(lpad(rbeneficiario.aa_mm_ultimo_faturamento,6,'0'),1,4),'0');
      rbeneficiario.ultimo_mes_faturado := nvl(substr(lpad(rbeneficiario.aa_mm_ultimo_faturamento,6,'0'),5,2),'0');

      vultimo_ano_faturado := rbeneficiario.ultimo_ano_faturado;
      vultimo_mes_faturado := rbeneficiario.ultimo_mes_faturado;

      DBMS_OUTPUT.PUT_LINE( 'P3001;AA_FAT;MM_FAT;' || vultimo_ano_faturado || ';' || vultimo_mes_faturado);

      vaogera_dados_benef := 'S';

      --nao buscar titular para remidos, pois sera criado logo abaixo
      if rbeneficiario.log_segassist <> 1 then
        -- BUSCA DADOS DO RESPONSAVEL
        begin
          select nr_contrato_antigo, cd_modalidade, ib.cd_padrao_cob
            into vnr_contrato_antigo_titular,
                 vmodalidade_titular,
                 vpadrao_cobertura_tituar
            from import_bnfciar ib
           where ib.cd_carteira_antiga = rbeneficiario.carteira_antiga_resp;
        exception
          when others then
            vaogerafalha := 'S';
            p_insere_falha(rbeneficiario.num_seqcial_control,
                           'BE',
                           '01 - Erro ao pesquisar carteira titular. Carteira Antiga Resp: ' ||
                           rbeneficiario.carteira_antiga_resp,
                           sqlerrm,
                           rbeneficiario.nrsequencial_usuario);
        end;

        if vnr_contrato_antigo_titular <> rbeneficiario.contrato_antigo and
           rbeneficiario.dtexclusao < trunc(sysdate) and --inativo
           psepara_inativo = 'S' then

          rbeneficiario.responsavel          := 1;
          vtitular_old                       := rbeneficiario.carteira_antiga_resp;
          rbeneficiario.carteira_antiga_resp := rbeneficiario.carteira_antiga;
          vaogera_dados_benef                := 'N';

        end if;
      end if;

      vdtinicio_aposdem := null;
      vdtdesligamento_aposdem := null;
      vdtfinal_aposdem := null;
      vnrpessoa_paga := null;
      vnrpessoa_titular := null;
      vnrdia_de_vencimento := null;

       vaoaposentado_demitido := 'N';
       vdtinicio_contribuicao := null;
       vdtfinal_contrato := null;

      DBMS_OUTPUT.PUT_LINE( 'P3002');

      --INICIALIZAR COM LOTACAO DO UNICOO.
      --PODERA SER ALTERADO EM SEGUIDA CASO SEJA DE PLANO DE DEMITIDO/APOSESNTADO.
      vcdlotacao                := rbeneficiario.num_livre_1; -- LOTACAO FOI PREENCHIDA EM P_GRAVA_PROPOSTA_COM_LOTACAO
      vcdresponsavel_financeiro := 0;

/*      -- se data admissao esta anterior ao nascimento, troca para nulo, pois eh inválida
      \*if rbeneficiario.dtadmissao_empresa < rbeneficiario.dtnascimento then
         rbeneficiario.dtadmissao_empresa := null;
      end if;*\
--    BKP DA VERSAO QUE TRATAVA APENAS TITULARES. NOVA VERSAO ABAIXO (ALEX 11/07/2018)
      if rbeneficiario.tpusuario = 00 then -- titular no unicoo
        select f.dtinicio_contrato,
               f.dtdesligamento,
               us.dtexclusao,
               (select cdvalor_externo
                  from mig_tab_conversao r, mig_tab_conversao_exp re
                 where re.nrseq_tab_conversao = r.nrseq
                   and r.notabela = 'MIGRACAO_MOTIVO_CANCELAMENTO'
                   and f.cdmotivo_cancelamento = re.cdvalor_interno),
               f.nrpessoa_paga,
               f.nrpessoa_titular,
               f.nrdia_de_vencimento
          into vdtinicio_aposdem, vdtdesligamento_aposdem, vdtfinal_aposdem, rbeneficiario.cdmotivo_canc,
               vnrpessoa_paga, vnrpessoa_titular, vnrdia_de_vencimento
          from familia f, usuario us
         where us.nrregistro = f.nrregistro
           and us.nrcontrato = f.nrcontrato
           and us.nrfamilia = f.nrfamilia
           and us.nrsequencial_usuario = rbeneficiario.nrsequencial_usuario;

        \* se encontrou relacionamento acima e FAMILIA.DTINICIO_CONTRATO está informado,
         * significa que é um plano de DEMITIDO/APOSENTADO, onde o responsável
         * financeiro é o responsável da família.
         *\
        if vdtinicio_aposdem is not null then -- EH TITULAR DE PLANO DEMITIDO/APOSENTADO

          if pAOMIGRA_COM_LOTACAO = 'S'
          then
            vcdlotacao := 1; -- lotação fixa que representa APOSENTADOS/DEMITIDOS
            begin
              select tip.cdn_cliente
                     into vcdresponsavel_financeiro
                     from ti_pessoa tip
                    where tip.nrregistro = nvl(vnrpessoa_paga,vnrpessoa_titular);
            exception
              when others then
                vcdresponsavel_financeiro := 0;
            end;
          else
            \* com a implementacao da Lotação, deve ser mantida a data de início original do beneficiário *\
            vdtinicio := vdtinicio_aposdem;
          end if;

--DBMS_OUTPUT.PUT_LINE( 'P11.21 dtexclusao(antes)/vdtfinal_aposdem: ' || rbeneficiario.dtexclusao || ';' || vdtfinal_aposdem);
          rbeneficiario.dtexclusao := vdtfinal_aposdem;

        -- EH TITULAR MAS NAO EH DEMITIDO/APOSENTADO
        else
            if pAOMIGRA_COM_LOTACAO = 'S'
            and rbeneficiario.tpfatura = 'U'--ADESAO
            then
              begin
                select tip.cdn_cliente
                       into vcdresponsavel_financeiro
                       from ti_pessoa tip
                      where tip.nrregistro = nvl(vnrpessoa_paga,vnrpessoa_titular);
              exception
                when others then
                  vcdresponsavel_financeiro := 0;
              end;
            end if;
            vnrdia_de_vencimento := null;
        end if;--se eh demitido/aposentado
      end if;--se eh titular
*/
      --CHECAR SE Eh PLANO DE DEMITIDO/APOSENTADO
      select f.dtinicio_contrato,
             f.dtdesligamento,
             us.dtexclusao,

             decode(f.dtinicio_contrato,null,null,
                       nvl((select cdvalor_externo
                              from mig_tab_conversao r, mig_tab_conversao_exp re
                             where re.nrseq_tab_conversao = r.nrseq
                               and r.notabela = 'MIGRACAO_MOTIVO_CANCELAMENTO'
                               and f.cdmotivo_cancelamento = re.cdvalor_interno),PCDMOTIVOCANCEL_BENEF)),

             f.nrpessoa_paga,
             f.nrpessoa_titular,
             f.nrdia_de_vencimento,
             nvl(m.AOAPOSENTADO_DEMITIDO,'D') aoaposentado_demitido,
             f.dtinicio_contribuicao,
             f.dtfinal_contrato
        into vdtinicio_aposdem,
             vdtdesligamento_aposdem,
             vdtfinal_aposdem,
             vcdmotivo_canc_demap, -- trocava o motivo correto do beneficiario pelo motivo da familia rbeneficiario.cdmotivo_canc,
             vnrpessoa_paga,
             vnrpessoa_titular,
             vnrdia_de_vencimento,
             vaoaposentado_demitido,
             vdtinicio_contribuicao,
             vdtfinal_contrato
        from familia f, usuario us, motivo_de_cancelamento m
       where us.nrregistro = f.nrregistro
         and us.nrcontrato = f.nrcontrato
         and us.nrfamilia = f.nrfamilia
         and m.cdmotivo_cancelamento(+) = f.cdmotivo_cancelamento
         and us.nrsequencial_usuario = rbeneficiario.nrsequencial_usuario;

      DBMS_OUTPUT.PUT_LINE( 'P3003');

      /* se encontrou relacionamento acima e FAMILIA.DTINICIO_CONTRATO está informado,
       * significa que é um plano de DEMITIDO/APOSENTADO, onde o responsável
       * financeiro é o responsável da família.
       */
      if vdtinicio_aposdem is not null then -- EH TITULAR DE PLANO DEMITIDO/APOSENTADO
        if pAOMIGRA_COM_LOTACAO = 'S'
        then
          --VERIFICAR SE O BENEFICIARIO USUFRUIU DO PLANO DE DEMITIDO/APOSENTADO
          if rbeneficiario.dtexclusao is null
          or rbeneficiario.dtexclusao > vdtinicio_aposdem then
            vcdlotacao := 1; -- lotação fixa que representa APOSENTADOS/DEMITIDOS
            rbeneficiario.cdmotivo_canc := vcdmotivo_canc_demap;

            begin
              select tip.cdn_cliente
                     into vcdresponsavel_financeiro
                     from ti_pessoa tip
                    where tip.nrregistro = nvl(vnrpessoa_paga,vnrpessoa_titular);
            exception
              when others then
                vcdresponsavel_financeiro := 0;
            end;
          else
            vdtinicio_aposdem := null;
            vdtdesligamento_aposdem := null;

             vaoaposentado_demitido := 'N';
             vdtinicio_contribuicao := null;
             vdtfinal_contrato := null;

          end if;
        else
          /* com a implementacao da Lotação, deve ser mantida a data de início original do beneficiário */
          vdtinicio := vdtinicio_aposdem;
        end if;

        --DBMS_OUTPUT.PUT_LINE( 'P11.21 dtexclusao(antes)/vdtfinal_aposdem: ' || rbeneficiario.dtexclusao || ';' || vdtfinal_aposdem);
        rbeneficiario.dtexclusao := vdtfinal_aposdem;

      --NAO EH DEMITIDO/APOSENTADO
      else
        if pAOMIGRA_COM_LOTACAO = 'S'
        and rbeneficiario.tpfatura = 'U'--ADESAO
        then
          begin
            select tip.cdn_cliente
                   into vcdresponsavel_financeiro
                   from ti_pessoa tip
                  where tip.nrregistro = nvl(vnrpessoa_paga,vnrpessoa_titular);
          exception
            when others then
              vcdresponsavel_financeiro := 0;
          end;
        end if;
        vnrdia_de_vencimento := null;
      end if;--se eh demitido/aposentado

      begin
        select p.dat_propost
          into vdtiniciopropost
          from import_propost p
         where /*p.u##nr_contrato_antigo*/ p.nr_contrato_antigo = rbeneficiario.contrato_antigo;

        --data de inclusao do plano e menor que data da proposta
        if vdtinicio < vdtiniciopropost then

          vdtinicio := vdtiniciopropost; /* else vdtinicio := rbeneficiario.dtinicio;*/
        end if;
      exception
        when others then
          vdtinicio := rbeneficiario.dtinicio;
      end;

      begin
        --data de inclusado do beneficiário no plano não pode ser anterior ao seu nascimento
        if vdtinicio < rbeneficiario.dtnascimento then
          vdtinicio := rbeneficiario.dtnascimento;
        end if;
      end;

      begin
        select in_tipo_dependencia
               into vin_tipo_dependencia
               from gra_par g where g.cd_grau_parentesco = rbeneficiario.grau_parentesco;
      exception
        when others then
          vin_tipo_dependencia := 0;
      end;

      DBMS_OUTPUT.PUT_LINE( 'P3004');
      --nao fazer essa logica para remidos, pois o titular ainda nao existe. sera criado em passo seguinte
      if rbeneficiario.log_segassist <> 1 then
        if vin_tipo_dependencia in (3,4) -- filho/filho adotivo
        then
          BEGIN

            /* somente trocar o grau de parentesco para ESPECIAL / UNIVERSITARIO se o grau anterior indicava FILHO*/
            if rbeneficiario.aoinvalido = 'S' then
               rbeneficiario.grau_parentesco := pCDGRAU_PARENTESCO_ESPECIAL;
            end if;
            if rbeneficiario.aouniversitario = 'S' then
               rbeneficiario.grau_parentesco := pCDGRAU_PARENTESCO_UNIVER;
            end if;

            select p.dtnascimento
              into vdtnascimento_titular
              from import_bnfciar ib, pessoa p
             where rbeneficiario.carteira_antiga_resp = ib.cd_carteira_antiga
               and p.nrregistro = rbeneficiario.nrregistro_titular;
          exception
            when others then
              vaogerafalha := 'S';
              p_insere_falha(rbeneficiario.num_seqcial_control,
                             'BE',
                             '02 - Erro ao pesquisar carteira titular. Carteira Antiga Resp: ' ||
                             rbeneficiario.carteira_antiga_resp || ' NRREGISTRO_TITULAR: ' ||
                             rbeneficiario.nrregistro_titular,
                             sqlerrm,
                             rbeneficiario.nrsequencial_usuario);
          end;

          if vdtnascimento_titular > rbeneficiario.dtnascimento then
            rbeneficiario.grau_parentesco := pgrau_parentesco_irmao;

          end if;

        end if;

        if vin_tipo_dependencia = 5 --pai/mae
        then
          begin
            select p.dtnascimento
              into vdtnascimento_titular
              from import_bnfciar ib, pessoa p
             where rbeneficiario.carteira_antiga_resp = ib.cd_carteira_antiga
               and p.nrregistro = rbeneficiario.nrregistro_titular;
          exception
            when others then
              vaogerafalha := 'S';
              p_insere_falha(rbeneficiario.num_seqcial_control,
                             'BE',
                             '03 - Erro ao pesquisar carteira titular ' ||
                             rbeneficiario.carteira_antiga_resp,
                             sqlerrm,
                             rbeneficiario.nrsequencial_usuario);
          end;

          if vdtnascimento_titular < rbeneficiario.dtnascimento then
            rbeneficiario.grau_parentesco := pgrau_parentesco_irmao;

          end if;

        end if;
      end if;
      vnrcontrolemigracao := fn_retorna_controle(pnrsequencial_usuario,
                                                 'BE');
      vnrsequencialrepasse := 0;

          -- busca código origem do usuário e responsável quando código
          -- origem da tabela usuario nao estiver preenchido

--DBMS_OUTPUT.PUT_LINE( 'P161 rbeneficiario.tpusu_contrato: ' || rbeneficiario.tpusu_contrato);

          -- 04/04/17 REVISAR ESSA LÓGICA. TPUSU_CONTRATO NUNCA É 'U'. É O PLANO NO UNICOO. EX: NCUNIV86, NCUNIV87

      if rbeneficiario.tpusu_contrato = 'U' then
        if rbeneficiario.nrunimed_origem is null then
          select a.cdareaacao
            into rbeneficiario.nrunimed_origem
            from area_de_acao a
           where a.nrregistro_pessoa = rbeneficiario.nrregistro;
        end if;

        if rbeneficiario.nounimed_origem is null then
          rbeneficiario.nounimed_origem := rbeneficiario.carteira_antiga;
        end if;
      end if;
--DBMS_OUTPUT.PUT_LINE( 'P18 p_atualiza_beneficiario_g' );

/* NUNCA ENTRA AQUI, DEVIDO AO COMENTÁRIO ACIMA!!!!! REVISAR!!!*/
      if rbeneficiario.tpusu_contrato in ('P', 'C') then
        -- faz busca de endereço para contratos particular e cooperado
        begin
          select logradouro,
                 nrimovel,
                 nobairro,
                 cdcidade,
                 nocidade,
                 nrcep,
                 cdestado,
                 nrtelefone,
                 nrcelular,
                 cdemail
            into rbeneficiario.endereco,
                 rbeneficiario.nrimovel,
                 rbeneficiario.nobairro,
                 rbeneficiario.cdcidade,
                 rbeneficiario.cidade,
                 rbeneficiario.cep,
                 rbeneficiario.estado,
                 rbeneficiario.telefone1,
                 rbeneficiario.telefone2,
                 rbeneficiario.cdemail
            from (select nvl(e.nologradouro, 'NÃO INFORMADO') logradouro,
                         e.nrimovel,
                         nvl(e.nobairro, 'NÃO INFORMADO') nobairro,
                         e.cdcidade,
                         cid.nocidade,
                         fn_tirarmascara(e.nrcep, 8) nrcep,
                         cid.cdestado,
                         e.nrtelefone,
                         e.nrcelular,
                         e.cdemail
                    from endereco e, cidade cid
                   where e.cdcidade = cid.cdcidade
                     and e.nrregistro =
                         rbeneficiario.usuario_atualiz_carencia
                     and e.tpendereco = 'COBR'
                  union all
                  select nvl(e.nologradouro, 'NÃO INFORMADO'),
                         e.nrimovel,
                         nvl(e.nobairro, 'NÃO INFORMADO'),
                         e.cdcidade,
                         cid.nocidade,
                         fn_tirarmascara(e.nrcep, 8),
                         cid.cdestado,
                         e.nrtelefone,
                         e.nrcelular,
                         e.cdemail
                    from endereco e, cidade cid
                   where e.cdcidade = cid.cdcidade
                     and e.nrregistro =
                         rbeneficiario.usuario_atualiz_carencia
                     and e.tpendereco <> 'COBR')
           where rownum = 1;
        exception
          when no_data_found then
            -- busca endereço do titular
            begin
              select nologradouro,
                     nrimovel,
                     nobairro,
                     cdcidade,
                     nocidade,
                     nrcep,
                     cdestado,
                     nrtelefone,
                     nrcelular,
                     cdemail
                into rbeneficiario.endereco,
                     rbeneficiario.nrimovel,
                     rbeneficiario.nobairro,
                     rbeneficiario.cdcidade,
                     rbeneficiario.cidade,
                     rbeneficiario.cep,
                     rbeneficiario.estado,
                     rbeneficiario.telefone1,
                     rbeneficiario.telefone2,
                     rbeneficiario.cdemail
                from (select nvl(e.nologradouro, 'NÃO INFORMADO') nologradouro,
                             e.nrimovel,
                             nvl(e.nobairro, 'NÃO INFORMADO') nobairro,
                             e.cdcidade,
                             cid.nocidade,
                             fn_tirarmascara(e.nrcep, 8) nrcep,
                             cid.cdestado,
                             e.nrtelefone,
                             e.nrcelular,
                             e.cdemail
                        from endereco e, cidade cid
                       where rbeneficiario.nrregistro_titular =
                             e.nrregistro
                         and e.cdcidade = cid.cdcidade
                         and e.tpendereco = 'COBR'
                      union all
                      select nvl(e.nologradouro, 'NÃO INFORMADO'),
                             e.nrimovel,
                             nvl(e.nobairro, 'NÃO INFORMADO'),
                             e.cdcidade,
                             cid.nocidade,
                             fn_tirarmascara(e.nrcep, 8),
                             cid.cdestado,
                             e.nrtelefone,
                             e.nrcelular,
                             e.cdemail
                        from endereco e, cidade cid
                       where rbeneficiario.nrregistro_titular =
                             e.nrregistro
                         and e.cdcidade = cid.cdcidade
                         and e.tpendereco <> 'COBR')
               where rownum = 1;
            exception
              when no_data_found then
                -- busca endereco do contrato
                begin
                  select nologradouro,
                         nrimovel,
                         nobairro,
                         cdcidade,
                         nocidade,
                         nrcep,
                         cdestado,
                         nrtelefone,
                         nrcelular,
                         cdemail
                    into rbeneficiario.endereco,
                         rbeneficiario.nrimovel,
                         rbeneficiario.nobairro,
                         rbeneficiario.cdcidade,
                         rbeneficiario.cidade,
                         rbeneficiario.cep,
                         rbeneficiario.estado,
                         rbeneficiario.telefone1,
                         rbeneficiario.telefone2,
                         rbeneficiario.cdemail
                    from (select nvl(e.nologradouro, 'NÃO INFORMADO') nologradouro,
                                 e.nrimovel,
                                 nvl(e.nobairro, 'NÃO INFORMADO') nobairro,
                                 e.cdcidade,
                                 cid.nocidade,
                                 fn_tirarmascara(e.nrcep, 8) nrcep,
                                 cid.cdestado,
                                 e.nrtelefone,
                                 e.nrcelular,
                                 e.cdemail
                            from endereco e, cidade cid
                           where rbeneficiario.nrregistro = e.nrregistro
                             and e.cdcidade = cid.cdcidade
                             and e.tpendereco = 'COBR'
                          union all
                          select nvl(e.nologradouro, 'NÃO INFORMADO'),
                                 e.nrimovel,
                                 nvl(e.nobairro, 'NÃO INFORMADO'),
                                 e.cdcidade,
                                 cid.nocidade,
                                 fn_tirarmascara(e.nrcep, 8),
                                 cid.cdestado,
                                 e.nrtelefone,
                                 e.nrcelular,
                                 e.cdemail
                            from endereco e, cidade cid
                           where rbeneficiario.nrregistro = e.nrregistro
                             and e.cdcidade = cid.cdcidade
                             and e.tpendereco <> 'COBR')
                   where rownum = 1;
                exception
                  when others then
                    null;
                end;
            end;
          when others then
            null;
        end;
      else
            -- faz busca de endereço de contratos de intercâmbio ou empresariais
        begin
--DBMS_OUTPUT.PUT_LINE( 'P19 p_atualiza_beneficiario_g' );

          select nologradouro,
                 nrimovel,
                 nobairro,
                 cdcidade,
                 nocidade,
                 nrcep,
                 cdestado,
                 nrtelefone,
                 nrcelular,
                 cdemail
            into rbeneficiario.endereco,
                 rbeneficiario.nrimovel,
                 rbeneficiario.nobairro,
                 rbeneficiario.cdcidade,
                 rbeneficiario.cidade,
                 rbeneficiario.cep,
                 rbeneficiario.estado,
                 rbeneficiario.telefone1,
                 rbeneficiario.telefone2,
                 rbeneficiario.cdemail
            from (select nvl(e.nologradouro, 'NÃO INFORMADO') nologradouro,
                         e.nrimovel,
                         nvl(e.nobairro, 'NÃO INFORMADO') nobairro,
                         e.cdcidade,
                         cid.nocidade,
                         fn_tirarmascara(e.nrcep, 8) nrcep,
                         cid.cdestado,
                         e.nrtelefone,
                         e.nrcelular,
                         e.cdemail
                    from endereco e, cidade cid
                   where e.cdcidade = cid.cdcidade
                     and e.nrregistro =
                         rbeneficiario.usuario_atualiz_carencia
                     and e.tpendereco = 'COBR'
                  union all
                  select nvl(e.nologradouro, 'NÃO INFORMADO'),
                         e.nrimovel,
                         nvl(e.nobairro, 'NÃO INFORMADO'),
                         e.cdcidade,
                         cid.nocidade,
                         fn_tirarmascara(e.nrcep, 8),
                         cid.cdestado,
                         e.nrtelefone,
                         e.nrcelular,
                         e.cdemail
                    from endereco e, cidade cid
                   where e.cdcidade = cid.cdcidade
                     and e.nrregistro =
                         rbeneficiario.usuario_atualiz_carencia
                     and e.tpendereco <> 'COBR')
           where rownum = 1;
        exception
          when no_data_found then
            -- busca endereço do titular
            begin
--DBMS_OUTPUT.PUT_LINE( 'P1110 p_atualiza_beneficiario_g' );

              select nologradouro,
                     nrimovel,
                     nobairro,
                     cdcidade,
                     nocidade,
                     nrcep,
                     cdestado,
                     nrtelefone,
                     nrcelular,
                     cdemail
                into rbeneficiario.endereco,
                     rbeneficiario.nrimovel,
                     rbeneficiario.nobairro,
                     rbeneficiario.cdcidade,
                     rbeneficiario.cidade,
                     rbeneficiario.cep,
                     rbeneficiario.estado,
                     rbeneficiario.telefone1,
                     rbeneficiario.telefone2,
                     rbeneficiario.cdemail
                from (select nvl(e.nologradouro, 'NÃO INFORMADO') nologradouro,
                             e.nrimovel,
                             nvl(e.nobairro, 'NÃO INFORMADO') nobairro,
                             e.cdcidade,
                             cid.nocidade,
                             fn_tirarmascara(e.nrcep, 8) nrcep,
                             cid.cdestado,
                             e.nrtelefone,
                             e.nrcelular,
                             e.cdemail
                        from endereco e, cidade cid
                       where rbeneficiario.nrregistro_titular =
                             e.nrregistro
                         and e.cdcidade = cid.cdcidade
                         and e.tpendereco = 'COBR'
                      union all
                      select nvl(e.nologradouro, 'NÃO INFORMADO'),
                             e.nrimovel,
                             nvl(e.nobairro, 'NÃO INFORMADO'),
                             e.cdcidade,
                             cid.nocidade,
                             fn_tirarmascara(e.nrcep, 8),
                             cid.cdestado,
                             e.nrtelefone,
                             e.nrcelular,
                             e.cdemail
                        from endereco e, cidade cid
                       where rbeneficiario.nrregistro_titular =
                             e.nrregistro
                         and e.cdcidade = cid.cdcidade
                         and e.tpendereco <> 'COBR')
               where rownum = 1;
            exception
              when no_data_found then
                -- busca endereco do contrato
                begin
--DBMS_OUTPUT.PUT_LINE( 'P1111 p_atualiza_beneficiario_g' );
                  select nologradouro,
                         nrimovel,
                         nobairro,
                         cdcidade,
                         nocidade,
                         nrcep,
                         cdestado,
                         nrtelefone,
                         nrcelular,
                         cdemail
                    into rbeneficiario.endereco,
                         rbeneficiario.nrimovel,
                         rbeneficiario.nobairro,
                         rbeneficiario.cdcidade,
                         rbeneficiario.cidade,
                         rbeneficiario.cep,
                         rbeneficiario.estado,
                         rbeneficiario.telefone1,
                         rbeneficiario.telefone2,
                         rbeneficiario.cdemail
                    from (select nvl(e.nologradouro, 'NÃO INFORMADO') nologradouro,
                                 e.nrimovel,
                                 nvl(e.nobairro, 'NÃO INFORMADO') nobairro,
                                 e.cdcidade,
                                 cid.nocidade,
                                 fn_tirarmascara(e.nrcep, 8) nrcep,
                                 cid.cdestado,
                                 e.nrtelefone,
                                 e.nrcelular,
                                 e.cdemail
                            from endereco e, cidade cid
                           where rbeneficiario.nrregistro = e.nrregistro
                             and e.cdcidade = cid.cdcidade
                             and e.tpendereco = 'COBR'
                          union all
                          select nvl(e.nologradouro, 'NÃO INFORMADO'),
                                 e.nrimovel,
                                 nvl(e.nobairro, 'NÃO INFORMADO'),
                                 e.cdcidade,
                                 cid.nocidade,
                                 fn_tirarmascara(e.nrcep, 8),
                                 cid.cdestado,
                                 e.nrtelefone,
                                 e.nrcelular,
                                 e.cdemail
                            from endereco e, cidade cid
                           where rbeneficiario.nrregistro = e.nrregistro
                             and e.cdcidade = cid.cdcidade
                             and e.tpendereco <> 'COBR')
                   where rownum = 1;
                exception
                  when others then
                    null;
                end;
            end;
          when others then
            null;
        end;
      end if;

      DBMS_OUTPUT.PUT_LINE( 'P3005');

      if rbeneficiario.nobairro is null then
        rbeneficiario.nobairro := 'NÃO INFORMADO';
      end if;

      -- verifica se rg, orgão emissor ou pais de emissão foram preenchidos,
      -- e verifica se alguns deles estão nulos.
      -- tais campos precisam estar preenchidos caso algum deles seja informado
      if (rbeneficiario.nrrg is not null or
         rbeneficiario.noorgao_emissor_id is not null or
         rbeneficiario.nopais_emissor_id is not null) and
         (rbeneficiario.nrrg is null or
         rbeneficiario.noorgao_emissor_id is null or
         rbeneficiario.nopais_emissor_id is null) then

        rbeneficiario.nrrg               := ' ';
        rbeneficiario.noorgao_emissor_id := ' ';
        rbeneficiario.nopais_emissor_id  := ' ';
      end if;

      vnocidade := upper(translate(rbeneficiario.cidade,
                                   'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç',
                                   'AAAAAAAAEEEEIIOOOOOOUUUUCC'));

      vnrcarteiraantiga := rbeneficiario.carteira_antiga_resp;
      vnrunimedorigem   := rbeneficiario.nrunimed_origem;
      vcdorigemresp     := rbeneficiario.origem_responsavel;

      /*    begin
        select 'S'
          into vaoutilizamascara
          from import_propost ip
         where ip.num_seqcial_propost = rbeneficiario.contrato_antigo
           and ip.log_mascar = 1;
      exception
        when no_data_found then
          vaoutilizamascara := 'N';
      end;

      if vaoutilizamascara = 'S' and  rbeneficiario.nrfuncional is null then

        rbeneficiario.nrfuncional := rbeneficiario.nrsequencial_usuario;



      end if;*/

      if to_char(rbeneficiario.dtexclusao, 'DD/MM/YYYY') < vdtinicio then
--DBMS_OUTPUT.PUT_LINE( 'P11.211 dtexclusao(antes)/vdtinicio: ' || rbeneficiario.dtexclusao || ';' || vdtinicio);
        rbeneficiario.dtexclusao := vdtinicio;
      end if;

      if (nvl(rbeneficiario.dtexclusao, '31/12/9999') >
         nvl(rbeneficiario.dat_fim_propost, '31/12/9999')) or
         (rbeneficiario.dtexclusao is null and
         rbeneficiario.dat_fim_propost is not null) then

--DBMS_OUTPUT.PUT_LINE( 'P11.212 dtexclusao(antes)/rbeneficiario.dat_fim_propost: ' || rbeneficiario.dtexclusao || ';' || rbeneficiario.dat_fim_propost);
        rbeneficiario.dtexclusao := rbeneficiario.dat_fim_propost;

      end if;

      DBMS_OUTPUT.PUT_LINE( 'P30051');

      if rbeneficiario.dtexclusao is not null then

        if rbeneficiario.dtexclusao < vdtinicio then
--DBMS_OUTPUT.PUT_LINE( 'P11.213 vdtinicio/rbeneficiario.dtexclusao: ' || vdtinicio || ';' || rbeneficiario.dtexclusao);
          vdtinicio := rbeneficiario.dtexclusao;
--DBMS_OUTPUT.PUT_LINE( 'P11.6 alterando nome/vdtinicio: ' || rbeneficiario.nopessoa || ' ' || vdtinicio);

        end if;

      end if;

      DBMS_OUTPUT.PUT_LINE( 'P30052');

      /* Se beneficiário estiver excluido para data anterior a hoje e ao último faturamento,
       * alterar último faturamento conforme exclusão
       */

DBMS_OUTPUT.PUT_LINE( 'P999 DTEXCLUSAO: ' || rbeneficiario.dtexclusao || ' ULT.ANO/MES.FAT: '
|| vultimo_ano_faturado || '/' || vultimo_mes_faturado);

      if vultimo_mes_faturado > 0 and vultimo_ano_faturado > 0 then
        if vultimo_mes_faturado < 12 then
           DBMS_OUTPUT.PUT_LINE( 'P300521;' || vultimo_ano_faturado || ';' || vultimo_mes_faturado);

           select to_date(vultimo_ano_faturado || lpad(vultimo_mes_faturado + 1, 2, 0) , 'YYYYMM') - 1
           into vultimo_faturamento from dual;
           DBMS_OUTPUT.PUT_LINE( 'P300521');
        else
           DBMS_OUTPUT.PUT_LINE( 'P300522;' || vultimo_ano_faturado);

           select to_date(vultimo_ano_faturado + 1 || '1' , 'YYYYMM') -1
           into vultimo_faturamento from dual;
           DBMS_OUTPUT.PUT_LINE( 'P300522');
        end if;
      else
        vultimo_faturamento := rbeneficiario.dtinicio;
      end if;

DBMS_OUTPUT.PUT_LINE( 'P1000 vultimo_faturamento: ' || vultimo_faturamento);

      if rbeneficiario.dtexclusao is not null and
         rbeneficiario.dtexclusao < trunc(sysdate) and
         rbeneficiario.dtexclusao < vultimo_faturamento
      then

DBMS_OUTPUT.PUT_LINE( 'P9991 DTEXCLUSAO: ' || rbeneficiario.dtexclusao || ' ULT.FAT: ' || vultimo_ano_faturado || vultimo_mes_faturado);

DBMS_OUTPUT.PUT_LINE( 'P11.214 vultimo_ano_faturado/rbeneficiario.dtexclusao: ' || vultimo_ano_faturado || ';' || rbeneficiario.dtexclusao);
          vultimo_ano_faturado := to_char(rbeneficiario.dtexclusao,
                                          'YYYY');
          vultimo_mes_faturado := to_char(rbeneficiario.dtexclusao, 'MM');

      else
          vultimo_ano_faturado := rbeneficiario.ultimo_ano_faturado;
          vultimo_mes_faturado := rbeneficiario.ultimo_mes_faturado;
      end if;

        if rbeneficiario.dtinicio_usuario_operadora > vdtinicio then
          rbeneficiario.dtinicio_usuario_operadora := vdtinicio;
        end if;

        if (rbeneficiario.cdmotivo_canc = '0' or rbeneficiario.cdmotivo_canc is null) and
           rbeneficiario.dtexclusao is not null then
              rbeneficiario.cdmotivo_canc := PCDMOTIVOCANCEL_BENEF;
        end if;
/* data de admissão pode ser anterior ao início do plano. afeta liberação de carências e planos de demitidos.
          if rbeneficiario.dtadmissao_empresa < vdtinicio then
            rbeneficiario.dtadmissao_empresa := vdtinicio;
          end if;*/

          -- se data admissao esta anterior ao nascimento, troca para nulo, pois eh inválida
          /*if rbeneficiario.dtadmissao_empresa < rbeneficiario.dtnascimento then
             rbeneficiario.dtadmissao_empresa := null;
          end if;*/

        if rbeneficiario.dtexclusao is null then
          rbeneficiario.cdmotivo_canc := 0;
        end if;

        if rbeneficiario.dtemissao < rbeneficiario.dtnascimento then
          rbeneficiario.dtemissao := rbeneficiario.dtnascimento;
        end if;

        if rbeneficiario.dtemissao is not null then

          if rbeneficiario.dtemissao > trunc(sysdate) then

            rbeneficiario.dtemissao := null;

          end if;
        end if;

        -- se inclusao for posterior ao ultimo faturamento, indica que eh beneficiario novo.
        -- nesse caso, zerar ultimo faturamento.
        if rbeneficiario.dtinicio > vultimo_faturamento then
           vultimo_ano_faturado := 0;
           vultimo_mes_faturado := 0;
        end if;

        -- se nao encontrou validade da carteira (inconsistencia no Unicoo) e estiver excluido,
        -- preencher validade com a exclusao
        if rbeneficiario.dat_livre_1 is null
        and rbeneficiario.dtexclusao is not null
        then rbeneficiario.dat_livre_1 := rbeneficiario.dtexclusao;
        end if;
      DBMS_OUTPUT.PUT_LINE( 'P30053');
        /*************************************************************************
         * INICIO DO TRATAMENTO DE REMIDOS
         * Diferença de conceito entre Unicoo e GPS:
         *   * No Unicoo a familia é transferida (ou digitada) no plano de Remidos sem o Responsável falecido.
         *     Outro integrante da família assume como responsável, apenas para usufruto do benefício.
         *     O processo é manual, inclusive o cálculo da data de exclusão programada.
         *   * No GPS a família deve ser transferida para o plano de Remidos junto com o Responsável falecido,
         *     e esse fica com data de exclusão igual à inclusão, mantendo os graus de parentesco originais,
         *     e um integrante assume como responsável com registro na tabela USUSUBST.
         *
         *     Para atender à migração, é necessário identificar o responsável falecido no plano original
         *     da familia (plano antes de ir para o de Remidos), criá-lo como responsável e relacionar
         *     seus dependentes.
         *     Nos casos em que não encontrar esse responsável, deverá ser criado um 'Falecido Ficticio'
         *     para atender à regra. O responsável no Unicoo será o USUSUBST no GPS.
         */
        --begin

        if rbeneficiario.log_segassist = 1
        then -- beneficiario eh do contrato de REMIDOS

      DBMS_OUTPUT.PUT_LINE( 'P300531');

          -- se encontar o contrato original pelo historico, ira preencher esse campo. Caso contrario,
          -- esse sera o criterio para entrar na 2a tentativa de buscar o contrato orignal (abaixo após o loop).
          vcdcarteira_antiga_resp := null;

          -- troca de titular para dependente, pois o titular será o sinistrado no plano anterior
          -- o grau de parentesco também precisará mudar, conforme seu plano antigo.

--DBMS_OUTPUT.PUT_LINE('P1102 INICIO REMIDOS. NRSEQUENCIAL_USUARIO/CARTEIRA/CART.RESP/LG_RESP;' ||
--rbeneficiario.nrsequencial_usuario || ';' || rbeneficiario.carteira_antiga || ';' ||
--rbeneficiario.carteira_antiga_resp || ';' || rbeneficiario.responsavel);

          /**
           * OBJETIVO: encontrar o Responsável do plano original para criar como Falecido no plano de remidos.
           * TPREMIDO:
           *    1 - encontrou o responsável pelo HISTORICO_USUARIO;
           *    2 - encontrou o responsável pelo NOME + CPF + NASCIMENTO do dependente;
           *    3 - não encontrou o responsável. Vai criar fictício.
           *
           *    Regra: se encontrar 1, ignorar os demais; senão, vale o 2. Usar 3 somente quando não encontrou os demais.
           *           a Carteira Origem do Responsavel sera USUARIO.NRSEQUENCIAL_USUARIO do dependente que o originou, pois
           *           caso utilizasse sua carteira original, causaria conflito com o registro do plano antigo.
           */
          vtpremido := '0';
          for rbenef_titular in (
              -- procurando pelo relacionamento com HISTORICO_USUARIO
              select '1' tpremido,
                     nvl(reverse(substr(reverse(pt.nopessoa),
                                        1,
                                        instr(reverse(pt.nopessoa), ' ') - 1)),
                         ' ') nome_internacional,
                     pt.*,
                     a.*,
                     (select u.tpusuario
                             from v_carteira_plano_sinistrado v, usuario u
                            where v.nrseq_usu_atual = rbeneficiario.nrsequencial_usuario
                              and u.nrcontrato      = v.nrcontrato_antigo
                              and u.nrfamilia       = v.nrfamilia_antigo
                              and v.tpusuario_ant   = u.tpusuario
                              and rownum = 1) grau_parentesco_dep
                from (select distinct ut.nrregistro_usuario, ut.nrsequencial_usuario
                        from v_carteira_plano_sinistrado v, usuario ut
                       where v.nrseq_usu_atual =
                             rbeneficiario.nrsequencial_usuario
                         and v.nrcontrato_antigo = ut.nrcontrato
                         and v.nrfamilia_antigo = ut.nrfamilia
                         and v.registro_dep_sinistrado <> ut.nrregistro_usuario
                         and ut.tpusuario = '00') a,
                     pessoa pt -- pessoa do titular no plano anterior
               where a.nrregistro_usuario = pt.nrregistro
                 and rownum = 1
              union
              -- procurando por NOME + CPF + NASCIMENTO
              select '2' tpremido,
                     nvl(reverse(substr(reverse(p.nopessoa),
                                        1,
                                        instr(reverse(p.nopessoa), ' ') - 1)),
                         ' ') nome_internacional,
                     p.*,
                     a.*,
                     (select u.tpusuario
                        from pessoa p, usuario u
                       where p.nrcgc_cpf = rbeneficiario.nrcpf
                         and p.dtnascimento = rbeneficiario.dtnascimento
                         and p.nrregistro = u.nrregistro_usuario
                         and rbeneficiario.nopessoa like p.nopessoa
                         and u.nrcontrato <> rbeneficiario.nrcontrato
                         and u.tpusuario <> '00'
                         and rownum = 1) grau_parentesco_dep
                from (select max(ut.nrregistro_usuario) nrregistro_usuario, max(ut.nrsequencial_usuario) nrsequencial_usuario
                        from usuario ud, usuario ut
                       where ud.nrregistro = ut.nrregistro
                         and ud.nrcontrato = ut.nrcontrato
                         and ud.nrfamilia = ut.nrfamilia
                         and ud.tpusuario <> ut.tpusuario
                         and ut.tpusuario = '00'
                         and ud.nrregistro_usuario =
                             (select min(p.nrregistro)
                                from pessoa p, usuario u
                               where p.nrcgc_cpf = rbeneficiario.nrcpf
                                 and p.dtnascimento = rbeneficiario.dtnascimento
                                 and p.nrregistro = u.nrregistro_usuario
                                 and rbeneficiario.nopessoa like p.nopessoa
                                 and u.tpusuario <> '00')) a,
                     pessoa p
               where a.nrregistro_usuario = p.nrregistro
                 and rownum = 1
              union
              -- criando Responsavel ficticio, caso nao tenha encontrado nas tentativas anteriores
              select '3' tpremido,
                     nvl(reverse(substr(reverse(p.nopessoa),
                                        1,
                                        instr(reverse(p.nopessoa), ' ') - 1)),
                         ' ') nome_internacional,
                     p.*,
                     a.*,

                     null grau_parentesco_dep

                from (select distinct us.nrregistro_usuario, us.nrsequencial_usuario
                        from usuario us
                       where us.nrsequencial_usuario =
                             rbeneficiario.nrsequencial_usuario) a,
                     pessoa p
               where a.nrregistro_usuario = p.nrregistro
                 and rownum = 1
          ) loop

            if vtpremido = '0'
            then
              vtpremido := rbenef_titular.tpremido;

DBMS_OUTPUT.PUT_LINE('P1103 CRIANDO RESPONSAVEL DOS REMIDOS. NRSEQUENCIAL_USUARIO/CARTEIRA/NRREGISTRO_USUARIO_TIT/LG_RESP/TPREMIDO;' ||
rbeneficiario.nrsequencial_usuario || ';' || rbeneficiario.carteira_antiga || ';' ||
rbenef_titular.nrregistro_usuario || ';' || rbeneficiario.responsavel || ';' || rbenef_titular.tpremido);

              -- VTPREMIDO = 3 indica que nao encontrou o registro do responsável. Irá criar
              -- um registro ficticio com base nos dados do dependente do plano de Remidos.
              if vtpremido = '3'
              then
                rbenef_titular.nopessoa       := 'Responsavel Ficticio Remidos';
              end if;

              begin
                select tgp.cdvalores_externo
                  into rbeneficiario.grau_parentesco
                  from temp_grau_paren tgp
                 where tgp.cdvalor_interno = rbenef_titular.grau_parentesco_dep
                   and rownum = 1;
              exception
                when others then
                    rbeneficiario.grau_parentesco := PCDGRAU_DEFAULT_REMIDOS;
              end;

              -- GRAU PARA REMIDOS NAO PODE SER DE TITULAR
              if rbeneficiario.grau_parentesco = 1
              or rbeneficiario.dtnascimento <= rbenef_titular.dtnascimento
              then
                 rbeneficiario.grau_parentesco := PCDGRAU_DEFAULT_REMIDOS;
              end if;

dbms_output.put_line('VAI VERIFICAR SE EXISTE TITULAR SINISTRADO cd_carteira_antiga: ' || rbeneficiario.nrseq_usuario_titular);

              begin
                select 'S'
                  into vaoexiste_titular_sinistrado
                  from import_bnfciar ib
                 where ib.cd_carteira_antiga = rbeneficiario.nrseq_usuario_titular --rbenef_titular.nrregistro_usuario;
                   and ib.log_respons = 1
                   and ib.cdcarteiraorigemresponsavel = ib.cd_carteira_antiga;
              exception
                when no_data_found then

dbms_output.put_line('ENTROU NA LOGICA PARA CRIAR SINISTRADO');

                  select max(nrsequencial_usuario)
                    into vnrsequencial_titular
                    from usuario u
                   where u.nrregistro_usuario = rbenef_titular.nrregistro_usuario; -- nrregistro da pessoa do Unicoo

                  p_insere_controle('BE',
                                    substr(rbenef_titular.nrregistro_usuario || vnrsequencial_titular,1,9),
                                    rbenef_titular.nrregistro_usuario);

                  begin
                    select nvl(max(ib.num_livre_6),0) into vcd_usuario
                           from gp.import_bnfciar ib
                          where ib.cd_modalidade = rbeneficiario.modalidade
                            and ib.nr_proposta   = rbeneficiario.nr_proposta
                            and rownum = 1;
                  exception
                    when no_data_found then
                      vcd_usuario := 0;
                  end;

                  begin
                    select nvl(max(u.cd_usuario),0) into vcd_usuario_gp
                           from gp.usuario u
                          where u.cd_modalidade = rbeneficiario.modalidade
                            and u.nr_proposta   = rbeneficiario.nr_proposta
                            and rownum = 1;
                  exception
                    when no_data_found then
                      vcd_usuario_gp := 0;
                  end;

                  if vcd_usuario_gp > vcd_usuario then
                     vcd_usuario := vcd_usuario_gp;
                  end if;

                  if vcd_usuario = 0 then
                     if rbeneficiario.lg_usa_ben_evetual = 1 then
                        vcd_usuario := 2; --reservar codigo 1 para o beneficiario eventual
                     else
                        vcd_usuario := 1;
                     end if;
                  else vcd_usuario := vcd_usuario + 1;
                  end if;

dbms_output.put_line('INSERINDO RESPONSAVEL REMIDOS (num_seqcial_bnfciar): ' || rbenef_titular.nrsequencial_usuario);

                  insert into import_bnfciar
                    (num_livre_8,
                     nr_proposta,
                     aa_ult_fat_period,
                     cdn_produt_orig,
                     cd_cartao_nacional_saude,
                     cd_carteira_antiga,
                     cd_carteira_trabalho,
                     cd_cbo,
                     cd_controle_oper_ans,
                     cd_cpf,
                     cd_departamento,
                     cd_funcao,
                     cd_grau_parentesco,
                     cd_identific_orig_resp,
                     cd_identific_uni_origem,
                     cd_modalidade,
                     cd_motivo_cancel,
                     cd_padrao_cob,
                     cd_padrao_cob_ant,
                     cd_pis_pasep,
                     cd_plano_operadora,
                     cd_plano_origem,
                     cd_registro_plano,
                     cd_secao,
                     cd_setor,
                     cd_unimed_origem,
                     cd_vendedor,
                     cod_usuar_ult_atualiz,
                     dat_ult_atualiz,
                     hra_ult_atualiz,
                     des_espcif_1,
                     des_espcif_2,
                     des_espcif_3,
                     des_espcif_4,
                     des_nacion,
                     des_natur_docto,
                     des_orgao_emissor_ident,
                     dt_admissao,
                     dt_atualizacao_carencia,
                     dt_emissao_ident,
                     dt_exclusao_plano,
                     dt_falecimento_titular,
                     dt_inclusao_origem,
                     dt_inclusao_plano,
                     dt_inicio_vinculo_unidade,
                     dt_nascimento,
                     dt_primeira_consulta,
                     en_bairro,
                     en_cep,
                     en_cidade,
                     en_rua,
                     en_uf,
                     in_est_civil,
                     in_segmento_assistencial,
                     in_tipo_pessoa,
                     in_via_transferencia,
                     log_bonifi_penalid,
                     log_carenc,
                     log_cobr_fator_moder,
                     log_respons,
                     log_sexo,
                     nom_email,
                     nom_internac,
                     nom_mae,
                     nom_pai,
                     nom_pais,
                     nom_plano_orig,
                     nom_usuar,
                     nom_usuario,
                     nr_cgc_cpf,
                     nr_contrato_antigo,
                     nr_dias,
                     nr_identidade,
                     nr_insc_contratante,
                     nr_telefone1,
                     nr_telefone2,
                     num_mes_ult_faturam,
                     uf_emissor_ident,
                     u##ind_sit_import,
                     ind_sit_import,
                     num_matr_func,
                     cd_funcionario,
                     progress_recid,
                     num_seqcial_bnfciar,
                     num_seqcial_control,
                     cdcarteiraorigemresponsavel,
                     num_seqcial,
                     num_livre_5,
                     dat_livre_1,--     = rbeneficiario.dat_livre_1, --validade da carteira no unicoo
                     num_livre_1,--     = vcdlotacao,
                     num_livre_2,--     = vcdresponsavel_financeiro,
                     num_livre_4, -- NR_FAMILIA
                     num_livre_6  -- CD_USUARIO
                     )

                  values
                    (rbeneficiario.ind_regulamentacao, --num_livre_8
                     rbeneficiario.nr_proposta, --nr_proposta
                     0, --aa_ult_fat_period
                     rbeneficiario.nrproduto_oper_origem, --cdn_produt_orig
                     '0', --nvl(rbeneficiario.cartao_nacional_saude, 0),
                     rbeneficiario.nrseq_usuario_titular, --rbenef_titular.nrregistro_usuario, --rbeneficiario.nrsequencial_usuario--  rbeneficiario.carteira_antiga,
                     ' ', --  nvl(rbeneficiario.carteira_trabalho, ' '),
                     rbeneficiario.nrcbo,
                     0, --  nvl(rbeneficiario.cod_controle_operacional, 0),
                     ' ', --  rbeneficiario.nrcpf,
                     rbeneficiario.departamento,
                     rbeneficiario.funcao,
                     '1', --  rbeneficiario.grau_parentesco,
                     '0', --rbenef_titular.cd_carteira_antiga_titular,
                     '0' /*vcdorigemresp*/,
                     rbeneficiario.modalidade,
                     pmotivo_cancel_obito, -- rbeneficiario.cdmotivo_canc,
                     rbeneficiario.cd_padrao_cobertura, -- vpadraocobertura,--rbeneficiario.padrao_cobertura,
                     ' ', --rbeneficiario.padrao_cobertura_ant,
                     '0', --   rbeneficiario.pis_pasep,
                     rbeneficiario.registro_plano_operadora,
                     rbeneficiario.plano_origem,
                     rbeneficiario.cdregistro_plano, --rbeneficiario.registro_plano_operadora
                     rbeneficiario.secao,
                     rbeneficiario.setor,
                     '0' /*vnrunimedorigem*/,
                     rbeneficiario.cdvendedor,
                     'MIGRACAO',
                     trunc(sysdate),
                     to_char(sysdate, 'HH24:MI:SS'),
                     rbeneficiario.info_especifica1,
                     rbeneficiario.info_especifica2,
                     rbeneficiario.info_especifica3,
                     rbeneficiario.info_especifica4,
                     ' ', -- rbeneficiario.nacionalidade,
                     ' ', -- rbeneficiario.nat_ident,
                     ' ', -- rbeneficiario.noorgao_emissor_id,
                     rbeneficiario.dtadmissao_empresa, --decode(rbeneficiario.dtadmissao_empresa >= rbenef_titular.dtnascimento,rbeneficiario.dtadmissao_empresa,null),
                     rbeneficiario.dtatualizacao_carencia,
                     null,
                     vdtinicio,--rbeneficiario.dtexclusao, 2017/05/13 - exclusao do falecido deve ser igual a sua inclusao
                     vdtinicio, --rbeneficiario.dtfalecimento_titular,
                     null, /*rbeneficiario.dtinicio_usuario_operadora,*/
                     vdtinicio, -- rbeneficiario.dtinicio,
                     vdtinicio, --  rbeneficiario.dtinicio_usuario_operadora, -- rbeneficiario.dtinicio,
                     rbenef_titular.dtnascimento, --    rbeneficiario.dtnascimento,
                     rbeneficiario.dtprimeira_consulta,
                     rbeneficiario.nobairro,
                     rbeneficiario.cep,
                     rbeneficiario.cidade,
                     rbeneficiario.endereco,
                     rbeneficiario.estado,
                     rbeneficiario.estado_civil,
                     rbeneficiario.segmento_assist,
                     rbenef_titular.tppessoa, --   rbeneficiario.tppessoa,
                     'N',
                     rbeneficiario.aobonif_penal_carencia,
                     rbeneficiario.aocarencia,
                     rbeneficiario.aocobrar_fator_particip,
                     '1', --  rbeneficiario.responsavel,
                     decode(rbenef_titular.cdsexo, 'M', 1, 0), --   decode(rbeneficiario.cdsexo, 'M', 1, 0),
                     ' ', --   nvl(rbenef_titular.cdemail, ' '),
                     nvl(rbenef_titular.nome_internacional, ' '),
                     nvl(rbenef_titular.nomae, 'NAO INFORMADO'),
                     substr(nvl(rbenef_titular.nopai, ' '), 0, 40),
                     ' ', --, nvl(rbeneficiario.nopais_emissor_id, 'BRASIL'),
                     rbeneficiario.noplano_origem,
                     substr(rbenef_titular.nopessoa, 0, 40),
                     rbenef_titular.nopessoa,
                     ' ',
                     rbeneficiario.contrato_antigo,
                     rbeneficiario.nrdias_bonif_benef,
                     ' ',
                     rbeneficiario.inscricao_contratante,
                     rbeneficiario.telefone1,
                     rbeneficiario.telefone2,
                     0,   -- num_mes_ult_faturam
                     ' ', -- rbeneficiario.estado_emissor,
                     'RC',
                     'RC',
                     '0',
                     ' ',
                     gp.import_bnfciar_seq.nextval,                                 -- PROGRESS_RECID
                     substr(rbenef_titular.nrregistro_usuario || vnrsequencial_titular,1,9), -- NUM_SEQCIAL_BNFCIAR
                     vnrcontrolemigracao,                                        -- NUM_SEQCIAL_CONTROL
                     rbeneficiario.nrsequencial_usuario, --rbenef_titular.nrsequencial_usuario, -- CDCARTEIRAORIGEMRESPONSAVEL
                     rbenef_titular.nrregistro_usuario,                          -- NUM_SEQCIAL
                     rbeneficiario.nrsequencial_usuario,
                     rbeneficiario.dat_livre_1, --validade da carteira no unicoo
                     vcdlotacao,
                     vcdresponsavel_financeiro,
                     rbeneficiario.nr_familia,
                     vcd_usuario
                     );                        -- DEPENDENTE QUE ORIGINOU O REGISTRO
              end; --exception
dbms_output.put_line('DEPOIS DA LOGICA PARA CRIAR SINISTRADO');

            end if;
          end loop;

      DBMS_OUTPUT.PUT_LINE( 'P3006');

          -- troca de titular para dependente, pois o titular será o sinistrado no plano anterior
          rbeneficiario.responsavel := 0;
          vcdcarteira_antiga_resp := rbeneficiario.nrseq_usuario_titular; --rbenef_titular.nrregistro_usuario;

          begin
            select t.cdn_cliente
              into vcdcliente
              from ti_pessoa t, ti_cliente tc
             where t.nrregistro = rbeneficiario.nrregistro_usuario
               and tc.cod_cliente = t.cdn_cliente
             group by t.cdn_cliente;
          exception
            when no_data_found then
              vcdcliente := null;
          end;

          rbeneficiario.dtfalecimento_titular := vdtinicio;

          select max(dtvalidade)
            into vdtvalidade
            from usuario_identificacao ui
           where ui.nrsequencial_usuario =
                 rbeneficiario.nrsequencial_usuario;

          if vdtvalidade is not null then
             rbeneficiario.dtexclusao := vdtvalidade;
          end if;

        else -- não é beneficiario REMIDO (plano PEA)

          vcdcliente              := null;

            vcdcarteira_antiga_resp := rbeneficiario.carteira_antiga_resp;

        end if; /* fim do tratamento de sinistrados - PEA */

      DBMS_OUTPUT.PUT_LINE( 'P30056');

          if vcdcarteira_antiga_resp is null and
             rbeneficiario.log_segassist = 1 then
                vaogerafalha := 'S';
                p_insere_falha(rbeneficiario.num_seqcial_control,
                               'BE',
                               'Nao foi possivel criar o Responsavel para o Remido - 4',
                               sqlerrm,
                               rbeneficiario.nrsequencial_usuario);
          end if;
          /*
           * FIM DO TRATAMENTO DE REMIDOS
           *************************************************************************/

          if f_validador_cpf(rbeneficiario.nrcpf) = 'F' and
             paocpfinvalidinativo = 'S' and
             rbeneficiario.dtexclusao < trunc(sysdate) then --inativo
            rbeneficiario.nrcpf := ' ';

          elsif f_validador_cpf(rbeneficiario.nrcpf) = 'F' and
                paocpfinvalidinativo = 'N' and
                rbeneficiario.dtexclusao < trunc(sysdate) then

            vaogerafalha := 'S';

            p_insere_falha(fn_retorna_controle(rbeneficiario.nrsequencial_usuario,
                                               'BE'),
                           'BE',
                           'CPF INVÁLIDO',
                           ' ',
                           rbeneficiario.nrsequencial_usuario);

          end if;

      DBMS_OUTPUT.PUT_LINE( 'P30057');

          if vaogerafalha = 'S' then

--DBMS_OUTPUT.PUT_LINE('P111 TROCANDO SITUACAO PARA ER. REGISTRO:;' || rbeneficiario.nrsequencial_usuario);

            update gp.import_bnfciar ib
               set ind_sit_import = 'ER', u##ind_sit_import = 'ER'
             where ib.num_seqcial_bnfciar =
                   rbeneficiario.nrsequencial_usuario;

          else
            begin
              -- BUSCAR MAIOR CD_USUARIO NA TEMPORARIA E NA BASE DO GP, PARA SETAR PROXIMO CODIGO LIVRE.
              -- OBS: SE NUM_LIVRE_6 JA ESTIVER PREENCHIDO, INDICA QUE O BENEFICIARIO ESTA SENDO REPROCESSADO.
              --      NESSE CASO, MANTER O CODIGO, SEM GERAR NOVO.
              if  rbeneficiario.num_livre_6 is not null
              and rbeneficiario.num_livre_6 > 0
              then vcd_usuario := rbeneficiario.num_livre_6;
              else
                begin
                  select nvl(max(ib.num_livre_6),0) into vcd_usuario
                         from gp.import_bnfciar ib
                        where ib.cd_modalidade = rbeneficiario.modalidade
                          and ib.nr_proposta   = rbeneficiario.nr_proposta
                          and rownum = 1;
                exception
                  when no_data_found then
                    vcd_usuario := 0;
                end;

                begin
                  select nvl(max(u.cd_usuario),0) into vcd_usuario_gp
                         from gp.usuario u
                        where u.cd_modalidade = rbeneficiario.modalidade
                          and u.nr_proposta   = rbeneficiario.nr_proposta
                          and rownum = 1;
                exception
                  when no_data_found then
                    vcd_usuario_gp := 0;
                end;

                if vcd_usuario_gp > vcd_usuario then
                   vcd_usuario := vcd_usuario_gp;
                end if;

                if vcd_usuario = 0 then
                   if rbeneficiario.lg_usa_ben_evetual = 1 then
                      vcd_usuario := 2; --reservar codigo 1 para o beneficiario eventual
                   else
                      vcd_usuario := 1;
                   end if;
                else vcd_usuario := vcd_usuario + 1;
                end if;
              end if;

              dbms_output.put_line('ATUALIZANDO CARTEIRA ORIGEM RESPONSAVEL: ' || vcdcarteira_antiga_resp ||
                         ' rbeneficiario.nrsequencial_usuario: ' || rbeneficiario.nrsequencial_usuario);

      DBMS_OUTPUT.PUT_LINE( 'P3008');

              update import_bnfciar xt
                 set
                     cd_modalidade               = rbeneficiario.modalidade,
                     nr_proposta                 = rbeneficiario.nr_proposta,
                     num_livre_6                 = vcd_usuario, -- para gravar em USUARIO.CD_USUARIO na etapa do PROGRESS

                     cod_livre_3                 = vtitular_old, -- carteira do titular quando o dependente foi migrado em outro plano
                     num_livre_10                = vcdcliente,
                     cdcarteiraorigemresponsavel = vcdcarteira_antiga_resp, -- vnrcarteiraantiga,
                     num_livre_8                 = rbeneficiario.ind_regulamentacao,

                     aa_ult_fat_period           = vultimo_ano_faturado,
                     num_mes_ult_faturam         = vultimo_mes_faturado,

                     --cdcarteiraorigemresponsavel = vnrcarteiraantigaresp, -- vnrcarteiraantiga,
                     cdn_produt_orig          = rbeneficiario.nrproduto_oper_origem,
                     cd_cartao_nacional_saude = nvl(rbeneficiario.cartao_nacional_saude,0),
                     cd_carteira_antiga       = rbeneficiario.carteira_antiga,
                     cd_carteira_trabalho     = nvl(rbeneficiario.carteira_trabalho,' '),
                     cd_cbo                   = rbeneficiario.nrcbo,
                     cd_controle_oper_ans     = nvl(rbeneficiario.cod_controle_operacional,0),
                     cd_cpf                   = lpad(trim(rbeneficiario.nrcpf), 11, '0'),
                     cd_departamento          = rbeneficiario.departamento,
                     cd_funcao                = rbeneficiario.funcao,
                     cd_grau_parentesco       = rbeneficiario.grau_parentesco,
                     cd_identific_orig_resp   = 0,
                     cd_identific_uni_origem  = 0 /*vcdorigemresp*/,
                     cd_motivo_cancel         = rbeneficiario.cdmotivo_canc,
                     cd_padrao_cob            = rbeneficiario.cd_padrao_cobertura, -- vpadraocobertura,--rbeneficiario.padrao_cobertura,
                     cd_padrao_cob_ant        = ' ', --rbeneficiario.padrao_cobertura_ant,
                     cd_pis_pasep             = rbeneficiario.pis_pasep,
                     cd_plano_operadora       = rbeneficiario.registro_plano_operadora,
                     cd_plano_origem          = rbeneficiario.plano_origem,
                     cd_registro_plano        = rbeneficiario.cdregistro_plano, --rbeneficiario.registro_plano_operadora
                     cd_secao                 = rbeneficiario.secao,
                     cd_setor                 = rbeneficiario.setor,
                     cd_unimed_origem         = 0 /*vnrunimedorigem*/,
                     --cd_userid_carencia          = rbeneficiario.nrregistro_titular,
                     cd_vendedor               = rbeneficiario.cdvendedor,
                     cod_usuar_ult_atualiz     = 'MIGRACAO',
                     dat_ult_atualiz           = trunc(sysdate),
                     hra_ult_atualiz           = to_char(sysdate,'HH24:MI:SS'),
                     des_espcif_1              = rbeneficiario.info_especifica1,
                     des_espcif_2              = rbeneficiario.info_especifica2,
                     des_espcif_3              = rbeneficiario.info_especifica3,
                     des_espcif_4              = rbeneficiario.info_especifica4,
                     des_nacion                = rbeneficiario.nacionalidade,
                     des_natur_docto           = rbeneficiario.nat_ident,
                     des_orgao_emissor_ident   = rbeneficiario.noorgao_emissor_id,
                     dt_admissao               = rbeneficiario.dtadmissao_empresa,
                     dt_atualizacao_carencia   = rbeneficiario.dtatualizacao_carencia,
                     dt_emissao_ident          = rbeneficiario.dtemissao,
                     dt_exclusao_plano         = rbeneficiario.dtexclusao,
                     dt_falecimento_titular    = rbeneficiario.dtfalecimento_titular,
                     dt_inclusao_origem        = null, /*rbeneficiario.dtinicio_usuario_operadora,*/
                     dt_inclusao_plano         = vdtinicio, -- rbeneficiario.dtinicio,
                     dt_inicio_vinculo_unidade = rbeneficiario.dtinicio_usuario_operadora, -- rbeneficiario.dtinicio,
                     dt_nascimento             = rbeneficiario.dtnascimento,
                     dt_primeira_consulta      = rbeneficiario.dtprimeira_consulta,
                     en_bairro                 = rbeneficiario.nobairro,
                     en_cep                    = rbeneficiario.cep,
                     en_cidade                 = rbeneficiario.cidade,
                     en_rua                    = rbeneficiario.endereco,
                     en_uf                     = rbeneficiario.estado,
                     in_est_civil              = rbeneficiario.estado_civil,
                     in_segmento_assistencial  = rbeneficiario.segmento_assist,
                     in_tipo_pessoa            = rbeneficiario.tppessoa,
                     in_via_transferencia      = 'N',
                     log_bonifi_penalid        = rbeneficiario.aobonif_penal_carencia,
                     log_carenc                = rbeneficiario.aocarencia,
                     log_cobr_fator_moder      = rbeneficiario.aocobrar_fator_particip,
                     log_respons               = rbeneficiario.responsavel,
                     log_sexo                  = decode(rbeneficiario.cdsexo,'M',1,0),
                     nom_email                 = nvl(rbeneficiario.cdemail,' '),
                     nom_internac              = nvl(rbeneficiario.nome_internacional,' '),
                     nom_mae                   = nvl(rbeneficiario.nomae,'NAO INFORMADO'),
                     nom_pai                   = substr(nvl(rbeneficiario.nopai,' '),0,40),
                     nom_pais                  = nvl(rbeneficiario.nopais_emissor_id,'BRASIL'),
                     nom_plano_orig            = rbeneficiario.noplano_origem,
                     nom_usuar                 = substr(rbeneficiario.nopessoa,0,40),
                     nom_usuario               = rbeneficiario.nopessoa,
                     nr_cgc_cpf                = lpad(trim(rbeneficiario.nrcpf), 11, '0'),
                     nr_contrato_antigo        = rbeneficiario.contrato_antigo,
                     nr_dias                   = rbeneficiario.nrdias_bonif_benef,
                     nr_identidade             = rbeneficiario.nrrg,
                     nr_insc_contratante       = rbeneficiario.inscricao_contratante,
                     nr_telefone1              = rbeneficiario.telefone1,
                     nr_telefone2              = rbeneficiario.telefone2,
                     uf_emissor_ident          = rbeneficiario.estado_emissor,
                     ind_sit_import            = decode(rbeneficiario.nr_familia,null,'EV',0,'EV','RC'),--EV: EVENTUAL; RC: PRONTO PARA IMPORTAR NO PROGRESS
                     u##ind_sit_import         = decode(rbeneficiario.nr_familia,null,'EV',0,'EV','RC'),--EV: EVENTUAL; RC: PRONTO PARA IMPORTAR NO PROGRESS
                     num_matr_func             = 0,
                     -- cd_userid_carencia        = rbeneficiario.cd_userid_carencia,
                     dat_livre_1     = rbeneficiario.dat_livre_1, --validade da carteira no unicoo

                     num_livre_1     = vcdlotacao,
                     num_livre_2     = vcdresponsavel_financeiro,

                     dat_livre_2     = vdtinicio_aposdem, -- importação grava dat_livre_2 em USUARIO.DT_DATA_RETIVA - início plano DEMITIDO/APOSENTADO
                     dat_livre_3     = vdtdesligamento_aposdem, -- importação usa dat_livre_2 e dat_livre_3 para criar HISTOR_OCOR_USUAR

                     cod_livre_4 = vaoaposentado_demitido, --A-aposentado; D-demitido; N-normal;
                     dat_livre_4 = vdtinicio_contribuicao, --Inicio contribuicao plano para Demitido/Aposentado;
                     dat_livre_5 = vdtfinal_contrato,      --Final contrato Demitido/Aposentado

                     cd_funcionario  = ' ',
                     num_livre_3     = vnrdia_de_vencimento,
                     log_inscr_fatur = rbeneficiario.lg_cobrar_inscricao,
                     cod_livre_8     = gerar_hash_usuario_unicoo(rbeneficiario.nrsequencial_usuario)
               where num_seqcial_bnfciar =  rbeneficiario.nrsequencial_usuario;

      DBMS_OUTPUT.PUT_LINE( 'P3009');

--DBMS_OUTPUT.PUT_LINE('P113 DEPOIS DO UPDATE. REGISTRO:;' || rbeneficiario.nrsequencial_usuario);

--DBMS_OUTPUT.PUT_LINE('P5.3 CPF ANTES: ' || rbeneficiario.nrsequencial_usuario || '/' || lpad(trim(rbeneficiario.nrcpf), 11, '0') );



--DBMS_OUTPUT.PUT_LINE('P5;ADMISSAO/NASCIMENTO;' || rbeneficiario.dtadmissao_empresa || ';' || rbeneficiario.dtnascimento );

               --and   cod_livre_2 <> 'A';

--DBMS_OUTPUT.PUT_LINE( 'P11.9 alterando nome/vdtinicio: ' || rbeneficiario.nopessoa || ' ' || vdtinicio);

--DBMS_OUTPUT.PUT_LINE( 'DEPOIS DO UPDATE. nrsequencial_usuario/num_livre_1/num_livre_2: ' ||
--rbeneficiario.nrsequencial_usuario || ' ' || vcdlotacao || ' ' || vcdresponsavel_financeiro);

--DBMS_OUTPUT.PUT_LINE( 'P9 p_atualiza_beneficiario_g (UPDATE import_bnfciar)' );

              vnrsequencialorigem := rbeneficiario.nrsequencial_usuario;
              vqtregistro1        := vqtregistro1 + 1;

              if vaogera_dados_benef = 'S' then
--DBMS_OUTPUT.PUT_LINE( 'P9 p_atualiza_beneficiario_g (p_grava_modulo_benef_r2)' );

                p_grava_modulo_benef_r2(rbeneficiario.nrsequencial_usuario);
--DBMS_OUTPUT.PUT_LINE( 'P10 p_atualiza_beneficiario_g (p_grava_modulo_benef_r2)' );

                p_repasse_benef(rbeneficiario.nrsequencial_usuario);
--DBMS_OUTPUT.PUT_LINE( 'P11 p_atualiza_beneficiario_g (p_repasse_benef)' );
              end if;

              --se a situacao ficou 'RC', apagar dados no TOTVS, pois pode ser uma atualizacao
              if rbeneficiario.nr_familia is not null and rbeneficiario.nr_familia <> 0 then
                apaga_beneficiario_totvs(rbeneficiario.nrsequencial_usuario);
              end if;

              p_commit;
            end;

          end if;
--        end;

--      end if;

    end loop; -- fim cursor beneficiário situação GE
    dbms_output.put_line('P4321 - ANTES DO COMMIT EM P_ATUALIZA_BENEFICIARIO_G');
    p_commit;
  end p_atualiza_beneficiario_g;

  procedure p_repasse_proposta(pnrsequencial_proposta number) is

    vaoexiste_repas char;

    cursor c_repasse_proposta(cnrsequencial_proposta number) is
      select distinct num_seqcial_propost,
                      ru.cdareaacao cd_unimed,
                      ip.cd_plano cd_plano,
                      ip.cd_tipo_plano cd_tipo_plano,
                      decode(tprepasse, 'P', 1, 2) cd_forma_pagto,
                      'DD' um_carencia,
                      '30' qt_carencia,
                      ip.cd_tab_preco cd_tab_preco,
                      ip.cd_tab_preco_proc cd_tab_preco_proc,
                      1 cdn_tip_vencto,
                      1 num_dia_vencto,
                      1 in_tipo_valorizacao,
                      0 pc_acrescimo_inscr,
                      0 pc_desconto_inscr,
                      0 pc_desconto,
                      0 pc_acrescimo,
                      0 log_impres_cart,
                      0 log_calc_val,
                      1 log_repas,
                      ip.dat_propost dat_inic_repas,
                      ip.dat_fim_propost dat_fim_repas,
                      ip.aa_ult_fat aa_ult_repasse,
                      ip.num_mes_ult_faturam num_mes_ult_repas,
                      null progress_recid
        from repasse_do_usuario ru,
             usuario            ib,
             import_propost     ip,
             gp.unimed          u
       where ru.nrsequencial_usuario = ib.nrsequencial_usuario
         and ib.nrcontrato = ip.num_livre_3
         and ib.nrregistro = ip.num_livre_2
         and u.cd_unimed = ru.cdareaacao
         and ru.dtcancelamento is null
         and ip.num_seqcial_propost = cnrsequencial_proposta;

  begin

    for rp in c_repasse_proposta(pnrsequencial_proposta) loop

      begin
        select 'S'
          into vaoexiste_repas
          from import_negociac_propost inp
         where inp.num_seqcial_propost = rp.num_seqcial_propost
           and inp.cd_unimed = rp.cd_unimed
           and inp.cd_forma_pagto = rp.cd_forma_pagto;
      exception
        when others then
          begin
            insert into import_negociac_propost
              (num_seqcial,
               num_seqcial_propost,
               cd_unimed,
               cd_plano,
               cd_tipo_plano,
               cd_forma_pagto,
               um_carencia,
               qt_carencia,
               cd_tab_preco,
               cd_tab_preco_proc,
               cdn_tip_vencto,
               num_dia_vencto,
               in_tipo_valorizacao,
               pc_acrescimo_inscr,
               pc_desconto_inscr,
               pc_desconto,
               pc_acrescimo,
               log_impres_cart,
               log_calc_val,
               log_repas,
               dat_inic_repas,
               dat_fim_repas,
               aa_ult_repasse,
               num_mes_ult_repas,
               progress_recid)
            values
              (gp.import_negociac_propost_seq.nextval, --num_seqcial,
               rp.num_seqcial_propost, --num_seqcial_propost,
               rp.cd_unimed, --cd_unimed,
               rp.cd_plano, --cd_plano,
               rp.cd_tipo_plano, --cd_tipo_plano,
               rp.cd_forma_pagto, --cd_forma_pagto,
               rp.um_carencia, --um_carencia,
               rp.qt_carencia, --qt_carencia,
               rp.cd_tab_preco, --cd_tab_preco,
               rp.cd_tab_preco_proc, --cd_tab_preco_proc,
               rp.cdn_tip_vencto, --cdn_tip_vencto,
               rp.num_dia_vencto, --num_dia_vencto,
               rp.in_tipo_valorizacao, --in_tipo_valorizacao,
               rp.pc_acrescimo_inscr, --pc_acrescimo_inscr,
               rp.pc_desconto_inscr, --pc_desconto_inscr,
               rp.pc_desconto, --pc_desconto,
               rp.pc_acrescimo, --pc_acrescimo,
               rp.log_impres_cart, --log_impres_cart,
               rp.log_calc_val, --log_calc_val,
               rp.log_repas, --log_repas,
               rp.dat_inic_repas, --dat_inic_repas,
               rp.dat_fim_repas, --dat_fim_repas,
               rp.aa_ult_repasse, --aa_ult_repasse,
               rp.num_mes_ult_repas, --num_mes_ult_repas,
               gp.import_negociac_propost_seq.currval);
          end;

      end;
    end loop;
  end p_repasse_proposta;

procedure p_faixa_especial_proposta(pnrsequencial_proposta number) is

  vaoexiste_faixa_especial char;
  vcdgrau                  number;
  vnridade_limite          number;
  vaojaexiste              varchar2(1);

  cursor c_faixa_estrutura(cnrsequencial_proposta number) is
    select pl.nr_faixa_etaria,
           pl.cd_grau_parentesco,
           pl.nr_idade_minima,
           pl.nr_idade_maxima,
           pl.qt_fator_multiplicador
      from pl_gr_pa pl, import_propost ip
     where ip.num_seqcial_propost = cnrsequencial_proposta
       and pl.cd_modalidade = ip.cd_modalidade
       and pl.cd_plano = ip.cd_plano
       and pl.cd_tipo_plano = ip.cd_tipo_plano;

begin
  --DBMS_OUTPUT.PUT_LINE('P1091 ENTROU P_FAIXA_ESPECIAL_PROPOSTA. NRSEQ: ' || pnrsequencial_proposta);

  begin
    select 'S'
      into vaoexiste_faixa_especial
      from gp.import_propost ip, limite_de_idade_contr_pes li
     where ip.num_seqcial_propost = pnrsequencial_proposta
       and li.nrregistro = num_livre_2
       and li.nrcontrato = num_livre_3
       and li.cdcontrato = cod_livre_3
       and rownum = 1;
  exception
    when others then
      vaoexiste_faixa_especial := 'N';
  end;

  --DBMS_OUTPUT.PUT_LINE('P1092 VAOEXISTE_FAIXA_ESPECIAL: ' || VAOEXISTE_FAIXA_ESPECIAL);

  if vaoexiste_faixa_especial = 'S' then
    -- varrer as faixas do tipo de plano, e considerar LIMITE_DE_IDATE_CONTR_PES quando existir.
    for rfe in c_faixa_estrutura(pnrsequencial_proposta) loop
      begin
        select tgp.cdvalores_externo, (li.nridade_limite - 1) -- no TOTVS o limite deve ser 1 ano a menos da parametrizacao do UNICOO
          into vcdgrau, vnridade_limite
          from import_propost            ip,
               limite_de_idade_contr_pes li,
               temp_grau_paren           tgp
        --NRREGISTRO NRCONTRATO CDUSUCATEG NRIDADE_LIMITE CDCONTRATO (310 registros)
         where ip.num_seqcial_propost = pnrsequencial_proposta
           and li.nrregistro = ip.num_livre_2
           and li.nrcontrato = ip.num_livre_3
           and li.cdcontrato = ip.cod_livre_3
           and tgp.cdvalor_interno = li.cdusucateg
           and rfe.cd_grau_parentesco = tgp.cdvalores_externo;

      exception
        when others then
          vcdgrau         := null;
          vnridade_limite := null;
      end;

      --DBMS_OUTPUT.PUT_LINE('P1093 VCDGRAU/VNRIDADE_LIMITE: ' || VCDGRAU || ' / ' || VNRIDADE_LIMITE);

      --se esse grau de parentesco nao possui limite especifico, cria normalmente
      if vnridade_limite is null then
        begin
          insert into GP.IMPORT_FAIXA_PROPOST
            (NUM_SEQCIAL,
             NUM_SEQCIAL_PROPOST,
             DAT_ULT_ATUALIZ,
             HRA_ULT_ATUALIZ,
             COD_USUAR_ULT_ATUALIZ,
             CD_GRAU_PARENTESCO,
             NR_FAIXA_ETARIA,
             NUM_IDADE_MIN,
             NUM_IDADE_MAX,
             QTD_FATOR_MULTIPLIC,
             QTD_FATOR_MULTIPLIC_INSCR,
             PROGRESS_RECID)
          values
            (gp.import_faixa_propost_seq.nextval, --num_seqcial,
             pnrsequencial_proposta, --num_seqcial_propost,
             trunc(sysdate), --dat_ult_atualiz
             to_char(sysdate, 'HH24:MI:SS'), --hra_ult_atualiz,
             'MIGRACAO', --cod_usuar_ult_atualiz,
             rfe.cd_grau_parentesco, --cd_grau_parentesco,
             rfe.nr_faixa_etaria, -- nr_faixa_etaria,
             rfe.nr_idade_minima, -- num_idade_min,
             rfe.nr_idade_maxima, -- num_idade_max,
             rfe.qt_fator_multiplicador, -- qtd_fator_multiplic,
             rfe.qt_fator_multiplicador, -- qtd_fator_multiplic_inscr,
             gp.import_faixa_propost_seq.currval -- PROGRESS_RECID
             );
        exception
          when dup_val_on_index then
            null;
        end;
      else
        --criar apenas uma faixa para essa idade, pois o unicoo controla apenas idade maxima, mas nao possui a minima
        begin
          select 'S'
            into vaojaexiste
            from gp.import_faixa_propost ifp
           where ifp.num_seqcial_propost = pnrsequencial_proposta
             and ifp.cd_grau_parentesco = vcdgrau
             and rownum = 1;
        exception
          when others then
            vaojaexiste := 'N';
        end;

        if vaojaexiste = 'N' then
          begin
            insert into GP.IMPORT_FAIXA_PROPOST
              (NUM_SEQCIAL,
               NUM_SEQCIAL_PROPOST,
               DAT_ULT_ATUALIZ,
               HRA_ULT_ATUALIZ,
               COD_USUAR_ULT_ATUALIZ,
               CD_GRAU_PARENTESCO,
               NR_FAIXA_ETARIA,
               NUM_IDADE_MIN,
               NUM_IDADE_MAX,
               QTD_FATOR_MULTIPLIC,
               QTD_FATOR_MULTIPLIC_INSCR,
               PROGRESS_RECID)
            values
              (gp.import_faixa_propost_seq.nextval, --num_seqcial,
               pnrsequencial_proposta, --num_seqcial_propost,
               trunc(sysdate), --dat_ult_atualiz
               to_char(sysdate, 'HH24:MI:SS'), --hra_ult_atualiz,
               'MIGRACAO', --cod_usuar_ult_atualiz,
               vcdgrau, --cd_grau_parentesco,
               rfe.nr_faixa_etaria, -- nr_faixa_etaria,
               0, -- num_idade_min,
               vnridade_limite, -- num_idade_max,
               rfe.qt_fator_multiplicador, -- qtd_fator_multiplic,
               rfe.qt_fator_multiplicador, -- qtd_fator_multiplic_inscr,
               gp.import_faixa_propost_seq.currval -- PROGRESS_RECID
               );
          exception
            when dup_val_on_index then
              null;
          end;
        end if;
      end if;

    --DBMS_OUTPUT.PUT_LINE('P1094 TERMINOU INSERT VCDGRAU/VNRIDADE_LIMITE: ' || VCDGRAU || ' / ' || VNRIDADE_LIMITE);

    end loop;

    update import_propost ip
       set ip.IND_FAIXA_ETARIA_ESPECIAL = 'S'
     where ip.num_seqcial_propost = pnrsequencial_proposta;
  end if;

end p_faixa_especial_proposta;

  procedure p_repasse_benef(pnum_seqcial_bnfciar import_bnfciar.num_seqcial_bnfciar%type) is

    vaoexiste char;

    -- 28/04/2017 - Performance revisada. Alex Boeira
    cursor c_repasse_beneficiar(cnum_seqcial_bnfciar import_bnfciar.num_seqcial_bnfciar%type) is
      select ib.num_seqcial_bnfciar,
             nvl(ru.cdareaacao_cobranca, cdareaacao) cd_unimed_destino_negociac,
             ru.cdareaacao cd_unimed_destino_atend,
             ru.dtrepasse dt_intercambio,
             0 log_inscr_fatur,
             0 log_inscr_repas,
             ib.aa_ult_fat_period num_ano_ult_repas,
             ib.num_mes_ult_faturam num_mes_ult_repas,
             ru.dtcancelamento dat_saida,
             0 cd_identific_uni_destino
        from repasse_do_usuario      ru,
             import_bnfciar          ib,
             import_propost          ip,
             gp.unimed               u,
             import_negociac_propost inp
       where ru.nrsequencial_usuario = ib.num_seqcial_bnfciar
         and ib.nr_contrato_antigo = ip.nr_contrato_antigo --ip.u##nr_contrato_antigo
         and ru.cdareaacao = u.cd_unimed
         and nvl(ru.dtcancelamento, ib.dt_exclusao_plano) is null
         and inp.num_seqcial_propost = ip.num_seqcial_propost
         and inp.cd_unimed = nvl(ru.cdareaacao_cobranca, cdareaacao)
         and ib.num_seqcial_bnfciar = cnum_seqcial_bnfciar;

  begin

    for rdu in c_repasse_beneficiar(pnum_seqcial_bnfciar) loop

      begin
        begin
          select 'S'
            into vaoexiste
            from import_negociac_bnfciar inb
           where inb.num_seqcial_bnfciar = rdu.num_seqcial_bnfciar
             and inb.cd_unidade_destino = rdu.cd_unimed_destino_negociac;
        exception
          when others then
            vaoexiste := 'N';
        end;

        insert into import_negociac_bnfciar
          (num_seqcial,
           num_seqcial_bnfciar,
           cd_unidade_destino,
           dt_intercambio,
           log_inscr_fatur,
           log_inscr_repas,
           num_ano_ult_repas,
           num_mes_ult_repas,
           dat_saida,
           cd_identific_uni_destino,
           progress_recid)
        values
          (gp.import_negociac_bnfciar_seq.nextval, --,num_seqcial,
           rdu.num_seqcial_bnfciar, --,num_seqcial_bnfciar,
           rdu.cd_unimed_destino_negociac, --,cd_unidade_destino,
           rdu.dt_intercambio, --,dt_intercambio,
           rdu.log_inscr_fatur, --,log_inscr_fatur,
           rdu.log_inscr_repas, --,log_inscr_repas,
           rdu.num_ano_ult_repas, --,num_ano_ult_repas,
           rdu.num_mes_ult_repas, --,num_mes_ult_repas,
           rdu.dat_saida, --,dat_saida,
           rdu.cd_identific_uni_destino, --,cd_identific_uni_destino
           gp.import_negociac_bnfciar_seq.currval);

      end;

      begin
        begin
          select 'S'
            into vaoexiste
            from import_atendim_bnfciar inb
           where inb.num_seqcial_bnfciar = rdu.num_seqcial_bnfciar
             and inb.cd_unidade_destino = rdu.cd_unimed_destino_atend;
        exception
          when others then
            vaoexiste := 'N';
        end;

        insert into import_atendim_bnfciar
          (num_seqcial,
           num_seqcial_bnfciar,
           cd_unidade_destino,
           dat_intercam_atendim,
           dat_saida_atendim,
           progress_recid)
        values
          (gp.import_atendim_bnfciar_seq.nextval, --num_seqcial,
           rdu.num_seqcial_bnfciar, --num_seqcial_bnfciar,
           rdu.cd_unimed_destino_atend, --cd_unidade_destino,
           rdu.dt_intercambio, --dat_intercam_atendim,
           rdu.dat_saida, --dat_saida_atendim,);
           gp.import_atendim_bnfciar_seq.currval);

      end;

    end loop;
  end p_repasse_benef;

  procedure p_gera_modulo_proposta_r2(pnrsequencial_proposta number) is

    vcdmodulo        number;
    vnrseqmodpropost number;

    /*
    num_livre_2 = nrregistro
      num_livre_3 = nrcontrato
      num_livre_4 = nrfamilia
      cod_livre_2 = cdlotacao
      num_livre_5 = nrpessoa_paga
      num_livre_6 = nrpessoa_origem
      cod_livre_3 = cdcontrato
      cod_livre_4 = fator moderador
      cod_livre_5 = tpplano*/

/* Versao do cursor alterada para usar:
          1. CATEGORIAS_DO_USUARIO para identificar os AGREGADOS;
          2. PLA_MOD para identificar os OBRIGATORIOS;
          3. FTPADCOB para identificar os OPCIONAIS que pertencem a PADRÕES DE COBERTURA;
*/
    cursor cmodulos_prop(cur_nrseq_prop number) is
      --AGREGADOS
      select distinct a.CD_MODALIDADE,
                      a.CD_PLANO,
                      a.CD_TIPO_PLANO,
                      a.NR_PROPOSTA,
                      a.log_segassist,
                      a.CD_FORMA_PAGTO,
                      a.LG_CARENCIA,
                      a.DT_ATUALIZACAO,
                      a.CD_USERID,
                      a.LG_AUTORIZACAO_GP,
                      a.LGBLOQUEIAATENDIMENTO,
                      a.INRESPONSAVELAUTORIZACAO,
                      a.DT_INICIO,
                      a.LG_BONIFICA_PENALIZA,
                      a.nr_dias,
                      a.TPPLANO,
                      a.NRCONTRATO,
                      a.DAT_PROPOST,
                      a.PARTICIP,
                      a.IN_COBRA_PARTICIPACAO,
                      a.CDCONTRATO,
                      a.REGULACAO,
                      a.VCDMODULO,
                      a.in_identifica_modulo,
                      a.QT_CAREN_ELETIVA,
                      a.LG_OBRIGATORIO,
                      a.DAT_FIM_PROPOST,
                      a.CD_MOTIVO_CANCEL,
                      null cd_padrao_cobertura --f.cd_padrao_cobertura
        from (select distinct ip.cd_modalidade,
                              ip.cd_plano,
                              ip.cd_tipo_plano,
                              ip.num_seqcial_propost nr_proposta,
                              ip.log_segassist,
                              ip.cd_forma_pagto cd_forma_pagto,
                              1 lg_carencia,
                              trunc(sysdate) dt_atualizacao,
                              'MIGRACAO' cd_userid,
                              0 lg_autorizacao_gp,
                              0 lgbloqueiaatendimento,
                              'N' inresponsavelautorizacao,
                              ip.dat_propost dt_inicio,
                              0 lg_bonifica_penaliza,
                              0 nr_dias,
                              ip.cod_livre_5 tpplano,
                              ip.num_livre_3 nrcontrato,
                              ip.dat_propost,
                              decode(ip.cod_livre_4, 'SEMFAT', 0, 1) particip,
                              decode(ip.cod_livre_4, 'SEMFAT', 9, 1) in_cobra_participacao,
                              ip.cod_livre_3 cdcontrato,
                              null regulacao,
                              dm.cdmodulo vcdmodulo, --dm.cdmodulo vcdmodulo,
                              m.in_identifica_modulo,
                              pm.qt_caren_eletiva qt_caren_eletiva,
                              pm.lg_obrigatorio lg_obrigatorio,
                              ip.dat_fim_propost,
                              case
                                when ip.dat_fim_propost is not null then
                                 pcdmotivocancel
                                else
                                 '0'
                              end cd_motivo_cancel,
                              null u##cd_padrao_cobertura -- agregados não tem padrão de cobertura
                  from import_propost           ip,
                       producao.criterios_do_usuario@unicoo_homologa c,
                       depara_modulo            dm,
                       pla_mod                  pm,
                       mod_cob                  m
                 where c.nrregistro = ip.num_livre_2
                   and c.nrcontrato = lpad(ip.num_livre_3,4,'0')
                   and dm.cdcategserv = c.cdcategserv
                   and ip.num_seqcial_propost = cur_nrseq_prop
                   and pm.cd_modalidade       = ip.cd_modalidade
                   and pm.cd_plano            = ip.cd_plano
                   and pm.cd_tipo_plano       = ip.cd_tipo_plano
                   and pm.cd_modulo = dm.cdmodulo --and pm.cd_modulo           = dm.cdmodulo
                   and pm.lg_obrigatorio      = 0 -- agregado na proposta nunca pode ser obrigatório na PLA_MOD
                   and pm.lg_modulo_agregado  = 1 -- indicador de agregado deve estar ligado na PLA_MOD
                   and m.cd_modulo            = pm.cd_modulo
                 ) a
      union
      -- OBRIGATORIOS DA PLA_MOD
      select distinct a.CD_MODALIDADE,
                      a.CD_PLANO,
                      a.CD_TIPO_PLANO,
                      a.NR_PROPOSTA,
                      a.log_segassist,
                      a.CD_FORMA_PAGTO,
                      a.LG_CARENCIA,
                      a.DT_ATUALIZACAO,
                      a.CD_USERID,
                      a.LG_AUTORIZACAO_GP,
                      a.LGBLOQUEIAATENDIMENTO,
                      a.INRESPONSAVELAUTORIZACAO,
                      a.DT_INICIO,
                      a.LG_BONIFICA_PENALIZA,
                      a.nr_dias,
                      a.TPPLANO,
                      a.NRCONTRATO,
                      a.DAT_PROPOST,
                      a.PARTICIP,
                      a.IN_COBRA_PARTICIPACAO,
                      a.CDCONTRATO,
                      a.REGULACAO,
                      a.VCDMODULO,
                      a.in_identifica_modulo,
                      a.QT_CAREN_ELETIVA,
                      a.LG_OBRIGATORIO,
                      a.DAT_FIM_PROPOST,
                      a.CD_MOTIVO_CANCEL,
                      null cd_padrao_cobertura -- obrigatórios da PLA_MOD não estão no padrão de cobertura (FTPADCOB)
        from (select distinct ip.cd_modalidade,
                              ip.cd_plano,
                              ip.cd_tipo_plano,
                              ip.num_seqcial_propost nr_proposta,
                              ip.log_segassist,
                              ip.cd_forma_pagto cd_forma_pagto,
                              1 lg_carencia,
                              trunc(sysdate) dt_atualizacao,
                              'MIGRACAO' cd_userid,
                              0 lg_autorizacao_gp,
                              0 lgbloqueiaatendimento,
                              'N' inresponsavelautorizacao,
                              ip.dat_propost dt_inicio,
                              0 lg_bonifica_penaliza,
                              0 nr_dias,
                              ip.cod_livre_5 tpplano,
                              ip.num_livre_3 nrcontrato,
                              ip.dat_propost,
                              decode(ip.cod_livre_4, 'SEMFAT', 0, 1) particip,
                              decode(ip.cod_livre_4, 'SEMFAT', 9, 1) in_cobra_participacao,
                              ip.cod_livre_3 cdcontrato,
                              null regulacao,
                              pm.cd_modulo vcdmodulo,
                              m.in_identifica_modulo,
                              pm.qt_caren_eletiva qt_caren_eletiva,
                              pm.lg_obrigatorio lg_obrigatorio,
                              ip.dat_fim_propost,
                              case
                                when ip.dat_fim_propost is not null then
                                 pcdmotivocancel
                                else
                                 '0'
                              end cd_motivo_cancel,
                              null cd_padrao_cobertura
                  from import_propost           ip,
                       pla_mod                  pm,
                       mod_cob                  m
                 where ip.num_seqcial_propost = cur_nrseq_prop
                   and pm.cd_modalidade       = ip.cd_modalidade
                   and pm.cd_plano            = ip.cd_plano
                   and pm.cd_tipo_plano       = ip.cd_tipo_plano
                   and pm.lg_obrigatorio      = 1 -- deve ser obrigatório na PLA_MOD
                   and m.cd_modulo            = pm.cd_modulo

                 ) a
      union
      --PADRÕES DE COBERTURA (FTPADCOB)
      select distinct a.CD_MODALIDADE,
                      a.CD_PLANO,
                      a.CD_TIPO_PLANO,
                      a.NR_PROPOSTA,
                      a.log_segassist,
                      a.CD_FORMA_PAGTO,
                      a.LG_CARENCIA,
                      a.DT_ATUALIZACAO,
                      a.CD_USERID,
                      a.LG_AUTORIZACAO_GP,
                      a.LGBLOQUEIAATENDIMENTO,
                      a.INRESPONSAVELAUTORIZACAO,
                      a.DT_INICIO,
                      a.LG_BONIFICA_PENALIZA,
                      a.nr_dias,
                      a.TPPLANO,
                      a.NRCONTRATO,
                      a.DAT_PROPOST,
                      a.PARTICIP,
                      a.IN_COBRA_PARTICIPACAO,
                      a.CDCONTRATO,
                      a.REGULACAO,
                      a.VCDMODULO,
                      a.in_identifica_modulo,
                      a.QT_CAREN_ELETIVA,
                      a.LG_OBRIGATORIO,
                      a.DAT_FIM_PROPOST,
                      a.CD_MOTIVO_CANCEL,
                      a.cd_padrao_cobertura cd_padrao_cobertura
        from (select distinct ip.cd_modalidade,
                              ip.cd_plano,
                              ip.cd_tipo_plano,
                              ip.num_seqcial_propost nr_proposta,
                              ip.log_segassist,
                              ip.cd_forma_pagto cd_forma_pagto,
                              1 lg_carencia,
                              trunc(sysdate) dt_atualizacao,
                              'MIGRACAO' cd_userid,
                              0 lg_autorizacao_gp,
                              0 lgbloqueiaatendimento,
                              'N' inresponsavelautorizacao,
                              ip.dat_propost dt_inicio,
                              0 lg_bonifica_penaliza,
                              0 nr_dias,
                              ip.cod_livre_5 tpplano,
                              ip.num_livre_3 nrcontrato,
                              ip.dat_propost,
                              decode(ip.cod_livre_4, 'SEMFAT', 0, 1) particip,
                              decode(ip.cod_livre_4, 'SEMFAT', 9, 1) in_cobra_participacao,
                              ip.cod_livre_3 cdcontrato,
                              null regulacao,
                              pm.cd_modulo vcdmodulo,
                              m.in_identifica_modulo,
                              pm.qt_caren_eletiva qt_caren_eletiva,
                              pm.lg_obrigatorio lg_obrigatorio,
                              ip.dat_fim_propost,
                              case
                                when ip.dat_fim_propost is not null then
                                 pcdmotivocancel
                                else
                                 '0'
                              end cd_motivo_cancel,
                              f.u##cd_padrao_cobertura cd_padrao_cobertura
                  from import_propost           ip,
                       contrato_plano           cp,
                       pla_mod                  pm,
                       mod_cob                  m,
                       ftpadcob                 f,
                       temp_depara_detalhado    tdd,
                       temp_depara_agrupado     tda
                 where cp.nrregistro            = ip.num_livre_2
                   and cp.nrcontrato            = ip.num_livre_3
                   and cp.cdcontrato            = tdd.cdcontrato
                   and tda.cdcontrato           = tdd.cdcontrato_agr
                   and ip.num_seqcial_propost   = cur_nrseq_prop
                   and pm.cd_modalidade         = ip.cd_modalidade
                   and pm.cd_plano              = ip.cd_plano
                   and pm.cd_tipo_plano         = ip.cd_tipo_plano
                   and f.cd_modalidade          = pm.cd_modalidade
                   and f.cd_plano               = pm.cd_plano
                   and f.cd_tipo_plano          = pm.cd_tipo_plano
                   and f.u##cd_padrao_cobertura = tda.cd_padrao_cobertura
                   and pm.cd_modulo             = f.cd_modulo
                   and m.cd_modulo            = pm.cd_modulo
                 ) a;

  begin

    for x in cmodulos_prop(pnrsequencial_proposta) loop

      if x.log_segassist = 1
      and x.in_identifica_modulo = 'A' then
        -- NAO CRIAR MODULO DE SEGURO ASSISTENCIAL PARA CONTRATOS REMIDOS
        null;
      else

        if pAOCONSID_PRIMEIRO_DIA_CARENC = 'N' then
          x.nr_dias := 1;
        end if;

        --     vnrseqmodpropost := import_modul_propost_seq.nextval;

        select gp.import_modul_propost_seq.nextval
          into vnrseqmodpropost
          from dual;

        begin
          insert into import_modul_propost
            (num_seqcial,
             num_seqcial_propost,
             dat_ult_atualiz,
             hra_ult_atualiz,
             cod_usuar_ult_atualiz,
             cd_modulo,
             cd_forma_pagto,
             log_carenc,
             ind_respons_autoriz,
             log_cobert_obrig,
             log_cobr_particip,
             dat_inicial,
             dat_cancel,
             log_bonif_penalid,
             nr_dias,
             qt_caren_eletiva,
             qt_caren_urgencia,
             cd_motivo_cancel,
             in_ctrl_carencia_proced,
             in_ctrl_carencia_insumo,
             in_cobra_participacao,
             progress_recid)
          values
            (vnrseqmodpropost, --num_seqcial,
             x.nr_proposta, --num_seqcial_propost,
             trunc(sysdate), --dat_ult_atualiz
             to_char(sysdate, 'HH24:MI:SS'), --hra_ult_atualiz
             'MIGRACAO', --cod_usuar_ult_atualiz
             x.vcdmodulo, --cd_modulo,
             x.cd_forma_pagto, --cd_forma_pagto,
             1, --log_carenc,
             'N', --ind_respons_autoriz,
             x.lg_obrigatorio, --log_cobert_obrig,
             x.particip, --log_cobr_particip,
             x.dat_propost, --dat_inicial,
             x.dat_fim_propost, --dat_cancel,
             x.lg_bonifica_penaliza, --log_bonif_penalid,
             x.nr_dias, --nr_dias,
             x.qt_caren_eletiva, --qt_caren_eletiva,
             0, --qt_caren_urgencia,
             x.cd_motivo_cancel, --cd_motivo_cancel,
             1, --in_ctrl_carencia_proced,
             0, --in_ctrl_carencia_insumo,
             x.in_cobra_participacao,
             vnrseqmodpropost --progress_recid
             );

        exception
          when dup_val_on_index then
            null;

        end;

        p_commit;

        --inicio geracao padrao de cobertura
  /*    Alterado para colocar todos os módulos no Padrão de Cobertura, e não mais apenas os opcionais.
        Isso facilita a identificação do usuário na operação.

        if ((x.cd_padrao_cobertura is not null) and
           (x.lg_obrigatorio = 0 or x.vcdmodulo = pcd_modulo_menslidade)) then*/

        if (x.cd_padrao_cobertura is not null) then

          begin
            insert into importpadrcobertpropost
              (num_seqcial,
               num_seqcial_propost,
               cd_padrao_cobertura,
               cd_modulo,
               pc_acrescimo_inscr,
               pc_desconto_inscr,
               pc_acresc_taxa,
               pc_desconto_taxa,
               num_dias_bonifi,
               cd_grau_parentesco,
               nr_faixa_etaria_ini,
               nr_faixa_etaria_fim,
               nr_faixa_etaria,
               qt_fator_mensalidade,
               qt_fator_inscricao,
               progress_recid)
            values
              (GP.importpadrcobertpropost_seq.nextval, --num_seqcial,
               x.nr_proposta, --num_seqcial_propost,
               x.cd_padrao_cobertura, --cd_padrao_cobertura,
               x.vcdmodulo, --cd_modulo,
               0, --pc_acrescimo_inscr,
               0, --pc_desconto_inscr,
               0, --pc_acresc_taxa,
               0, --pc_desconto_taxa,
               0, --num_dias_bonifi,
               0, --cd_grau_parentesco,
               0, --nr_faixa_etaria_ini,
               0, --nr_faixa_etaria_fim,
               0, --nr_faixa_etaria,
               0, --qt_fator_mensalidade,
               0, --qt_fator_inscricao,
               gp.importpadrcobertpropost_seq.nextval --progress_recid

               );

          exception
            when dup_val_on_index then
              null;
          end;

          p_commit;

        end if;
      end if;
    end loop;

  end p_gera_modulo_proposta_r2;

  procedure p_grava_modulo_benef_r2(pnrsequencial_beneficiario usuario.nrsequencial_usuario%type) is

    vcdmodulo           number;
    aa_ult_fat          number;
    num_mes_ult_faturam number;

    /* 04/05/2017 - essa versão consiste se o modulo existe em PLA_MOD e FTPADCOB. a anterior causava falha
                    na importacao do progress*/
    cursor c_modulos_benef(pnrsequencial_beneficiario_cur usuario.nrsequencial_usuario%type) is
      -- checar se o modulo existe na cobertura e é obrigatório ou agregado
      select distinct ib.num_seqcial_bnfciar nrsequencial_usuario,
                      dm.cdmodulo vcdmodulo,
                      --ib.dt_inclusao_plano dt_inicio,
                      --c.dtinclusao dt_inicio,  --Evandro Levi (21/11/2018): Carregar a data de inclusão do módulo com a data de contratação do produto no Unicoo.
                      --Alex Boeira (08/12/2018): considerar a data mais alta entre c.dtinclusao e ib.dt_inclusao_plano, pois CRITERIOS_DO_USUARIO no UNICOO permite data da categoria anterior ao inicio do usuario no plano
                      case
                        when ib.dt_inclusao_plano > c.dtinclusao then
                          ib.dt_inclusao_plano
                        else
                          c.dtinclusao
                      end dt_inicio,
                      case
                        when c.dtexclusao is not null
                         and ib.dt_exclusao_plano is not null
                         and c.dtexclusao < ib.dt_exclusao_plano then
                             c.dtexclusao
                        when c.dtexclusao is not null
                         and ib.dt_exclusao_plano is null then
                             c.dtexclusao
                        else
                          ib.dt_exclusao_plano
                      end dt_exclusao_plano,
                      0 lg_bonifica_penaliza,
                      0 nr_dias,
                      ib.aa_ult_fat_period aa_ult_fat,
                      ib.num_mes_ult_faturam num_mes_ult_faturam,
                      case
                        when ib.dt_exclusao_plano is not null then
                         pcdmotivocancel
                        else
                         '0'
                      end cd_motivo_cancel,
                      c.dtfinal_carencia, --c.dtfinal_carencia,
                      c.dtinclusao dtinicio_carencia, --c.dtinclusao dtinicio_carencia,
                      ib.num_seqcial_control
        from producao.criterios_do_usuario@unicoo_homologa c,
             depara_modulo                                 dm,
             import_bnfciar                                ib,
             import_propost                                ip,
             pla_mod                                       pm
       where c.nrsequencial_usuario = ib.num_seqcial_bnfciar
         and nvl(ib.cod_livre_2, ' ') <> 'A'
         and ib.num_seqcial_bnfciar = pnrsequencial_beneficiario_cur
         and ip.nr_contrato_antigo /*ip.u##nr_contrato_antigo*/ = ib.nr_contrato_antigo
         and pm.cd_modalidade = ip.cd_modalidade
         and pm.cd_plano = ip.cd_plano
         and pm.cd_tipo_plano = ip.cd_tipo_plano
         and pm.cd_modulo = dm.cdmodulo
         and dm.cdcategserv = c.cdcategserv
         and (ib.dt_exclusao_plano is null or c.dtinclusao <= ib.dt_exclusao_plano) --o UNICOO permite que CRITERIOS_DO_USUARIO tenha inclusao superior a exclusao do beneficiario. para o TOTVS nao faz sentido
         and(   pm.lg_obrigatorio = '1'
             or pm.lg_modulo_agregado = '1')

union -- checar se o módulo existe no padrão de cobertura
      select distinct ib.num_seqcial_bnfciar nrsequencial_usuario,
                      dm.cdmodulo vcdmodulo,
                      case
                        when ib.dt_inclusao_plano > c.dtinclusao then
                          ib.dt_inclusao_plano
                        else
                          c.dtinclusao
                      end dt_inicio,
                      case
                        when c.dtexclusao is not null
                         and ib.dt_exclusao_plano is not null
                         and c.dtexclusao < ib.dt_exclusao_plano then
                             c.dtexclusao
                        when c.dtexclusao is not null
                         and ib.dt_exclusao_plano is null then
                             c.dtexclusao
                        else
                          ib.dt_exclusao_plano
                      end dt_exclusao_plano,
                      0 lg_bonifica_penaliza,
                      0 nr_dias,
                      ib.aa_ult_fat_period aa_ult_fat,
                      ib.num_mes_ult_faturam num_mes_ult_faturam,
                      case
                        when ib.dt_exclusao_plano is not null then
                         pcdmotivocancel
                        else
                         '0'
                      end cd_motivo_cancel,
                      c.dtfinal_carencia, --c.dtfinal_carencia,
                      c.dtinclusao dtinicio_carencia, --c.dtinclusao dtinicio_carencia,
                      ib.num_seqcial_control
        from producao.criterios_do_usuario@unicoo_homologa c,
             depara_modulo                                 dm,
             import_bnfciar                                ib,
             import_propost                                ip,
             ftpadcob                                      f
       where c.nrsequencial_usuario = ib.num_seqcial_bnfciar
         and nvl(ib.cod_livre_2, ' ') <> 'A'
         and dm.cdcategserv = c.cdcategserv
         and ib.num_seqcial_bnfciar = pnrsequencial_beneficiario_cur
         and ip.nr_contrato_antigo /*ip.u##nr_contrato_antigo*/ = ib.nr_contrato_antigo
         and f.cd_modalidade          = ip.cd_modalidade
         and f.cd_plano               = ip.cd_plano
         and f.cd_tipo_plano          = ip.cd_tipo_plano
         and f.u##cd_padrao_cobertura = ib.cd_padrao_cob
         and f.cd_modulo              = dm.cdmodulo
         ;

  begin
    for x in c_modulos_benef(pnrsequencial_beneficiario) loop

      begin
        insert into import_modul_bnfciar
          (num_seqcial,
           num_seqcial_bnfciar,
           cdn_modul,
           dat_inic,
           dat_fim,
           log_carenc,
           log_bonif_penalid,
           nr_dias,
           aa_ult_fat_period,
           num_mes_ult_faturam,
           cdn_motiv_cancel,
           progress_recid,
           dat_livre_1, --Data final de carencia irá no campo livre para que o progress faça
           num_livre_1)
        --o calculo necessario de bonifica/penaliza
        values
          (gp.import_modul_bnfciar_seq.nextval,
           x.nrsequencial_usuario, --num_seqcial_bnfciar,
           x.vcdmodulo, --cdn_modul,
           --x.dt_inicio, --dat_inic,
           x.dt_inicio, --dat_inic
           x.dt_exclusao_plano, -- dat_fim,
           1, --log_carenc,
           x.lg_bonifica_penaliza, --log_bonif_penalid,
           x.nr_dias, --nr_dias,
           x.aa_ult_fat, --aa_ult_fat_period ,
           x.num_mes_ult_faturam, --num_mes_ult_faturam ,
           x.cd_motivo_cancel, --cdn_motiv_cancel ,
           gp.import_modul_bnfciar_seq.currval, /*,progress_recid*/
           x.dtfinal_carencia,
           x.num_seqcial_control);

        p_commit;

      exception
        when others then
          null;
      end;
      --  end if;
    --   end loop;

    end loop;
    --commit;
  end p_grava_modulo_benef_r2;

  procedure p_atualiza_status_proposta(pqtsessoes_proposta number) is

    qtde number;
    w    number := 0;

  begin

    loop

      select round(count(*) / pqtsessoes_proposta) + 2
        into qtde
        from import_propost
       where u##ind_sit_import = 'RC';

      w := 0;

      while w <= pqtsessoes_proposta loop

        update import_propost p
           set p.ind_sit_import = w, u##ind_sit_import = w
         where p.u##ind_sit_import = 'RC'
           and rownum <= qtde;

        w := w + 1;

        commit;

      end loop;

    end loop;

  end p_atualiza_status_proposta;

  procedure p_atualiza_status_proposta_JK(pqtsessoes_proposta number) is

    qtde number;
    w    number := 0;

  begin

      select round(count(*) / pqtsessoes_proposta) + 2
        into qtde
        from import_propost
       where u##ind_sit_import = 'RC';

      w := 0;

      while w < pqtsessoes_proposta loop

        update import_propost p
           set p.ind_sit_import = w, u##ind_sit_import = w
         where p.u##ind_sit_import = 'RC'
           and rownum <= qtde;

        w := w + 1;

        commit;

      end loop;

  end p_atualiza_status_proposta_JK;

/*  \* Setar propostas para situacao JK - fila consumida pelo Jenkins (sincronizacao continua) *\
  procedure p_atualiza_status_proposta_JK is
  begin
    update import_propost p
       set p.ind_sit_import = 'JK', u##ind_sit_import = 'JK'
       where p.u##ind_sit_import = 'RC';
    commit;
  end p_atualiza_status_proposta_JK;
*/
  /* Setar faturas para situacao JK - fila consumida pelo Jenkins (sincronizacao continua) */
/*  procedure p_atualiza_status_fatura_JK is
  begin
    update gp.migrac_fatur mf
       set mf.cod_livre_1 = 'JK'
       where mf.cod_livre_1 = 'RC';
    commit;
  end p_atualiza_status_fatura_JK;
*/

  procedure p_atualiza_status_fatura_JK(pqtsessoes_fatura number) is

    qtde number;
    w    number := 0;

  begin
      select round(count(*) / pqtsessoes_fatura) + 2
        into qtde
        from gp.migrac_fatur mf
       where mf.cod_livre_1 = 'RC';

      w := 0;

      while w < pqtsessoes_fatura loop

        update gp.migrac_fatur mf
           set mf.cod_livre_1 = w
         where mf.cod_livre_1 = 'RC'
           and rownum <= qtde;

        w := w + 1;

        commit;

      end loop;

  end p_atualiza_status_fatura_JK;

  procedure p_atualiza_status_benef(pqtsessoes_beneficiario number) is
    w                  number;
    vaoproposta        char;
    vaotitular_migrado char;
    --vsai               number;
  begin

    w := 0;
    loop

      for a in (select ib.progress_recid,
                       ib.cd_carteira_antiga,
                       ib.cdcarteiraorigemresponsavel,
                       ib.nr_contrato_antigo
                  from import_bnfciar ib
                 where ib.u##ind_sit_import = 'RC'
                   and ib.num_livre_6 <> 0 and ib.num_livre_6 is not null --SOMENTE IMPORTAR APOS SETAR CODIGO DO BENEFICIARIO
                 ) loop
        vaotitular_migrado := 'N';
        vaoproposta        := 'N';

        begin
          select /*+ INDEX_ASC(ip SRG09573##IMPRTPRP_IX6) */ 'S'
            into vaoproposta
            from import_propost ip
           where ip.nr_contrato_antigo /*ip.u##nr_contrato_antigo*/ = a.nr_contrato_antigo
             and ip.u##ind_sit_import     = 'IT';
        exception
          when no_data_found then
            vaoproposta := 'N';

        end;

        if vaoproposta = 'S' then

          if a.cd_carteira_antiga = a.cdcarteiraorigemresponsavel then
            vaotitular_migrado := 'S';

          else

            begin -- sem forçar esse indice fazia table full scan
              select /*+ INDEX_ASC(i SRG09566##IMPRTBNF_IX3) */ 'S'
                into vaotitular_migrado
                from import_bnfciar i
               where i.cd_carteira_antiga = a.cdcarteiraorigemresponsavel
                 and i.u##ind_sit_import = 'IT';
            exception
              when no_data_found then
                vaotitular_migrado := 'N';

            end;

          end if;

          if vaotitular_migrado = 'S' then

            update import_bnfciar aa
               set ind_sit_import = w, u##ind_sit_import = w
             where u##ind_sit_import = 'RC'
               and aa.progress_recid = a.progress_recid;
            commit;

            w := w + 1;

            if w > pqtsessoes_beneficiario then
              w := 0;
            end if;

          end if;

        end if;

      end loop;

    end loop;
  end p_atualiza_status_benef;

  procedure p_atualiza_status_benef_jk(pqtsessoes_beneficiario number) is
    w                  number;
    vaoproposta        char;
    vaotitular_migrado char;
    --vsai               number;
  begin

    w := 0;

      for a in (select ib.progress_recid,
                       ib.cd_carteira_antiga,
                       ib.cdcarteiraorigemresponsavel,
                       ib.nr_contrato_antigo
                  from import_bnfciar ib
                 where ib.u##ind_sit_import = 'RC'
                   and ib.num_livre_6 <> 0 and ib.num_livre_6 is not null --SOMENTE IMPORTAR APOS SETAR CODIGO DO BENEFICIARIO
                 ) loop
        vaotitular_migrado := 'N';
        vaoproposta        := 'N';

        begin
          select /*+ INDEX_ASC(ip SRG09573##IMPRTPRP_IX6) */ 'S'
            into vaoproposta
            from import_propost ip
           where ip.nr_contrato_antigo /*ip.u##nr_contrato_antigo*/ = a.nr_contrato_antigo
             and ip.u##ind_sit_import     = 'IT';
        exception
          when no_data_found then
            vaoproposta := 'N';

        end;

        if vaoproposta = 'S' then

          if a.cd_carteira_antiga = a.cdcarteiraorigemresponsavel then
            vaotitular_migrado := 'S';

          else

            begin -- sem forçar esse indice fazia table full scan
              select /*+ INDEX_ASC(i SRG09566##IMPRTBNF_IX3) */ 'S'
                into vaotitular_migrado
                from import_bnfciar i
               where i.cd_carteira_antiga = a.cdcarteiraorigemresponsavel
                 and i.u##ind_sit_import = 'IT';
            exception
              when no_data_found then
                vaotitular_migrado := 'N';

            end;

          end if;

          if vaotitular_migrado = 'S' then

            update import_bnfciar aa
               set ind_sit_import = w, u##ind_sit_import = w
             where u##ind_sit_import = 'RC'
               and aa.progress_recid = a.progress_recid;
            commit;

            w := w + 1;

            if w > pqtsessoes_beneficiario then
              w := 0;
            end if;

          end if;

        end if;

      end loop;

  end p_atualiza_status_benef_jk;


/*Atribui beneficiarios na fila 'JK', monitorada pelas rotinas do Jenkins*/
/*procedure p_atualiza_status_benef_JK is
  vaoproposta        char;
  vaotitular_migrado char;
begin

  for a in (select ib.progress_recid,
                   ib.cd_carteira_antiga,
                   ib.cdcarteiraorigemresponsavel,
                   ib.nr_contrato_antigo
              from import_bnfciar ib
             where ib.u##ind_sit_import = 'RC'
               and ib.num_livre_6 <> 0
               and ib.num_livre_6 is not null --SOMENTE IMPORTAR APOS SETAR CODIGO DO BENEFICIARIO
            ) loop
    vaotitular_migrado := 'N';
    vaoproposta        := 'N';

    begin
      select \*+ INDEX_ASC(ip SRG09573##IMPRTPRP_IX6) *\
       'S'
        into vaoproposta
        from import_propost ip
       where ip.nr_contrato_antigo \*ip.u##nr_contrato_antigo*\
             = a.nr_contrato_antigo
         and ip.u##ind_sit_import = 'IT';
    exception
      when no_data_found then
        vaoproposta := 'N';

    end;

    if vaoproposta = 'S' then

      if a.cd_carteira_antiga = a.cdcarteiraorigemresponsavel then
        vaotitular_migrado := 'S';

      else

        begin
          -- sem forçar esse indice fazia table full scan
          select \*+ INDEX_ASC(i SRG09566##IMPRTBNF_IX3) *\
           'S'
            into vaotitular_migrado
            from import_bnfciar i
           where i.cd_carteira_antiga = a.cdcarteiraorigemresponsavel
             and i.u##ind_sit_import = 'IT';
        exception
          when no_data_found then
            vaotitular_migrado := 'N';

        end;

      end if;

      if vaotitular_migrado = 'S' then

        update import_bnfciar aa
           set ind_sit_import = 'JK', u##ind_sit_import = 'JK'
         where u##ind_sit_import = 'RC'
           and aa.progress_recid = a.progress_recid;
        commit;
      end if;

    end if;

  end loop;

end p_atualiza_status_benef_JK;
*/
  procedure p_gera_prmoam(pnumseqcial_propost import_propost.num_seqcial_propost%type) is

    --exceção de cobertura

    cursor c_proposta_servico_excluidos is
      select distinct *
        from (select p.num_seqcial_propost,
                     d.cdmodulo cd_modulo,
                     s.cdservico,
                     p.dat_propost,
                     p.dat_fim_propost
                from servico_da_categoria_contr_pes s,
                     import_propost                 p,
                     depara_modulo                  d
               where s.aoexclusao = 'S'
                 and p.num_seqcial_propost = pnumseqcial_propost
                 and p.num_livre_2 = s.nrregistro
                 and p.num_livre_3 = s.nrcontrato
                 and s.cdcategserv = d.cdcategserv
              union
              select p.num_seqcial_propost,
                     d.cdmodulo cd_modulo,
                     asd.cdservico,
                     p.dat_propost,
                     p.dat_fim_propost
                from servico_da_categoria_contr_pes s,
                     import_propost                 p,
                     depara_modulo                  d,
                     agrupamento_servico_detalhe    asd
               where s.aoexclusao = 'S'
                 and p.num_seqcial_propost = pnumseqcial_propost
                 and p.num_livre_2 = s.nrregistro
                 and p.num_livre_3 = s.nrcontrato
                 and s.cdcategserv = d.cdcategserv
                 and s.cdagrupamento = asd.cdagrupamento);

  begin

    for cpex in c_proposta_servico_excluidos loop

      begin
        insert into import_proced_propost
          (num_seqcial,
           num_seqcial_propost,
           cd_modulo,
           cd_amb,
           log_acresc_cobert,
           cd_tab_preco,
           nr_dias_validade,
           dt_inicial,
           dt_cancela,
           qt_procedimento,
           progress_recid)
        values
          (gp.import_propost_seq.nextval, --num_seqcial,
           cpex.num_seqcial_propost, --num_seqcial_propost,
           cpex.cd_modulo, --cd_modulo,
           cpex.cdservico, --cd_amb,
           0, --log_acresc_cobert, --sempre enviado 0 - exclusao
           pcdtabpreco, --cd_tab_preco,
           0, --nr_dias_validade,
           cpex.dat_propost, --dt_inicial,
           cpex.dat_fim_propost, --dt_cancela,
           0, --qt_procedimento,
           gp.import_propost_seq.nextval --progress_recid
           );
      exception
        when dup_val_on_index then
          null;
      end;

      update import_propost ip
         set ip.log_cobert_especial = 1
       where ip.num_seqcial_propost = cpex.num_seqcial_propost;

      p_commit;

    end loop;
  end p_gera_prmoam;

  -- VERSAO ANTIGA. SUBSTITUIDA POR P_MIGRA_REGRA_PROPOSTA
/*  procedure gera_regra_menslid(anrperiodocorte number,
                               anrcontrato     varchar2) is
    vcont_erro          number := 0;
    contador            number := 0;
    vnrcontrato         varchar2(4);
    vaoregra_migrada    char;
    vaocriterio_migrado char;
    vregra              number;
    vdtinicio_contrato  date;
    vnocontratante      varchar2(999);
    vtxregra            varchar2(1000);
    vtxobs              varchar2(1000);
    vdtprocesso         date;
    --vnrcontrato_i       number;
    --vnrcontrato_f       number;

    \*

      cursor cmen_sel_perfil_geral(p_num_seqcial_bnfciar number) is
    \*
      ceritificar
      - quais os campos de maior prioridade para definicao do preco
      - a condicao nao trata se um preco mais especifico a um usuario for descontinuado,
        ou seja, se um preco por usuario for inativado em uma det competencia e ele tenha que assumir um preco generico numa competencia posterior,
        o preco do usuario sera cnosiderado. porem, pelas regras do sistema, ao inserir um preco por beneficiario ele nao pode ser intativado.
    *\

    \*
      cursor cmen_sel_perfil(pnrperiodo_corte number, p_num_seqcial_bnfciar number, pcdcategserv varchar2) is
    \*
      ceritificar
      - quais os campos de maior prioridade para definicao do preco
      - a condicao nao trata se um preco mais especifico a um usuario for descontinuado,
        ou seja, se um preco por usuario for inativado em uma det competencia e ele tenha que assumir um preco generico numa competencia posterior,
        o preco do usuario sera cnosiderado. porem, pelas regras do sistema, ao inserir um preco por beneficiario ele nao pode ser intativado.
    *\

    cursor c_criterios_regra(pnrtabela_contrato       preco_contrato_pessoa.nrtabela_contrato%type,
                             pinrperiodo_ult_reajuste preco_contrato_pessoa.nrperiodo_ult_reajuste%type,
                             ptpplano                 preco_contrato_pessoa.tpplano%type,
                             pnrsequencial_usuario    preco_contrato_pessoa.nrsequencial_usuario%type,
                             pnrfamilia               preco_contrato_pessoa.nrfamilia%type,
                             pcdlotacao               preco_contrato_pessoa.cdlotacao%type,
                             pcdusucateg              preco_contrato_pessoa.cdusucateg%type,
                             ptpdependete             preco_contrato_pessoa.tpdependente%type,
                             pcdcategserv             preco_contrato_pessoa.cdcategserv%type,
                             pcd_padrao_cobetura      varchar2) is
      select null cd_id,
             null cdd_regra,
             pcd_padrao_cobetura cd_padrao_cobertura,
             (select cd_modulo
                from tm_modulos_mensa t
               where t.cdcategserv = pcp.cdcategserv) cd_modulo,
             case
               when pcp.cdusucateg <> '*' then
                nvl(\*(select distinct cdvalor_externo
                      from mig_tab_conversao     r,
                           mig_tab_conversao_exp re,
                           tipo_de_usuario       tu
                     where r.nrseq = re.nrseq_tab_conversao
                       and r.notabela = 'MIGRACAO_GRAU_PARENTESCO'
                       and re.cdvalor_interno = tu.tpusuario
                       and tu.cdusucateg = pcp.cdusucateg)*\
                     (select tgp.cdvalores_externo
                        from temp_grau_paren tgp, tipo_de_usuario tu
                       where tgp.cdvalor_interno = tu.tpusuario
                         and tu.cdusucateg = pcp.cdusucateg)
                       ,
                    '0')
               else
                case
                  when pcp.tpdependente = 'T' then
                   '01'
                  else
                   '0'
                end
             end cd_grau_parentesco,
             pcp.nridade_inicio,
             pcp.nridade_fim,
             pcp.vlpreco_mensal vl_mensalidade_base,
             pcp.vlpreco_inscricao vl_taxa_inscricao,
             null dat_inic,
             to_date('31/12/9999', 'dd/mm/yyyy') dat_fim,
             0 qt_repasse,
             pcp.nrqtusuario_inicio num_livre_1,
             pcp.nrqtusuario_fim num_livre_2,
             'GE' cdsituacao
        from preco_contrato_pessoa pcp
       where pcp.cdcategserv = pcdcategserv
         and pcp.nrtabela_contrato = pnrtabela_contrato
         and pcp.nrperiodo_ult_reajuste = pinrperiodo_ult_reajuste
         and pcp.tpplano = ptpplano
         and pcp.nrsequencial_usuario = pnrsequencial_usuario
         and pcp.nrfamilia = pnrfamilia
         and pcp.cdlotacao = pcdlotacao
         and pcp.cdusucateg = pcdusucateg
         and pcp.tpdependente = ptpdependete;

    procedure p_acerta_regras is

      vfaixa_igual    varchar2(3);
      vvalores_iguais varchar2(3);
      vqtde_faixas    number;

    begin

      for y in (select nrsequencial_usuario
                  from usuario u, depara_import_benef_regramensl d
                 where tpusuario <> 00
                   and d.num_seqcial_bnfciar = u.nrsequencial_usuario) loop

        for z in (select d1.cdregra_menslid       regra_titular,
                         d2.cdregra_menslid       regra_dependente,
                         us2.nrsequencial_usuario
                    from depara_import_benef_regramensl d1,
                         depara_import_benef_regramensl d2,
                         usuario                        us1,
                         usuario                        us2
                   where d1.num_seqcial_bnfciar = us1.nrsequencial_usuario
                     and d2.num_seqcial_bnfciar = us2.nrsequencial_usuario
                     and us1.nrregistro = us2.nrregistro
                     and us1.nrcontrato = us2.nrcontrato
                     and us1.nrfamilia = us2.nrfamilia
                     and us1.tpusuario <> us2.tpusuario
                     and us1.tpusuario = 00
                     and us2.nrsequencial_usuario = y.nrsequencial_usuario) loop

          select count(*)
            into vqtde_faixas
            from tm_reagra_menslid_criter tr
           where tr.cdd_regra = z.regra_dependente;

          select case
                   when count(*) = vqtde_faixas then
                    'SIM'
                   else
                    'NAO'
                 end faixas_iguais
            into vfaixa_igual
            from tm_reagra_menslid_criter t1, tm_reagra_menslid_criter t2
           where t1.nridade_inicio = t2.nridade_inicio
             and t1.nridade_fim = t2.nridade_fim
             and t1.cdd_regra = z.regra_titular
             and t2.cdd_regra = z.regra_dependente;

          if vfaixa_igual = 'SIM' then

            select case
                     when count(*) = 0 then
                      'SIM'
                     else
                      'NAO'
                   end valores_iguais
              into vvalores_iguais
              from tm_reagra_menslid_criter t1, tm_reagra_menslid_criter t2
             where t1.nridade_inicio = t2.nridade_inicio
               and t1.nridade_fim = t2.nridade_fim
               and t1.vl_mensalidade_base <> t2.vl_mensalidade_base
               and t1.cdd_regra = z.regra_titular
               and t2.cdd_regra = z.regra_dependente;

            if vvalores_iguais = 'SIM' then

              delete from tm_regra_menslid t
               where t.cdd_regra = z.regra_dependente;

              delete from tm_reagra_menslid_criter t
               where t.cdd_regra = z.regra_dependente;

              update depara_import_benef_regramensl d
                 set d.cdregra_menslid = z.regra_titular
               where d.num_seqcial_bnfciar = z.nrsequencial_usuario;

              p_commit;
            end if;

          end if;
        end loop;
      end loop;
      --commit;
    end p_acerta_regras;

    procedure carga_tabela_temporaria is

    begin
      --  execute immediate 'create index ix_tm_benef_proc_regra_mens on tm_benef_proc_regra_mens(num_seqcial_bnfciar)';

      begin
        execute immediate 'DROP INDEX IX_TM_PROC_MENSLID_A1_1';
      exception
        when others then
          null;
      end;
      begin
        execute immediate 'DROP INDEX IX_TM_PROC_MENSLID_A2_1';
      exception
        when others then
          null;
      end;
      execute immediate 'TRUNCATE TABLE TM_PROC_MENSLID_A1';
      execute immediate 'TRUNCATE TABLE TM_PROC_MENSLID_A2';
      begin
        execute immediate 'DROP INDEX IX_TM_PROC_MENSLID_A4';
      exception
        when others then
          null;
      end;
      execute immediate 'TRUNCATE TABLE TM_PROC_MENSLID_A4';

      insert \* +append *\
      into tm_proc_menslid_a4
        select nr_contrato_antigo,
               us.nrsequencial_usuario,
               us.nrtabela_contrato,
               us.tpusuario,
               us.nrfamilia,
               us.tpplano,
               us.cdlotacao,
               us.nrcontrato,
               tu.cdusucateg,
               cu.tpdependente
          from (select distinct num_seqcial_bnfciar, nr_contrato_antigo
                  from import_bnfciar a
                 where exists
                 (select 1
                          from import_propost bb1
                         where (bb1.num_livre_3 = anrcontrato or
                               anrcontrato is null)
                           and a.nr_contrato_antigo = bb1.nr_contrato_antigo \*bb1.u##nr_contrato_antigo*\)
                      --           and not exists (select 1 from depara_import_benef_regramensl dp where dp.num_seqcial_bnfciar = a.num_seqcial_bnfciar)
                   and exists (select 1
                          from tmp_regera_preco tgp
                         where tgp.nrsequencial_usuario =
                               a.num_seqcial_bnfciar)) bn,
               usuario us,
               tipo_de_usuario tu,
               categoria_de_usuario cu
         where exists
         (select 1
                  from tmp_regera_preco tgp
                 where tgp.nrsequencial_usuario = us.nrsequencial_usuario)
           and bn.num_seqcial_bnfciar = us.nrsequencial_usuario
           and tu.tpusuario = us.tpusuario
           and cu.cdusucateg = tu.cdusucateg;

      execute immediate 'CREATE INDEX IX_TM_PROC_MENSLID_A4 ON TM_PROC_MENSLID_A4(NRSEQUENCIAL_USUARIO)';

      insert \* +append *\
      into tm_proc_menslid_a1
        select nr_contrato_antigo,
               nrcontrato_unicoo,
               nrsequencial_usuario,
               nrtabela_contrato_preco,
               nrsequencial_usuario_preco,
               nrfamilia_preco,
               tpplano_preco,
               cdlotacao_preco,
               cdusucateg_preco,
               tpdependente_preco,
               nrperiodo_ult_reajuste_preco
          from (select s0.*,
                       dense_rank() over(partition by nrsequencial_usuario order by nrperiodo_ult_reajuste_preco desc, nrsequencial_usuario_preco desc, nrfamilia_preco desc, tpplano_preco desc, cdlotacao_preco desc, cdusucateg_preco desc, tpdependente_preco desc) nrrank
                --order by nrsequencial_usuario_preco desc, nrfamilia_preco desc, tpplano_preco desc, cdlotacao_preco desc, cdusucateg_preco desc, tpdependente_preco desc) nrrank
                  from (select us.nr_contrato_antigo,
                                us.nrcontrato nrcontrato_unicoo,
                                us.nrsequencial_usuario nrsequencial_usuario,
                                pcp.nrtabela_contrato nrtabela_contrato_preco,
                                nvl(pcp.nrsequencial_usuario, 0) nrsequencial_usuario_preco,
                                nvl(pcp.nrfamilia, 0) nrfamilia_preco,
                                nvl(pcp.tpplano, '*') tpplano_preco,
                                nvl(pcp.cdlotacao, '*') cdlotacao_preco,
                                nvl(pcp.cdusucateg, '*') cdusucateg_preco,
                                nvl(pcp.tpdependente, '*') tpdependente_preco,
                                nvl(max(nvl(pcp.nrperiodo_ult_reajuste, 0)), 0) nrperiodo_ult_reajuste_preco
                           from tm_proc_menslid_a4 us,
                                --tipo_de_usuario tu,
                                --categoria_de_usuario cu,
                                preco_contrato_pessoa pcp
                          where
                         --us.nrcontrato = '0151' and -- teset remover
                         --tu.tpusuario             = to_char(us.tpusuario) and
                         --cu.cdusucateg            = tu.cdusucateg         and
                          pcp.nrtabela_contrato(+) = us.nrtabela_contrato
                       and (pcp.nrsequencial_usuario = us.nrsequencial_usuario or
                           pcp.nrsequencial_usuario = 0 or
                           pcp.nrsequencial_usuario is null)
                       and (pcp.nrfamilia = us.nrfamilia or pcp.nrfamilia = 0 or
                           pcp.nrfamilia is null)
                       and (pcp.tpplano = us.tpplano or pcp.tpplano = '*' or
                           pcp.tpplano is null)
                       and (pcp.cdlotacao = us.cdlotacao or pcp.cdlotacao = '*' or
                           pcp.cdlotacao is null)
                       and (pcp.cdusucateg = us.cdusucateg or
                           pcp.cdusucateg = '*' or pcp.cdusucateg is null)
                       and (pcp.tpdependente = us.tpdependente or
                           pcp.tpdependente = '*' or pcp.tpdependente is null)
                       and (nvl(pcp.nrperiodo_ult_reajuste, 0) <=
                           anrperiodocorte)
                          group by us.nr_contrato_antigo,
                                   us.nrcontrato,
                                   us.nrsequencial_usuario,
                                   pcp.nrsequencial_usuario,
                                   pcp.nrtabela_contrato,
                                   pcp.nrsequencial_usuario,
                                   pcp.nrfamilia,
                                   pcp.tpplano,
                                   pcp.cdlotacao,
                                   pcp.cdusucateg,
                                   pcp.tpdependente) s0) s00
         where s00.nrrank = 1;

      execute immediate 'CREATE INDEX IX_TM_PROC_MENSLID_A1_1 ON TM_PROC_MENSLID_A1(NRCONTRATO_UNICOO)';

      insert \* +append *\
      into tm_proc_menslid_a2
        select cdcategserv,
               nr_contrato_antigo,
               nrcontrato_unicoo,
               nrsequencial_usuario,
               nrtabela_contrato_preco,
               nrsequencial_usuario_preco,
               nrfamilia_preco,
               tpplano_preco,
               cdlotacao_preco,
               cdusucateg_preco,
               tpdependente_preco,
               nrperiodo_ult_reajuste_preco,
               (select v.cd_padrao_cobertura
                  from t_v_plano_padrao v, usuario benef
                 where v.CDCONTRATO_USU = benef.cdcontrato
                   and benef.nrsequencial_usuario = s00.nrsequencial_usuario) cd_padrao_cobertura
        --spcp.cdcategserv cdcategserv_pcp
          from (select s0.*,
                       dense_rank() over(partition by nrsequencial_usuario, cdcategserv order by nrperiodo_ult_reajuste_preco desc, nrsequencial_usuario_preco desc, nrfamilia_preco desc, tpplano_preco desc, cdlotacao_preco desc, cdusucateg_preco desc, tpdependente_preco desc) nrrank
                --                           order by nrsequencial_usuario_preco desc, nrfamilia_preco desc, tpplano_preco desc, cdlotacao_preco desc, cdusucateg_preco desc, tpdependente_preco desc) nrrank
                  from (select pcp.cdcategserv,
                               us.nr_contrato_antigo,
                               us.nrcontrato nrcontrato_unicoo,
                               us.nrsequencial_usuario nrsequencial_usuario,
                               pcp.nrtabela_contrato nrtabela_contrato_preco,
                               nvl(pcp.nrsequencial_usuario, 0) nrsequencial_usuario_preco,
                               nvl(pcp.nrfamilia, 0) nrfamilia_preco,
                               nvl(pcp.tpplano, '*') tpplano_preco,
                               nvl(pcp.cdlotacao, '*') cdlotacao_preco,
                               nvl(pcp.cdusucateg, '*') cdusucateg_preco,
                               nvl(pcp.tpdependente, '*') tpdependente_preco,
                               nvl(max(pcp.nrperiodo_ult_reajuste), 0) nrperiodo_ult_reajuste_preco
                          from tm_proc_menslid_a4    us,
                               preco_contrato_pessoa pcp
                         where pcp.nrtabela_contrato(+) =
                               us.nrtabela_contrato
                           and (pcp.nrsequencial_usuario =
                                us.nrsequencial_usuario or
                                pcp.nrsequencial_usuario = 0 or
                                pcp.nrsequencial_usuario is null)
                           and (pcp.nrfamilia = us.nrfamilia or
                                pcp.nrfamilia = 0 or pcp.nrfamilia is null)
                           and (pcp.tpplano = us.tpplano or pcp.tpplano = '*' or
                                pcp.tpplano is null)
                           and (pcp.cdlotacao = us.cdlotacao or
                                pcp.cdlotacao = '*' or pcp.cdlotacao is null)
                           and (pcp.cdusucateg = us.cdusucateg or
                                pcp.cdusucateg = '*' or
                                pcp.cdusucateg is null)
                           and (pcp.tpdependente = us.tpdependente or
                                pcp.tpdependente = '*' or
                                pcp.tpdependente is null)
                           and (pcp.nrperiodo_ult_reajuste <= anrperiodocorte)
                         group by pcp.cdcategserv,
                                  us.nr_contrato_antigo,
                                  us.nrcontrato,
                                  us.nrsequencial_usuario,
                                  pcp.nrsequencial_usuario,
                                  pcp.nrtabela_contrato,
                                  pcp.nrsequencial_usuario,
                                  pcp.nrfamilia,
                                  pcp.tpplano,
                                  pcp.cdlotacao,
                                  pcp.cdusucateg,
                                  pcp.tpdependente) s0) s00
         where s00.nrrank = 1;

      execute immediate 'CREATE INDEX IX_TM_PROC_MENSLID_A2_1 ON TM_PROC_MENSLID_A2(NRSEQUENCIAL_USUARIO)';
    end carga_tabela_temporaria;

    -- ## vr add - 20160207
    procedure desc_regra_e_obs(pnrsequsuario               number,
                               pnrtabela_contrato_preco    number,
                               pcdlotacao_preco            varchar2,
                               pnrfamilia_preco            number,
                               pnrsequencial_usuario_preco number,
                               pcdusucateg_preco           varchar2,
                               ptpplano_preco              varchar2,
                               pout_regra                  out varchar2,
                               pout_obs                    out varchar2) is
    begin
      -- ## vr add - 20160207 - by vjust
      select --pcdregra cdd_regra,   -- t.cdd_regra,
       'Contr ' || p.nrcontrato || ', Usu ' || (case
         when pnrsequencial_usuario_preco = 0 then
          'Todos'
         else
          (select pe.nopessoa
             from usuario u, pessoa pe
            where u.nrregistro_usuario = pe.nrregistro
              and u.nrsequencial_usuario = pnrsequencial_usuario_preco)
       end) || ', Fam: ' || decode(pnrfamilia_preco, 0, 'Todos') ||
       ', Plano: ' || ptpplano_preco || ', Lot: ' || (case
         when pcdlotacao_preco = '*' then
          'Todos'
         else
          pcdlotacao_preco
       end) || ', TipUsu: ' ||
       (select cdu.nousucateg
          from categoria_de_usuario cdu
         where cdu.cdusucateg = pcdusucateg_preco) txregra,
       'Contrato ' || p.nrcontrato || ' ' || pe.nopessoa || ', Usu?rio: ' ||
       (case
         when pnrsequencial_usuario_preco = 0 then
          'Todos'
         else
          (select pe.nopessoa
             from usuario u, pessoa pe
            where u.nrregistro_usuario = pe.nrregistro
              and u.nrsequencial_usuario = pnrsequencial_usuario_preco)
       end) || ', Familia: ' || decode(pnrfamilia_preco, 0, 'Todos') ||
       ', Plano: ' || ptpplano_preco || ', Lota??o: ' || (case
         when pcdlotacao_preco = '*' then
          'Todos'
         else
          pcdlotacao_preco || ' - ' ||
          (select l.txdescricao
             from lotacao l
            where l.cdlotacao = pcdlotacao_preco
              and l.nrregistro = p.nrregistro
              and l.nrcontrato = p.nrcontrato)
       end) || ', Tipo Usu?rio: ' ||
       (select cdu.nousucateg
          from categoria_de_usuario cdu
         where cdu.cdusucateg = pcdusucateg_preco) txobservacao
        into pout_regra, pout_obs
        from --tm_regra_menslid                        t,
             preco_referencia_contrato p,
             pessoa                    pe
       where p.nrtabela_contrato = pnrtabela_contrato_preco
         and pe.nrregistro = p.nrregistro;
      -- and t.cdd_regra in (471095, 471094)
    exception
      when others then
        null;

    end;

    procedure check_regra_migrada(pout_regra_migrada            out varchar2,
                                  pout_regra                    out number,
                                  pnrsequencial_usuario_preco   number,
                                  pnrfamilia_preco              number,
                                  ptpplano_preco                varchar2,
                                  pcdlotacao_preco              varchar2,
                                  pcdusucateg_preco             varchar2,
                                  ptpdependente_preco           varchar2,
                                  pnrtabela_contrato_preco      number,
                                  pinrperiodo_ult_reajuste_preco number) is
    begin
      select 'S', cdd_regra
        into pout_regra_migrada, pout_regra
        from tm_regra_menslid trm
       where trm.nrsequencial_usuario_preco = pnrsequencial_usuario_preco
         and trm.nrfamilia_preco = pnrfamilia_preco
         and trm.tpplano_preco = ptpplano_preco
         and trm.cdlotacao_preco = pcdlotacao_preco
            --alterado vinicius justino novo processo das regras ferj nova iguaçu 22/09
            --and trm.cdusucateg_preco = pcdusucateg_preco
            --and trm.tpdependente_preco = ptpdependente_preco
         and trm.nrtabela_contrato_preco = pnrtabela_contrato_preco
         and trm.nrperiodo_ult_reajuste_preco =
             pinrperiodo_ult_reajuste_preco;
    exception
      when no_data_found then
        pout_regra_migrada := 'N';
      when others then
        raise;
    end;

    procedure check_criterio_migrado(pout_criterio_migrado out varchar2,
                                     pregra                number,
                                     pcd_modulo            varchar2,
                                     pcd_grau_parentesco   varchar2,
                                     pnridade_inicio       number,
                                     pnridade_fim          number,
                                     pvl_mensalidade_base  number) is
    begin
      select 'S'
        into pout_criterio_migrado
        from tm_reagra_menslid_criter tm
       where tm.cdd_regra = pregra
         and tm.cd_modulo = pcd_modulo
         and tm.cd_grau_parentesco = pcd_grau_parentesco
         and tm.nridade_inicio = pnridade_inicio
         and tm.nridade_fim = pnridade_fim
         and tm.vl_mensalidade_base = pvl_mensalidade_base
       group by cdd_regra,
                cd_modulo,
                cd_grau_parentesco,
                nridade_inicio,
                nridade_fim,
                vl_mensalidade_base;
    exception
      when no_data_found then
        pout_criterio_migrado := 'N';
      when others then
        raise;
    end;

    procedure pega_trio(pnum_seqcial_bnfciar   number,
                        pout_dtinicio_contrato out date,
                        pout_nrcontrato        out varchar2,
                        pout_nocontratante     out varchar2) is
    begin
      select cdp.dtiniciocontrato, cdp.nrcontrato, pe.nopessoa
        into pout_dtinicio_contrato, pout_nrcontrato, pout_nocontratante
        from contrato_da_pessoa cdp, usuario us, pessoa pe
       where cdp.nrregistro = us.nrregistro
         and cdp.nrcontrato = us.nrcontrato
         and us.nrsequencial_usuario = pnum_seqcial_bnfciar
         and pe.nrregistro = cdp.nrregistro;
    exception
      when others then
        raise_application_error(-20001,
                                'ERRO PESQUISANDO BENEFICIARIO/CONTRATO. Seq_Usuario: ' ||
                                pnum_seqcial_bnfciar);
    end;

    procedure show_errors(amsgerro varchar2) is
      cerros number := 99999999500;
    begin
      vcont_erro := vcont_erro + 1;
      insert into falha_processo_regra_menslid
      values
        (vdtprocesso, amsgerro);
      --commit;
      if vcont_erro > cerros then
        raise_application_error(-20001,
                                'Quantidade de erros excedou limite definido. Limite erros: ' ||
                                cerros);
      end if;
    end;

    procedure zerabase is
    begin
      if anrcontrato is null then
        execute immediate 'truncate table depara_import_benef_regramensl';
        execute immediate 'truncate table TM_REGRA_MENSLID';
        execute immediate 'truncate table TM_REAGRA_MENSLID_CRITER';
      else
        for v in (select distinct a.cdregra_menslid
                    from depara_import_benef_regramensl a
                   where nrcontrato_unicoo = anrcontrato) loop
          delete from tm_regra_menslid b
           where b.cdd_regra = v.cdregra_menslid;
          delete from tm_reagra_menslid_criter c
           where c.cdd_regra = v.cdregra_menslid;
          delete from gp.regra_menslid_propost d
           where d.cdd_regra = v.cdregra_menslid;
        end loop;
        delete from (select *
                       from depara_import_benef_regramensl a
                      where nrcontrato_unicoo = anrcontrato);
      end if;
    end;

  begin
    --inicio do processo
    dbms_output.put_line('&&&ENTROU EM gera_regra_menslid' || ' / ' || sysdate || ' / ' || to_char(sysdate, 'HH24:MI:SS'));



    vdtprocesso := sysdate; -- registrador para falhas
    pcheck('REGRA_MENSLID', 'PONTO ZERO');

    zerabase;

    if anrcontrato is not null then
      execute immediate 'truncate table tmp_regera_preco ';
      insert into tmp_regera_preco
        select nrsequencial_usuario
          from usuario
         where nrcontrato = anrcontrato;
      --commit;
    else
      select count(1)
        into vcont_erro
        from tmp_regera_preco
       where rownum < 2;
      if vcont_erro = 0 then
        -- regera base total
        insert into tmp_regera_preco
          select nrsequencial_usuario from usuario;
      end if;
    end if;

    delete depara_import_benef_regramensl a
     where exists
     (select 1
              from tmp_regera_preco b
             where a.num_seqcial_bnfciar = b.nrsequencial_usuario);

    carga_tabela_temporaria;

    pcheck('REGRA_MENSLID',
           'INICIO CONTRATO ' || nvl(vnrcontrato, 'TODOS'));

    for x in (select * from tm_proc_menslid_a1) loop

      contador := contador + 1;
      if x.nrtabela_contrato_preco is null then
        show_errors('Beneficiario nao tem tabela de preco. Benef:' ||
                    x.nrsequencial_usuario); -- num_seqcial_bnficiar);

        --continue;
      end if;

      pega_trio(x.nrsequencial_usuario,
                vdtinicio_contrato,
                vnrcontrato,
                vnocontratante);

      check_regra_migrada(vaoregra_migrada,
                          vregra,
                          x.nrsequencial_usuario_preco,
                          x.nrfamilia_preco,
                          x.tpplano_preco,
                          x.cdlotacao_preco,
                          x.cdusucateg_preco,
                          x.tpdependente_preco,
                          x.nrtabela_contrato_preco,
                          x.nrperiodo_ult_reajuste_preco);
      -- insere regra
      if vaoregra_migrada = 'N' then
        desc_regra_e_obs(x.nrsequencial_usuario,
                         x.nrtabela_contrato_preco,
                         x.cdlotacao_preco,
                         x.nrfamilia_preco,
                         x.nrsequencial_usuario_preco,
                         x.cdusucateg_preco,
                         x.tpplano_preco,
                         vtxregra,
                         vtxobs);
        select sq_regra_menslid.nextval into vregra from dual;
        insert into tm_regra_menslid
          (cdd_regra,
           des_regra,
           dat_inic,
           dat_fim,
           des_obs,
           cdindice,
           nrsequencial_usuario_preco,
           nrfamilia_preco,
           tpplano_preco,
           cdlotacao_preco,
           cdusucateg_preco,
           tpdependente_preco,
           nrperiodo_ult_reajuste_preco,
           nrtabela_contrato_preco,
           cdsituacao)
        values
          (vregra, --cdd_regra,
           vtxregra, -- des_regra
           vdtinicio_contrato, --dat_inic,
           to_date('31/12/9999', 'dd/mm/yyyy'), --dat_fim,
           --' ', --des_obs,
           vtxobs, -- des_obs,
           1, --cdindice,
           x.nrsequencial_usuario_preco, --nrsequencial_usuario_preco,
           x.nrfamilia_preco, --nrfamilia_preco,
           x.tpplano_preco, --tpplano_preco,
           x.cdlotacao_preco, --cdlotacao_preco,
           x.cdusucateg_preco, --cdusucateg_preco,
           x.tpdependente_preco, --tpdependente_preco,
           x.nrperiodo_ult_reajuste_preco, --nrperiodo_ult_reajuste_preco,
           x.nrtabela_contrato_preco,
           'GE'); --cdsituacao)

      end if;
      insert into depara_import_benef_regramensl
        (num_seqcial_bnfciar,
         cdregra_menslid,
         cdregra_menslid_propost,
         nr_contrato_antigo,
         nrcontrato_unicoo)
      values
        (x.nrsequencial_usuario,
         vregra,
         null,
         x.nr_contrato_antigo,
         x.nrcontrato_unicoo);

      --determina perfil para categserv
      for y in (select *
                  from tm_proc_menslid_a2
                 where nrsequencial_usuario = x.nrsequencial_usuario) loop
        for ccr in c_criterios_regra(y.nrtabela_contrato_preco,
                                     y.nrperiodo_ult_reajuste_preco,
                                     y.tpplano_preco,
                                     y.nrsequencial_usuario_preco,
                                     y.nrfamilia_preco,
                                     y.cdlotacao_preco,
                                     y.cdusucateg_preco,
                                     y.tpdependente_preco,
                                     y.cdcategserv,
                                     y.cd_padrao_cobertura) loop
          check_criterio_migrado(vaocriterio_migrado,
                                 vregra,
                                 ccr.cd_modulo,
                                 ccr.cd_grau_parentesco,
                                 ccr.nridade_inicio,
                                 ccr.nridade_fim,
                                 ccr.vl_mensalidade_base);

          if vaocriterio_migrado = 'N' then
            insert into tm_reagra_menslid_criter
              (cd_id,
               cdd_regra,
               cd_padrao_cobertura,
               cd_modulo,
               cd_grau_parentesco,
               nridade_inicio,
               nridade_fim,
               vl_mensalidade_base,
               vl_taxa_inscricao,
               dat_inic,
               dat_fim,
               qt_repasse,
               num_livre_1,
               num_livre_2,
               cdsituacao)
            values
              (seq_cdd_regra.nextval,
               vregra,
               ccr.cd_padrao_cobertura,
               ccr.cd_modulo,
               ccr.cd_grau_parentesco,
               ccr.nridade_inicio,
               ccr.nridade_fim,
               ccr.vl_mensalidade_base,
               ccr.vl_taxa_inscricao,
               vdtinicio_contrato,
               ccr.dat_fim,
               ccr.qt_repasse,
               ccr.num_livre_1,
               ccr.num_livre_2,
               ccr.cdsituacao);
          end if;
        end loop; -- c_criterios_regra
      end loop; -- c_criterios_regra
    end loop;
    pcheck('REGRA_MENSLID', 'FIM CONTRATO ' || nvl(vnrcontrato, 'TODOS'));
    --commit;

    pcheck('REGRA_MENSLID', 'FASE FINAL ');
    begin
      execute immediate 'DROP INDEX IX_TM_PROC_MENSLID_A3_1';
    exception
      when others then
        null;
    end;
    execute immediate 'TRUNCATE TABLE TM_PROC_MENSLID_A3';

    insert into tm_proc_menslid_a3
      select nr_contrato_antigo, cdregra_menslid
        from (select s0.*,
                     --      dense_rank() over(partition by nr_contrato_antigo, cdregra_menslid order by qtde desc) nrrank
                     dense_rank() over(partition by nr_contrato_antigo order by qtde desc) nrrank
                from (select cdregra_menslid,
                             nr_contrato_antigo,
                             count(1) qtde
                        from depara_import_benef_regramensl s0
                       where exists (select 1
                                from tmp_regera_preco j1
                               where s0.num_seqcial_bnfciar =
                                     j1.nrsequencial_usuario)
                      --        depara_import_benregramensl_vr s0   -- teste
                       group by cdregra_menslid, nr_contrato_antigo) s0) s00
       where s00.nrrank = 1;

    -- limpeza de duplicidades
    delete (select \*+rule*\
             *
              from tm_proc_menslid_a3 a3
             where cdregra_menslid <>
                   (select max(cdregra_menslid)
                      from tm_proc_menslid_a3 a33
                     where a33.nr_contrato_antigo = a3.nr_contrato_antigo
                     group by a33.nr_contrato_antigo
                    having count(1) > 1));

    execute immediate 'CREATE INDEX IX_TM_PROC_MENSLID_A3_1 ON TM_PROC_MENSLID_A3(NR_CONTRATO_ANTIGO)';

    --update depara acertar num livre 9 e 7
    update depara_import_benef_regramensl dp
    --  update depara_import_benregramensl_vr dp   -- teste
       set dp.cdregra_menslid_propost =
           (select a3.cdregra_menslid
              from tm_proc_menslid_a3 a3
             where a3.nr_contrato_antigo = dp.nr_contrato_antigo)
     where exists
     (select 1
              from tm_proc_menslid_a3 a3
             where a3.nr_contrato_antigo = dp.nr_contrato_antigo);

    update depara_import_benef_regramensl dp
    --  update depara_import_benregramensl_vr dp   -- teste
       set dp.cdregra_menslid_bnficiar = case
                                           when cdregra_menslid_propost =
                                                cdregra_menslid then
                                            0
                                           else
                                            cdregra_menslid
                                         end;

    update import_propost ip
       set num_livre_7 =
           (select cdregra_menslid
              from tm_proc_menslid_a3 a
             where a.nr_contrato_antigo = ip.nr_contrato_antigo \*ip.u##nr_contrato_antigo*\)
     where exists
     (select 1
              from tm_proc_menslid_a3 a
             where a.nr_contrato_antigo = ip.nr_contrato_antigo \*ip.u##nr_contrato_antigo*\);

    update import_bnfciar bn
       set bn.num_livre_9 =
           (select dp.cdregra_menslid_bnficiar
              from depara_import_benef_regramensl dp
             where dp.num_seqcial_bnfciar = bn.num_seqcial_bnfciar)
     where exists
     (select 1
              from depara_import_benef_regramensl dp
             where dp.num_seqcial_bnfciar = bn.num_seqcial_bnfciar);

    for x in (select a.rowid, cd_modulo
                from tm_reagra_menslid_criter a,
                     tm_proc_menslid_a3       b,
                     import_bnfciar           c
               where a.cdd_regra = b.cdregra_menslid
                 and b.nr_contrato_antigo = c.nr_contrato_antigo
                 and c.cd_padrao_cob = 'AD'
                 and a.cd_modulo = 6) loop
      update tm_reagra_menslid_criter
         set cd_modulo = 106
       where rowid = x.rowid;
    end loop;

    pcheck('REGRA_MENSLID', 'FINAL ');

    --commit;
  end;
*/
  /*========================================================================================
   =  Procedure : p_migra_regra_estrutura                                    Antônio Prado =
   =                                                                                       =
   =  Objetivo  : migrar os preços da última competência de cada plano de saúde que virou  =
   =              padrão de cobertura para as estruturas padrões.                          =
   =                                                                            17/11/2016 =
   =========================================================================================
  */

  procedure p_migra_regra_estrutura is
    vnr_regra       number := 0;
    vcd_chave_preco varchar2(50);
    vnr_faixa       number := 0;
    vnr_modulo_mens number;
    vaomigrar       varchar2(1) := 'S';

  begin

    vcd_chave_preco := ' ';

    begin
      select nvl(max(r.cdd_regra),0) into vnr_regra from gp.regra_menslid r;
    exception
      when no_data_found then
        vnr_regra := 0;
    end;

    for regras in (select distinct cd_modalidade,
                                   cd_plano,
                                   cd_tipo_plano,
                                   'REGRA MODELO - MOD: ' ||
                                   lpad(cd_modalidade, 2, ' ') || ' PLANO: ' ||
                                   lpad(cd_plano, 2, ' ') || ' TIPO PLANO:'  ||
                                   lpad(cd_tipo_plano, 2, ' ') des_regra,
                                   nvl((select min(pr.dtinicio_vigencia) dat_ini
                                         from preco_referencia_padrao pr,
                                              temp_depara_agrupado    ti
                                        where ti.cdcontrato = pr.cdcontrato
                                          and ti.cd_modalidade =
                                              t.cd_modalidade
                                          and ti.cd_plano = t.cd_plano
                                          and ti.cd_tipo_plano =
                                              t.cd_tipo_plano),
                                       '01/01/1900') dat_inic,
                                   nvl((select max(nvl(pr.dtfinal_vigencia,
                                                      '31/12/9999')) dat_fim
                                         from preco_referencia_padrao pr,
                                              temp_depara_agrupado    ti
                                        where ti.cdcontrato = pr.cdcontrato
                                          and ti.cd_modalidade =
                                              t.cd_modalidade
                                          and ti.cd_plano = t.cd_plano
                                          and ti.cd_tipo_plano =
                                              t.cd_tipo_plano),
                                       '31/12/9999') dat_fim
                     from temp_depara_agrupado t

                   --where cd_modalidade = 10 and cd_plano = 10 and cd_tipo_plano = 10
                    order by 1, 2, 3) loop
      vnr_regra := vnr_regra + 1;

      --insere a tabela para a estrutura
      insert into gp.regra_menslid
        (cdd_regra,
         des_regra,
         dat_inic,
         dat_fim,
         des_obs,
         cdn_tip_idx,
         in_tipo_regra,
         log_livre_1, --indicador se é regra modelo
         progress_recid)
      values
        (vnr_regra,
         regras.des_regra,
         --trunc(regras.dat_inic, 'mm'), --primeiro dia do mês
         --last_day(regras.dat_fim), --ultimo dia do mês
         regras.dat_inic,
         regras.dat_fim,
         ' ',
         1,
         1,
         1, -- 1: é regra modelo; 0: é regra de um contrato/beneficiário
         gp.regra_menslid_seq.nextval);

      --insere a estrutura da regra
      insert into gp.regra_menslid_estrut
      values
        (seq_regra_menslid_estrut.nextval,
         vnr_regra,
         regras.cd_modalidade,
         regras.cd_plano,
         regras.cd_tipo_plano,
         0, --nr_proposta,
         0, --cd_usuario,
--         regras.dat_inic,
--         regras.dat_fim,
         --trunc(regras.dat_inic, 'mm'), --primeiro dia do mês
         --last_day(regras.dat_fim), --ultimo dia do mês
         regras.dat_inic,
         regras.dat_fim,
         ' ', --des_observacao,
         ' ', --cod_livre_1,
         ' ', --cod_livre_2,
         ' ', --cod_livre_3,
         ' ', --cod_livre_4,
         ' ', --cod_livre_5,
         ' ', --cod_livre_6,
         ' ', --cod_livre_7,
         ' ', --cod_livre_8,
         ' ', --cod_livre_9,
         ' ', --cod_livre_10,
         0, --num_livre_1,
         0, --num_livre_2,
         0, --num_livre_3,
         0, --num_livre_4,
         0, --num_livre_5,
         0, --num_livre_6,
         0, --num_livre_7,
         0, --num_livre_8,
         0, --num_livre_9,
         0, --num_livre_10,
         0, --val_livre_1,
         0, --val_livre_2,
         0, --val_livre_3,
         0, --val_livre_4,
         0, --val_livre_5,
         0, --val_livre_6,
         0, --val_livre_7,
         0, --val_livre_8,
         0, --val_livre_9,
         0, --val_livre_10,
         0, --log_livre_1,
         0, --log_livre_2,
         0, --log_livre_3,
         0, --log_livre_4,
         0, --log_livre_5,
         0, --log_livre_6,
         0, --log_livre_7,
         0, --log_livre_8,
         0, --log_livre_9,
         0, --log_livre_10,
         null, --dat_livre_1,
         null, --dat_livre_2,
         null, --dat_livre_3,
         null, --dat_livre_4,
         null, --dat_livre_5,
         null, --dat_livre_6,
         null, --dat_livre_7,
         null, --dat_livre_8,
         null, --dat_livre_9,
         null, --dat_livre_10,
         'migracao',
         sysdate,
         gp.regra_menslid_estrut_seq.nextval);

      --leitura das estruturas por padrao de cobertura
      for estrut in (select t.cd_modalidade,
                            t.cd_plano,
                            t.cd_tipo_plano,
                            t.cd_padrao_cobertura,
                            t.cdcontrato,
                            prp.nrtabela_padrao,
                            pcp.ult_reaj,
                            nvl((select min(pr.dtinicio_vigencia) dat_ini
                                  from preco_referencia_padrao pr,
                                       temp_depara_agrupado    ti
                                 where ti.cdcontrato = pr.cdcontrato
                                   and pr.nrtabela_padrao = prp.nrtabela_padrao
                                   and ti.cd_modalidade = t.cd_modalidade
                                   and ti.cd_plano = t.cd_plano
                                   and ti.cd_tipo_plano = t.cd_tipo_plano),
                                '01/01/1900') dat_ini,
                            nvl((select max(nvl(pr.dtfinal_vigencia,
                                               '31/12/9999')) dat_fim
                                  from preco_referencia_padrao pr,
                                       temp_depara_agrupado    ti
                                 where ti.cdcontrato = pr.cdcontrato
                                   and pr.nrtabela_padrao = prp.nrtabela_padrao
                                   and ti.cd_modalidade = t.cd_modalidade
                                   and ti.cd_plano = t.cd_plano
                                   and ti.cd_tipo_plano = t.cd_tipo_plano),
                                '31/12/9999') dat_fim
                       from temp_depara_agrupado t,
                            (select pr.cdcontrato cdcontrato,
                                    max(pr.nrtabela_padrao) nrtabela_padrao
                               from preco_referencia_padrao pr
                              where pr.nrcontrato = '0000'
                              group by pr.cdcontrato) prp,
                            (select prp.nrtabela_padrao nrtabela_padrao_preco,
                                    prp.cdcontrato cdcontrato_preco,
                                    max(pcp.nrperiodo_ult_reajuste) ult_reaj
                               from preco_referencia_padrao prp,
                                    preco_contrato_padrao   pcp
                              where pcp.nrtabela_padrao = prp.nrtabela_padrao
                              group by prp.nrtabela_padrao, prp.cdcontrato) pcp
                      where prp.cdcontrato(+) = t.cdcontrato
                        and pcp.nrtabela_padrao_preco(+) = prp.nrtabela_padrao
                        and t.cd_modalidade = regras.cd_modalidade
                        and t.cd_plano = regras.cd_plano
                        and t.cd_tipo_plano = regras.cd_tipo_plano) loop

        --insere os criterios da estrutura
        for criterio in (select case
                                  when p.cdusucateg <> '*' then
                                   nvl(
                                     (select distinct tgp.cdvalores_externo
                                        from temp_grau_paren tgp, tipo_de_usuario tu
                                       where tgp.cdvalor_interno = tu.tpusuario
                                         and tu.cdusucateg = p.cdusucateg)
                                          ,
                                       '0')
                                  else
                                   case
                                     when p.tpdependente = 'T' then
                                      '01'
                                     when p.tpdependente = 'A' then
                                      f_tm_parametro('CDGRAU_AGREGADO')
                                     else
                                      '00'
                                   end
                                end cd_grau_parentesco,
                                p.*
                           from preco_contrato_padrao p
                          where p.nrtabela_padrao = estrut.nrtabela_padrao
                            and p.nrperiodo_ult_reajuste = estrut.ult_reaj
                         --and p.cdcategserv             = ' '
                          order by p.cdcategserv,
                                   p.tpplano,
                                   p.cdusucateg,
                                   p.tpdependente,
                                   nrqtusuario_inicio,
                                   nridade_inicio) loop

          --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
          if (criterio.cdcategserv || '-' || criterio.tpplano || '-' ||
             criterio.cdusucateg || '-' || criterio.tpdependente || '-' ||
             criterio.nrqtusuario_inicio) <> vcd_chave_preco then
            vcd_chave_preco := criterio.cdcategserv || '-' ||
                               criterio.tpplano || '-' ||
                               criterio.cdusucateg || '-' ||
                               criterio.tpdependente || '-' ||
                               criterio.nrqtusuario_inicio;
            vnr_faixa       := 1;

          else
            vnr_faixa := vnr_faixa + 1;
          end if;

          vaomigrar := 'S';

          begin
            select re.cdvalor_externo
              into vnr_modulo_mens
              from mig_tab_conversao r, mig_tab_conversao_exp re
             where r.nrseq = re.nrseq_tab_conversao
               and r.notabela = 'MIGRACAO_MODULO'
               and re.cdvalor_interno = criterio.cdcategserv;
          exception
            when no_data_found then
              vaomigrar := 'N';
          end;

          insert into gp.regra_menslid_criter
            (cdd_id,
             cdd_regra,
             u##cd_padrao_cobertura,
             cd_padrao_cobertura,
             cd_modulo,
             cd_grau_parentesco,
             nr_faixa_etaria,
             nr_idade_minima,
             nr_idade_maxima,
             vl_mensalidade_base,
             vl_taxa_inscricao,
             dat_inic,
             dat_fim,
             qt_repasse,
             num_livre_1,
             num_livre_2,
             progress_recid)
          values
            (seq_cdd_id.nextval,
             vnr_regra,
             estrut.cd_padrao_cobertura,
             estrut.cd_padrao_cobertura,
             vnr_modulo_mens, -- modulo da mensalidade
             criterio.cd_grau_parentesco,
             vnr_faixa,
             criterio.nridade_inicio,
             criterio.nridade_fim,
             criterio.vlpreco_mensal, -- vl_mensalidade_base,
             criterio.vlpreco_inscricao, -- vl_taxa_inscricao,
             estrut.dat_ini, -- dat_inic,
             estrut.dat_fim, -- dat_fim,
             1, -- qt_repasse,
             decode(criterio.nrqtusuario_inicio,
                    0,
                    1,
                    criterio.nrqtusuario_inicio), -- qtusu_inicial
             decode(criterio.nrqtusuario_fim,
                    0,
                    999999,
                    criterio.nrqtusuario_fim), -- qtusu_final
             gp.regra_menslid_criter_seq.nextval);

        end loop; -- loop criterio

      end loop; -- loop estruturas

    end loop; -- loop regras

    --Migracao dos historicos de precos dos planos de saude do Unicoo que nao viraram modelo
    --As regras criadas nesta fase nao terão estruturas associadas a ela.

--VERSÃO ORIGINAL (14/08/2018). NOVA VERSÃO ABAIXO (ALEX BOEIRA)
/*
    for hregras in (select 'HISTORICO PRECO - PLANO DE SAUDE: ' || pr.cdcontrato || ' - DESCRICAO: ' || cp.nocontrato des_regra,

                            --pr.dtinicio_vigencia dat_inic,
                            --nvl(pr.dtfinal_vigencia,'31/12/9999') dat_fim,

                            cp.dtinivigen dat_inic,
                            nvl(cp.dtfimvigen,'31/12/9999') dat_fim,

                            pr.nrtabela_padrao nrtabela_padrao, pr.nrcontrato nrcontrato
                     from preco_referencia_padrao pr, contrato_padrao cp
                     where pr.cdcontrato = cp.cdcontrato
                    order by 1)
    loop

      vnr_regra := vnr_regra + 1;

      --insere a tabela do plano de saude
      insert into gp.regra_menslid
        (cdd_regra,
         des_regra,
         dat_inic,
         dat_fim,
         des_obs,
         cdn_tip_idx,
         in_tipo_regra,
         log_livre_1, --indicador se é regra modelo
         progress_recid)
      values
        (vnr_regra,
         hregras.des_regra,
         trunc(hregras.dat_inic, 'mm'), --primeiro dia do mês
         last_day(hregras.dat_fim), --ultimo dia do mês
         ' ',
         1,
         1,
         0, -- 1: é regra modelo; 0: é regra de um contrato/beneficiário
         gp.regra_menslid_seq.nextval);

        --insere os criterios da estrutura
        for hcriterio in (select case
                                  when p.cdusucateg <> '*' then
                                   nvl((select distinct cdvalor_externo
                                         from mig_tab_conversao     r,
                                              mig_tab_conversao_exp re,
                                              tipo_de_usuario       tu
                                        where r.nrseq =
                                              re.nrseq_tab_conversao
                                          and r.notabela =
                                              'MIGRACAO_GRAU_PARENTESCO'
                                          and re.cdvalor_interno =
                                              tu.tpusuario
                                          and tu.cdusucateg = p.cdusucateg),
                                       '0')
                                  else
                                   case
                                     when p.tpdependente = 'T' then
                                      '01'
                                     when p.tpdependente = 'A' then
                                      f_tm_parametro('CDGRAU_AGREGADO')
                                     else
                                      '00'
                                   end
                                end cd_grau_parentesco,
                                cp.cdcontrato pl_saude,
                                cp.dtinivigen ini_vigencia_pl,
                                cp.dtfimvigen fim_vigencia_pl,
                                --pr.dtinicio_vigencia ini_vigencia_preco,
                                --Nvl(pr.dtfinal_vigencia,to_date('31/12/9999','DD/MM/YYYY')) fim_vigencia_preco,

                                decode(p.nrperiodo_ult_reajuste,0,cp.dtinivigen,'01/'||substr(p.nrperiodo_ult_reajuste,5,2) || '/' ||
                                                                                       substr(p.nrperiodo_ult_reajuste,1,4)) ini_vigencia_preco,
                                nvl(
                                   nvl(
                                    (select to_date(min('01/' || substr(pcp.nrperiodo_ult_reajuste,5,2) || '/' || substr(pcp.nrperiodo_ult_reajuste,1,4)),'DD/MM/YYYY') - 1
                                       from preco_contrato_padrao pcp
                                      where pcp.nrtabela_padrao        = p.nrtabela_padrao
                                        and pcp.nrperiodo_ult_reajuste > p.nrperiodo_ult_reajuste),
                                    cp.dtfimvigen), '31/12/9999') fim_vigencia_preco,
                                p.*
                           from preco_contrato_padrao p, preco_referencia_padrao pr, contrato_padrao cp
                          where pr.nrtabela_padrao = p.nrtabela_padrao
                            and cp.cdcontrato      = pr.cdcontrato
                            and p.nrtabela_padrao  = hregras.nrtabela_padrao
                          order by p.nrperiodo_ult_reajuste,
                                   p.cdcategserv,
                                   p.tpplano,
                                   p.cdusucateg,
                                   p.tpdependente,
                                   nrqtusuario_inicio,
                                   nridade_inicio) loop

          --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
          if (hcriterio.nrperiodo_ult_reajuste || '-' || hcriterio.cdcategserv || '-' || hcriterio.tpplano || '-' ||
             hcriterio.cdusucateg || '-' || hcriterio.tpdependente || '-' ||
             hcriterio.nrqtusuario_inicio) <> vcd_chave_preco then
            vcd_chave_preco := hcriterio.nrperiodo_ult_reajuste || '-' ||
                               hcriterio.cdcategserv || '-' ||
                               hcriterio.tpplano || '-' ||
                               hcriterio.cdusucateg || '-' ||
                               hcriterio.tpdependente || '-' ||
                               hcriterio.nrqtusuario_inicio;
            vnr_faixa       := 1;

          else
            vnr_faixa := vnr_faixa + 1;
          end if;

          vaomigrar := 'S';

          begin
            select re.cdvalor_externo
              into vnr_modulo_mens
              from mig_tab_conversao r, mig_tab_conversao_exp re
             where r.nrseq = re.nrseq_tab_conversao
               and r.notabela = 'MIGRACAO_MODULO'
               and re.cdvalor_interno = hcriterio.cdcategserv;
          exception
            when no_data_found then
              vaomigrar := 'N';
          end;

          insert into gp.regra_menslid_criter
            (cdd_id,
             cdd_regra,
             u##cd_padrao_cobertura,
             cd_padrao_cobertura,
             cd_modulo,
             cd_grau_parentesco,
             nr_faixa_etaria,
             nr_idade_minima,
             nr_idade_maxima,
             vl_mensalidade_base,
             vl_taxa_inscricao,
             dat_inic,
             dat_fim,
             qt_repasse,
             num_livre_1,
             num_livre_2,
             progress_recid)
          values
            (seq_cdd_id.nextval,
             vnr_regra,
             null,--estrut.cd_padrao_cobertura,
             null,--estrut.cd_padrao_cobertura,
             vnr_modulo_mens, -- modulo da mensalidade
             hcriterio.cd_grau_parentesco,
             vnr_faixa,
             hcriterio.nridade_inicio,
             hcriterio.nridade_fim,
             hcriterio.vlpreco_mensal, -- vl_mensalidade_base,
             hcriterio.vlpreco_inscricao, -- vl_taxa_inscricao,
             hcriterio.ini_vigencia_preco, -- dat_inic,
             hcriterio.fim_vigencia_preco, -- dat_fim,
             1, -- qt_repasse,
             decode(hcriterio.nrqtusuario_inicio,
                    0,
                    1,
                    hcriterio.nrqtusuario_inicio), -- qtusu_inicial
             decode(hcriterio.nrqtusuario_fim,
                    0,
                    999999,
                    hcriterio.nrqtusuario_fim), -- qtusu_final
             gp.regra_menslid_criter_seq.nextval);

        end loop; -- loop hcriterio

    end loop; --loop hregras
*/

    -- 14/08/2018 - ALEX BOEIRA
    -- NOVA VERSAO COM AJUSTES SOLICITADOS POR STEPHANY (UNIMED NOVA IGUACU) EM 15/08/2018:
    -- CONCATENAR NRCONTRATO NA DESCRICAO DA REGRA;
    -- NAO FORCAR 1o E ULTIMO DIA, E SIM RESPEITAR O REAL DO UNICOO
    -- TABELAS QUE POSSUEM REGISTRO COM E SEM REAJUSTE, CONSIDERAR APENAS O REAJUSTE, POIS O OUTRO
    -- EH VISTO COMO UM "RASCUNHO"

    begin
      select nvl(max(r.cdd_regra),0) into vnr_regra from gp.regra_menslid r;
    exception
      when no_data_found then
        vnr_regra := 0;
    end;

    for hregras in (select 'HISTORICO PRECO: ' || pr.cdcontrato ||
                           ' NRCONTRATO: ' || pr.nrcontrato || ' DESC: ' || cp.nocontrato des_regra,

                            --isso colocava a abrangencia do contrato ao inves da regra. substituido pelas linhas abaixo
                            --cp.dtinivigen dat_inic,
                            --nvl(cp.dtfimvigen,'31/12/9999') dat_fim,

                            nvl(pr.dtinicio_vigencia,'01/01/1900') dat_inic,
                            nvl(pr.dtfinal_vigencia,'31/12/9999') dat_fim,

                            pr.nrtabela_padrao nrtabela_padrao, pr.nrcontrato nrcontrato,
                            ta.cd_padrao_cobertura
                     from preco_referencia_padrao pr, contrato_padrao cp,
                          temp_depara_agrupado ta,
                          temp_depara_detalhado td
                     where pr.cdcontrato = cp.cdcontrato
                       and ta.cdcontrato = td.cdcontrato_agr
                       and td.cdcontrato = cp.cdcontrato
                    order by 2,1)
    loop

      vnr_regra := vnr_regra + 1;

      --insere a tabela do plano de saude
      insert into gp.regra_menslid
        (cdd_regra,
         des_regra,
         dat_inic,
         dat_fim,
         des_obs,
         cdn_tip_idx,
         in_tipo_regra,
         log_livre_1, --indicador se é regra modelo
         progress_recid)
      values
        (vnr_regra,
         hregras.des_regra,

         --trunc(hregras.dat_inic, 'mm'), --primeiro dia do mês -- substituido pelas linhas abaixo (respeitar data real do Unicoo)
         --last_day(hregras.dat_fim), --ultimo dia do mês

         hregras.dat_inic,
         hregras.dat_fim,

         ' ', --des_obs
         1,   --cdn_tip_idx
         1,   --in_tipo_regra
         0, -- 1: é regra modelo; 0: é regra de um contrato/beneficiário
         gp.regra_menslid_seq.nextval);

        --insere os criterios da estrutura
        for hcriterio in (select case
                                  when p.cdusucateg <> '*' then
                                   nvl((select distinct cdvalor_externo
                                         from mig_tab_conversao     r,
                                              mig_tab_conversao_exp re,
                                              tipo_de_usuario       tu
                                        where r.nrseq =
                                              re.nrseq_tab_conversao
                                          and r.notabela =
                                              'MIGRACAO_GRAU_PARENTESCO'
                                          and re.cdvalor_interno =
                                              tu.tpusuario
                                          and tu.cdusucateg = p.cdusucateg),
                                       '0')
                                  else
                                   case
                                     when p.tpdependente = 'T' then
                                      '01'
                                     when p.tpdependente = 'A' then
                                      f_tm_parametro('CDGRAU_AGREGADO')
                                     else
                                      '00'
                                   end
                                end cd_grau_parentesco,
                                cp.cdcontrato pl_saude,

                                --cp.dtinivigen ini_vigencia_pl,
                                --cp.dtfimvigen fim_vigencia_pl,
                                --pr.dtinicio_vigencia ini_vigencia_preco,
                                --Nvl(pr.dtfinal_vigencia,to_date('31/12/9999','DD/MM/YYYY')) fim_vigencia_preco,

                                --forcava inicio do CONTRATO_PADRAO quando nao tem reajuste
                                --decode(p.nrperiodo_ult_reajuste,0,cp.dtinivigen,'01/'||substr(p.nrperiodo_ult_reajuste,5,2) || '/' ||
                                --                                                       substr(p.nrperiodo_ult_reajuste,1,4)) ini_vigencia_preco,

                                --trocado para considerar vigencia da regra
                                nvl(decode(p.nrperiodo_ult_reajuste,0,pr.dtinicio_vigencia,'01/'||substr(p.nrperiodo_ult_reajuste,5,2) || '/' ||
                                                                                       substr(p.nrperiodo_ult_reajuste,1,4)),'01/01/1900') ini_vigencia_preco,

                                --forcava fim do CONTRATO_PADRAO quando nao tem reajuste
                                --nvl(
                                --   nvl(
                                --    (select to_date(min('01/' || substr(pcp.nrperiodo_ult_reajuste,5,2) || '/' || substr(pcp.nrperiodo_ult_reajuste,1,4)),'DD/MM/YYYY') - 1
                                --       from preco_contrato_padrao pcp
                                --      where pcp.nrtabela_padrao        = p.nrtabela_padrao
                                --        and pcp.nrperiodo_ult_reajuste > p.nrperiodo_ult_reajuste),
                                --    cp.dtfimvigen), '31/12/9999') fim_vigencia_preco,

                                --trocado para considerar vigencia da regra
                                nvl(
                                   nvl(
                                    (select to_date(min('01/' || substr(pcp.nrperiodo_ult_reajuste,5,2) || '/' || substr(pcp.nrperiodo_ult_reajuste,1,4)),'DD/MM/YYYY') - 1
                                       from preco_contrato_padrao pcp
                                      where pcp.nrtabela_padrao        = p.nrtabela_padrao
                                        and pcp.nrperiodo_ult_reajuste > p.nrperiodo_ult_reajuste),
                                    pr.dtfinal_vigencia), '31/12/9999') fim_vigencia_preco,

                                p.*
                           from preco_contrato_padrao p, preco_referencia_padrao pr, contrato_padrao cp
                          where pr.nrtabela_padrao = p.nrtabela_padrao
                            and cp.cdcontrato      = pr.cdcontrato
                            and p.nrtabela_padrao  = hregras.nrtabela_padrao

                            and not exists(select 1 from preco_contrato_padrao pcp
                                                   where pcp.nrtabela_padrao = p.nrtabela_padrao
                                                     and pcp.CDCATEGSERV = p.CDCATEGSERV
                                                     and pcp.TPPLANO = p.TPPLANO
                                                     and pcp.CDUSUCATEG = p.CDUSUCATEG
                                                     and pcp.TPDEPENDENTE = p.TPDEPENDENTE
                                                     and pcp.CDINTERCAMBIO = p.CDINTERCAMBIO
                                                     and pcp.NRIDADE_INICIO = p.NRIDADE_INICIO
                                                     and pcp.NRQTUSUARIO_INICIO = p.NRQTUSUARIO_INICIO
                                                     and pcp.NRPERIODO_ULT_REAJUSTE > p.NRPERIODO_ULT_REAJUSTE
                                                     and pcp.TPCARENCIA = p.TPCARENCIA
                                                     and pcp.CDAREAACAO = p.CDAREAACAO)

                          order by p.nrperiodo_ult_reajuste,
                                   p.cdcategserv,
                                   p.tpplano,
                                   p.cdusucateg,
                                   p.tpdependente,
                                   nrqtusuario_inicio,
                                   nridade_inicio) loop

          --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
          if (hcriterio.nrperiodo_ult_reajuste || '-' || hcriterio.cdcategserv || '-' || hcriterio.tpplano || '-' ||
             hcriterio.cdusucateg || '-' || hcriterio.tpdependente || '-' ||
             hcriterio.nrqtusuario_inicio) <> vcd_chave_preco then
            vcd_chave_preco := hcriterio.nrperiodo_ult_reajuste || '-' ||
                               hcriterio.cdcategserv || '-' ||
                               hcriterio.tpplano || '-' ||
                               hcriterio.cdusucateg || '-' ||
                               hcriterio.tpdependente || '-' ||
                               hcriterio.nrqtusuario_inicio;
            vnr_faixa       := 1;

          else
            vnr_faixa := vnr_faixa + 1;
          end if;

          vaomigrar := 'S';

          begin
            select re.cdvalor_externo
              into vnr_modulo_mens
              from mig_tab_conversao r, mig_tab_conversao_exp re
             where r.nrseq = re.nrseq_tab_conversao
               and r.notabela = 'MIGRACAO_MODULO'
               and re.cdvalor_interno = hcriterio.cdcategserv;
          exception
            when no_data_found then
              vaomigrar := 'N';
          end;

          insert into gp.regra_menslid_criter
            (cdd_id,
             cdd_regra,
             u##cd_padrao_cobertura,
             cd_padrao_cobertura,
             cd_modulo,
             cd_grau_parentesco,
             nr_faixa_etaria,
             nr_idade_minima,
             nr_idade_maxima,
             vl_mensalidade_base,
             vl_taxa_inscricao,
             dat_inic,
             dat_fim,
             qt_repasse,
             num_livre_1,
             num_livre_2,
             progress_recid)
          values
            (seq_cdd_id.nextval,
             vnr_regra,
             upper(hregras.cd_padrao_cobertura), -- ' ',--estrut.cd_padrao_cobertura,
             hregras.cd_padrao_cobertura, --' ',--estrut.cd_padrao_cobertura,
             vnr_modulo_mens, -- modulo da mensalidade
             hcriterio.cd_grau_parentesco,
             vnr_faixa,
             hcriterio.nridade_inicio,
             hcriterio.nridade_fim,
             hcriterio.vlpreco_mensal, -- vl_mensalidade_base,
             hcriterio.vlpreco_inscricao, -- vl_taxa_inscricao,
             hcriterio.ini_vigencia_preco, -- dat_inic,
             hcriterio.fim_vigencia_preco, -- dat_fim,
             1, -- qt_repasse,
             decode(hcriterio.nrqtusuario_inicio,
                    0,
                    1,
                    hcriterio.nrqtusuario_inicio), -- qtusu_inicial
             decode(hcriterio.nrqtusuario_fim,
                    0,
                    999999,
                    hcriterio.nrqtusuario_fim), -- qtusu_final
             gp.regra_menslid_criter_seq.nextval);

        end loop; -- loop hcriterio

    end loop; --loop hregras

  end p_migra_regra_estrutura;

  /*========================================================================================
   =  Procedure : p_migra_regra_proposta                                     Antônio Prado =
   =                                                                                       =
   =  Objetivo  : migrar os preços de todas as competência das tabelas de preços do Unicoo =
   =              para o TOTVS. As tabelas de preço do contrato (nrregistro + nrcontrato)  =
   =              irão virar uma regra no TOTVS com os preços do contrato. Caso existam    =
   =              preços por usuário, família ou lotação, estes preços irão virar novas    =
   =              regras, respeitando uma regra por usuário, família ou lotação distinta.  =
   =                                                                            18/11/2016 =
   = ATENÇÃO:     esse metodo foi substituido por p_migra_regra_proposta2 (abaixo) -       =
   =              Alex Boeira 7/7/18                                                       =
   =========================================================================================
  */

/*procedure p_migra_regra_proposta (pAoSimular  in varchar2 default 'N',
                                  pNrregistro In Number Default Null,
                                  pNrcontrato In Varchar2 Default Null) is
--Evandro Levi (16/05/2018): Adicionado parametros de chamada para agilizar o processamento
--                             individual por contratos
    vnrregistro      number := 0;
    vnrcontrato      varchar2(4) := ' ';
    vnrfamilia       number := 0;
    vnrseq_usu       number := 0;
    vcdlotacao       varchar2(8) := ' ';
    vnr_regra        number := 0;
    vcd_modalidade   number := 0;
    vcd_plano        number := 0;
    vcd_tipo_plano   number := 0;
    vnr_faixa        number := 0;
    vcd_chave_preco  varchar2(40) := ' ';
    vddtini_contrato date := '01/01/1900';
    vddtfim_contrato date := '31/12/9999';
    vddtfim_reajuste date := '31/12/9999';
    vddat_inic       date := '01/01/1900';
    vddat_fim        date := '31/12/9999';
    vnr_proposta     number := 0;
    vnr_seq_usuario  number := 0;
    vtpusuario       varchar2(2);

  begin
    --Busca o último número de regra que existe após a migração das regras da estrutura
    begin
      select nvl(max(r.cdd_regra),0) into vnr_regra from gp.regra_menslid r;
    exception
      when no_data_found then
        vnr_regra := 0;
    end;

    \*=====================================================================================
     =  Inicio do processo que migra os preços do contrato.                               =
     =  cada nrregistro + nrcontrato = 1 regra                                            =
     ======================================================================================
    *\

    --Busca todas as tabelas de precos do Unicoo com pelo menos 1 preço do contrato
    for tab_preco_refer in (select prc.nrtabela_contrato,
                                   prc.nrregistro,
                                   prc.nrcontrato,
                                   prc.nrtabela_padrao_origem,
                                   'PRECO ' || decode(ctp.tpusu_contrato,
                                                      'E',
                                                      'PJ',
                                                      'P',
                                                      'PF',
                                                      'C',
                                                      'COOP',
                                                      'UNI') ||
                                   ' CONTRATO: ' || prc.nrcontrato ||
                                   '                                  ' des_regra,
                                   prc.aopreco_por_qtde_dependente,
                                   prc.dtultimo_reajuste,
                                   prc.nrperiodo_proximo_reajuste,
                                   (substr(prc.nrperiodo_proximo_reajuste,
                                           1,
                                           4) - 1) ||
                                   substr(prc.nrperiodo_proximo_reajuste,
                                          5,
                                          2) reaj_atual, --proximo reajuste -1 ano (ultimo)
                                   prc.nrperiodo_inicio,
                                   prc.cdlotacao,
                                   cp.dtiniciocontrato dat_inic,
                                   nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                   (Select nvl(max(cdn_tip_idx), 1) \*valor '1' é default*\
                                    From   depara_indice_financeiro
                                    Where  cdindice = cp.cdindice) cdn_tip_idx
                              from preco_referencia_contrato prc,
                                   contrato_da_pessoa        cp,
                                   contrato_padrao           ctp,
                                   preco_referencia_padrao   prp
                             where cp.nrregistro = prc.nrregistro
                               and cp.nrcontrato = prc.nrcontrato

                               And (cp.nrregistro = pNrregistro Or pNrregistro Is Null)
                               And (cp.nrcontrato = pNrcontrato Or pNrcontrato Is Null)

                               and ctp.cdcontrato(+) = cp.cdcontrato_padrao
                               and prp.nrtabela_padrao =
                                   prc.nrtabela_padrao_origem
                               and exists
                             (select 1
                                      from preco_contrato_pessoa pcp
                                     where pcp.nrtabela_contrato =
                                           prc.nrtabela_contrato
                                       and pcp.nrfamilia = 0
                                       and pcp.nrsequencial_usuario = 0
                                       and pcp.cdlotacao = '*')
                             order by prc.nrregistro,
                                      prc.nrcontrato,
                                      prc.nrtabela_contrato) loop

      --Se é um novo contrato da pessoa é criada uma nova regra
      if (tab_preco_refer.nrregistro <> vnrregistro or
         tab_preco_refer.nrcontrato <> vnrcontrato) then
        vnr_regra   := vnr_regra + 1;
        vnrregistro := tab_preco_refer.nrregistro;
        vnrcontrato := tab_preco_refer.nrcontrato;

        --Buscar a família para completar o nome da regra
        select nvl(min(nrfamilia), 0)
          into vnrfamilia
          from familia f
         where f.nrcontrato = tab_preco_refer.nrcontrato
           and f.nrregistro = tab_preco_refer.nrregistro;

        if vnrfamilia <> 0 then
          tab_preco_refer.des_regra := trim(tab_preco_refer.des_regra) ||
                                       ' FAMILIA: ' ||
                                       lpad(vnrfamilia, 6, '0');
        else
          tab_preco_refer.des_regra := trim(tab_preco_refer.des_regra);
        end if;

        --insere a regra para a estrutura
        p_insert_regra_menslid(pAoSimular,
                               vnr_regra,
                               tab_preco_refer.des_regra,
                               tab_preco_refer.dat_inic,
                               tab_preco_refer.dat_fim,
                               tab_preco_refer.cdn_tip_idx);

        --Localiza a estrutura da tabela no de/para de planos
        begin
          select ta.cd_modalidade, ta.cd_plano, ta.cd_tipo_plano
            into vcd_modalidade, vcd_plano, vcd_tipo_plano
            from preco_referencia_padrao pp,
                 temp_depara_detalhado   td,
                 temp_depara_agrupado    ta
           where pp.nrtabela_padrao =
                 tab_preco_refer.nrtabela_padrao_origem --join com a nrtabela origem do loop
             and pp.cdcontrato = td.cdcontrato --join plano detalhado
             and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
             and rownum = 1;

        exception
          when no_data_found then
            null;
        end;

        --Localizar as proposta
        for prop_contr in (select ip.num_livre_10
                             from import_propost ip
                            where ip.num_livre_2 =
                                  tab_preco_refer.nrregistro
                              and ip.num_livre_3 =
                                  tab_preco_refer.nrcontrato
                              and ip.num_livre_4 = vnrfamilia
                              and ip.cd_modalidade = vcd_modalidade) loop

          vnr_proposta := prop_contr.num_livre_10;

          --insere a estrutura da regra
          p_insert_regra_menslid_estrut(pAoSimular,
                                        vnr_regra,
                                        vcd_modalidade,
                                        vcd_plano,
                                        vcd_tipo_plano,
                                        tab_preco_refer.dat_inic,
                                        tab_preco_refer.dat_fim,
                                        vnr_proposta,
                                        0);
        end loop;

        --insere a data de reajuste da regra
        p_insert_regra_menslid_reaj(pAoSimular, vnr_regra, tab_preco_refer.reaj_atual);

      end if; --criação da regra

      --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
      --Antonio 19/11/2016
      insert into temp_depara_tabela_preco
      values
        (tab_preco_refer.nrtabela_contrato, --Tabela de Preços do Unicoo
         vnr_regra, --Código da Regra que virou no TOTVS
         null, --Código da Família quando preço por familia
         null, --Código do Usuario quando preço por usuario
         null); --Código da Lotação quando preço por lotacao

      --Varre os valores da tabela de referência na preco_contrato_pessoa
      for preco_tab in (select case
                                 when pc.cdusucateg <> '*' then
                                  nvl(\*(select distinct cdvalor_externo
                                        from mig_tab_conversao     r,
                                             mig_tab_conversao_exp re,
                                             tipo_de_usuario       tu
                                       where r.nrseq = re.nrseq_tab_conversao
                                         and r.notabela =
                                             'MIGRACAO_GRAU_PARENTESCO'
                                         and re.cdvalor_interno =
                                             tu.tpusuario
                                         and tu.cdusucateg = pc.cdusucateg)*\
                                 (select tgp.cdvalores_externo
                                    from temp_grau_paren tgp, tipo_de_usuario tu
                                   where tgp.cdvalor_interno = tu.tpusuario
                                     and tu.cdusucateg = pc.cdusucateg)

                                         ,
                                      '0')
                                 else
                                  case
                                    when pc.tpdependente = 'T' then
                                     '01'
                                    when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                    else
                                     '00'
                                  end
                               end cd_grau_parentesco,
                               rm.cdvalor_externo cd_modulo,
                               pc.*,
                               ta.cd_padrao_cobertura,
                               '01/' ||
                               substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                               substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                               decode(pc.nrqtusuario_inicio,
                                      0,
                                      1,
                                      pc.nrqtusuario_inicio) nrqtusu_ini,
                               decode(pc.nrqtusuario_fim,
                                      0,
                                      999999,
                                      pc.nrqtusuario_fim) nrqtusu_fim
                          from preco_contrato_pessoa pc,
                               preco_referencia_contrato prc,
                               preco_referencia_padrao prp,
                               temp_depara_detalhado td,
                               temp_depara_agrupado ta,
                               (select cdvalor_externo, cdvalor_interno
                                  from mig_tab_conversao     tc,
                                       mig_tab_conversao_exp ce
                                 where notabela = 'MIGRACAO_MODULO'
                                   and tc.nrseq = ce.nrseq_tab_conversao) rm
                         where pc.nrtabela_contrato =
                               tab_preco_refer.nrtabela_contrato --nrtabela do loop da tabela referencia
                           and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                           and prp.nrtabela_padrao =
                               prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                           and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                           and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                           and pc.nrfamilia = 0
                           and pc.nrsequencial_usuario = 0
                           and pc.cdlotacao = '*'
                         order by pc.nrperiodo_ult_reajuste,
                                  pc.cdcategserv,
                                  pc.tpplano,
                                  pc.cdusucateg,
                                  pc.tpdependente,
                                  pc.nrqtusuario_inicio,
                                  pc.nridade_inicio) loop
        --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
        if (preco_tab.nrperiodo_ult_reajuste || '-' ||
           preco_tab.cdcategserv || '-' || preco_tab.tpplano || '-' ||
           preco_tab.cdusucateg || '-' || preco_tab.tpdependente || '-' ||
           preco_tab.nrqtusuario_inicio) <> vcd_chave_preco then
          vcd_chave_preco := preco_tab.nrperiodo_ult_reajuste || '-' ||
                             preco_tab.cdcategserv || '-' ||
                             preco_tab.tpplano || '-' ||
                             preco_tab.cdusucateg || '-' ||
                             preco_tab.tpdependente || '-' ||
                             preco_tab.nrqtusuario_inicio;
          vnr_faixa       := 1;

          --identificar a data inicio e fim de validade do preço
          --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
          --montá-la a partir do início do contrato
          begin
            select dtiniciocontrato, dtfimcontrato
              into vddtini_contrato, vddtfim_contrato
              from contrato_da_pessoa cdp
             where cdp.nrregistro = tab_preco_refer.nrregistro
               and cdp.nrcontrato = tab_preco_refer.nrcontrato;
          exception
            when no_data_found then
              vddtini_contrato := '01/01/1900';
              vddtfim_contrato := '31/12/9999';
          end;

          -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
          if preco_tab.nrperiodo_ult_reajuste <> 0 then
            vddtini_contrato := preco_tab.dat_inic;
          end if;

          --identificar a data fim de validade do preço
          begin
            --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
            --ex: atual 201509 prox 201609 então 31/08/2016
            --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
            select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                            substr(periodo_fim, 1, 4),
                            'DD/MM/YYYY') - 1)
              into vddtfim_reajuste
              from (select decode(min(nrperiodo_ult_reajuste),
                                  null,
                                  '999912',
                                  min(nrperiodo_ult_reajuste)) periodo_fim
                      from preco_contrato_pessoa pc1
                     where pc1.nrtabela_contrato =
                           preco_tab.nrtabela_contrato
                       and pc1.nrperiodo_ult_reajuste >
                           preco_tab.nrperiodo_ult_reajuste);
            --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
            if (vddtfim_contrato is not null) and
               (vddtfim_reajuste = '30/11/9999') then
              vddtfim_reajuste := vddtfim_contrato;
            end if;
            --se a data fim é 30/11/9999 virará 31/12/9999
            if vddtfim_reajuste = '30/11/9999' then
              vddtfim_reajuste := '31/12/9999';
            end if;
          exception
            when no_data_found then
              null;
          end;

          vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
          vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

        else
          vnr_faixa := vnr_faixa + 1;
        end if;

        --insere os criterios da regra
        p_insert_regra_menslid_criter(pAoSimular,
                                      vnr_regra,
                                      preco_tab.cd_padrao_cobertura,
                                      preco_tab.cd_modulo,
                                      preco_tab.cd_grau_parentesco,
                                      vnr_faixa,
                                      preco_tab.nridade_inicio,
                                      preco_tab.nridade_fim,
                                      preco_tab.vlpreco_mensal,
                                      preco_tab.vlpreco_inscricao,
                                      vddat_inic,
                                      vddat_fim,
                                      preco_tab.nrqtusu_ini,
                                      preco_tab.nrqtusu_fim);
      end loop; --preco_tab  --loop dos precos da tabela

    end loop; --tab_preco_refer  --loop das tabelas

    \*=====================================================================================
     =  Inicio do processo que migra os preços específicos por família do contrato        =
     =  cada nrregistro + nrcontrato + nrfamilia = 1 regra                                =
     ======================================================================================
    *\

    for tab_preco_fam in (select distinct prc.nrtabela_contrato,
                                          prc.nrregistro,
                                          prc.nrcontrato,
                                          prc.nrtabela_padrao_origem,
                                          'PRECO ' ||
                                          decode(ctp.tpusu_contrato,
                                                 'E',
                                                 'PJ',
                                                 'P',
                                                 'PF',
                                                 'C',
                                                 'COOP',
                                                 'UNI') ||
                                          ' FAMILIA - CONTR: ' ||
                                          prc.nrcontrato || ' FAM: ' ||
                                          lpad(pcp.nrfamilia, 6, '0') des_regra,
                                          prc.aopreco_por_qtde_dependente,
                                          prc.dtultimo_reajuste,
                                          prc.nrperiodo_proximo_reajuste,
                                          (substr(prc.nrperiodo_proximo_reajuste,
                                                  1,
                                                  4) - 1) ||
                                          substr(prc.nrperiodo_proximo_reajuste,
                                                 5,
                                                 2) reaj_atual,
                                          prc.nrperiodo_inicio,
                                          prc.cdlotacao,
                                          cp.dtiniciocontrato dat_inic,
                                          nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                          pcp.nrfamilia,
                                          (Select nvl(max(cdn_tip_idx), 1) \*valor '1' é default*\
                                           From   depara_indice_financeiro
                                           Where  cdindice = cp.cdindice) cdn_tip_idx
                            from preco_referencia_contrato prc,
                                 contrato_da_pessoa        cp,
                                 contrato_padrao           ctp,
                                 preco_referencia_padrao   prp,
                                 preco_contrato_pessoa     pcp
                           where cp.nrregistro = prc.nrregistro

                               --teste isolando um contrato
                               --and(cp.nrregistro = vnrregistro_fixo or vnrregistro_fixo = 0)
                               --and(cp.nrcontrato = vnrcontrato_fixo or vnrcontrato_fixo = ' ')
                               And (cp.nrregistro = pNrregistro Or pNrregistro Is Null)
                               And (cp.nrcontrato = pNrcontrato Or pNrcontrato Is Null)

                             and cp.nrcontrato = prc.nrcontrato
                             and ctp.cdcontrato(+) = cp.cdcontrato_padrao
                             and prp.nrtabela_padrao =
                                 prc.nrtabela_padrao_origem
                             and pcp.nrtabela_contrato =
                                 prc.nrtabela_contrato
                             and pcp.nrfamilia <> 0

                             --Evandro Levi (16/05/2018): Validação para não utilizar preço específico
                             --                             por família se nenhum usuário da família estiver
                             --                             vinculada com a tabela de preço listada
                             And Exists (Select 1 From usuario
                                         Where nrregistro = prc.nrregistro
                                         And   nrcontrato = prc.nrcontrato
                                         And   nrfamilia = pcp.nrfamilia
                                         And   nrtabela_contrato = pcp.nrtabela_contrato)

                          --and prc.nrtabela_contrato in (74018,115070,115071,115200)  --************************ teste
                           order by prc.nrregistro,
                                    prc.nrcontrato,
                                    pcp.nrfamilia,
                                    prc.nrtabela_contrato) loop

      --Se é um novo contrato da pessoa ou nova família é criada uma nova regra
      if (tab_preco_fam.nrregistro <> vnrregistro or
         tab_preco_fam.nrcontrato <> vnrcontrato or
         tab_preco_fam.nrfamilia <> vnrfamilia) then
        vnr_regra   := vnr_regra + 1;
        vnrregistro := tab_preco_fam.nrregistro;
        vnrcontrato := tab_preco_fam.nrcontrato;
        vnrfamilia  := tab_preco_fam.nrfamilia;

        --insere a regra para a estrutura
        p_insert_regra_menslid(pAoSimular,
                               vnr_regra,
                               tab_preco_fam.des_regra,
                               tab_preco_fam.dat_inic,
                               tab_preco_fam.dat_fim,
                               tab_preco_fam.cdn_tip_idx);

        --insere a data de reajuste da regra
        p_insert_regra_menslid_reaj(pAoSimular,
                                    vnr_regra, tab_preco_fam.reaj_atual);

        --Localiza a estrutura da tabela no de/para de planos
        begin
          select ta.cd_modalidade, ta.cd_plano, ta.cd_tipo_plano
            into vcd_modalidade, vcd_plano, vcd_tipo_plano
            from preco_referencia_padrao pp,
                 temp_depara_detalhado   td,
                 temp_depara_agrupado    ta
           where pp.nrtabela_padrao = tab_preco_fam.nrtabela_padrao_origem --join com a nrtabela origem do loop
             and pp.cdcontrato = td.cdcontrato --join plano detalhado
             and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
             and rownum = 1;

        exception
          when no_data_found then
            null;
        end;

        --Localizar o código da proposta e dos beneficiarios da família
        for usu_fam in (select nrsequencial_usuario
                          from usuario u
                         where u.nrregistro = tab_preco_fam.nrregistro
                           and u.nrcontrato = tab_preco_fam.nrcontrato
                           and u.nrfamilia = tab_preco_fam.nrfamilia) loop

          begin
            select u.nr_proposta, u.cd_usuario
              into vnr_proposta, vnr_seq_usuario
              from import_bnfciar ib, gp.usuario u
             where ib.num_seqcial_bnfciar = usu_fam.nrsequencial_usuario
               and u.cd_carteira_antiga = ib.cd_carteira_antiga
               and u.cd_modalidade = vcd_modalidade;
          exception
            when no_data_found then
              null;
          end;

          --insere a estrutura da regra
          p_insert_regra_menslid_estrut(pAoSimular,
                                        vnr_regra,
                                        vcd_modalidade,
                                        vcd_plano,
                                        vcd_tipo_plano,
                                        tab_preco_fam.dat_inic,
                                        tab_preco_fam.dat_fim,
                                        vnr_proposta,
                                        vnr_seq_usuario);
        end loop;
      end if; --criação da regra

      --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
      --Antonio 19/11/2016
      insert into temp_depara_tabela_preco
      values
        (tab_preco_fam.nrtabela_contrato, --Tabela de Preços do Unicoo
         vnr_regra, --Código da Regra que virou no TOTVS
         tab_preco_fam.nrfamilia, --Código da Família quando preço por familia
         null, --Código do Usuario quando preço por usuario
         null); --Código da Lotação quando preço por lotacao

      --Varre os valores da tabela de referência na preco_contrato_pessoa procurando os valores da familia
      for preco_fam in (select '0' cd_grau_parentesco,
                               rm.cdvalor_externo cd_modulo,
                               pc.CDCATEGSERV,
                               pc.TPPLANO,
                               pc.CDUSUCATEG,
                               pc.TPDEPENDENTE,
                               pc.NRIDADE_INICIO,
                               pc.NRIDADE_FIM,
                               pc.NRQTUSUARIO_INICIO,
                               pc.NRQTUSUARIO_FIM,
                               pc.NRPERIODO_ULT_REAJUSTE,
                               pc.VLPRECO_MENSAL,
                               pc.VLPRECO_INSCRICAO,
                               pc.NRSEQUENCIAL_USUARIO,
                               pc.NRFAMILIA,
                               pc.CDLOTACAO,
                               pc.NRTABELA_CONTRATO,
                               ta.cd_padrao_cobertura,
                               '01/' ||
                               substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                               substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                               decode(pc.nrqtusuario_inicio,
                                      0,
                                      1,
                                      pc.nrqtusuario_inicio) nrqtusu_ini,
                               decode(pc.nrqtusuario_fim,
                                      0,
                                      999999,
                                      pc.nrqtusuario_fim) nrqtusu_fim,
                               2 origem_preco
                          from preco_contrato_pessoa pc,
                               preco_referencia_contrato prc,
                               preco_referencia_padrao prp,
                               temp_depara_detalhado td,
                               temp_depara_agrupado ta,
                               (select cdvalor_externo, cdvalor_interno
                                  from mig_tab_conversao     tc,
                                       mig_tab_conversao_exp ce
                                 where notabela = 'MIGRACAO_MODULO'
                                   and tc.nrseq = ce.nrseq_tab_conversao) rm
                         where pc.nrtabela_contrato =
                               tab_preco_fam.nrtabela_contrato --nrtabela do loop da tabela referencia
                           and pc.nrfamilia = tab_preco_fam.nrfamilia --nrfamilia do loop da tabela referencia
                           and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                           and prp.nrtabela_padrao =
                               prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                           and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                           and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato

                        union
                        --Buscar os preços do contrato das categorias que a família não possui para completar a regra
                        select '0' cd_grau_parentesco,
                               rm.cdvalor_externo cd_modulo,
                               pc.CDCATEGSERV,
                               pc.TPPLANO,
                               pc.CDUSUCATEG,
                               pc.TPDEPENDENTE,
                               pc.NRIDADE_INICIO,
                               pc.NRIDADE_FIM,
                               pc.NRQTUSUARIO_INICIO,
                               pc.NRQTUSUARIO_FIM,
                               pc.NRPERIODO_ULT_REAJUSTE,
                               pc.VLPRECO_MENSAL,
                               pc.VLPRECO_INSCRICAO,
                               pc.NRSEQUENCIAL_USUARIO,
                               pc.NRFAMILIA,
                               pc.CDLOTACAO,
                               pc.NRTABELA_CONTRATO,
                               ta.cd_padrao_cobertura,
                               '01/' ||
                               substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                               substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                               decode(pc.nrqtusuario_inicio,
                                      0,
                                      1,
                                      pc.nrqtusuario_inicio) nrqtusu_ini,
                               decode(pc.nrqtusuario_fim,
                                      0,
                                      999999,
                                      pc.nrqtusuario_fim) nrqtusu_fim,
                               1 origem_preco
                          from preco_contrato_pessoa pc,
                               preco_referencia_contrato prc,
                               preco_referencia_padrao prp,
                               temp_depara_detalhado td,
                               temp_depara_agrupado ta,
                               (select cdvalor_externo, cdvalor_interno
                                  from mig_tab_conversao     tc,
                                       mig_tab_conversao_exp ce
                                 where notabela = 'MIGRACAO_MODULO'
                                   and tc.nrseq = ce.nrseq_tab_conversao) rm
                         where pc.nrtabela_contrato =
                               tab_preco_fam.nrtabela_contrato --nrtabela do loop da tabela referencia
                           and pc.nrfamilia = 0 --preco do contrato
                           and pc.nrsequencial_usuario = 0 --preco do contrato
                           and pc.cdlotacao = '*' --preco do contrato
                           and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                           and prp.nrtabela_padrao =
                               prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                           and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                           and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                           and pc.cdcategserv not in
                               (select distinct p.cdcategserv
                                  from preco_contrato_pessoa p
                                 where p.nrtabela_contrato =
                                       pc.nrtabela_contrato
                                   and p.nrfamilia = tab_preco_fam.nrfamilia)
                         order by nrperiodo_ult_reajuste,
                                  cdcategserv,
                                  tpplano,
                                  cdusucateg,
                                  tpdependente,
                                  nrqtusuario_inicio,
                                  nridade_inicio) loop

        --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
        if (preco_fam.nrperiodo_ult_reajuste || '-' ||
           preco_fam.cdcategserv || '-' || preco_fam.tpplano || '-' ||
           preco_fam.cdusucateg || '-' || preco_fam.tpdependente || '-' ||
           preco_fam.nrqtusuario_inicio) <> vcd_chave_preco then
          vcd_chave_preco := preco_fam.nrperiodo_ult_reajuste || '-' ||
                             preco_fam.cdcategserv || '-' ||
                             preco_fam.tpplano || '-' ||
                             preco_fam.cdusucateg || '-' ||
                             preco_fam.tpdependente || '-' ||
                             preco_fam.nrqtusuario_inicio;
          vnr_faixa       := 1;

          --identificar a data inicio e fim de validade do preço
          --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
          --montá-la a partir do início do contrato
          begin
            select dtiniciocontrato, dtfimcontrato
              into vddtini_contrato, vddtfim_contrato
              from contrato_da_pessoa cdp
             where cdp.nrregistro = tab_preco_fam.nrregistro
               and cdp.nrcontrato = tab_preco_fam.nrcontrato;
          exception
            when no_data_found then
              vddtini_contrato := '01/01/1900';
              vddtfim_contrato := '31/12/9999';
          end;

          -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
          if preco_fam.nrperiodo_ult_reajuste <> 0 then
            vddtini_contrato := preco_fam.dat_inic;
          end if;

          --identificar a data fim de validade do preço
          begin
            --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
            --ex: atual 201509 prox 201609 então 31/08/2016
            --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
            select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                            substr(periodo_fim, 1, 4),
                            'DD/MM/YYYY') - 1)
              into vddtfim_reajuste
              from (select decode(min(nrperiodo_ult_reajuste),
                                  null,
                                  '999912',
                                  min(nrperiodo_ult_reajuste)) periodo_fim
                      from preco_contrato_pessoa pc1
                     where pc1.nrtabela_contrato =
                           preco_fam.nrtabela_contrato
                       and pc1.cdcategserv = preco_fam.cdcategserv
                       and pc1.nrsequencial_usuario = 0
                       and pc1.nrfamilia = decode(preco_fam.origem_preco,
                                                  2,
                                                  preco_fam.nrfamilia,
                                                  0)
                       and pc1.cdlotacao = '*'
                       and pc1.nrperiodo_ult_reajuste >
                           preco_fam.nrperiodo_ult_reajuste);
            --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
            if (vddtfim_contrato is not null) and
               (vddtfim_reajuste = '30/11/9999') then
              vddtfim_reajuste := vddtfim_contrato;
            end if;
            --se a data fim é 30/11/9999 virará 31/12/9999
            if vddtfim_reajuste = '30/11/9999' then
              vddtfim_reajuste := '31/12/9999';
            end if;
          exception
            when no_data_found then
              null;
          end;

          vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
          vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

        else
          vnr_faixa := vnr_faixa + 1;
        end if;

        --insere os criterios da regra
        p_insert_regra_menslid_criter(pAoSimular,
                                      vnr_regra,
                                      preco_fam.cd_padrao_cobertura,
                                      preco_fam.cd_modulo,
                                      preco_fam.cd_grau_parentesco,
                                      vnr_faixa,
                                      preco_fam.nridade_inicio,
                                      preco_fam.nridade_fim,
                                      preco_fam.vlpreco_mensal,
                                      preco_fam.vlpreco_inscricao,
                                      vddat_inic,
                                      vddat_fim,
                                      preco_fam.nrqtusu_ini,
                                      preco_fam.nrqtusu_fim);
      end loop; --preco_fam  --loop dos precos da tabela
    end loop; --tab_preco_fam  --loop das tabelas das familias

    \*=====================================================================================
     =  Inicio do processo que migra os preços específicos por usuario do contrato        =
     =  cada nrregistro + nrcontrato + nrsequencial_usuario = 1 regra                     =
     ======================================================================================
    *\

    for tab_preco_usu in (select distinct prc.nrtabela_contrato,
                                          prc.nrregistro,
                                          prc.nrcontrato,
                                          prc.nrtabela_padrao_origem,
                                          'PRECO ' ||
                                          decode(ctp.tpusu_contrato,
                                                 'E',
                                                 'PJ',
                                                 'P',
                                                 'PF',
                                                 'C',
                                                 'COOP',
                                                 'UNI') || ' USU - CONTR: ' ||
                                          prc.nrcontrato ||
                                          '                                    ' des_regra,
                                          prc.aopreco_por_qtde_dependente,
                                          prc.dtultimo_reajuste,
                                          prc.nrperiodo_proximo_reajuste,
                                          (substr(prc.nrperiodo_proximo_reajuste,
                                                  1,
                                                  4) - 1) ||
                                          substr(prc.nrperiodo_proximo_reajuste,
                                                 5,
                                                 2) reaj_atual,
                                          prc.nrperiodo_inicio,
                                          prc.cdlotacao,
                                          cp.dtiniciocontrato dat_inic,
                                          nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                          pcp.nrfamilia,
                                          pcp.nrsequencial_usuario,
                                          (Select nvl(max(cdn_tip_idx), 1) \*valor '1' é default*\
                                           From   depara_indice_financeiro
                                           Where  cdindice = cp.cdindice) cdn_tip_idx
                            from preco_referencia_contrato prc,
                                 contrato_da_pessoa        cp,
                                 contrato_padrao           ctp,
                                 preco_referencia_padrao   prp,
                                 preco_contrato_pessoa     pcp
                           where cp.nrregistro = prc.nrregistro

                               --teste isolando um contrato
                               --and(cp.nrregistro = vnrregistro_fixo or vnrregistro_fixo = 0)
                               --and(cp.nrcontrato = vnrcontrato_fixo or vnrcontrato_fixo = ' ')
                               And (cp.nrregistro = pNrregistro Or pNrregistro Is Null)
                               And (cp.nrcontrato = pNrcontrato Or pNrcontrato Is Null)

                             and cp.nrcontrato = prc.nrcontrato
                             and ctp.cdcontrato(+) = cp.cdcontrato_padrao
                             and prp.nrtabela_padrao =
                                 prc.nrtabela_padrao_origem
                             and pcp.nrtabela_contrato =
                                 prc.nrtabela_contrato
                             and pcp.nrsequencial_usuario <> 0

                             --Evandro Levi (16/05/2018): Validação para não utilizar preço específico
                             --                             por usuário se no cadastro do usuário não
                             --                             existir vinculo com a tabela de preço listada.
                             And Exists (Select 1 From usuario
                                         Where nrsequencial_usuario = pcp.nrsequencial_usuario
                                         And   nrtabela_contrato = pcp.nrtabela_contrato)
                          --                               and prc.nrtabela_contrato   in (100547,100548)  --************************ teste
                           order by prc.nrregistro,
                                    prc.nrcontrato,
                                    pcp.nrsequencial_usuario,
                                    prc.nrtabela_contrato) loop

      --Se é um novo contrato da pessoa ou nova família é criada uma nova regra
      if (tab_preco_usu.nrregistro <> vnrregistro or
         tab_preco_usu.nrcontrato <> vnrcontrato or
         tab_preco_usu.nrsequencial_usuario <> vnrseq_usu) then
        vnr_regra   := vnr_regra + 1;
        vnrregistro := tab_preco_usu.nrregistro;
        vnrcontrato := tab_preco_usu.nrcontrato;
        vnrseq_usu  := tab_preco_usu.nrsequencial_usuario;

        --Localiza o código da família do usuário
        begin
          select nrfamilia, tpusuario
            into tab_preco_usu.nrfamilia, vtpusuario
            from usuario u
           where u.nrsequencial_usuario =
                 tab_preco_usu.nrsequencial_usuario;
        exception
          when no_data_found then
            null;
        end;

        if tab_preco_usu.nrfamilia <> 0 then
          tab_preco_usu.des_regra := TRIM(tab_preco_usu.des_regra) ||
                                     ' FAM: ' ||
                                     lpad(tab_preco_usu.nrfamilia, 6, '0') ||
                                     ' TP USU: ' ||
                                     lpad(vtpusuario, 2, '0');
        else
          tab_preco_usu.des_regra := TRIM(tab_preco_usu.des_regra);
        end if;

        --insere a regra para a estrutura
        p_insert_regra_menslid(pAoSimular,
                               vnr_regra,
                               tab_preco_usu.des_regra,
                               tab_preco_usu.dat_inic,
                               tab_preco_usu.dat_fim,
                               tab_preco_usu.cdn_tip_idx);

        --insere a data de reajuste da regra
        p_insert_regra_menslid_reaj(pAoSimular,
                                    vnr_regra, tab_preco_usu.reaj_atual);

        --Localiza a estrutura da tabela no de/para de planos
        begin
          select ta.cd_modalidade, ta.cd_plano, ta.cd_tipo_plano
            into vcd_modalidade, vcd_plano, vcd_tipo_plano
            from preco_referencia_padrao pp,
                 temp_depara_detalhado   td,
                 temp_depara_agrupado    ta
           where pp.nrtabela_padrao = tab_preco_usu.nrtabela_padrao_origem --join com a nrtabela origem do loop
             and pp.cdcontrato = td.cdcontrato --join plano detalhado
             and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
             and rownum = 1;

        exception
          when no_data_found then
            null;
        end;

        --Localizar o código da proposta e do beneficiario
        for estrut_usu in (select u.nr_proposta, u.cd_usuario
                             from import_bnfciar ib, gp.usuario u
                            where ib.num_seqcial_bnfciar =
                                  tab_preco_usu.nrsequencial_usuario
                              and u.cd_carteira_antiga =
                                  ib.cd_carteira_antiga
                              and u.cd_modalidade = vcd_modalidade) loop
          --insere a estrutura da regra
          p_insert_regra_menslid_estrut(pAoSimular,
                                        vnr_regra,
                                        vcd_modalidade,
                                        vcd_plano,
                                        vcd_tipo_plano,
                                        tab_preco_usu.dat_inic,
                                        tab_preco_usu.dat_fim,
                                        estrut_usu.nr_proposta,
                                        estrut_usu.cd_usuario);

        end loop; --propostas do usu
      end if; --criação da regra

      --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
      --Antonio 19/11/2016
      insert into temp_depara_tabela_preco
      values
        (tab_preco_usu.nrtabela_contrato, --Tabela de Preços do Unicoo
         vnr_regra, --Código da Regra que virou no TOTVS
         tab_preco_usu.nrfamilia, --Código da Família quando preço por familia
         tab_preco_usu.nrsequencial_usuario, --Código do Usuario quando preço por usuario
         null); --Código da Lotação quando preço por lotacao

      --Varre os valores da tabela de referência na preco_contrato_pessoa procurando os valores da familia
      for preco_usu in (select '0' cd_grau_parentesco,
                               rm.cdvalor_externo cd_modulo,
                               pc.CDCATEGSERV,
                               pc.TPPLANO,
                               pc.CDUSUCATEG,
                               pc.TPDEPENDENTE,
                               pc.NRIDADE_INICIO,
                               pc.NRIDADE_FIM,
                               pc.NRQTUSUARIO_INICIO,
                               pc.NRQTUSUARIO_FIM,
                               pc.NRPERIODO_ULT_REAJUSTE,
                               pc.VLPRECO_MENSAL,
                               pc.VLPRECO_INSCRICAO,
                               pc.NRSEQUENCIAL_USUARIO,
                               pc.NRFAMILIA,
                               pc.CDLOTACAO,
                               pc.NRTABELA_CONTRATO,
                               ta.cd_padrao_cobertura,
                               '01/' ||
                               substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                               substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                               decode(pc.nrqtusuario_inicio,
                                      0,
                                      1,
                                      pc.nrqtusuario_inicio) nrqtusu_ini,
                               decode(pc.nrqtusuario_fim,
                                      0,
                                      999999,
                                      pc.nrqtusuario_fim) nrqtusu_fim,
                               3 ORIGEM_PRECO
                          from preco_contrato_pessoa pc,
                               preco_referencia_contrato prc,
                               preco_referencia_padrao prp,
                               temp_depara_detalhado td,
                               temp_depara_agrupado ta,
                               (select cdvalor_externo, cdvalor_interno
                                  from mig_tab_conversao     tc,
                                       mig_tab_conversao_exp ce
                                 where notabela = 'MIGRACAO_MODULO'
                                   and tc.nrseq = ce.nrseq_tab_conversao) rm
                         where pc.nrtabela_contrato =
                               tab_preco_usu.nrtabela_contrato --nrtabela do loop da tabela referencia
                           and pc.nrsequencial_usuario =
                               tab_preco_usu.nrsequencial_usuario --nrfamilia do loop da tabela referencia
                           and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                           and prp.nrtabela_padrao =
                               prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                           and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                           and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                        union
                        --Buscar os preços da família das categorias que o usuário não tem para completar a regra
                        select '0' cd_grau_parentesco,
                               rm.cdvalor_externo cd_modulo,
                               pc.CDCATEGSERV,
                               pc.TPPLANO,
                               pc.CDUSUCATEG,
                               pc.TPDEPENDENTE,
                               pc.NRIDADE_INICIO,
                               pc.NRIDADE_FIM,
                               pc.NRQTUSUARIO_INICIO,
                               pc.NRQTUSUARIO_FIM,
                               pc.NRPERIODO_ULT_REAJUSTE,
                               pc.VLPRECO_MENSAL,
                               pc.VLPRECO_INSCRICAO,
                               pc.NRSEQUENCIAL_USUARIO,
                               pc.NRFAMILIA,
                               pc.CDLOTACAO,
                               pc.NRTABELA_CONTRATO,
                               ta.cd_padrao_cobertura,
                               '01/' ||
                               substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                               substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                               decode(pc.nrqtusuario_inicio,
                                      0,
                                      1,
                                      pc.nrqtusuario_inicio) nrqtusu_ini,
                               decode(pc.nrqtusuario_fim,
                                      0,
                                      999999,
                                      pc.nrqtusuario_fim) nrqtusu_fim,
                               2 ORIGEM_PRECO
                          from preco_contrato_pessoa pc,
                               preco_referencia_contrato prc,
                               preco_referencia_padrao prp,
                               temp_depara_detalhado td,
                               temp_depara_agrupado ta,
                               (select cdvalor_externo, cdvalor_interno
                                  from mig_tab_conversao     tc,
                                       mig_tab_conversao_exp ce
                                 where notabela = 'MIGRACAO_MODULO'
                                   and tc.nrseq = ce.nrseq_tab_conversao) rm
                         where pc.nrtabela_contrato =
                               tab_preco_usu.nrtabela_contrato --nrtabela do loop da tabela referencia
                           and pc.nrsequencial_usuario = 0 --preços da família
                           and pc.nrfamilia = tab_preco_usu.nrfamilia --preços da familia
                           and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                           and prp.nrtabela_padrao =
                               prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                           and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                           and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                           and pc.cdcategserv not in
                               (select distinct p.cdcategserv
                                  from preco_contrato_pessoa p
                                 where p.nrtabela_contrato =
                                       pc.nrtabela_contrato
                                   and p.nrsequencial_usuario =
                                       tab_preco_usu.nrsequencial_usuario)
                        union
                        --Buscar os preços do contrato das categorias que o usuário não tem e a família também não p/completar a regra
                        select '0' cd_grau_parentesco,
                               rm.cdvalor_externo cd_modulo,
                               pc.CDCATEGSERV,
                               pc.TPPLANO,
                               pc.CDUSUCATEG,
                               pc.TPDEPENDENTE,
                               pc.NRIDADE_INICIO,
                               pc.NRIDADE_FIM,
                               pc.NRQTUSUARIO_INICIO,
                               pc.NRQTUSUARIO_FIM,
                               pc.NRPERIODO_ULT_REAJUSTE,
                               pc.VLPRECO_MENSAL,
                               pc.VLPRECO_INSCRICAO,
                               pc.NRSEQUENCIAL_USUARIO,
                               pc.NRFAMILIA,
                               pc.CDLOTACAO,
                               pc.NRTABELA_CONTRATO,
                               ta.cd_padrao_cobertura,
                               '01/' ||
                               substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                               substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                               decode(pc.nrqtusuario_inicio,
                                      0,
                                      1,
                                      pc.nrqtusuario_inicio) nrqtusu_ini,
                               decode(pc.nrqtusuario_fim,
                                      0,
                                      999999,
                                      pc.nrqtusuario_fim) nrqtusu_fim,
                               1 ORIGEM_PRECO
                          from preco_contrato_pessoa pc,
                               preco_referencia_contrato prc,
                               preco_referencia_padrao prp,
                               temp_depara_detalhado td,
                               temp_depara_agrupado ta,
                               (select cdvalor_externo, cdvalor_interno
                                  from mig_tab_conversao     tc,
                                       mig_tab_conversao_exp ce
                                 where notabela = 'MIGRACAO_MODULO'
                                   and tc.nrseq = ce.nrseq_tab_conversao) rm
                         where pc.nrtabela_contrato =
                               tab_preco_usu.nrtabela_contrato --nrtabela do loop da tabela referencia
                           and pc.nrsequencial_usuario = 0 --preços do contrato
                           and pc.nrfamilia = 0 --preços do contrato
                           and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                           and prp.nrtabela_padrao =
                               prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                           and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                           and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                           and pc.cdcategserv not in
                               (select distinct p.cdcategserv
                                  from preco_contrato_pessoa p
                                 where p.nrtabela_contrato =
                                       pc.nrtabela_contrato
                                   and p.nrfamilia = tab_preco_usu.nrfamilia)
                           and pc.cdcategserv not in
                               (select distinct p.cdcategserv
                                  from preco_contrato_pessoa p
                                 where p.nrtabela_contrato =
                                       pc.nrtabela_contrato
                                   and p.nrsequencial_usuario =
                                       tab_preco_usu.nrsequencial_usuario)
                         order by nrperiodo_ult_reajuste,
                                  cdcategserv,
                                  tpplano,
                                  cdusucateg,
                                  tpdependente,
                                  nrqtusuario_inicio,
                                  nridade_inicio) loop
        --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
        if (preco_usu.nrperiodo_ult_reajuste || '-' ||
           preco_usu.cdcategserv || '-' || preco_usu.tpplano || '-' ||
           preco_usu.cdusucateg || '-' || preco_usu.tpdependente || '-' ||
           preco_usu.nrqtusuario_inicio) <> vcd_chave_preco then
          vcd_chave_preco := preco_usu.nrperiodo_ult_reajuste || '-' ||
                             preco_usu.cdcategserv || '-' ||
                             preco_usu.tpplano || '-' ||
                             preco_usu.cdusucateg || '-' ||
                             preco_usu.tpdependente || '-' ||
                             preco_usu.nrqtusuario_inicio;
          vnr_faixa       := 1;

          --identificar a data inicio e fim de validade do preço
          --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
          --montá-la a partir do início do contrato
          begin
            select dtiniciocontrato, dtfimcontrato
              into vddtini_contrato, vddtfim_contrato
              from contrato_da_pessoa cdp
             where cdp.nrregistro = tab_preco_usu.nrregistro
               and cdp.nrcontrato = tab_preco_usu.nrcontrato;
          exception
            when no_data_found then
              vddtini_contrato := '01/01/1900';
              vddtfim_contrato := '31/12/9999';
          end;

          -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
          if preco_usu.nrperiodo_ult_reajuste <> 0 then
            vddtini_contrato := preco_usu.dat_inic;
          end if;

          --identificar a data fim de validade do preço
          begin
            --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
            --ex: atual 201509 prox 201609 então 31/08/2016
            --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
            select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                            substr(periodo_fim, 1, 4),
                            'DD/MM/YYYY') - 1)
              into vddtfim_reajuste
              from (select decode(min(nrperiodo_ult_reajuste),
                                  null,
                                  '999912',
                                  min(nrperiodo_ult_reajuste)) periodo_fim
                      from preco_contrato_pessoa pc1
                     where pc1.nrtabela_contrato =
                           preco_usu.nrtabela_contrato
                       and pc1.cdcategserv = preco_usu.cdcategserv
                       and pc1.nrsequencial_usuario =
                           decode(preco_usu.origem_preco,
                                  3,
                                  preco_usu.nrsequencial_usuario,
                                  0)
                       and pc1.nrfamilia = decode(preco_usu.origem_preco,
                                                  2,
                                                  preco_usu.nrfamilia,
                                                  0)
                       and pc1.cdlotacao = '*'
                       and pc1.nrperiodo_ult_reajuste >
                           preco_usu.nrperiodo_ult_reajuste);

            --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
            if (vddtfim_contrato is not null) and
               (vddtfim_reajuste = '30/11/9999') then
              vddtfim_reajuste := vddtfim_contrato;
            end if;
            --se a data fim é 30/11/9999 virará 31/12/9999
            if vddtfim_reajuste = '30/11/9999' then
              vddtfim_reajuste := '31/12/9999';
            end if;
          exception
            when no_data_found then
              null;
          end;

          vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
          vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

        else
          vnr_faixa := vnr_faixa + 1;
        end if;

        --insere os criterios da regra
        p_insert_regra_menslid_criter(pAoSimular,
                                      vnr_regra,
                                      preco_usu.cd_padrao_cobertura,
                                      preco_usu.cd_modulo,
                                      preco_usu.cd_grau_parentesco,
                                      vnr_faixa,
                                      preco_usu.nridade_inicio,
                                      preco_usu.nridade_fim,
                                      preco_usu.vlpreco_mensal,
                                      preco_usu.vlpreco_inscricao,
                                      vddat_inic,
                                      vddat_fim,
                                      preco_usu.nrqtusu_ini,
                                      preco_usu.nrqtusu_fim);
      end loop; --preco_usu  --loop dos precos do usuario
    end loop; --tab_preco_usu  --loop das tabelas dos usuarios

    \*=====================================================================================
     =  Inicio do processo que migra os preços específicos por usuario do contrato        =
     =  cada nrregistro + nrcontrato + lotacao = 1 regra                                  =
     ======================================================================================
    *\

    for tab_preco_lota in (select distinct prc.nrtabela_contrato,
                                           prc.nrregistro,
                                           prc.nrcontrato,
                                           prc.nrtabela_padrao_origem,
                                           'PRECO LOTACAO - CONTR: ' ||
                                           prc.nrcontrato || ' LOTACAO: ' ||
                                           pcp.cdlotacao des_regra,
                                           prc.aopreco_por_qtde_dependente,
                                           prc.dtultimo_reajuste,
                                           prc.nrperiodo_proximo_reajuste,
                                           (substr(prc.nrperiodo_proximo_reajuste,
                                                   1,
                                                   4) - 1) ||
                                           substr(prc.nrperiodo_proximo_reajuste,
                                                  5,
                                                  2) reaj_atual,
                                           prc.nrperiodo_inicio,
                                           prc.cdlotacao cdlotacao_refer,
                                           cp.dtiniciocontrato dat_inic,
                                           nvl(cp.dtfimcontrato,
                                               '31/12/9999') dat_fim,
                                           pcp.nrfamilia,
                                           pcp.nrsequencial_usuario,
                                           pcp.cdlotacao cdlotacao,
                                           (Select nvl(max(cdn_tip_idx), 1) \*valor '1' é default*\
                                            From   depara_indice_financeiro
                                            Where  cdindice = cp.cdindice) cdn_tip_idx
                             from preco_referencia_contrato prc,
                                  contrato_da_pessoa        cp,
                                  preco_referencia_padrao   prp,
                                  preco_contrato_pessoa     pcp
                            where cp.nrregistro = prc.nrregistro

                               --teste isolando um contrato
                               --and(cp.nrregistro = vnrregistro_fixo or vnrregistro_fixo = 0)
                               --and(cp.nrcontrato = vnrcontrato_fixo or vnrcontrato_fixo = ' ')
                               And (cp.nrregistro = pNrregistro Or pNrregistro Is Null)
                               And (cp.nrcontrato = pNrcontrato Or pNrcontrato Is Null)

                              and cp.nrcontrato = prc.nrcontrato
                              and prp.nrtabela_padrao =
                                  prc.nrtabela_padrao_origem
                              and pcp.nrtabela_contrato =
                                  prc.nrtabela_contrato
                              and pcp.cdlotacao <> '*'
                           --                                      and prc.nrtabela_contrato   in (100547,100548)  --************************ teste
                            order by prc.nrregistro,
                                     prc.nrcontrato,
                                     pcp.cdlotacao,
                                     prc.nrtabela_contrato) loop

      --Se é um novo contrato da pessoa ou nova lotacao é criada uma nova regra
      if (tab_preco_lota.nrregistro <> vnrregistro or
         tab_preco_lota.nrcontrato <> vnrcontrato or
         tab_preco_lota.cdlotacao <> vcdlotacao) then
        vnr_regra   := vnr_regra + 1;
        vnrregistro := tab_preco_lota.nrregistro;
        vnrcontrato := tab_preco_lota.nrcontrato;
        vcdlotacao  := tab_preco_lota.cdlotacao;

        --insere a regra para a estrutura
        p_insert_regra_menslid(pAoSimular,
                               vnr_regra,
                               tab_preco_lota.des_regra,
                               tab_preco_lota.dat_inic,
                               tab_preco_lota.dat_fim,
                               tab_preco_lota.cdn_tip_idx);

        --insere a data de reajuste da regra
        p_insert_regra_menslid_reaj(pAoSimular, vnr_regra, tab_preco_lota.reaj_atual);

        --Localiza a estrutura da tabela no de/para de planos
        begin
          select ta.cd_modalidade, ta.cd_plano, ta.cd_tipo_plano
            into vcd_modalidade, vcd_plano, vcd_tipo_plano
            from preco_referencia_padrao pp,
                 temp_depara_detalhado   td,
                 temp_depara_agrupado    ta
           where pp.nrtabela_padrao = tab_preco_lota.nrtabela_padrao_origem --join com a nrtabela origem do loop
             and pp.cdcontrato = td.cdcontrato --join plano detalhado
             and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
             and rownum = 1;

        exception
          when no_data_found then
            null;
        end;

        --Localizar o código da proposta e dos beneficiarios da lotacao
        \* Evandro Levi (16/05/2018): Considerar a lotação conforme parametro USULOTAC do Unicoo
        for usu_fam in (select nrsequencial_usuario
                          from usuario u, familia f
                         where f.nrregistro = u.nrregistro
                           and f.nrcontrato = u.nrcontrato
                           and f.nrfamilia = u.nrfamilia
                           and u.nrregistro = tab_preco_lota.nrregistro
                           and u.nrcontrato = tab_preco_lota.nrcontrato
                           and nvl(u.cdlotacao, f.cdlotacao) = tab_preco_lota.cdlotacao) loop*\
        for usu_fam in (select nrsequencial_usuario
                          from usuario u
                         where u.nrregistro = tab_preco_lota.nrregistro
                           and u.nrcontrato = tab_preco_lota.nrcontrato
                           and f_lotacao_usuario(u.nrsequencial_usuario) = tab_preco_lota.cdlotacao) Loop
          begin
            select u.nr_proposta, u.cd_usuario
              into vnr_proposta, vnr_seq_usuario
              from import_bnfciar ib, gp.usuario u
             where ib.num_seqcial_bnfciar = usu_fam.nrsequencial_usuario
               and u.cd_carteira_antiga = ib.cd_carteira_antiga
               and u.cd_modalidade = vcd_modalidade;
          exception
            when no_data_found then
              null;
          end;

          --insere a estrutura da regra
          p_insert_regra_menslid_estrut(pAoSimular,
                                        vnr_regra,
                                        vcd_modalidade,
                                        vcd_plano,
                                        vcd_tipo_plano,
                                        tab_preco_lota.dat_inic,
                                        tab_preco_lota.dat_fim,
                                        vnr_proposta,
                                        vnr_seq_usuario);
        end loop;

      end if; --criação da regra

      --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
      --Antonio 19/11/2016
      insert into temp_depara_tabela_preco
      values
        (tab_preco_lota.nrtabela_contrato, --Tabela de Preços do Unicoo
         vnr_regra, --Código da Regra que virou no TOTVS
         tab_preco_lota.nrfamilia, --Código da Família quando preço por familia
         tab_preco_lota.nrsequencial_usuario, --Código do Usuario quando preço por usuario
         tab_preco_lota.cdlotacao); --Código da Lotação quando preço por lotacao

      --Varre os valores da tabela de referência na preco_contrato_pessoa procurando os valores da familia
      for preco_lota in (select '0' cd_grau_parentesco,
                                rm.cdvalor_externo cd_modulo,
                                pc.*,
                                ta.cd_padrao_cobertura,
                                '01/' ||
                                substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                                substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                                decode(pc.nrqtusuario_inicio,
                                       0,
                                       1,
                                       pc.nrqtusuario_inicio) nrqtusu_ini,
                                decode(pc.nrqtusuario_fim,
                                       0,
                                       999999,
                                       pc.nrqtusuario_fim) nrqtusu_fim
                           from preco_contrato_pessoa pc,
                                preco_referencia_contrato prc,
                                preco_referencia_padrao prp,
                                temp_depara_detalhado td,
                                temp_depara_agrupado ta,
                                (select cdvalor_externo, cdvalor_interno
                                   from mig_tab_conversao     tc,
                                        mig_tab_conversao_exp ce
                                  where notabela = 'MIGRACAO_MODULO'
                                    and tc.nrseq = ce.nrseq_tab_conversao) rm
                          where pc.nrtabela_contrato =
                                tab_preco_lota.nrtabela_contrato --nrtabela do loop da tabela referencia
                            and pc.cdlotacao = tab_preco_lota.cdlotacao --nrfamilia do loop da tabela referencia
                            and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                            and prp.nrtabela_padrao =
                                prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                            and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                            and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                            and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                          order by pc.nrperiodo_ult_reajuste,
                                   pc.cdcategserv,
                                   pc.tpplano,
                                   pc.cdusucateg,
                                   pc.tpdependente,
                                   pc.nrqtusuario_inicio,
                                   pc.nridade_inicio) loop

        --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
        if (preco_lota.nrperiodo_ult_reajuste || '-' ||
           preco_lota.cdcategserv || '-' || preco_lota.tpplano || '-' ||
           preco_lota.cdusucateg || '-' || preco_lota.tpdependente || '-' ||
           preco_lota.nrqtusuario_inicio) <> vcd_chave_preco then
          vcd_chave_preco := preco_lota.nrperiodo_ult_reajuste || '-' ||
                             preco_lota.cdcategserv || '-' ||
                             preco_lota.tpplano || '-' ||
                             preco_lota.cdusucateg || '-' ||
                             preco_lota.tpdependente || '-' ||
                             preco_lota.nrqtusuario_inicio;
          vnr_faixa       := 1;

          --identificar a data inicio e fim de validade do preço
          --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
          --montá-la a partir do início do contrato
          begin
            select dtiniciocontrato, dtfimcontrato
              into vddtini_contrato, vddtfim_contrato
              from contrato_da_pessoa cdp
             where cdp.nrregistro = tab_preco_lota.nrregistro
               and cdp.nrcontrato = tab_preco_lota.nrcontrato;
          exception
            when no_data_found then
              vddtini_contrato := '01/01/1900';
              vddtfim_contrato := '31/12/9999';
          end;

          -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
          if preco_lota.nrperiodo_ult_reajuste <> 0 then
            vddtini_contrato := preco_lota.dat_inic;
          end if;

          --identificar a data fim de validade do preço
          begin
            --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
            --ex: atual 201509 prox 201609 então 31/08/2016
            --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
            select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                            substr(periodo_fim, 1, 4),
                            'DD/MM/YYYY') - 1)
              into vddtfim_reajuste
              from (select decode(min(nrperiodo_ult_reajuste),
                                  null,
                                  '999912',
                                  min(nrperiodo_ult_reajuste)) periodo_fim
                      from preco_contrato_pessoa pc1
                     where pc1.nrtabela_contrato =
                           preco_lota.nrtabela_contrato
                       and pc1.cdlotacao = preco_lota.cdlotacao
                       and pc1.nrperiodo_ult_reajuste >
                           preco_lota.nrperiodo_ult_reajuste);
            --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
            if (vddtfim_contrato is not null) and
               (vddtfim_reajuste = '30/11/9999') then
              vddtfim_reajuste := vddtfim_contrato;
            end if;
            --se a data fim é 30/11/9999 virará 31/12/9999
            if vddtfim_reajuste = '30/11/9999' then
              vddtfim_reajuste := '31/12/9999';
            end if;
          exception
            when no_data_found then
              null;
          end;

          vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
          vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

        else
          vnr_faixa := vnr_faixa + 1;
        end if;

        --insere os criterios da regra
        p_insert_regra_menslid_criter(pAoSimular,
                                      vnr_regra,
                                      preco_lota.cd_padrao_cobertura,
                                      preco_lota.cd_modulo,
                                      preco_lota.cd_grau_parentesco,
                                      vnr_faixa,
                                      preco_lota.nridade_inicio,
                                      preco_lota.nridade_fim,
                                      preco_lota.vlpreco_mensal,
                                      preco_lota.vlpreco_inscricao,
                                      vddat_inic,
                                      vddat_fim,
                                      preco_lota.nrqtusu_ini,
                                      preco_lota.nrqtusu_fim);
      end loop; --preco_lota  --loop dos precos da lotacao
    end loop; --tab_preco_lota  --loop das tabelas das lotacoes
  end p_migra_regra_proposta;*/

procedure p_ajustar_sequences_migr_mens is
  vult_aux number;
  vseq_aux number;
begin
  --ajustar sequences que so exitem no migrador e nao no produto, pois podem ter sido criadas regras manualmente pelo usuario
  begin
    select nvl(max(cdd_id),0) into vult_aux from gp.regra_menslid_estrut;
  exception
    when others then
      vult_aux := 0;
  end;
  select seq_regra_menslid_estrut.nextval into vseq_aux from dual;
  while vseq_aux < vult_aux loop
    select seq_regra_menslid_estrut.nextval into vseq_aux from dual;
  end loop;

  begin
    select nvl(max(cdd_seq),0) into vult_aux from gp.regra_menslid_propost;
  exception
    when others then
      vult_aux := 0;
  end;
  select seq_temp_propost.nextval into vseq_aux from dual;
  while vseq_aux < vult_aux loop
    select seq_temp_propost.nextval into vseq_aux from dual;
  end loop;

  begin
    select nvl(max(cdd_id),0) into vult_aux from gp.regra_menslid_criter;
  exception
    when others then
      vult_aux := 0;
  end;
  select seq_cdd_id.nextval into vseq_aux from dual;
  while vseq_aux < vult_aux loop
    select seq_cdd_id.nextval into vseq_aux from dual;
  end loop;

end p_ajustar_sequences_migr_mens;

/*Alex 09/03/2019 - codigo tratando parcialmente a atualizacao gradativa das regras. nao homologado.
a versao mais abaixo recria todas as regras*/
/*procedure p_migra_regra_proposta2(pAoSimular  in varchar2 default 'N',
                                  pNrregistro In Number Default Null,
                                  pNrcontrato In Varchar2 Default Null) is
  --Evandro Levi (16/05/2018): Adicionado parametros de chamada para agilizar o processamento
  --                             individual por contratos
  vnrregistro number := 0;
  vnrcontrato varchar2(4) := ' ';
  vcdcontrato varchar2(8) := ' ';

  vcdmodalidade_ant number := 0;
  vnrproposta_ant   number := 0;

  vnrfamilia number := 0;
  vnrseq_usu number := 0;
  vcdlotacao varchar2(8) := ' ';
  vnr_regra  number := 0;
  --vcd_modalidade   number := 0;
  --vcd_plano        number := 0;
  --vcd_tipo_plano   number := 0;
  vnr_faixa        number := 0;
  vcd_chave_preco  varchar2(40) := ' ';
  vddtini_contrato date := '01/01/1900';
  vddtfim_contrato date := '31/12/9999';
  vddtfim_reajuste date := '31/12/9999';
  vddat_inic       date := '01/01/1900';
  vddat_fim        date := '31/12/9999';
  vnr_proposta     number := 0;
  vtpusuario       varchar2(2);
  vult_aux         number;
  vseq_aux         number;

begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

  p_ajustar_sequences_migr_mens;

\*  logica comentada pois foi adicionado tratamento para somente criar regra caso a proposta ainda nao possua
    if pAoSimular = 'N' then
    --ELIMINAR REGRA QUE SERA RECRIADA
    for x in (select distinct rp.cdd_regra
                from gp.import_propost ip, gp.regra_menslid_propost rp
               where (ip.num_livre_2  = pNrregistro or pNrregistro is null)
                 and (ip.num_livre_3  = pNrcontrato or pNrcontrato is null)
                 and rp.cd_modalidade = ip.cd_modalidade
                 and rp.nr_proposta   = ip.num_livre_10) loop

      delete from gp.REGRA_MENSLID rm          where rm.cdd_regra = x.cdd_regra;
      delete from gp.REGRA_MENSLID_CRITER rmc  where rmc.cdd_regra = x.cdd_regra;
      delete from gp.REGRA_MENSLID_PROPOST rmp where rmp.cdd_regra = x.cdd_regra;
      delete from gp.REGRA_MENSLID_ESTRUT rme  where rme.cdd_regra = x.cdd_regra;
      delete from gp.regra_menslid_reaj rmr    where rmr.cdd_regra = x.cdd_regra;

    end loop;
  end if;
*\
  --ajustar sequences que so exitem no migrador e nao no produto, pois podem ter sido criadas regras manualmente pelo usuario
  begin
    select nvl(max(cdd_id),0) into vult_aux from gp.regra_menslid_estrut;
  exception
    when others then
      vult_aux := 0;
  end;
  select seq_regra_menslid_estrut.nextval into vseq_aux from dual;
  while vseq_aux < vult_aux loop
    select seq_regra_menslid_estrut.nextval into vseq_aux from dual;
  end loop;

  begin
    select nvl(max(cdd_seq),0) into vult_aux from gp.regra_menslid_propost;
  exception
    when others then
      vult_aux := 0;
  end;
  select seq_temp_propost.nextval into vseq_aux from dual;
  while vseq_aux < vult_aux loop
    select seq_temp_propost.nextval into vseq_aux from dual;
  end loop;

  begin
    select nvl(max(cdd_id),0) into vult_aux from gp.regra_menslid_criter;
  exception
    when others then
      vult_aux := 0;
  end;
  select seq_cdd_id.nextval into vseq_aux from dual;
  while vseq_aux < vult_aux loop
    select seq_cdd_id.nextval into vseq_aux from dual;
  end loop;

  --Busca o último número de regra que existe após a migração das regras da estrutura
  begin
    select nvl(max(r.cdd_regra), 0) into vnr_regra from gp.regra_menslid r;
  exception
    when no_data_found then
      vnr_regra := 0;
  end;

  \*=====================================================================================
   =  Inicio do processo que migra os preços do contrato.                               =
   =  cada nrregistro + nrcontrato = 1 regra                                            =
   ======================================================================================
  *\

  --Busca todas as tabelas de precos do Unicoo com pelo menos 1 preço do contrato
  for tab_preco_refer in (select prc.nrtabela_contrato,
                                 prc.nrregistro,
                                 prc.nrcontrato,
                                 prc.nrtabela_padrao_origem,
                                 'PRECO ' || decode(ctp.tpusu_contrato,
                                                    'E',
                                                    'PJ',
                                                    'P',
                                                    'PF',
                                                    'C',
                                                    'COOP',
                                                    'UNI') || ' CONTRATO: ' ||
                                 prc.nrcontrato || ' PLANO: ' || ta.cdcontrato ||
                                 '                                  ' des_regra,
                                 prc.aopreco_por_qtde_dependente,
                                 prc.dtultimo_reajuste,
                                 prc.nrperiodo_proximo_reajuste,
                                 (substr(prc.nrperiodo_proximo_reajuste,
                                         1,
                                         4) - 1) ||
                                 substr(prc.nrperiodo_proximo_reajuste, 5, 2) reaj_atual, --proximo reajuste -1 ano (ultimo)
                                 prc.nrperiodo_inicio,
                                 prc.cdlotacao,
                                 cp.dtiniciocontrato dat_inic,
                                 nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                 prp.cdcontrato,
                                 ta.cd_modalidade vcd_modalidade,
                                 ta.cd_plano vcd_plano,
                                 ta.cd_tipo_plano vcd_tipo_plano,
                                 ta.cdcontrato cdcontrato_agr,
                                 ip.num_livre_10,
                                 \*f.nrfamilia,*\
                                 ip.num_livre_4 nrfamilia,
                                 (Select nvl(max(cdn_tip_idx), 1) \*valor '1' é default*\
                                  From   depara_indice_financeiro
                                  Where  cdindice = cp.cdindice) cdn_tip_idx,
                                 (select nvl(count(*),'0')
                                    from preco_contrato_pessoa pcp1
                                   where pcp1.nrtabela_contrato = prc.nrtabela_contrato
                                     and pcp1.tpplano <> '*') lg_tpplano_diferente
                            from preco_referencia_contrato prc,
                                 contrato_da_pessoa cp,
                                 contrato_padrao ctp,
                                 preco_referencia_padrao prp,
                                 temp_depara_detalhado td,
                                 temp_depara_agrupado ta,
                                 import_propost ip
                                 \*Evandro Levi (10/10/2018): Eliminada a busca da família,
                                     pois na IMPORT_PROPOST já tem campo apropriado com
                                     esta informação.
                                  ,
                                 (select nvl(min(f.nrfamilia), 0) nrfamilia,
                                         f.nrregistro,
                                         f.nrcontrato
                                    from familia f
                                   group by nrregistro, nrcontrato) f *\
                           where cp.nrregistro = prc.nrregistro
                             and cp.nrcontrato = prc.nrcontrato

                             And (cp.nrregistro = pNrregistro Or pNrregistro Is Null)
                             And (cp.nrcontrato = pNrcontrato Or pNrcontrato Is Null)

                             and ctp.cdcontrato(+) = cp.cdcontrato_padrao
                             and prp.nrtabela_padrao = prc.nrtabela_padrao_origem
                             and prp.cdcontrato = td.cdcontrato --join plano detalhado
                             and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
                             and ip.num_livre_2 = cp.nrregistro
                             and ip.num_livre_3 = cp.nrcontrato
                             \*
                             and ip.num_livre_4 = f.nrfamilia
                             and ip.num_livre_2 = f.nrregistro
                             and ip.num_livre_3 = f.nrcontrato
                             *\

                             and ip.cd_modalidade = ta.cd_modalidade
                             and ip.cd_plano      = ta.cd_plano
                             and ip.cd_tipo_plano = ta.cd_tipo_plano

                             and exists
                           (select 1
                                    from preco_contrato_pessoa pcp
                                   where pcp.nrtabela_contrato = prc.nrtabela_contrato
                                     and pcp.nrfamilia = 0
                                     and pcp.nrsequencial_usuario = 0
                                     and pcp.cdlotacao = '*')
                           --a regra deve ser usada por ao menos um beneficiario, pois no Unicoo podem existir
                           --regras associadas ao contrato mas sem vinculo com nenhum beneficiario.
                           --estava criando criterios sobrepostos (Alex Boeira 02/01/2019)
                             and exists
                           (select 1 from usuario uu
                                    where uu.nrregistro = prc.nrregistro
                                      and uu.nrcontrato = prc.nrcontrato
                                      and uu.nrtabela_contrato = prc.nrtabela_contrato
                                      and (uu.dtexclusao is null or uu.dtexclusao > sysdate))

                             --ignorar caso a proposta ja possua regra de mensalidade
                             and not exists
                           (select 1 from gp.regra_menslid_propost rmp
                                    where rmp.cd_modalidade = ip.cd_modalidade
                                      and rmp.nr_proposta   = ip.num_livre_10)

\*                           order by prc.nrregistro,
                                    prc.nrcontrato,
                                    ta.cdcontrato,
                                    prc.nrtabela_contrato) loop
*\                           order by ip.cd_modalidade,
                                    ip.num_livre_10) loop

    dbms_output.put_line('TABELA_PRECO(NRTABELA_PADRAO_ORIGEM,cdcontrato_agr,cdcontrato_orig,NRTABELA_CONTRATO);' ||
                         tab_preco_refer.nrtabela_padrao_origem || ';' ||
                         tab_preco_refer.cdcontrato_agr || ';' || tab_preco_refer.cdcontrato || ';' || tab_preco_refer.nrtabela_contrato);

    --Se é um novo contrato da pessoa é criada uma nova regra
\*    if (tab_preco_refer.nrregistro <> vnrregistro or
       tab_preco_refer.nrcontrato <> vnrcontrato or
       tab_preco_refer.cdcontrato_agr <> vcdcontrato) then

      vnr_regra   := vnr_regra + 1;
      vnrregistro := tab_preco_refer.nrregistro;
      vnrcontrato := tab_preco_refer.nrcontrato;
      vcdcontrato := tab_preco_refer.cdcontrato_agr;
*\
    -- se eh nova proposta, cria nova regra
    if (tab_preco_refer.vcd_modalidade <> vcdmodalidade_ant or
        tab_preco_refer.num_livre_10 <> vnrproposta_ant) then

      vnr_regra   := vnr_regra + 1;
      vcdmodalidade_ant := tab_preco_refer.vcd_modalidade;
      vnrproposta_ant   := tab_preco_refer.num_livre_10;

      if tab_preco_refer.nrfamilia <> 0 then
        tab_preco_refer.des_regra := trim(tab_preco_refer.des_regra) ||
                                     ' FAMILIA: ' ||
                                     lpad(tab_preco_refer.nrfamilia, 6, '0');
      else
        tab_preco_refer.des_regra := trim(tab_preco_refer.des_regra);
      end if;

      dbms_output.put_line('REGRA_MENSLID1(REGRA,DESCRICAO,INICIO,FIM,MODALIDADE,PROPOSTA);' ||
                           vnr_regra || ';' || tab_preco_refer.des_regra || ';' ||
                           tab_preco_refer.dat_inic || ';' ||
                           tab_preco_refer.dat_fim || ';' || vcdmodalidade_ant || ';' || vnrproposta_ant);

      --insere a regra para a estrutura
      p_insert_regra_menslid(pAoSimular,
                             vnr_regra,
                             tab_preco_refer.des_regra,
                             tab_preco_refer.dat_inic,
                             tab_preco_refer.dat_fim,
                             tab_preco_refer.cdn_tip_idx);

      dbms_output.put_line('ESTRUTURAS1(MODALIDADE,PLANO,TIPO,CDCONTRATO_AGR);' ||
                           tab_preco_refer.vcd_modalidade || ';' ||
                           tab_preco_refer.vcd_plano || ';' ||
                           tab_preco_refer.vcd_tipo_plano || ';' ||
                           tab_preco_refer.cdcontrato_agr);

      vnr_proposta := tab_preco_refer.num_livre_10;

      dbms_output.put_line('REGRA_MENSLID_ESTRUT1(vnr_regra,vcd_modalidade,vcd_plano,vcd_tipo_plano,' ||
                           'tab_preco_refer.dat_inic,tab_preco_refer.dat_fim,vnr_proposta,beneficiario);' ||
                           vnr_regra || ';' ||
                           tab_preco_refer.vcd_modalidade || ';' ||
                           tab_preco_refer.vcd_plano || ';' ||
                           tab_preco_refer.vcd_tipo_plano || ';' ||
                           tab_preco_refer.dat_inic || ';' ||
                           tab_preco_refer.dat_fim || ';' || vnr_proposta || ';0');

      --insere a estrutura da regra
      p_insert_regra_menslid_estrut(pAoSimular,
                                    vnr_regra,
                                    tab_preco_refer.vcd_modalidade,
                                    tab_preco_refer.vcd_plano,
                                    tab_preco_refer.vcd_tipo_plano,
                                    tab_preco_refer.dat_inic,
                                    tab_preco_refer.dat_fim,
                                    vnr_proposta,
                                    0);

      --dbms_output.put_line('REGRA_MENSLID_REAJ1(vnr_regra,reaj_atual);' ||
      --                     vnr_regra || ';' || tab_preco_refer.reaj_atual);

      --insere a data de reajuste da regra
      p_insert_regra_menslid_reaj(pAoSimular,
                                  vnr_regra,
                                  tab_preco_refer.reaj_atual);

    end if; --criação da regra

    --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
    --Antonio 19/11/2016
    insert into temp_depara_tabela_preco
    values
      (tab_preco_refer.nrtabela_contrato, --Tabela de Preços do Unicoo
       vnr_regra, --Código da Regra que virou no TOTVS
       null, --Código da Família quando preço por familia
       null, --Código do Usuario quando preço por usuario
       null); --Código da Lotação quando preço por lotacao

    --Varre os valores da tabela de referência na preco_contrato_pessoa
    vcd_chave_preco := ' ';
    for preco_tab in (select case
                               when pc.cdusucateg <> '*' then
                                 nvl((select tgp.cdvalores_externo
                                        from temp_grau_paren tgp,
                                             tipo_de_usuario tu
                                       where tgp.cdvalor_interno =
                                             tu.tpusuario
                                         and tu.cdusucateg =
                                             pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                   end
                               end cd_grau_parentesco,
                             rm.cdvalor_externo cd_modulo,
                             pc.*,

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_refer.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_refer.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                         and pc.nrfamilia = 0
                         and pc.nrsequencial_usuario = 0
                         and pc.cdlotacao = '*'
                       order by pc.nrperiodo_ult_reajuste,
                                pc.cdcategserv,
                                --pc.tpplano,
                                cd_padrao_cobertura,
                                --pc.cdusucateg,
                                --pc.tpdependente,
                                cd_grau_parentesco,
                                pc.nrqtusuario_inicio,
                                pc.nridade_inicio) loop


      --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
      if (preco_tab.nrperiodo_ult_reajuste || '-' || preco_tab.cdcategserv || '-' ||
--         preco_tab.tpplano || '-' ||
         preco_tab.cd_padrao_cobertura || '-' ||
         --preco_tab.cdusucateg || '-' ||
         --preco_tab.tpdependente || '-' ||
         preco_tab.cd_grau_parentesco || '-' ||
         preco_tab.nrqtusuario_inicio) <> vcd_chave_preco then
        vcd_chave_preco := preco_tab.nrperiodo_ult_reajuste || '-' ||
                           preco_tab.cdcategserv || '-' ||
                           --preco_tab.tpplano || '-' ||
                           preco_tab.cd_padrao_cobertura || '-' ||
                           --preco_tab.cdusucateg || '-' ||
                           --preco_tab.tpdependente || '-' ||
                           preco_tab.cd_grau_parentesco || '-' ||
                           preco_tab.nrqtusuario_inicio;
        vnr_faixa       := 1;

        --identificar a data inicio e fim de validade do preço
        --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
        --montá-la a partir do início do contrato
        begin
          select dtiniciocontrato, dtfimcontrato
            into vddtini_contrato, vddtfim_contrato
            from contrato_da_pessoa cdp
           where cdp.nrregistro = tab_preco_refer.nrregistro
             and cdp.nrcontrato = tab_preco_refer.nrcontrato;
        exception
          when no_data_found then
            vddtini_contrato := '01/01/1900';
            vddtfim_contrato := '31/12/9999';
        end;

        -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
        if preco_tab.nrperiodo_ult_reajuste <> 0 then
          vddtini_contrato := preco_tab.dat_inic;
        end if;

        --identificar a data fim de validade do preço
        begin
          --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
          --ex: atual 201509 prox 201609 então 31/08/2016
          --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
          select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                          substr(periodo_fim, 1, 4),
                          'DD/MM/YYYY') - 1)
            into vddtfim_reajuste
            from (select decode(min(nrperiodo_ult_reajuste),
                                null,
                                '999912',
                                min(nrperiodo_ult_reajuste)) periodo_fim
                    from preco_contrato_pessoa pc1
                   where pc1.nrtabela_contrato = preco_tab.nrtabela_contrato
                     and pc1.nrperiodo_ult_reajuste >
                         preco_tab.nrperiodo_ult_reajuste);
          --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
          if (vddtfim_contrato is not null) and
             (vddtfim_reajuste = '30/11/9999') then
            vddtfim_reajuste := vddtfim_contrato;
          end if;
          --se a data fim é 30/11/9999 virará 31/12/9999
          if vddtfim_reajuste = '30/11/9999' then
            vddtfim_reajuste := '31/12/9999';
          end if;
        exception
          when no_data_found then
            null;
        end;

        vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
        vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

      else
        vnr_faixa := vnr_faixa + 1;
      end if;

dbms_output.put_line('PROCESSANDO CRITERIO: ' || preco_tab.nrperiodo_ult_reajuste || '/' ||
                     preco_tab.cdcategserv || '/' ||
                     preco_tab.tpplano || '/' ||
                     preco_tab.cd_padrao_cobertura || '/' ||
                     --preco_tab.cdusucateg || '/' ||
                     --preco_tab.tpdependente || '/' ||
                     preco_tab.cd_grau_parentesco || '/' ||
                     preco_tab.nrqtusuario_inicio || '/' ||
                     preco_tab.nridade_inicio || ' FAIXA: ' || vnr_faixa
);


      --dbms_output.put_line('REGRA_MENSLID_CRITER1(vnr_regra,preco_tab.cd_padrao_cobertura,preco_tab.cd_modulo,preco_tab.cd_grau_parentesco,' ||
      --                     'vnr_faixa,preco_tab.nridade_inicio,preco_tab.nridade_fim,preco_tab.vlpreco_mensal,preco_tab.vlpreco_inscricao,' ||
      --                     'vddat_inic,vddat_fim,preco_tab.nrqtusu_ini,preco_tab.nrqtusu_fim;' ||
      --                     vnr_regra || ';' ||
      --                     preco_tab.cd_padrao_cobertura || ';' ||
      --                     preco_tab.cd_modulo || ';' ||
      --                     preco_tab.cd_grau_parentesco || ';' ||
      --                     vnr_faixa || ';' || preco_tab.nridade_inicio || ';' ||
      --                     preco_tab.nridade_fim || ';' ||
      --                     preco_tab.vlpreco_mensal || ';' ||
      --                     preco_tab.vlpreco_inscricao || ';' ||
      --                     vddat_inic || ';' || vddat_fim || ';' ||
      --                     preco_tab.nrqtusu_ini || ';' ||
      --                     preco_tab.nrqtusu_fim);

      --insere os criterios da regra
      p_insert_regra_menslid_criter(pAoSimular,
                                    vnr_regra,
                                    preco_tab.cd_padrao_cobertura,
                                    preco_tab.cd_modulo,
                                    preco_tab.cd_grau_parentesco,
                                    vnr_faixa,
                                    preco_tab.nridade_inicio,
                                    preco_tab.nridade_fim,
                                    preco_tab.vlpreco_mensal,
                                    preco_tab.vlpreco_inscricao,
                                    vddat_inic,
                                    vddat_fim,
                                    preco_tab.nrqtusu_ini,
                                    preco_tab.nrqtusu_fim,
                                    preco_tab.nrsequencia);
    end loop; --preco_tab  --loop dos precos da tabela

  end loop; --tab_preco_refer  --loop das tabelas

  \*=====================================================================================
   =  Inicio do processo que migra os preços específicos por família do contrato        =
   =  cada nrregistro + nrcontrato + nrfamilia = 1 regra                                =
   ======================================================================================
  *\
dbms_output.put_line('VAI GERAR REGRAS POR FAMILIA');

  for tab_preco_fam in (select distinct prc.nrtabela_contrato,
                                        prc.nrregistro,
                                        prc.nrcontrato,
                                        prc.nrtabela_padrao_origem,
                                        'PRECO ' ||
                                        decode(ctp.tpusu_contrato,
                                               'E',
                                               'PJ',
                                               'P',
                                               'PF',
                                               'C',
                                               'COOP',
                                               'UNI') ||
                                        ' FAMILIA - CONTR: ' ||
                                        prc.nrcontrato || ' FAM: ' ||
                                        lpad(pcp.nrfamilia, 6, '0') des_regra,
                                        prc.aopreco_por_qtde_dependente,
                                        prc.dtultimo_reajuste,
                                        prc.nrperiodo_proximo_reajuste,
                                        (substr(prc.nrperiodo_proximo_reajuste,
                                                1,
                                                4) - 1) ||
                                        substr(prc.nrperiodo_proximo_reajuste,
                                               5,
                                               2) reaj_atual,
                                        prc.nrperiodo_inicio,
                                        prc.cdlotacao,
                                        cp.dtiniciocontrato dat_inic,
                                        nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                        prp.cdcontrato,
                                        pcp.nrfamilia,
                                        (Select nvl(max(cdn_tip_idx), 1) \*valor '1' é default*\
                                         From   depara_indice_financeiro
                                         Where  cdindice = cp.cdindice) cdn_tip_idx,
                                       (select nvl(count(*),'0')
                                          from preco_contrato_pessoa pcp1
                                         where pcp1.nrtabela_contrato = prc.nrtabela_contrato
                                           and pcp1.tpplano <> '*') lg_tpplano_diferente

                          from preco_referencia_contrato prc,
                               contrato_da_pessoa        cp,
                               contrato_padrao           ctp,
                               preco_referencia_padrao   prp,
                               preco_contrato_pessoa     pcp
                         where cp.nrregistro = prc.nrregistro

                           And (cp.nrregistro = pNrregistro Or pNrregistro Is Null)
                           And (cp.nrcontrato = pNrcontrato Or pNrcontrato Is Null)

                           and cp.nrcontrato = prc.nrcontrato
                           and ctp.cdcontrato(+) = cp.cdcontrato_padrao
                           and prp.nrtabela_padrao = prc.nrtabela_padrao_origem
                           and pcp.nrtabela_contrato = prc.nrtabela_contrato
                           and pcp.nrfamilia <> 0

                              --Evandro Levi (16/05/2018): Validação para não utilizar preço específico
                              --                             por família se nenhum usuário da família estiver
                              --                             vinculado com a tabela de preço listada
                           And Exists
                         (Select 1
                                  From usuario
                                 Where nrregistro = prc.nrregistro
                                   And nrcontrato = prc.nrcontrato
                                   And nrfamilia = pcp.nrfamilia
                                   And nrtabela_contrato = pcp.nrtabela_contrato
                                   and (dtexclusao is null or dtexclusao > sysdate))

                           --precisa existir ao menos um beneficiario sem regra nesse contrato
                           and exists
                           (select 1 from gp.usuario u, gp.import_propost ip
                                    where ip.num_livre_2 = cp.nrregistro
                                      and ip.num_livre_3 = cp.nrcontrato
                                      and u.cd_modalidade = ip.cd_modalidade
                                      and u.nr_proposta   = ip.num_livre_10
                                      and not exists(
                                          select 1 from gp.regra_menslid_propost rmp
                                                  where rmp.cd_modalidade = u.cd_modalidade
                                                    and rmp.nr_proposta = u.nr_proposta
                                                    and rmp.cd_usuario = u.cd_usuario)
                           )

                        --and prc.nrtabela_contrato in (74018,115070,115071,115200)  --************************ teste
                         order by prc.nrregistro,
                                  prc.nrcontrato,
                                  prp.cdcontrato,
                                  pcp.nrfamilia,
                                  prc.nrtabela_contrato) loop

    --Se é um novo contrato da pessoa ou nova família é criada uma nova regra
    if (tab_preco_fam.nrregistro <> vnrregistro or
       tab_preco_fam.nrcontrato <> vnrcontrato or
       tab_preco_fam.cdcontrato <> vcdcontrato or
       tab_preco_fam.nrfamilia <> vnrfamilia) then

      vnr_regra   := vnr_regra + 1;
      vnrregistro := tab_preco_fam.nrregistro;
      vnrcontrato := tab_preco_fam.nrcontrato;
      vnrfamilia  := tab_preco_fam.nrfamilia;
      vcdcontrato := tab_preco_fam.cdcontrato;

      --dbms_output.put_line('REGRA_MENSLID2(REGRA,DESCRICAO,INICIO,FIM);' ||
      --                     vnr_regra || ';' || tab_preco_fam.des_regra || ';' ||
      --                     tab_preco_fam.dat_inic || ';' ||
      --                     tab_preco_fam.dat_fim);

      --insere a regra para a estrutura
      p_insert_regra_menslid(pAoSimular,
                             vnr_regra,
                             tab_preco_fam.des_regra,
                             tab_preco_fam.dat_inic,
                             tab_preco_fam.dat_fim,
                             tab_preco_fam.cdn_tip_idx);

      --dbms_output.put_line('REGRA_MENSLID_REAJ2(vnr_regra,tab_preco_refer.reaj_atual);' ||
      --                     vnr_regra || ';' || tab_preco_fam.reaj_atual);

      --insere a data de reajuste da regra
      p_insert_regra_menslid_reaj(pAoSimular,
                                  vnr_regra,
                                  tab_preco_fam.reaj_atual);

      for estrutura in (select ta.cd_modalidade vcd_modalidade,
                               ta.cd_plano      vcd_plano,
                               ta.cd_tipo_plano vcd_tipo_plano
                          from preco_referencia_padrao pp,
                               temp_depara_detalhado   td,
                               temp_depara_agrupado    ta
                         where pp.nrtabela_padrao =
                               tab_preco_fam.nrtabela_padrao_origem --join com a nrtabela origem do loop
                           and pp.cdcontrato = td.cdcontrato --join plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
                        ) loop

        --Localizar o código da proposta e dos beneficiarios da família
        for usu_fam in (select nrsequencial_usuario, ib.nr_proposta, ugp.cd_usuario
                          from usuario u, import_bnfciar ib, gp.usuario ugp
                         where u.nrregistro = tab_preco_fam.nrregistro
                           and u.nrcontrato = tab_preco_fam.nrcontrato
                           and u.nrfamilia = tab_preco_fam.nrfamilia
                           and ib.num_seqcial_bnfciar = u.nrsequencial_usuario
                           and ugp.cd_carteira_antiga = ib.cd_carteira_antiga
                           and ugp.cd_modalidade = estrutura.vcd_modalidade
                           and not exists
                           (select 1 from gp.regra_menslid_propost rmp
                                    where rmp.cd_modalidade = ugp.cd_modalidade
                                      and rmp.nr_proposta = ugp.nr_proposta
                                      and rmp.cd_usuario  = ugp.cd_usuario)
                           ) loop

          \*dbms_output.put_line('REGRA_MENSLID_ESTRUT2(vnr_regra,vcd_modalidade,vcd_plano,vcd_tipo_plano,' ||
                               'tab_preco_refer.dat_inic,tab_preco_refer.dat_fim,vnr_proposta,beneficiario);' ||
                               vnr_regra || ';' ||
                               estrutura.vcd_modalidade || ';' ||
                               estrutura.vcd_plano || ';' ||
                               estrutura.vcd_tipo_plano || ';' ||
                               tab_preco_fam.dat_inic || ';' ||
                               tab_preco_fam.dat_fim || ';' ||
                               vnr_proposta || ';' || vnr_seq_usuario);*\

          --insere a estrutura da regra
          p_insert_regra_menslid_estrut(pAoSimular,
                                        vnr_regra,
                                        estrutura.vcd_modalidade,
                                        estrutura.vcd_plano,
                                        estrutura.vcd_tipo_plano,
                                        tab_preco_fam.dat_inic,
                                        tab_preco_fam.dat_fim,
                                        usu_fam.nr_proposta,
                                        usu_fam.cd_usuario);
        end loop;
      end loop;
    end if; --criação da regra

    --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
    --Antonio 19/11/2016
    insert into temp_depara_tabela_preco
    values
      (tab_preco_fam.nrtabela_contrato, --Tabela de Preços do Unicoo
       vnr_regra, --Código da Regra que virou no TOTVS
       tab_preco_fam.nrfamilia, --Código da Família quando preço por familia
       null, --Código do Usuario quando preço por usuario
       null); --Código da Lotação quando preço por lotacao

dbms_output.put_line('VAI GERAR CRITERIOS PARA A REGRA: ' || vnr_regra);

    vcd_chave_preco := ' ';
    --Varre os valores da tabela de referência na preco_contrato_pessoa procurando os valores da familia
    for preco_fam in (select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                             --'0' cd_grau_parentesco,

                             rm.cdvalor_externo cd_modulo,
                             pc.CDCATEGSERV,
                             pc.TPPLANO,
                             pc.CDUSUCATEG,
                             pc.TPDEPENDENTE,
                             pc.NRIDADE_INICIO,
                             pc.NRIDADE_FIM,
                             pc.NRQTUSUARIO_INICIO,
                             pc.NRQTUSUARIO_FIM,
                             pc.NRPERIODO_ULT_REAJUSTE,
                             pc.VLPRECO_MENSAL,
                             pc.VLPRECO_INSCRICAO,
                             pc.NRSEQUENCIAL_USUARIO,
                             pc.NRFAMILIA,
                             pc.CDLOTACAO,
                             pc.NRTABELA_CONTRATO,

\*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*\

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_fam.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             pc.nrsequencia,
                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim,
                             2 origem_preco
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_fam.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrfamilia = tab_preco_fam.nrfamilia --nrfamilia do loop da tabela referencia
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato

                      union
                      --Buscar os preços do contrato das categorias que a família não possui para completar a regra
                      select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                             --'0' cd_grau_parentesco,
                             rm.cdvalor_externo cd_modulo,
                             pc.CDCATEGSERV,
                             pc.TPPLANO,
                             pc.CDUSUCATEG,
                             pc.TPDEPENDENTE,
                             pc.NRIDADE_INICIO,
                             pc.NRIDADE_FIM,
                             pc.NRQTUSUARIO_INICIO,
                             pc.NRQTUSUARIO_FIM,
                             pc.NRPERIODO_ULT_REAJUSTE,
                             pc.VLPRECO_MENSAL,
                             pc.VLPRECO_INSCRICAO,
                             pc.NRSEQUENCIAL_USUARIO,
                             pc.NRFAMILIA,
                             pc.CDLOTACAO,
                             pc.NRTABELA_CONTRATO,

\*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*\

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_fam.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             pc.nrsequencia,
                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim,
                             1 origem_preco
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_fam.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrfamilia = 0 --preco do contrato
                         and pc.nrsequencial_usuario = 0 --preco do contrato
                         and pc.cdlotacao = '*' --preco do contrato
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                         and pc.cdcategserv not in
                             (select distinct p.cdcategserv
                                from preco_contrato_pessoa p
                               where p.nrtabela_contrato =
                                     pc.nrtabela_contrato
                                 and p.nrfamilia = tab_preco_fam.nrfamilia)
                       order by nrperiodo_ult_reajuste,
                                cdcategserv,
                                --tpplano,
                                cd_padrao_cobertura,
                                --cdusucateg,
                                --tpdependente,
                                cd_grau_parentesco,
                                nrqtusuario_inicio,
                                nridade_inicio) loop

    dbms_output.put_line('vcd_chave_preco ANTES: ' || vcd_chave_preco);

    dbms_output.put_line('COMO ESTA COMPARANDO: ' ||
          preco_fam.nrperiodo_ult_reajuste || '-' ||
          preco_fam.cdcategserv || '-' ||
          --preco_fam.tpplano || '-' ||
          preco_fam.cd_padrao_cobertura || '-' ||
          --preco_fam.cdusucateg || '-' ||
          --preco_fam.tpdependente || '-' ||
          preco_fam.cd_grau_parentesco || '-' ||
          preco_fam.nrqtusuario_inicio);

      --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
      if (preco_fam.nrperiodo_ult_reajuste || '-' ||
          preco_fam.cdcategserv || '-' ||
          --preco_fam.tpplano || '-' ||
          preco_fam.cd_padrao_cobertura || '-' ||
          --preco_fam.cdusucateg || '-' ||
          --preco_fam.tpdependente || '-' ||
          preco_fam.cd_grau_parentesco || '-' ||
          preco_fam.nrqtusuario_inicio) <> vcd_chave_preco then

        vcd_chave_preco := preco_fam.nrperiodo_ult_reajuste || '-' ||
                           preco_fam.cdcategserv || '-' ||
                           --preco_fam.tpplano || '-' ||
                           preco_fam.cd_padrao_cobertura || '-' ||
                           --preco_fam.cdusucateg || '-' ||
                           --preco_fam.tpdependente || '-' ||
                           preco_fam.cd_grau_parentesco || '-' ||
                           preco_fam.nrqtusuario_inicio;
        vnr_faixa       := 1;

        --identificar a data inicio e fim de validade do preço
        --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
        --montá-la a partir do início do contrato
        begin
          select dtiniciocontrato, dtfimcontrato
            into vddtini_contrato, vddtfim_contrato
            from contrato_da_pessoa cdp
           where cdp.nrregistro = tab_preco_fam.nrregistro
             and cdp.nrcontrato = tab_preco_fam.nrcontrato;
        exception
          when no_data_found then
            vddtini_contrato := '01/01/1900';
            vddtfim_contrato := '31/12/9999';
        end;

        -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
        if preco_fam.nrperiodo_ult_reajuste <> 0 then
          vddtini_contrato := preco_fam.dat_inic;
        end if;

        --identificar a data fim de validade do preço
        begin
          --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
          --ex: atual 201509 prox 201609 então 31/08/2016
          --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
          select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                          substr(periodo_fim, 1, 4),
                          'DD/MM/YYYY') - 1)
            into vddtfim_reajuste
            from (select decode(min(nrperiodo_ult_reajuste),
                                null,
                                '999912',
                                min(nrperiodo_ult_reajuste)) periodo_fim
                    from preco_contrato_pessoa pc1
                   where pc1.nrtabela_contrato = preco_fam.nrtabela_contrato
                     and pc1.cdcategserv = preco_fam.cdcategserv
                     and pc1.nrsequencial_usuario = 0
                     and pc1.nrfamilia = decode(preco_fam.origem_preco,
                                                2,
                                                preco_fam.nrfamilia,
                                                0)
                     and pc1.cdlotacao = '*'
                     and pc1.nrperiodo_ult_reajuste >
                         preco_fam.nrperiodo_ult_reajuste);
          --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
          if (vddtfim_contrato is not null) and
             (vddtfim_reajuste = '30/11/9999') then
            vddtfim_reajuste := vddtfim_contrato;
          end if;
          --se a data fim é 30/11/9999 virará 31/12/9999
          if vddtfim_reajuste = '30/11/9999' then
            vddtfim_reajuste := '31/12/9999';
          end if;
        exception
          when no_data_found then
            null;
        end;

        vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
        vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

      else
        vnr_faixa := vnr_faixa + 1;
      end if;

dbms_output.put_line('COMO FICOU VNR_FAIXA: ' || vnr_faixa);

      \*dbms_output.put_line('REGRA_MENSLID_CRITER2(vnr_regra,preco_tab.cd_padrao_cobertura,preco_tab.cd_modulo,preco_tab.cd_grau_parentesco,' ||
                           'vnr_faixa,preco_tab.nridade_inicio,preco_tab.nridade_fim,preco_tab.vlpreco_mensal,preco_tab.vlpreco_inscricao,' ||
                           'vddat_inic,vddat_fim,preco_tab.nrqtusu_ini,preco_tab.nrqtusu_fim;' ||
                           vnr_regra || ';' ||
                           preco_fam.cd_padrao_cobertura || ';' ||
                           preco_fam.cd_modulo || ';' ||
                           preco_fam.cd_grau_parentesco || ';' ||
                           vnr_faixa || ';' || preco_fam.nridade_inicio || ';' ||
                           preco_fam.nridade_fim || ';' ||
                           preco_fam.vlpreco_mensal || ';' ||
                           preco_fam.vlpreco_inscricao || ';' ||
                           vddat_inic || ';' || vddat_fim || ';' ||
                           preco_fam.nrqtusu_ini || ';' ||
                           preco_fam.nrqtusu_fim);*\

      --insere os criterios da regra
      p_insert_regra_menslid_criter(pAoSimular,
                                    vnr_regra,
                                    preco_fam.cd_padrao_cobertura,
                                    preco_fam.cd_modulo,
                                    preco_fam.cd_grau_parentesco,
                                    vnr_faixa,
                                    preco_fam.nridade_inicio,
                                    preco_fam.nridade_fim,
                                    preco_fam.vlpreco_mensal,
                                    preco_fam.vlpreco_inscricao,
                                    vddat_inic,
                                    vddat_fim,
                                    preco_fam.nrqtusu_ini,
                                    preco_fam.nrqtusu_fim,
                                    preco_fam.nrsequencia);
    end loop; --preco_fam  --loop dos precos da tabela
  end loop; --tab_preco_fam  --loop das tabelas das familias

  \*=====================================================================================
   =  Inicio do processo que migra os preços específicos por usuario do contrato        =
   =  cada nrregistro + nrcontrato + nrsequencial_usuario = 1 regra                     =
   ======================================================================================
  *\

  dbms_output.put_line('VAI GERAR REGRAS ESPECIFICAS DO USUARIO DO CONTRATO');
  for tab_preco_usu in (select distinct prc.nrtabela_contrato,
                                        prc.nrregistro,
                                        prc.nrcontrato,
                                        prc.nrtabela_padrao_origem,
                                        'PRECO ' ||
                                        decode(ctp.tpusu_contrato,
                                               'E',
                                               'PJ',
                                               'P',
                                               'PF',
                                               'C',
                                               'COOP',
                                               'UNI') || ' USU - CONTR: ' ||
                                        prc.nrcontrato ||
                                        '                                    ' des_regra,
                                        prc.aopreco_por_qtde_dependente,
                                        prc.dtultimo_reajuste,
                                        prc.nrperiodo_proximo_reajuste,
                                        (substr(prc.nrperiodo_proximo_reajuste,
                                                1,
                                                4) - 1) ||
                                        substr(prc.nrperiodo_proximo_reajuste,
                                               5,
                                               2) reaj_atual,
                                        prc.nrperiodo_inicio,
                                        prc.cdlotacao,
                                        cp.dtiniciocontrato dat_inic,
                                        nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                        prp.cdcontrato,
                                        pcp.nrfamilia,
                                        pcp.nrsequencial_usuario,
                                        (Select nvl(max(cdn_tip_idx), 1) \*valor '1' é default*\
                                         From   depara_indice_financeiro
                                         Where  cdindice = cp.cdindice) cdn_tip_idx,
                                       (select nvl(count(*),'0')
                                          from preco_contrato_pessoa pcp1
                                         where pcp1.nrtabela_contrato = prc.nrtabela_contrato
                                           and pcp1.tpplano <> '*') lg_tpplano_diferente

                          from preco_referencia_contrato prc,
                               contrato_da_pessoa        cp,
                               contrato_padrao           ctp,
                               preco_referencia_padrao   prp,
                               preco_contrato_pessoa     pcp
                         where cp.nrregistro = prc.nrregistro
                           And (cp.nrregistro = pNrregistro Or
                               pNrregistro Is Null)
                           And (cp.nrcontrato = pNrcontrato Or
                               pNrcontrato Is Null)

                           and cp.nrcontrato = prc.nrcontrato
                           and ctp.cdcontrato(+) = cp.cdcontrato_padrao
                           and prp.nrtabela_padrao =
                               prc.nrtabela_padrao_origem
                           and pcp.nrtabela_contrato = prc.nrtabela_contrato
                           and pcp.nrsequencial_usuario <> 0

                              --Evandro Levi (16/05/2018): Validação para não utilizar preço específico
                              --                             por usuário se no cadastro do usuário não
                              --                             existir vinculo com a tabela de preço listada.
                           And Exists
                         (Select 1
                                  From usuario
                                 Where nrsequencial_usuario = pcp.nrsequencial_usuario
                                   And nrtabela_contrato    = pcp.nrtabela_contrato)
                         -- o usuario deve existir no TOTVS e estar sem regra para entrar nessa logica
                           --precisa existir ao menos um beneficiario sem regra nesse contrato
                         and exists
                         (select 1 from gp.usuario u, gp.import_bnfciar ib
                                  where ib.num_seqcial_bnfciar = pcp.nrsequencial_usuario
                                    and u.cd_modalidade = ib.cd_modalidade
                                    and u.nr_proposta   = ib.nr_proposta
                                    and u.cd_usuario = ib.num_livre_6
                                    and not exists(
                                        select 1 from gp.regra_menslid_propost rmp
                                                where rmp.cd_modalidade = u.cd_modalidade
                                                  and rmp.nr_proposta = u.nr_proposta
                                                  and rmp.cd_usuario = u.cd_usuario))

                        --                               and prc.nrtabela_contrato   in (100547,100548)  --************************ teste
                         order by prc.nrregistro,
                                  prc.nrcontrato,
                                  prp.cdcontrato,
                                  pcp.nrsequencial_usuario,
                                  prc.nrtabela_contrato) loop

    --Se é um novo contrato da pessoa ou nova família é criada uma nova regra
    if (tab_preco_usu.nrregistro <> vnrregistro or
       tab_preco_usu.nrcontrato <> vnrcontrato or
       tab_preco_usu.cdcontrato <> vcdcontrato or
       tab_preco_usu.nrsequencial_usuario <> vnrseq_usu) then
      vnr_regra   := vnr_regra + 1;
      vnrregistro := tab_preco_usu.nrregistro;
      vnrcontrato := tab_preco_usu.nrcontrato;
      vcdcontrato := tab_preco_usu.cdcontrato;
      vnrseq_usu  := tab_preco_usu.nrsequencial_usuario;

      --Localiza o código da família do usuário
      begin
        select nrfamilia, tpusuario
          into tab_preco_usu.nrfamilia, vtpusuario
          from usuario u
         where u.nrsequencial_usuario = tab_preco_usu.nrsequencial_usuario;
      exception
        when no_data_found then
          null;
      end;

      if tab_preco_usu.nrfamilia <> 0 then
        tab_preco_usu.des_regra := TRIM(tab_preco_usu.des_regra) ||
                                   ' FAM: ' ||
                                   lpad(tab_preco_usu.nrfamilia, 6, '0') ||
                                   ' TP USU: ' || lpad(vtpusuario, 2, '0');

dbms_output.put_line('ATRIBUINDO DESCRICAO DA REGRA: ' || tab_preco_usu.des_regra);

      else
        tab_preco_usu.des_regra := TRIM(tab_preco_usu.des_regra);
      end if;

      \*dbms_output.put_line('REGRA_MENSLID3(REGRA,DESCRICAO,INICIO,FIM);' ||
                           vnr_regra || ';' || tab_preco_usu.des_regra || ';' ||
                           tab_preco_usu.dat_inic || ';' ||
                           tab_preco_usu.dat_fim);*\

      --insere a regra para a estrutura
      p_insert_regra_menslid(pAoSimular,
                             vnr_regra,
                             tab_preco_usu.des_regra,
                             tab_preco_usu.dat_inic,
                             tab_preco_usu.dat_fim,
                             tab_preco_usu.cdn_tip_idx);

      --dbms_output.put_line('REGRA_MENSLID_REAJ3(vnr_regra,tab_preco_refer.reaj_atual);' ||
      --                     vnr_regra || ';' || tab_preco_usu.reaj_atual);

      --insere a data de reajuste da regra
      p_insert_regra_menslid_reaj(pAoSimular,
                                  vnr_regra,
                                  tab_preco_usu.reaj_atual);

      for estrutura in (select ta.cd_modalidade vcd_modalidade,
                               ta.cd_plano      vcd_plano,
                               ta.cd_tipo_plano vcd_tipo_plano
                          from preco_referencia_padrao pp,
                               temp_depara_detalhado   td,
                               temp_depara_agrupado    ta
                         where pp.nrtabela_padrao =
                               tab_preco_usu.nrtabela_padrao_origem --join com a nrtabela origem do loop
                           and pp.cdcontrato = td.cdcontrato --join plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
                        ) loop

        --Localizar o código da proposta e do beneficiario
        for estrut_usu in (select u.nr_proposta, u.cd_usuario
                             from import_bnfciar ib, gp.usuario u
                            where ib.num_seqcial_bnfciar =
                                  tab_preco_usu.nrsequencial_usuario
                              and u.cd_carteira_antiga =
                                  ib.cd_carteira_antiga
                              and u.cd_modalidade = estrutura.vcd_modalidade) loop

          \*dbms_output.put_line('REGRA_MENSLID_ESTRUT3(vnr_regra,vcd_modalidade,vcd_plano,vcd_tipo_plano,' ||
                               'tab_preco_refer.dat_inic,tab_preco_refer.dat_fim,vnr_proposta,beneficiario);' ||
                               vnr_regra || ';' ||
                               estrutura.vcd_modalidade || ';' ||
                               estrutura.vcd_plano || ';' ||
                               estrutura.vcd_tipo_plano || ';' ||
                               tab_preco_usu.dat_inic || ';' ||
                               tab_preco_usu.dat_fim || ';' ||
                               estrut_usu.nr_proposta || ';' ||
                               estrut_usu.cd_usuario);*\

          --insere a estrutura da regra
          p_insert_regra_menslid_estrut(pAoSimular,
                                        vnr_regra,
                                        estrutura.vcd_modalidade,
                                        estrutura.vcd_plano,
                                        estrutura.vcd_tipo_plano,
                                        tab_preco_usu.dat_inic,
                                        tab_preco_usu.dat_fim,
                                        estrut_usu.nr_proposta,
                                        estrut_usu.cd_usuario);

        end loop; --propostas do usu
      end loop;
    end if; --criação da regra

    --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
    --Antonio 19/11/2016
    insert into temp_depara_tabela_preco
    values
      (tab_preco_usu.nrtabela_contrato, --Tabela de Preços do Unicoo
       vnr_regra, --Código da Regra que virou no TOTVS
       tab_preco_usu.nrfamilia, --Código da Família quando preço por familia
       tab_preco_usu.nrsequencial_usuario, --Código do Usuario quando preço por usuario
       null); --Código da Lotação quando preço por lotacao

    vcd_chave_preco := ' ';
    --Varre os valores da tabela de referência na preco_contrato_pessoa procurando os valores da familia
    for preco_usu in (select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                             --'0' cd_grau_parentesco,

                             rm.cdvalor_externo cd_modulo,
                             pc.CDCATEGSERV,
                             pc.TPPLANO,
                             pc.CDUSUCATEG,
                             pc.TPDEPENDENTE,
                             pc.NRIDADE_INICIO,
                             pc.NRIDADE_FIM,
                             pc.NRQTUSUARIO_INICIO,
                             pc.NRQTUSUARIO_FIM,
                             pc.NRPERIODO_ULT_REAJUSTE,
                             pc.VLPRECO_MENSAL,
                             pc.VLPRECO_INSCRICAO,
                             pc.NRSEQUENCIAL_USUARIO,
                             pc.NRFAMILIA,
                             pc.CDLOTACAO,
                             pc.NRTABELA_CONTRATO,

\*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*\

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_usu.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             pc.nrsequencia,
                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim,
                             3 ORIGEM_PRECO
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_usu.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrsequencial_usuario =
                             tab_preco_usu.nrsequencial_usuario --nrfamilia do loop da tabela referencia
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                      union
                      --Buscar os preços da família das categorias que o usuário não tem para completar a regra
                      select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                             --'0' cd_grau_parentesco,
                             rm.cdvalor_externo cd_modulo,
                             pc.CDCATEGSERV,
                             pc.TPPLANO,
                             pc.CDUSUCATEG,
                             pc.TPDEPENDENTE,
                             pc.NRIDADE_INICIO,
                             pc.NRIDADE_FIM,
                             pc.NRQTUSUARIO_INICIO,
                             pc.NRQTUSUARIO_FIM,
                             pc.NRPERIODO_ULT_REAJUSTE,
                             pc.VLPRECO_MENSAL,
                             pc.VLPRECO_INSCRICAO,
                             pc.NRSEQUENCIAL_USUARIO,
                             pc.NRFAMILIA,
                             pc.CDLOTACAO,
                             pc.NRTABELA_CONTRATO,

\*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*\

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_usu.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             pc.nrsequencia,
                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim,
                             2 ORIGEM_PRECO
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_usu.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrsequencial_usuario = 0 --preços da família
                         and pc.nrfamilia = tab_preco_usu.nrfamilia --preços da familia
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                         and pc.cdcategserv not in
                             (select distinct p.cdcategserv
                                from preco_contrato_pessoa p
                               where p.nrtabela_contrato =
                                     pc.nrtabela_contrato
                                 and p.nrsequencial_usuario =
                                     tab_preco_usu.nrsequencial_usuario)
                      union
                      --Buscar os preços do contrato das categorias que o usuário não tem e a família também não p/completar a regra
                      select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                             --'0' cd_grau_parentesco,
                             rm.cdvalor_externo cd_modulo,
                             pc.CDCATEGSERV,
                             pc.TPPLANO,
                             pc.CDUSUCATEG,
                             pc.TPDEPENDENTE,
                             pc.NRIDADE_INICIO,
                             pc.NRIDADE_FIM,
                             pc.NRQTUSUARIO_INICIO,
                             pc.NRQTUSUARIO_FIM,
                             pc.NRPERIODO_ULT_REAJUSTE,
                             pc.VLPRECO_MENSAL,
                             pc.VLPRECO_INSCRICAO,
                             pc.NRSEQUENCIAL_USUARIO,
                             pc.NRFAMILIA,
                             pc.CDLOTACAO,
                             pc.NRTABELA_CONTRATO,

\*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*\

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_usu.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             pc.nrsequencia,
                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim,
                             1 ORIGEM_PRECO
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_usu.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrsequencial_usuario = 0 --preços do contrato
                         and pc.nrfamilia = 0 --preços do contrato
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                         and pc.cdcategserv not in
                             (select distinct p.cdcategserv
                                from preco_contrato_pessoa p
                               where p.nrtabela_contrato =
                                     pc.nrtabela_contrato
                                 and p.nrfamilia = tab_preco_usu.nrfamilia)
                         and pc.cdcategserv not in
                             (select distinct p.cdcategserv
                                from preco_contrato_pessoa p
                               where p.nrtabela_contrato =
                                     pc.nrtabela_contrato
                                 and p.nrsequencial_usuario =
                                     tab_preco_usu.nrsequencial_usuario)
                       order by nrperiodo_ult_reajuste,
                                cdcategserv,
                                --tpplano,
                                cd_padrao_cobertura,
                                --cdusucateg,
                                --tpdependente,
                                cd_grau_parentesco,
                                nrqtusuario_inicio,
                                nridade_inicio) loop

\*dbms_output.put_line('vnr_regra/vcd_chave_preco/vnr_faixa antes: ' || vnr_regra || '/' || vcd_chave_preco || '/' || vnr_faixa);
dbms_output.put_line('antes da comparacao: ' ||
          preco_usu.nrperiodo_ult_reajuste || '-' ||
          preco_usu.cdcategserv || '-' ||
          preco_usu.tpplano || '-' ||
          preco_usu.cdusucateg || '-' ||
          preco_usu.tpdependente || '-' ||
          preco_usu.nrqtusuario_inicio);*\

      --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
      if (preco_usu.nrperiodo_ult_reajuste || '-' ||
          preco_usu.cdcategserv || '-' ||
          --preco_usu.tpplano || '-' ||
          preco_usu.cd_padrao_cobertura || '-' ||
          --preco_usu.cdusucateg || '-' ||
          --preco_usu.tpdependente || '-' ||
          preco_usu.cd_grau_parentesco || '-' ||
          preco_usu.nrqtusuario_inicio) <> vcd_chave_preco then

        vcd_chave_preco := preco_usu.nrperiodo_ult_reajuste || '-' ||
                           preco_usu.cdcategserv || '-' ||
                           --preco_usu.tpplano || '-' ||
                           preco_usu.cd_padrao_cobertura || '-' ||
                           --preco_usu.cdusucateg || '-' ||
                           --preco_usu.tpdependente || '-' ||
                           preco_usu.cd_grau_parentesco || '-' ||
                           preco_usu.nrqtusuario_inicio;
        vnr_faixa       := 1;

        --identificar a data inicio e fim de validade do preço
        --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
        --montá-la a partir do início do contrato
        begin
          select dtiniciocontrato, dtfimcontrato
            into vddtini_contrato, vddtfim_contrato
            from contrato_da_pessoa cdp
           where cdp.nrregistro = tab_preco_usu.nrregistro
             and cdp.nrcontrato = tab_preco_usu.nrcontrato;
        exception
          when no_data_found then
            vddtini_contrato := '01/01/1900';
            vddtfim_contrato := '31/12/9999';
        end;

        -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
        if preco_usu.nrperiodo_ult_reajuste <> 0 then
          vddtini_contrato := preco_usu.dat_inic;
        end if;

        --identificar a data fim de validade do preço
        begin
          --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
          --ex: atual 201509 prox 201609 então 31/08/2016
          --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
          select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                          substr(periodo_fim, 1, 4),
                          'DD/MM/YYYY') - 1)
            into vddtfim_reajuste
            from (select decode(min(nrperiodo_ult_reajuste),
                                null,
                                '999912',
                                min(nrperiodo_ult_reajuste)) periodo_fim
                    from preco_contrato_pessoa pc1
                   where pc1.nrtabela_contrato = preco_usu.nrtabela_contrato
                     and pc1.cdcategserv = preco_usu.cdcategserv
                     and pc1.nrsequencial_usuario =
                         decode(preco_usu.origem_preco,
                                3,
                                preco_usu.nrsequencial_usuario,
                                0)
                     and pc1.nrfamilia = decode(preco_usu.origem_preco,
                                                2,
                                                preco_usu.nrfamilia,
                                                0)
                     and pc1.cdlotacao = '*'
                     and pc1.nrperiodo_ult_reajuste >
                         preco_usu.nrperiodo_ult_reajuste);

          --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
          if (vddtfim_contrato is not null) and
             (vddtfim_reajuste = '30/11/9999') then
            vddtfim_reajuste := vddtfim_contrato;
          end if;
          --se a data fim é 30/11/9999 virará 31/12/9999
          if vddtfim_reajuste = '30/11/9999' then
            vddtfim_reajuste := '31/12/9999';
          end if;
        exception
          when no_data_found then
            null;
        end;

        vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
        vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

      else
        vnr_faixa := vnr_faixa + 1;
      end if;

--      dbms_output.put_line('como ficou vnr_faixa: ' || vnr_faixa);

      \*dbms_output.put_line('REGRA_MENSLID_CRITER3(vnr_regra,preco_tab.cd_padrao_cobertura,preco_tab.cd_modulo,preco_tab.cd_grau_parentesco,' ||
                           'vnr_faixa,preco_tab.nridade_inicio,preco_tab.nridade_fim,preco_tab.vlpreco_mensal,preco_tab.vlpreco_inscricao,' ||
                           'vddat_inic,vddat_fim,preco_tab.nrqtusu_ini,preco_tab.nrqtusu_fim;' ||
                           vnr_regra || ';' ||
                           preco_usu.cd_padrao_cobertura || ';' ||
                           preco_usu.cd_modulo || ';' ||
                           preco_usu.cd_grau_parentesco || ';' ||
                           vnr_faixa || ';' || preco_usu.nridade_inicio || ';' ||
                           preco_usu.nridade_fim || ';' ||
                           preco_usu.vlpreco_mensal || ';' ||
                           preco_usu.vlpreco_inscricao || ';' ||
                           vddat_inic || ';' || vddat_fim || ';' ||
                           preco_usu.nrqtusu_ini || ';' ||
                           preco_usu.nrqtusu_fim);*\

      --insere os criterios da regra
      p_insert_regra_menslid_criter(pAoSimular,
                                    vnr_regra,
                                    preco_usu.cd_padrao_cobertura,
                                    preco_usu.cd_modulo,
                                    preco_usu.cd_grau_parentesco,
                                    vnr_faixa,
                                    preco_usu.nridade_inicio,
                                    preco_usu.nridade_fim,
                                    preco_usu.vlpreco_mensal,
                                    preco_usu.vlpreco_inscricao,
                                    vddat_inic,
                                    vddat_fim,
                                    preco_usu.nrqtusu_ini,
                                    preco_usu.nrqtusu_fim,
                                    preco_usu.nrsequencia);
    end loop; --preco_usu  --loop dos precos do usuario
  end loop; --tab_preco_usu  --loop das tabelas dos usuarios

  \*=====================================================================================
   =  Inicio do processo que migra os preços específicos por usuario do contrato        =
   =  cada nrregistro + nrcontrato + lotacao = 1 regra                                  =
   ======================================================================================
  *\

  for tab_preco_lota in (select distinct prc.nrtabela_contrato,
                                         prc.nrregistro,
                                         prc.nrcontrato,
                                         prc.nrtabela_padrao_origem,
                                         'PRECO LOTACAO - CONTR: ' ||
                                         prc.nrcontrato || ' LOTACAO: ' ||
                                         pcp.cdlotacao des_regra,
                                         prc.aopreco_por_qtde_dependente,
                                         prc.dtultimo_reajuste,
                                         prc.nrperiodo_proximo_reajuste,
                                         (substr(prc.nrperiodo_proximo_reajuste,
                                                 1,
                                                 4) - 1) ||
                                         substr(prc.nrperiodo_proximo_reajuste,
                                                5,
                                                2) reaj_atual,
                                         prc.nrperiodo_inicio,
                                         prc.cdlotacao cdlotacao_refer,
                                         cp.dtiniciocontrato dat_inic,
                                         nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                         pcp.nrfamilia,
                                         pcp.nrsequencial_usuario,
                                         prp.cdcontrato,
                                         pcp.cdlotacao cdlotacao,
                                         (Select nvl(max(cdn_tip_idx), 1) \*valor '1' é default*\
                                          From   depara_indice_financeiro
                                          Where  cdindice = cp.cdindice) cdn_tip_idx,
                                         (select nvl(count(*),'0')
                                            from preco_contrato_pessoa pcp1
                                           where pcp1.nrtabela_contrato = prc.nrtabela_contrato
                                             and pcp1.tpplano <> '*') lg_tpplano_diferente

                           from preco_referencia_contrato prc,
                                contrato_da_pessoa        cp,
                                preco_referencia_padrao   prp,
                                preco_contrato_pessoa     pcp
                          where cp.nrregistro = prc.nrregistro
                            And (cp.nrregistro = pNrregistro Or
                                pNrregistro Is Null)
                            And (cp.nrcontrato = pNrcontrato Or
                                pNrcontrato Is Null)

                            and cp.nrcontrato = prc.nrcontrato
                            and prp.nrtabela_padrao =
                                prc.nrtabela_padrao_origem
                            and pcp.nrtabela_contrato =
                                prc.nrtabela_contrato
                            and pcp.cdlotacao <> '*'

                         --a regra deve ser usada por ao menos um beneficiario, pois no Unicoo podem existir
                         --regras associadas ao contrato mas sem vinculo com nenhum beneficiario.
                         --estava criando criterios sobrepostos (Alex Boeira 02/01/2019)
                           and exists
                         (select 1 from usuario uu
                                  where uu.nrregistro = prc.nrregistro
                                    and uu.nrcontrato = prc.nrcontrato
                                    and uu.nrtabela_contrato = prc.nrtabela_contrato
                                    and (uu.dtexclusao is null or uu.dtexclusao > sysdate))

                           --precisa existir ao menos um beneficiario sem regra nesse contrato
                           and exists
                           (select 1 from gp.usuario u, gp.import_propost ip
                                    where ip.num_livre_2 = cp.nrregistro
                                      and ip.num_livre_3 = cp.nrcontrato
                                      and u.cd_modalidade = ip.cd_modalidade
                                      and u.nr_proposta   = ip.num_livre_10
                                      and not exists(
                                          select 1 from gp.regra_menslid_propost rmp
                                                  where rmp.cd_modalidade = u.cd_modalidade
                                                    and rmp.nr_proposta = u.nr_proposta
                                                    and rmp.cd_usuario = u.cd_usuario)
                           )

                          order by prc.nrregistro,
                                   prc.nrcontrato,
                                   pcp.cdlotacao,
                                   prc.nrtabela_contrato) loop

    --Se é um novo contrato da pessoa ou nova lotacao é criada uma nova regra
    if (tab_preco_lota.nrregistro <> vnrregistro or
       tab_preco_lota.nrcontrato <> vnrcontrato or
       tab_preco_lota.cdcontrato <> vcdcontrato or
       tab_preco_lota.cdlotacao <> vcdlotacao) then
      vnr_regra   := vnr_regra + 1;
      vnrregistro := tab_preco_lota.nrregistro;
      vnrcontrato := tab_preco_lota.nrcontrato;
      vcdcontrato := tab_preco_lota.cdcontrato;
      vcdlotacao  := tab_preco_lota.cdlotacao;

      \*dbms_output.put_line('REGRA_MENSLID4(REGRA,DESCRICAO,INICIO,FIM);' ||
                           vnr_regra || ';' || tab_preco_lota.des_regra || ';' ||
                           tab_preco_lota.dat_inic || ';' ||
                           tab_preco_lota.dat_fim);*\

      --insere a regra para a estrutura
      p_insert_regra_menslid(pAoSimular,
                             vnr_regra,
                             tab_preco_lota.des_regra,
                             tab_preco_lota.dat_inic,
                             tab_preco_lota.dat_fim,
                             tab_preco_lota.cdn_tip_idx);

      \*dbms_output.put_line('REGRA_MENSLID_REAJ4(vnr_regra,tab_preco_refer.reaj_atual);' ||
                           vnr_regra || ';' || tab_preco_lota.reaj_atual);*\

      --insere a data de reajuste da regra
      p_insert_regra_menslid_reaj(pAoSimular,
                                  vnr_regra,
                                  tab_preco_lota.reaj_atual);

      --Localizar o código da proposta e dos beneficiarios da lotacao
      \* Evandro Levi (16/05/2018): Considerar a lotação conforme parametro USULOTAC do Unicoo
      for usu_fam in (select nrsequencial_usuario
                        from usuario u, familia f
                       where f.nrregistro = u.nrregistro
                         and f.nrcontrato = u.nrcontrato
                         and f.nrfamilia = u.nrfamilia
                         and u.nrregistro = tab_preco_lota.nrregistro
                         and u.nrcontrato = tab_preco_lota.nrcontrato
                         and nvl(u.cdlotacao, f.cdlotacao) = tab_preco_lota.cdlotacao) loop*\
      for estrutura in (select ta.cd_modalidade vcd_modalidade,
                               ta.cd_plano      vcd_plano,
                               ta.cd_tipo_plano vcd_tipo_plano
                          from preco_referencia_padrao pp,
                               temp_depara_detalhado   td,
                               temp_depara_agrupado    ta
                         where pp.nrtabela_padrao =
                               tab_preco_lota.nrtabela_padrao_origem --join com a nrtabela origem do loop
                           and pp.cdcontrato = td.cdcontrato --join plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
                        ) loop

        for usu_fam in (select nrsequencial_usuario, ugp.nr_proposta, ugp.cd_usuario
                          from usuario u, gp.import_bnfciar ib, gp.usuario ugp
                         where u.nrregistro = tab_preco_lota.nrregistro
                           and u.nrcontrato = tab_preco_lota.nrcontrato
                           and ib.num_seqcial_bnfciar = nrsequencial_usuario
                           and ugp.cd_carteira_antiga = ib.cd_carteira_antiga
                           and ugp.cd_modalidade = estrutura.vcd_modalidade
                           and f_lotacao_usuario(u.nrsequencial_usuario) = tab_preco_lota.cdlotacao
                           and not exists
                           (select 1 from gp.regra_menslid_propost rmp
                                    where rmp.cd_modalidade = ugp.cd_modalidade
                                      and rmp.nr_proposta = ugp.nr_proposta
                                      and rmp.cd_usuario  = ugp.cd_usuario)


                           ) Loop
\*          dbms_output.put_line('REGRA_MENSLID_ESTRUT4(vnr_regra,vcd_modalidade,vcd_plano,vcd_tipo_plano,' ||
                               'tab_preco_refer.dat_inic,tab_preco_refer.dat_fim,vnr_proposta,beneficiario);' ||
                               vnr_regra || ';' ||
                               estrutura.vcd_modalidade || ';' ||
                               estrutura.vcd_plano || ';' ||
                               estrutura.vcd_tipo_plano || ';' ||
                               tab_preco_lota.dat_inic || ';' ||
                               tab_preco_lota.dat_fim || ';' ||
                               vnr_proposta || ';' || vnr_seq_usuario);
*\
          --insere a estrutura da regra
          p_insert_regra_menslid_estrut(pAoSimular,
                                        vnr_regra,
                                        estrutura.vcd_modalidade,
                                        estrutura.vcd_plano,
                                        estrutura.vcd_tipo_plano,
                                        tab_preco_lota.dat_inic,
                                        tab_preco_lota.dat_fim,
                                        usu_fam.nr_proposta,
                                        usu_fam.cd_usuario);
        end loop;
      end loop;

    end if; --criação da regra

    --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
    --Antonio 19/11/2016
    insert into temp_depara_tabela_preco
    values
      (tab_preco_lota.nrtabela_contrato, --Tabela de Preços do Unicoo
       vnr_regra, --Código da Regra que virou no TOTVS
       tab_preco_lota.nrfamilia, --Código da Família quando preço por familia
       tab_preco_lota.nrsequencial_usuario, --Código do Usuario quando preço por usuario
       tab_preco_lota.cdlotacao); --Código da Lotação quando preço por lotacao

    vcd_chave_preco := ' ';
    --Varre os valores da tabela de referência na preco_contrato_pessoa procurando os valores da familia
    for preco_lota in (select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                              --'0' cd_grau_parentesco,
                              rm.cdvalor_externo cd_modulo,
                              pc.*,

\*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*\

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_lota.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                              '01/' ||
                              substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                              substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                              decode(pc.nrqtusuario_inicio,
                                     0,
                                     1,
                                     pc.nrqtusuario_inicio) nrqtusu_ini,
                              decode(pc.nrqtusuario_fim,
                                     0,
                                     999999,
                                     pc.nrqtusuario_fim) nrqtusu_fim
                         from preco_contrato_pessoa pc,
                              preco_referencia_contrato prc,
                              preco_referencia_padrao prp,
                              temp_depara_detalhado td,
                              temp_depara_agrupado ta,
                              (select cdvalor_externo, cdvalor_interno
                                 from mig_tab_conversao     tc,
                                      mig_tab_conversao_exp ce
                                where notabela = 'MIGRACAO_MODULO'
                                  and tc.nrseq = ce.nrseq_tab_conversao) rm
                        where pc.nrtabela_contrato =
                              tab_preco_lota.nrtabela_contrato --nrtabela do loop da tabela referencia
                          and pc.cdlotacao = tab_preco_lota.cdlotacao --nrfamilia do loop da tabela referencia
                          and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                          and prp.nrtabela_padrao =
                              prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                          and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                          and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                          and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                        order by pc.nrperiodo_ult_reajuste,
                                 pc.cdcategserv,
                                 --pc.tpplano,
                                 cd_padrao_cobertura,
                                 --pc.cdusucateg,
                                 --pc.tpdependente,
                                 cd_grau_parentesco,
                                 pc.nrqtusuario_inicio,
                                 pc.nridade_inicio) loop

      --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
      if (preco_lota.nrperiodo_ult_reajuste || '-' ||
         preco_lota.cdcategserv || '-' ||
         --preco_lota.tpplano || '-' ||
         preco_lota.cd_padrao_cobertura || '-' ||
         --preco_lota.cdusucateg || '-' ||
         --preco_lota.tpdependente || '-' ||
         preco_lota.cd_grau_parentesco || '-' ||
         preco_lota.nrqtusuario_inicio) <> vcd_chave_preco then
        vcd_chave_preco := preco_lota.nrperiodo_ult_reajuste || '-' ||
                           preco_lota.cdcategserv || '-' ||
                           --preco_lota.tpplano || '-' ||
                           preco_lota.cd_padrao_cobertura || '-' ||
                           --preco_lota.cdusucateg || '-' ||
                           --preco_lota.tpdependente || '-' ||
                           preco_lota.cd_grau_parentesco || '-' ||
                           preco_lota.nrqtusuario_inicio;
        vnr_faixa       := 1;

        --identificar a data inicio e fim de validade do preço
        --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
        --montá-la a partir do início do contrato
        begin
          select dtiniciocontrato, dtfimcontrato
            into vddtini_contrato, vddtfim_contrato
            from contrato_da_pessoa cdp
           where cdp.nrregistro = tab_preco_lota.nrregistro
             and cdp.nrcontrato = tab_preco_lota.nrcontrato;
        exception
          when no_data_found then
            vddtini_contrato := '01/01/1900';
            vddtfim_contrato := '31/12/9999';
        end;

        -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
        if preco_lota.nrperiodo_ult_reajuste <> 0 then
          vddtini_contrato := preco_lota.dat_inic;
        end if;

        --identificar a data fim de validade do preço
        begin
          --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
          --ex: atual 201509 prox 201609 então 31/08/2016
          --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
          select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                          substr(periodo_fim, 1, 4),
                          'DD/MM/YYYY') - 1)
            into vddtfim_reajuste
            from (select decode(min(nrperiodo_ult_reajuste),
                                null,
                                '999912',
                                min(nrperiodo_ult_reajuste)) periodo_fim
                    from preco_contrato_pessoa pc1
                   where pc1.nrtabela_contrato =
                         preco_lota.nrtabela_contrato
                     and pc1.cdlotacao = preco_lota.cdlotacao
                     and pc1.nrperiodo_ult_reajuste >
                         preco_lota.nrperiodo_ult_reajuste);
          --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
          if (vddtfim_contrato is not null) and
             (vddtfim_reajuste = '30/11/9999') then
            vddtfim_reajuste := vddtfim_contrato;
          end if;
          --se a data fim é 30/11/9999 virará 31/12/9999
          if vddtfim_reajuste = '30/11/9999' then
            vddtfim_reajuste := '31/12/9999';
          end if;
        exception
          when no_data_found then
            null;
        end;

        vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
        vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

      else
        vnr_faixa := vnr_faixa + 1;
      end if;

      \*dbms_output.put_line('REGRA_MENSLID_CRITER4(vnr_regra,preco_tab.cd_padrao_cobertura,preco_tab.cd_modulo,preco_tab.cd_grau_parentesco,' ||
                           'vnr_faixa,preco_tab.nridade_inicio,preco_tab.nridade_fim,preco_tab.vlpreco_mensal,preco_tab.vlpreco_inscricao,' ||
                           'vddat_inic,vddat_fim,preco_tab.nrqtusu_ini,preco_tab.nrqtusu_fim;' ||
                           vnr_regra || ';' ||
                           preco_lota.cd_padrao_cobertura || ';' ||
                           preco_lota.cd_modulo || ';' ||
                           preco_lota.cd_grau_parentesco || ';' ||
                           vnr_faixa || ';' || preco_lota.nridade_inicio || ';' ||
                           preco_lota.nridade_fim || ';' ||
                           preco_lota.vlpreco_mensal || ';' ||
                           preco_lota.vlpreco_inscricao || ';' ||
                           vddat_inic || ';' || vddat_fim || ';' ||
                           preco_lota.nrqtusu_ini || ';' ||
                           preco_lota.nrqtusu_fim);*\

      --insere os criterios da regra
      p_insert_regra_menslid_criter(pAoSimular,
                                    vnr_regra,
                                    preco_lota.cd_padrao_cobertura,
                                    preco_lota.cd_modulo,
                                    preco_lota.cd_grau_parentesco,
                                    vnr_faixa,
                                    preco_lota.nridade_inicio,
                                    preco_lota.nridade_fim,
                                    preco_lota.vlpreco_mensal,
                                    preco_lota.vlpreco_inscricao,
                                    vddat_inic,
                                    vddat_fim,
                                    preco_lota.nrqtusu_ini,
                                    preco_lota.nrqtusu_fim,
                                    preco_lota.nrsequencia);
    end loop; --preco_lota  --loop dos precos da lotacao
  end loop; --tab_preco_lota  --loop das tabelas das lotacoes

  --caso seja processamento completo (todos os contratos) e algum contrato ficou sem regra, atribuir default
  if pNrregistro is null and pNrcontrato is null then
    pck_unicoogps.P_REGRA_DEFAULT_CONTRATO(null, --pcdmodalidade number,
                                           null, --pcdplano number,
                                           null, --pcdtipo_plano number,
                                           null  --pnrproposta number
                                           );
  end if;
end p_migra_regra_proposta2;*/

procedure p_migra_regra_proposta2(pInSimular  in varchar2 default 'T',
                                  pNrregistro In Number Default Null,
                                  pNrcontrato In Varchar2 Default Null) is
  --Evandro Levi (16/05/2018): Adicionado parametros de chamada para agilizar o processamento
  --                             individual por contratos
  vnrregistro number := 0;
  vnrcontrato varchar2(4) := ' ';
  vcdcontrato varchar2(8) := ' ';

  vcdmodalidade_ant number := 0;
  vnrproposta_ant   number := 0;

  vnrfamilia number := 0;
  vnrseq_usu number := 0;
  vcdlotacao varchar2(8) := ' ';
  vnr_regra  number := 0;
  --vcd_modalidade   number := 0;
  --vcd_plano        number := 0;
  --vcd_tipo_plano   number := 0;
  vnr_faixa        number := 0;
  vcd_chave_preco  varchar2(40) := ' ';
  vddtini_contrato date := '01/01/1900';
  vddtfim_contrato date := '31/12/9999';
  vddtfim_reajuste date := '31/12/9999';
  vddat_inic       date := '01/01/1900';
  vddat_fim        date := '31/12/9999';
  vnr_proposta     number := 0;
  vtpusuario       varchar2(2);
  vult_aux         number;
  vseq_aux         number;

begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
    dbms_output.disable;
    end if;

  p_ajustar_sequences_migr_mens;

  if pInSimular in ('N','T') then
    --ELIMINAR REGRA QUE SERA RECRIADA

    log_dbms('vai apagar regra antiga. parametros: nrregistro/rcontrato: ' || pNrregistro || '/' || pNrcontrato);

    for x in (select --/*+ INDEX_ASC(t SRG09737##RGRMNSLE_IX4) */
      distinct rp.cdd_regra
                from gp.import_propost ip, gp.regra_menslid_propost rp
               where (ip.num_livre_2  = pNrregistro or pNrregistro is null)
                 and (lpad(ip.num_livre_3,4,'0')  = pNrcontrato or pNrcontrato is null)
                 and rp.cd_modalidade = ip.cd_modalidade
                 and rp.nr_proposta   = ip.num_livre_10) loop

      log_dbms('regra encontrada para apagar: ' || x.cdd_regra);

      delete from gp.REGRA_MENSLID rm          where rm.cdd_regra = x.cdd_regra;
      delete from gp.REGRA_MENSLID_CRITER rmc  where rmc.cdd_regra = x.cdd_regra;
      delete from gp.REGRA_MENSLID_PROPOST rmp where rmp.cdd_regra = x.cdd_regra;
      delete from gp.REGRA_MENSLID_ESTRUT rme  where rme.cdd_regra = x.cdd_regra;
      delete from gp.regra_menslid_reaj rmr    where rmr.cdd_regra = x.cdd_regra;

    end loop;
  end if;

  --ajustar sequences que so exitem no migrador e nao no produto, pois podem ter sido criadas regras manualmente pelo usuario
  begin
    select nvl(max(cdd_id),0) into vult_aux from gp.regra_menslid_estrut;
  exception
    when others then
      vult_aux := 0;
  end;
  select seq_regra_menslid_estrut.nextval into vseq_aux from dual;
  while vseq_aux < vult_aux loop
    select seq_regra_menslid_estrut.nextval into vseq_aux from dual;
  end loop;

  begin
    select nvl(max(cdd_seq),0) into vult_aux from gp.regra_menslid_propost;
  exception
    when others then
      vult_aux := 0;
  end;
  select seq_temp_propost.nextval into vseq_aux from dual;
  while vseq_aux < vult_aux loop
    select seq_temp_propost.nextval into vseq_aux from dual;
  end loop;

  begin
    select nvl(max(cdd_id),0) into vult_aux from gp.regra_menslid_criter;
  exception
    when others then
      vult_aux := 0;
  end;
  select seq_cdd_id.nextval into vseq_aux from dual;
  while vseq_aux < vult_aux loop
    select seq_cdd_id.nextval into vseq_aux from dual;
  end loop;

  --Busca o último número de regra que existe após a migração das regras da estrutura
  begin
    select nvl(max(r.cdd_regra), 0) into vnr_regra from gp.regra_menslid r;
  exception
    when no_data_found then
      vnr_regra := 0;
  end;

  /*=====================================================================================
   =  Inicio do processo que migra os preços do contrato.                               =
   =  cada nrregistro + nrcontrato = 1 regra                                            =
   ======================================================================================
  */

  --Busca todas as tabelas de precos do Unicoo com pelo menos 1 preço do contrato
  for tab_preco_refer in (select prc.nrtabela_contrato,
                                 prc.nrregistro,
                                 prc.nrcontrato,
                                 prc.nrtabela_padrao_origem,
                                 'PRECO ' || decode(ctp.tpusu_contrato,
                                                    'E',
                                                    'PJ',
                                                    'P',
                                                    'PF',
                                                    'C',
                                                    'COOP',
                                                    'UNI') || ' CONTRATO: ' ||
                                 prc.nrcontrato || ' PLANO: ' || ta.cdcontrato ||
                                 '                                  ' des_regra,
                                 prc.aopreco_por_qtde_dependente,
                                 prc.dtultimo_reajuste,
                                 prc.nrperiodo_proximo_reajuste,
                                 (substr(prc.nrperiodo_proximo_reajuste,
                                         1,
                                         4) - 1) ||
                                 substr(prc.nrperiodo_proximo_reajuste, 5, 2) reaj_atual, --proximo reajuste -1 ano (ultimo)
                                 prc.nrperiodo_inicio,
                                 prc.cdlotacao,
                                 cp.dtiniciocontrato dat_inic,
                                 nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                 prp.cdcontrato,
                                 ta.cd_modalidade vcd_modalidade,
                                 ta.cd_plano vcd_plano,
                                 ta.cd_tipo_plano vcd_tipo_plano,
                                 ta.cdcontrato cdcontrato_agr,
                                 ip.num_livre_10,
                                 /*f.nrfamilia,*/
                                 ip.num_livre_4 nrfamilia,
                                 (Select nvl(max(cdn_tip_idx), 1) /*valor '1' é default*/
                                  From   depara_indice_financeiro
                                  Where  cdindice = cp.cdindice) cdn_tip_idx,
                                 (select nvl(count(*),'0')
                                    from preco_contrato_pessoa pcp1
                                   where pcp1.nrtabela_contrato = prc.nrtabela_contrato
                                     and pcp1.tpplano <> '*') lg_tpplano_diferente
                            from preco_referencia_contrato prc,
                                 contrato_da_pessoa cp,
                                 contrato_padrao ctp,
                                 preco_referencia_padrao prp,
                                 temp_depara_detalhado td,
                                 temp_depara_agrupado ta,
                                 import_propost ip
                                 /*Evandro Levi (10/10/2018): Eliminada a busca da família,
                                     pois na IMPORT_PROPOST já tem campo apropriado com
                                     esta informação.
                                  ,
                                 (select nvl(min(f.nrfamilia), 0) nrfamilia,
                                         f.nrregistro,
                                         f.nrcontrato
                                    from familia f
                                   group by nrregistro, nrcontrato) f */
                           where cp.nrregistro = prc.nrregistro
                             and cp.nrcontrato = prc.nrcontrato

                             And (cp.nrregistro = pNrregistro Or pNrregistro Is Null)
                             And (cp.nrcontrato = pNrcontrato Or pNrcontrato Is Null)

                             and ctp.cdcontrato(+) = cp.cdcontrato_padrao
                             and prp.nrtabela_padrao = prc.nrtabela_padrao_origem
                             and prp.cdcontrato = td.cdcontrato --join plano detalhado
                             and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
                             and ip.num_livre_2 = cp.nrregistro
                             and ip.num_livre_3 = cp.nrcontrato
                             /*
                             and ip.num_livre_4 = f.nrfamilia
                             and ip.num_livre_2 = f.nrregistro
                             and ip.num_livre_3 = f.nrcontrato
                             */

                             and ip.cd_modalidade = ta.cd_modalidade
                             and ip.cd_plano      = ta.cd_plano
                             and ip.cd_tipo_plano = ta.cd_tipo_plano

                             and exists
                           (select 1
                                    from preco_contrato_pessoa pcp
                                   where pcp.nrtabela_contrato = prc.nrtabela_contrato
                                     and pcp.nrfamilia = 0
                                     and pcp.nrsequencial_usuario = 0
                                     and pcp.cdlotacao = '*')
                           --a regra deve ser usada por ao menos um beneficiario, pois no Unicoo podem existir
                           --regras associadas ao contrato mas sem vinculo com nenhum beneficiario.
                           --estava criando criterios sobrepostos (Alex Boeira 02/01/2019)
                             and exists
                           (select 1 from usuario uu
                                    where uu.nrregistro = prc.nrregistro
                                      and uu.nrcontrato = prc.nrcontrato
                                      and uu.nrtabela_contrato = prc.nrtabela_contrato)

/*                           order by prc.nrregistro,
                                    prc.nrcontrato,
                                    ta.cdcontrato,
                                    prc.nrtabela_contrato) loop
*/                           order by ip.cd_modalidade,
                                    ip.num_livre_10) loop

    dbms_output.put_line('TABELA_PRECO(NRTABELA_PADRAO_ORIGEM,cdcontrato_agr,cdcontrato_orig,NRTABELA_CONTRATO);' ||
                         tab_preco_refer.nrtabela_padrao_origem || ';' ||
                         tab_preco_refer.cdcontrato_agr || ';' || tab_preco_refer.cdcontrato || ';' || tab_preco_refer.nrtabela_contrato);

    --Se é um novo contrato da pessoa é criada uma nova regra
/*    if (tab_preco_refer.nrregistro <> vnrregistro or
       tab_preco_refer.nrcontrato <> vnrcontrato or
       tab_preco_refer.cdcontrato_agr <> vcdcontrato) then

      vnr_regra   := vnr_regra + 1;
      vnrregistro := tab_preco_refer.nrregistro;
      vnrcontrato := tab_preco_refer.nrcontrato;
      vcdcontrato := tab_preco_refer.cdcontrato_agr;
*/
    -- se eh nova proposta, cria nova regra
    if (tab_preco_refer.vcd_modalidade <> vcdmodalidade_ant or
        tab_preco_refer.num_livre_10 <> vnrproposta_ant) then

      vnr_regra   := vnr_regra + 1;
      vcdmodalidade_ant := tab_preco_refer.vcd_modalidade;
      vnrproposta_ant   := tab_preco_refer.num_livre_10;

      if tab_preco_refer.nrfamilia <> 0 then
        tab_preco_refer.des_regra := trim(tab_preco_refer.des_regra) ||
                                     ' FAMILIA: ' ||
                                     lpad(tab_preco_refer.nrfamilia, 6, '0');
      else
        tab_preco_refer.des_regra := trim(tab_preco_refer.des_regra);
      end if;

      dbms_output.put_line('REGRA_MENSLID1(REGRA,DESCRICAO,INICIO,FIM,MODALIDADE,PROPOSTA);' ||
                           vnr_regra || ';' || tab_preco_refer.des_regra || ';' ||
                           tab_preco_refer.dat_inic || ';' ||
                           tab_preco_refer.dat_fim || ';' || vcdmodalidade_ant || ';' || vnrproposta_ant);

      --insere a regra para a estrutura
      p_insert_regra_menslid(pInSimular,
                             vnr_regra,
                             tab_preco_refer.des_regra,
                             tab_preco_refer.dat_inic,
                             tab_preco_refer.dat_fim,
                             tab_preco_refer.cdn_tip_idx);

      dbms_output.put_line('ESTRUTURAS1(MODALIDADE,PLANO,TIPO,CDCONTRATO_AGR);' ||
                           tab_preco_refer.vcd_modalidade || ';' ||
                           tab_preco_refer.vcd_plano || ';' ||
                           tab_preco_refer.vcd_tipo_plano || ';' ||
                           tab_preco_refer.cdcontrato_agr);

      vnr_proposta := tab_preco_refer.num_livre_10;

      dbms_output.put_line('REGRA_MENSLID_ESTRUT1(vnr_regra,vcd_modalidade,vcd_plano,vcd_tipo_plano,' ||
                           'tab_preco_refer.dat_inic,tab_preco_refer.dat_fim,vnr_proposta,beneficiario);' ||
                           vnr_regra || ';' ||
                           tab_preco_refer.vcd_modalidade || ';' ||
                           tab_preco_refer.vcd_plano || ';' ||
                           tab_preco_refer.vcd_tipo_plano || ';' ||
                           tab_preco_refer.dat_inic || ';' ||
                           tab_preco_refer.dat_fim || ';' || vnr_proposta || ';0');

      --insere a estrutura da regra
      p_insert_regra_menslid_estrut(pInSimular,
                                    vnr_regra,
                                    tab_preco_refer.vcd_modalidade,
                                    tab_preco_refer.vcd_plano,
                                    tab_preco_refer.vcd_tipo_plano,
                                    tab_preco_refer.dat_inic,
                                    tab_preco_refer.dat_fim,
                                    vnr_proposta,
                                    0);

      --dbms_output.put_line('REGRA_MENSLID_REAJ1(vnr_regra,reaj_atual);' ||
      --                     vnr_regra || ';' || tab_preco_refer.reaj_atual);

      --insere a data de reajuste da regra
      p_insert_regra_menslid_reaj(pInSimular,
                                  vnr_regra,
                                  tab_preco_refer.reaj_atual);

    end if; --criação da regra

    --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
    --Antonio 19/11/2016
    insert into temp_depara_tabela_preco
    values
      (tab_preco_refer.nrtabela_contrato, --Tabela de Preços do Unicoo
       vnr_regra, --Código da Regra que virou no TOTVS
       null, --Código da Família quando preço por familia
       null, --Código do Usuario quando preço por usuario
       null); --Código da Lotação quando preço por lotacao

    --Varre os valores da tabela de referência na preco_contrato_pessoa
    vcd_chave_preco := ' ';
    for preco_tab in (select case
                               when pc.cdusucateg <> '*' then
                                 nvl((select tgp.cdvalores_externo
                                        from temp_grau_paren tgp,
                                             tipo_de_usuario tu
                                       where tgp.cdvalor_interno =
                                             tu.tpusuario
                                         and tu.cdusucateg =
                                             pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                   end
                               end cd_grau_parentesco,
                             rm.cdvalor_externo cd_modulo,
                             pc.*,

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_refer.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_refer.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                         and pc.nrfamilia = 0
                         and pc.nrsequencial_usuario = 0
                         and pc.cdlotacao = '*'
                       order by pc.nrperiodo_ult_reajuste,
                                pc.cdcategserv,
                                --pc.tpplano,
                                cd_padrao_cobertura,
                                --pc.cdusucateg,
                                --pc.tpdependente,
                                cd_grau_parentesco,
                                pc.nrqtusuario_inicio,
                                pc.nridade_inicio) loop


      --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
      if (preco_tab.nrperiodo_ult_reajuste || '-' || preco_tab.cdcategserv || '-' ||
--         preco_tab.tpplano || '-' ||
         preco_tab.cd_padrao_cobertura || '-' ||
         --preco_tab.cdusucateg || '-' ||
         --preco_tab.tpdependente || '-' ||
         preco_tab.cd_grau_parentesco || '-' ||
         preco_tab.nrqtusuario_inicio) <> vcd_chave_preco then
        vcd_chave_preco := preco_tab.nrperiodo_ult_reajuste || '-' ||
                           preco_tab.cdcategserv || '-' ||
                           --preco_tab.tpplano || '-' ||
                           preco_tab.cd_padrao_cobertura || '-' ||
                           --preco_tab.cdusucateg || '-' ||
                           --preco_tab.tpdependente || '-' ||
                           preco_tab.cd_grau_parentesco || '-' ||
                           preco_tab.nrqtusuario_inicio;
        vnr_faixa       := 1;

        --identificar a data inicio e fim de validade do preço
        --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
        --montá-la a partir do início do contrato
        begin
          select dtiniciocontrato, dtfimcontrato
            into vddtini_contrato, vddtfim_contrato
            from contrato_da_pessoa cdp
           where cdp.nrregistro = tab_preco_refer.nrregistro
             and cdp.nrcontrato = tab_preco_refer.nrcontrato;
        exception
          when no_data_found then
            vddtini_contrato := '01/01/1900';
            vddtfim_contrato := '31/12/9999';
        end;

        -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
        if preco_tab.nrperiodo_ult_reajuste <> 0 then
          vddtini_contrato := preco_tab.dat_inic;
        end if;

        --identificar a data fim de validade do preço
        begin
          --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
          --ex: atual 201509 prox 201609 então 31/08/2016
          --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
          select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                          substr(periodo_fim, 1, 4),
                          'DD/MM/YYYY') - 1)
            into vddtfim_reajuste
            from (select decode(min(nrperiodo_ult_reajuste),
                                null,
                                '999912',
                                min(nrperiodo_ult_reajuste)) periodo_fim
                    from preco_contrato_pessoa pc1
                   where pc1.nrtabela_contrato = preco_tab.nrtabela_contrato
                     and pc1.nrperiodo_ult_reajuste >
                         preco_tab.nrperiodo_ult_reajuste);
          --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
          if (vddtfim_contrato is not null) and
             (vddtfim_reajuste = '30/11/9999') then
            vddtfim_reajuste := vddtfim_contrato;
          end if;
          --se a data fim é 30/11/9999 virará 31/12/9999
          if vddtfim_reajuste = '30/11/9999' then
            vddtfim_reajuste := '31/12/9999';
          end if;
        exception
          when no_data_found then
            null;
        end;

        vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
        vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

      else
        vnr_faixa := vnr_faixa + 1;
      end if;

dbms_output.put_line('PROCESSANDO CRITERIO: ' || preco_tab.nrperiodo_ult_reajuste || '/' ||
                     preco_tab.cdcategserv || '/' ||
                     preco_tab.tpplano || '/' ||
                     preco_tab.cd_padrao_cobertura || '/' ||
                     --preco_tab.cdusucateg || '/' ||
                     --preco_tab.tpdependente || '/' ||
                     preco_tab.cd_grau_parentesco || '/' ||
                     preco_tab.nrqtusuario_inicio || '/' ||
                     preco_tab.nridade_inicio || ' FAIXA: ' || vnr_faixa
);


      --dbms_output.put_line('REGRA_MENSLID_CRITER1(vnr_regra,preco_tab.cd_padrao_cobertura,preco_tab.cd_modulo,preco_tab.cd_grau_parentesco,' ||
      --                     'vnr_faixa,preco_tab.nridade_inicio,preco_tab.nridade_fim,preco_tab.vlpreco_mensal,preco_tab.vlpreco_inscricao,' ||
      --                     'vddat_inic,vddat_fim,preco_tab.nrqtusu_ini,preco_tab.nrqtusu_fim;' ||
      --                     vnr_regra || ';' ||
      --                     preco_tab.cd_padrao_cobertura || ';' ||
      --                     preco_tab.cd_modulo || ';' ||
      --                     preco_tab.cd_grau_parentesco || ';' ||
      --                     vnr_faixa || ';' || preco_tab.nridade_inicio || ';' ||
      --                     preco_tab.nridade_fim || ';' ||
      --                     preco_tab.vlpreco_mensal || ';' ||
      --                     preco_tab.vlpreco_inscricao || ';' ||
      --                     vddat_inic || ';' || vddat_fim || ';' ||
      --                     preco_tab.nrqtusu_ini || ';' ||
      --                     preco_tab.nrqtusu_fim);

      --insere os criterios da regra
      p_insert_regra_menslid_criter(pInSimular,
                                    vnr_regra,
                                    preco_tab.cd_padrao_cobertura,
                                    preco_tab.cd_modulo,
                                    preco_tab.cd_grau_parentesco,
                                    vnr_faixa,
                                    preco_tab.nridade_inicio,
                                    preco_tab.nridade_fim,
                                    preco_tab.vlpreco_mensal,
                                    preco_tab.vlpreco_inscricao,
                                    vddat_inic,
                                    vddat_fim,
                                    preco_tab.nrqtusu_ini,
                                    preco_tab.nrqtusu_fim,
                                    preco_tab.nrsequencia);
    end loop; --preco_tab  --loop dos precos da tabela

  end loop; --tab_preco_refer  --loop das tabelas

  /*=====================================================================================
   =  Inicio do processo que migra os preços específicos por família do contrato        =
   =  cada nrregistro + nrcontrato + nrfamilia = 1 regra                                =
   ======================================================================================
  */
dbms_output.put_line('VAI GERAR REGRAS POR FAMILIA');

  for tab_preco_fam in (select distinct prc.nrtabela_contrato,
                                        prc.nrregistro,
                                        prc.nrcontrato,
                                        prc.nrtabela_padrao_origem,
                                        'PRECO ' ||
                                        decode(ctp.tpusu_contrato,
                                               'E',
                                               'PJ',
                                               'P',
                                               'PF',
                                               'C',
                                               'COOP',
                                               'UNI') ||
                                        ' FAMILIA - CONTR: ' ||
                                        prc.nrcontrato || ' FAM: ' ||
                                        lpad(pcp.nrfamilia, 6, '0') des_regra,
                                        prc.aopreco_por_qtde_dependente,
                                        prc.dtultimo_reajuste,
                                        prc.nrperiodo_proximo_reajuste,
                                        (substr(prc.nrperiodo_proximo_reajuste,
                                                1,
                                                4) - 1) ||
                                        substr(prc.nrperiodo_proximo_reajuste,
                                               5,
                                               2) reaj_atual,
                                        prc.nrperiodo_inicio,
                                        prc.cdlotacao,
                                        cp.dtiniciocontrato dat_inic,
                                        nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                        prp.cdcontrato,
                                        pcp.nrfamilia,
                                        (Select nvl(max(cdn_tip_idx), 1) /*valor '1' é default*/
                                         From   depara_indice_financeiro
                                         Where  cdindice = cp.cdindice) cdn_tip_idx,
                                       (select nvl(count(*),'0')
                                          from preco_contrato_pessoa pcp1
                                         where pcp1.nrtabela_contrato = prc.nrtabela_contrato
                                           and pcp1.tpplano <> '*') lg_tpplano_diferente

                          from preco_referencia_contrato prc,
                               contrato_da_pessoa        cp,
                               contrato_padrao           ctp,
                               preco_referencia_padrao   prp,
                               preco_contrato_pessoa     pcp
                         where cp.nrregistro = prc.nrregistro

                           And (cp.nrregistro = pNrregistro Or pNrregistro Is Null)
                           And (cp.nrcontrato = pNrcontrato Or pNrcontrato Is Null)

                           and cp.nrcontrato = prc.nrcontrato
                           and ctp.cdcontrato(+) = cp.cdcontrato_padrao
                           and prp.nrtabela_padrao = prc.nrtabela_padrao_origem
                           and pcp.nrtabela_contrato = prc.nrtabela_contrato
                           and pcp.nrfamilia <> 0

                              --Evandro Levi (16/05/2018): Validação para não utilizar preço específico
                              --                             por família se nenhum usuário da família estiver
                              --                             vinculado com a tabela de preço listada
                           And Exists
                         (Select 1
                                  From usuario
                                 Where nrregistro = prc.nrregistro
                                   And nrcontrato = prc.nrcontrato
                                   And nrfamilia = pcp.nrfamilia
                                   And nrtabela_contrato = pcp.nrtabela_contrato
                                   /*and (dtexclusao is null or dtexclusao > sysdate)*/)

                        --and prc.nrtabela_contrato in (74018,115070,115071,115200)  --************************ teste
                         order by prc.nrregistro,
                                  prc.nrcontrato,
                                  prp.cdcontrato,
                                  pcp.nrfamilia,
                                  prc.nrtabela_contrato) loop

  log_dbms('entrou no laco regra familia');
    --Se é um novo contrato da pessoa ou nova família é criada uma nova regra
    if (tab_preco_fam.nrregistro <> vnrregistro or
       tab_preco_fam.nrcontrato <> vnrcontrato or
       tab_preco_fam.cdcontrato <> vcdcontrato or
       tab_preco_fam.nrfamilia <> vnrfamilia) then

      vnr_regra   := vnr_regra + 1;
      vnrregistro := tab_preco_fam.nrregistro;
      vnrcontrato := tab_preco_fam.nrcontrato;
      vnrfamilia  := tab_preco_fam.nrfamilia;
      vcdcontrato := tab_preco_fam.cdcontrato;

      --dbms_output.put_line('REGRA_MENSLID2(REGRA,DESCRICAO,INICIO,FIM);' ||
      --                     vnr_regra || ';' || tab_preco_fam.des_regra || ';' ||
      --                     tab_preco_fam.dat_inic || ';' ||
      --                     tab_preco_fam.dat_fim);

      --insere a regra para a estrutura
      p_insert_regra_menslid(pInSimular,
                             vnr_regra,
                             tab_preco_fam.des_regra,
                             tab_preco_fam.dat_inic,
                             tab_preco_fam.dat_fim,
                             tab_preco_fam.cdn_tip_idx);

      --dbms_output.put_line('REGRA_MENSLID_REAJ2(vnr_regra,tab_preco_refer.reaj_atual);' ||
      --                     vnr_regra || ';' || tab_preco_fam.reaj_atual);

      --insere a data de reajuste da regra
      p_insert_regra_menslid_reaj(pInSimular,
                                  vnr_regra,
                                  tab_preco_fam.reaj_atual);

      for estrutura in (select ta.cd_modalidade vcd_modalidade,
                               ta.cd_plano      vcd_plano,
                               ta.cd_tipo_plano vcd_tipo_plano
                          from preco_referencia_padrao pp,
                               temp_depara_detalhado   td,
                               temp_depara_agrupado    ta
                         where pp.nrtabela_padrao =
                               tab_preco_fam.nrtabela_padrao_origem --join com a nrtabela origem do loop
                           and pp.cdcontrato = td.cdcontrato --join plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
                        ) loop

        --Localizar o código da proposta e dos beneficiarios da família
        for usu_fam in (select nrsequencial_usuario, ib.nr_proposta, ugp.cd_usuario
                          from usuario u, import_bnfciar ib, gp.usuario ugp
                         where u.nrregistro = tab_preco_fam.nrregistro
                           and u.nrcontrato = tab_preco_fam.nrcontrato
                           and u.nrfamilia = tab_preco_fam.nrfamilia
                           and ib.num_seqcial_bnfciar = u.nrsequencial_usuario
                           and ugp.cd_carteira_antiga = ib.cd_carteira_antiga
                           and ugp.cd_modalidade = estrutura.vcd_modalidade
                           ) loop

          /*dbms_output.put_line('REGRA_MENSLID_ESTRUT2(vnr_regra,vcd_modalidade,vcd_plano,vcd_tipo_plano,' ||
                               'tab_preco_refer.dat_inic,tab_preco_refer.dat_fim,vnr_proposta,beneficiario);' ||
                               vnr_regra || ';' ||
                               estrutura.vcd_modalidade || ';' ||
                               estrutura.vcd_plano || ';' ||
                               estrutura.vcd_tipo_plano || ';' ||
                               tab_preco_fam.dat_inic || ';' ||
                               tab_preco_fam.dat_fim || ';' ||
                               vnr_proposta || ';' || vnr_seq_usuario);*/

          --insere a estrutura da regra
          p_insert_regra_menslid_estrut(pInSimular,
                                        vnr_regra,
                                        estrutura.vcd_modalidade,
                                        estrutura.vcd_plano,
                                        estrutura.vcd_tipo_plano,
                                        tab_preco_fam.dat_inic,
                                        tab_preco_fam.dat_fim,
                                        usu_fam.nr_proposta,
                                        usu_fam.cd_usuario);
        end loop;
      end loop;
    end if; --criação da regra

    --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
    --Antonio 19/11/2016
    insert into temp_depara_tabela_preco
    values
      (tab_preco_fam.nrtabela_contrato, --Tabela de Preços do Unicoo
       vnr_regra, --Código da Regra que virou no TOTVS
       tab_preco_fam.nrfamilia, --Código da Família quando preço por familia
       null, --Código do Usuario quando preço por usuario
       null); --Código da Lotação quando preço por lotacao

dbms_output.put_line('VAI GERAR CRITERIOS PARA A REGRA: ' || vnr_regra);

    vcd_chave_preco := ' ';
    --Varre os valores da tabela de referência na preco_contrato_pessoa procurando os valores da familia
    for preco_fam in (select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                             --'0' cd_grau_parentesco,

                             rm.cdvalor_externo cd_modulo,
                             pc.CDCATEGSERV,
                             pc.TPPLANO,
                             pc.CDUSUCATEG,
                             pc.TPDEPENDENTE,
                             pc.NRIDADE_INICIO,
                             pc.NRIDADE_FIM,
                             pc.NRQTUSUARIO_INICIO,
                             pc.NRQTUSUARIO_FIM,
                             pc.NRPERIODO_ULT_REAJUSTE,
                             pc.VLPRECO_MENSAL,
                             pc.VLPRECO_INSCRICAO,
                             pc.NRSEQUENCIAL_USUARIO,
                             pc.NRFAMILIA,
                             pc.CDLOTACAO,
                             pc.NRTABELA_CONTRATO,

/*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*/

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_fam.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             pc.nrsequencia,
                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim,
                             2 origem_preco
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_fam.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrfamilia = tab_preco_fam.nrfamilia --nrfamilia do loop da tabela referencia
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato

                      union
                      --Buscar os preços do contrato das categorias que a família não possui para completar a regra
                      select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                             --'0' cd_grau_parentesco,
                             rm.cdvalor_externo cd_modulo,
                             pc.CDCATEGSERV,
                             pc.TPPLANO,
                             pc.CDUSUCATEG,
                             pc.TPDEPENDENTE,
                             pc.NRIDADE_INICIO,
                             pc.NRIDADE_FIM,
                             pc.NRQTUSUARIO_INICIO,
                             pc.NRQTUSUARIO_FIM,
                             pc.NRPERIODO_ULT_REAJUSTE,
                             pc.VLPRECO_MENSAL,
                             pc.VLPRECO_INSCRICAO,
                             pc.NRSEQUENCIAL_USUARIO,
                             pc.NRFAMILIA,
                             pc.CDLOTACAO,
                             pc.NRTABELA_CONTRATO,

/*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*/

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_fam.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             pc.nrsequencia,
                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim,
                             1 origem_preco
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_fam.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrfamilia = 0 --preco do contrato
                         and pc.nrsequencial_usuario = 0 --preco do contrato
                         and pc.cdlotacao = '*' --preco do contrato
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                         and pc.cdcategserv not in
                             (select distinct p.cdcategserv
                                from preco_contrato_pessoa p
                               where p.nrtabela_contrato =
                                     pc.nrtabela_contrato
                                 and p.nrfamilia = tab_preco_fam.nrfamilia)
                       order by nrperiodo_ult_reajuste,
                                cdcategserv,
                                --tpplano,
                                cd_padrao_cobertura,
                                --cdusucateg,
                                --tpdependente,
                                cd_grau_parentesco,
                                nrqtusuario_inicio,
                                nridade_inicio) loop

    dbms_output.put_line('vcd_chave_preco ANTES: ' || vcd_chave_preco);

    dbms_output.put_line('COMO ESTA COMPARANDO: ' ||
          preco_fam.nrperiodo_ult_reajuste || '-' ||
          preco_fam.cdcategserv || '-' ||
          --preco_fam.tpplano || '-' ||
          preco_fam.cd_padrao_cobertura || '-' ||
          --preco_fam.cdusucateg || '-' ||
          --preco_fam.tpdependente || '-' ||
          preco_fam.cd_grau_parentesco || '-' ||
          preco_fam.nrqtusuario_inicio);

      --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
      if (preco_fam.nrperiodo_ult_reajuste || '-' ||
          preco_fam.cdcategserv || '-' ||
          --preco_fam.tpplano || '-' ||
          preco_fam.cd_padrao_cobertura || '-' ||
          --preco_fam.cdusucateg || '-' ||
          --preco_fam.tpdependente || '-' ||
          preco_fam.cd_grau_parentesco || '-' ||
          preco_fam.nrqtusuario_inicio) <> vcd_chave_preco then

        vcd_chave_preco := preco_fam.nrperiodo_ult_reajuste || '-' ||
                           preco_fam.cdcategserv || '-' ||
                           --preco_fam.tpplano || '-' ||
                           preco_fam.cd_padrao_cobertura || '-' ||
                           --preco_fam.cdusucateg || '-' ||
                           --preco_fam.tpdependente || '-' ||
                           preco_fam.cd_grau_parentesco || '-' ||
                           preco_fam.nrqtusuario_inicio;
        vnr_faixa       := 1;

        --identificar a data inicio e fim de validade do preço
        --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
        --montá-la a partir do início do contrato
        begin
          select dtiniciocontrato, dtfimcontrato
            into vddtini_contrato, vddtfim_contrato
            from contrato_da_pessoa cdp
           where cdp.nrregistro = tab_preco_fam.nrregistro
             and cdp.nrcontrato = tab_preco_fam.nrcontrato;
        exception
          when no_data_found then
            vddtini_contrato := '01/01/1900';
            vddtfim_contrato := '31/12/9999';
        end;

        -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
        if preco_fam.nrperiodo_ult_reajuste <> 0 then
          vddtini_contrato := preco_fam.dat_inic;
        end if;

        --identificar a data fim de validade do preço
        begin
          --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
          --ex: atual 201509 prox 201609 então 31/08/2016
          --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
          select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                          substr(periodo_fim, 1, 4),
                          'DD/MM/YYYY') - 1)
            into vddtfim_reajuste
            from (select decode(min(nrperiodo_ult_reajuste),
                                null,
                                '999912',
                                min(nrperiodo_ult_reajuste)) periodo_fim
                    from preco_contrato_pessoa pc1
                   where pc1.nrtabela_contrato = preco_fam.nrtabela_contrato
                     and pc1.cdcategserv = preco_fam.cdcategserv
                     and pc1.nrsequencial_usuario = 0
                     and pc1.nrfamilia = decode(preco_fam.origem_preco,
                                                2,
                                                preco_fam.nrfamilia,
                                                0)
                     and pc1.cdlotacao = '*'
                     and pc1.nrperiodo_ult_reajuste >
                         preco_fam.nrperiodo_ult_reajuste);
          --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
          if (vddtfim_contrato is not null) and
             (vddtfim_reajuste = '30/11/9999') then
            vddtfim_reajuste := vddtfim_contrato;
          end if;
          --se a data fim é 30/11/9999 virará 31/12/9999
          if vddtfim_reajuste = '30/11/9999' then
            vddtfim_reajuste := '31/12/9999';
          end if;
        exception
          when no_data_found then
            null;
        end;

        vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
        vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

      else
        vnr_faixa := vnr_faixa + 1;
      end if;

dbms_output.put_line('COMO FICOU VNR_FAIXA: ' || vnr_faixa);

      /*dbms_output.put_line('REGRA_MENSLID_CRITER2(vnr_regra,preco_tab.cd_padrao_cobertura,preco_tab.cd_modulo,preco_tab.cd_grau_parentesco,' ||
                           'vnr_faixa,preco_tab.nridade_inicio,preco_tab.nridade_fim,preco_tab.vlpreco_mensal,preco_tab.vlpreco_inscricao,' ||
                           'vddat_inic,vddat_fim,preco_tab.nrqtusu_ini,preco_tab.nrqtusu_fim;' ||
                           vnr_regra || ';' ||
                           preco_fam.cd_padrao_cobertura || ';' ||
                           preco_fam.cd_modulo || ';' ||
                           preco_fam.cd_grau_parentesco || ';' ||
                           vnr_faixa || ';' || preco_fam.nridade_inicio || ';' ||
                           preco_fam.nridade_fim || ';' ||
                           preco_fam.vlpreco_mensal || ';' ||
                           preco_fam.vlpreco_inscricao || ';' ||
                           vddat_inic || ';' || vddat_fim || ';' ||
                           preco_fam.nrqtusu_ini || ';' ||
                           preco_fam.nrqtusu_fim);*/

      --insere os criterios da regra
      p_insert_regra_menslid_criter(pInSimular,
                                    vnr_regra,
                                    preco_fam.cd_padrao_cobertura,
                                    preco_fam.cd_modulo,
                                    preco_fam.cd_grau_parentesco,
                                    vnr_faixa,
                                    preco_fam.nridade_inicio,
                                    preco_fam.nridade_fim,
                                    preco_fam.vlpreco_mensal,
                                    preco_fam.vlpreco_inscricao,
                                    vddat_inic,
                                    vddat_fim,
                                    preco_fam.nrqtusu_ini,
                                    preco_fam.nrqtusu_fim,
                                    preco_fam.nrsequencia);
    end loop; --preco_fam  --loop dos precos da tabela
  end loop; --tab_preco_fam  --loop das tabelas das familias

  /*=====================================================================================
   =  Inicio do processo que migra os preços específicos por usuario do contrato        =
   =  cada nrregistro + nrcontrato + nrsequencial_usuario = 1 regra                     =
   ======================================================================================
  */

  dbms_output.put_line('VAI GERAR REGRAS ESPECIFICAS DO USUARIO DO CONTRATO');
  for tab_preco_usu in (select distinct prc.nrtabela_contrato,
                                        prc.nrregistro,
                                        prc.nrcontrato,
                                        prc.nrtabela_padrao_origem,
                                        'PRECO ' ||
                                        decode(ctp.tpusu_contrato,
                                               'E',
                                               'PJ',
                                               'P',
                                               'PF',
                                               'C',
                                               'COOP',
                                               'UNI') || ' USU - CONTR: ' ||
                                        prc.nrcontrato ||
                                        '                                    ' des_regra,
                                        prc.aopreco_por_qtde_dependente,
                                        prc.dtultimo_reajuste,
                                        prc.nrperiodo_proximo_reajuste,
                                        (substr(prc.nrperiodo_proximo_reajuste,
                                                1,
                                                4) - 1) ||
                                        substr(prc.nrperiodo_proximo_reajuste,
                                               5,
                                               2) reaj_atual,
                                        prc.nrperiodo_inicio,
                                        prc.cdlotacao,
                                        cp.dtiniciocontrato dat_inic,
                                        nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                        prp.cdcontrato,
                                        pcp.nrfamilia,
                                        pcp.nrsequencial_usuario,
                                        (Select nvl(max(cdn_tip_idx), 1) /*valor '1' é default*/
                                         From   depara_indice_financeiro
                                         Where  cdindice = cp.cdindice) cdn_tip_idx,
                                       (select nvl(count(*),'0')
                                          from preco_contrato_pessoa pcp1
                                         where pcp1.nrtabela_contrato = prc.nrtabela_contrato
                                           and pcp1.tpplano <> '*') lg_tpplano_diferente

                          from preco_referencia_contrato prc,
                               contrato_da_pessoa        cp,
                               contrato_padrao           ctp,
                               preco_referencia_padrao   prp,
                               preco_contrato_pessoa     pcp
                         where cp.nrregistro = prc.nrregistro
                           And (cp.nrregistro = pNrregistro Or
                               pNrregistro Is Null)
                           And (cp.nrcontrato = pNrcontrato Or
                               pNrcontrato Is Null)

                           and cp.nrcontrato = prc.nrcontrato
                           and ctp.cdcontrato(+) = cp.cdcontrato_padrao
                           and prp.nrtabela_padrao =
                               prc.nrtabela_padrao_origem
                           and pcp.nrtabela_contrato = prc.nrtabela_contrato
                           and pcp.nrsequencial_usuario <> 0

                              --Evandro Levi (16/05/2018): Validação para não utilizar preço específico
                              --                             por usuário se no cadastro do usuário não
                              --                             existir vinculo com a tabela de preço listada.
                           And Exists
                         (Select 1
                                  From usuario
                                 Where nrsequencial_usuario = pcp.nrsequencial_usuario
                                   And nrtabela_contrato    = pcp.nrtabela_contrato)
                        --                               and prc.nrtabela_contrato   in (100547,100548)  --************************ teste
                         order by prc.nrregistro,
                                  prc.nrcontrato,
                                  prp.cdcontrato,
                                  pcp.nrsequencial_usuario,
                                  prc.nrtabela_contrato) loop

  log_dbms('entrou no laco regra especifica do beneficiario');

    --Se é um novo contrato da pessoa ou nova família é criada uma nova regra
    if (tab_preco_usu.nrregistro <> vnrregistro or
       tab_preco_usu.nrcontrato <> vnrcontrato or
       tab_preco_usu.cdcontrato <> vcdcontrato or
       tab_preco_usu.nrsequencial_usuario <> vnrseq_usu) then
      vnr_regra   := vnr_regra + 1;
      vnrregistro := tab_preco_usu.nrregistro;
      vnrcontrato := tab_preco_usu.nrcontrato;
      vcdcontrato := tab_preco_usu.cdcontrato;
      vnrseq_usu  := tab_preco_usu.nrsequencial_usuario;

      --Localiza o código da família do usuário
      begin
        select nrfamilia, tpusuario
          into tab_preco_usu.nrfamilia, vtpusuario
          from usuario u
         where u.nrsequencial_usuario = tab_preco_usu.nrsequencial_usuario;
      exception
        when no_data_found then
          null;
      end;

      if tab_preco_usu.nrfamilia <> 0 then
        tab_preco_usu.des_regra := TRIM(tab_preco_usu.des_regra) ||
                                   ' FAM: ' ||
                                   lpad(tab_preco_usu.nrfamilia, 6, '0') ||
                                   ' TP USU: ' || lpad(vtpusuario, 2, '0');

dbms_output.put_line('ATRIBUINDO DESCRICAO DA REGRA: ' || tab_preco_usu.des_regra);

      else
        tab_preco_usu.des_regra := TRIM(tab_preco_usu.des_regra);
      end if;

      /*dbms_output.put_line('REGRA_MENSLID3(REGRA,DESCRICAO,INICIO,FIM);' ||
                           vnr_regra || ';' || tab_preco_usu.des_regra || ';' ||
                           tab_preco_usu.dat_inic || ';' ||
                           tab_preco_usu.dat_fim);*/

      --insere a regra para a estrutura
      p_insert_regra_menslid(pInSimular,
                             vnr_regra,
                             tab_preco_usu.des_regra,
                             tab_preco_usu.dat_inic,
                             tab_preco_usu.dat_fim,
                             tab_preco_usu.cdn_tip_idx);

      --dbms_output.put_line('REGRA_MENSLID_REAJ3(vnr_regra,tab_preco_refer.reaj_atual);' ||
      --                     vnr_regra || ';' || tab_preco_usu.reaj_atual);

      --insere a data de reajuste da regra
      p_insert_regra_menslid_reaj(pInSimular,
                                  vnr_regra,
                                  tab_preco_usu.reaj_atual);

      for estrutura in (select ta.cd_modalidade vcd_modalidade,
                               ta.cd_plano      vcd_plano,
                               ta.cd_tipo_plano vcd_tipo_plano
                          from preco_referencia_padrao pp,
                               temp_depara_detalhado   td,
                               temp_depara_agrupado    ta
                         where pp.nrtabela_padrao =
                               tab_preco_usu.nrtabela_padrao_origem --join com a nrtabela origem do loop
                           and pp.cdcontrato = td.cdcontrato --join plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
                        ) loop

        --Localizar o código da proposta e do beneficiario
        for estrut_usu in (select u.nr_proposta, u.cd_usuario
                             from import_bnfciar ib, gp.usuario u
                            where ib.num_seqcial_bnfciar =
                                  tab_preco_usu.nrsequencial_usuario
                              and u.cd_carteira_antiga =
                                  ib.cd_carteira_antiga
                              and u.cd_modalidade = estrutura.vcd_modalidade) loop

          /*dbms_output.put_line('REGRA_MENSLID_ESTRUT3(vnr_regra,vcd_modalidade,vcd_plano,vcd_tipo_plano,' ||
                               'tab_preco_refer.dat_inic,tab_preco_refer.dat_fim,vnr_proposta,beneficiario);' ||
                               vnr_regra || ';' ||
                               estrutura.vcd_modalidade || ';' ||
                               estrutura.vcd_plano || ';' ||
                               estrutura.vcd_tipo_plano || ';' ||
                               tab_preco_usu.dat_inic || ';' ||
                               tab_preco_usu.dat_fim || ';' ||
                               estrut_usu.nr_proposta || ';' ||
                               estrut_usu.cd_usuario);*/

          --insere a estrutura da regra
          p_insert_regra_menslid_estrut(pInSimular,
                                        vnr_regra,
                                        estrutura.vcd_modalidade,
                                        estrutura.vcd_plano,
                                        estrutura.vcd_tipo_plano,
                                        tab_preco_usu.dat_inic,
                                        tab_preco_usu.dat_fim,
                                        estrut_usu.nr_proposta,
                                        estrut_usu.cd_usuario);

        end loop; --propostas do usu
      end loop;
    end if; --criação da regra

    --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
    --Antonio 19/11/2016
    insert into temp_depara_tabela_preco
    values
      (tab_preco_usu.nrtabela_contrato, --Tabela de Preços do Unicoo
       vnr_regra, --Código da Regra que virou no TOTVS
       tab_preco_usu.nrfamilia, --Código da Família quando preço por familia
       tab_preco_usu.nrsequencial_usuario, --Código do Usuario quando preço por usuario
       null); --Código da Lotação quando preço por lotacao

    vcd_chave_preco := ' ';
    --Varre os valores da tabela de referência na preco_contrato_pessoa procurando os valores da familia
    for preco_usu in (select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                             --'0' cd_grau_parentesco,

                             rm.cdvalor_externo cd_modulo,
                             pc.CDCATEGSERV,
                             pc.TPPLANO,
                             pc.CDUSUCATEG,
                             pc.TPDEPENDENTE,
                             pc.NRIDADE_INICIO,
                             pc.NRIDADE_FIM,
                             pc.NRQTUSUARIO_INICIO,
                             pc.NRQTUSUARIO_FIM,
                             pc.NRPERIODO_ULT_REAJUSTE,
                             pc.VLPRECO_MENSAL,
                             pc.VLPRECO_INSCRICAO,
                             pc.NRSEQUENCIAL_USUARIO,
                             pc.NRFAMILIA,
                             pc.CDLOTACAO,
                             pc.NRTABELA_CONTRATO,

/*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*/

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_usu.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             pc.nrsequencia,
                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim,
                             3 ORIGEM_PRECO
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_usu.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrsequencial_usuario =
                             tab_preco_usu.nrsequencial_usuario --nrfamilia do loop da tabela referencia
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                      union
                      --Buscar os preços da família das categorias que o usuário não tem para completar a regra
                      select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                             --'0' cd_grau_parentesco,
                             rm.cdvalor_externo cd_modulo,
                             pc.CDCATEGSERV,
                             pc.TPPLANO,
                             pc.CDUSUCATEG,
                             pc.TPDEPENDENTE,
                             pc.NRIDADE_INICIO,
                             pc.NRIDADE_FIM,
                             pc.NRQTUSUARIO_INICIO,
                             pc.NRQTUSUARIO_FIM,
                             pc.NRPERIODO_ULT_REAJUSTE,
                             pc.VLPRECO_MENSAL,
                             pc.VLPRECO_INSCRICAO,
                             pc.NRSEQUENCIAL_USUARIO,
                             pc.NRFAMILIA,
                             pc.CDLOTACAO,
                             pc.NRTABELA_CONTRATO,

/*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*/

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_usu.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             pc.nrsequencia,
                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim,
                             2 ORIGEM_PRECO
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_usu.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrsequencial_usuario = 0 --preços da família
                         and pc.nrfamilia = tab_preco_usu.nrfamilia --preços da familia
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                         and pc.cdcategserv not in
                             (select distinct p.cdcategserv
                                from preco_contrato_pessoa p
                               where p.nrtabela_contrato =
                                     pc.nrtabela_contrato
                                 and p.nrsequencial_usuario =
                                     tab_preco_usu.nrsequencial_usuario)
                      union
                      --Buscar os preços do contrato das categorias que o usuário não tem e a família também não p/completar a regra
                      select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                             --'0' cd_grau_parentesco,
                             rm.cdvalor_externo cd_modulo,
                             pc.CDCATEGSERV,
                             pc.TPPLANO,
                             pc.CDUSUCATEG,
                             pc.TPDEPENDENTE,
                             pc.NRIDADE_INICIO,
                             pc.NRIDADE_FIM,
                             pc.NRQTUSUARIO_INICIO,
                             pc.NRQTUSUARIO_FIM,
                             pc.NRPERIODO_ULT_REAJUSTE,
                             pc.VLPRECO_MENSAL,
                             pc.VLPRECO_INSCRICAO,
                             pc.NRSEQUENCIAL_USUARIO,
                             pc.NRFAMILIA,
                             pc.CDLOTACAO,
                             pc.NRTABELA_CONTRATO,

/*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*/

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS quem sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_usu.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                             pc.nrsequencia,
                             '01/' ||
                             substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                             substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                             decode(pc.nrqtusuario_inicio,
                                    0,
                                    1,
                                    pc.nrqtusuario_inicio) nrqtusu_ini,
                             decode(pc.nrqtusuario_fim,
                                    0,
                                    999999,
                                    pc.nrqtusuario_fim) nrqtusu_fim,
                             1 ORIGEM_PRECO
                        from preco_contrato_pessoa pc,
                             preco_referencia_contrato prc,
                             preco_referencia_padrao prp,
                             temp_depara_detalhado td,
                             temp_depara_agrupado ta,
                             (select cdvalor_externo, cdvalor_interno
                                from mig_tab_conversao     tc,
                                     mig_tab_conversao_exp ce
                               where notabela = 'MIGRACAO_MODULO'
                                 and tc.nrseq = ce.nrseq_tab_conversao) rm
                       where pc.nrtabela_contrato =
                             tab_preco_usu.nrtabela_contrato --nrtabela do loop da tabela referencia
                         and pc.nrsequencial_usuario = 0 --preços do contrato
                         and pc.nrfamilia = 0 --preços do contrato
                         and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                         and prp.nrtabela_padrao =
                             prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                         and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                         and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                         and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                         and pc.cdcategserv not in
                             (select distinct p.cdcategserv
                                from preco_contrato_pessoa p
                               where p.nrtabela_contrato =
                                     pc.nrtabela_contrato
                                 and p.nrfamilia = tab_preco_usu.nrfamilia)
                         and pc.cdcategserv not in
                             (select distinct p.cdcategserv
                                from preco_contrato_pessoa p
                               where p.nrtabela_contrato =
                                     pc.nrtabela_contrato
                                 and p.nrsequencial_usuario =
                                     tab_preco_usu.nrsequencial_usuario)
                       order by nrperiodo_ult_reajuste,
                                cdcategserv,
                                --tpplano,
                                cd_padrao_cobertura,
                                --cdusucateg,
                                --tpdependente,
                                cd_grau_parentesco,
                                nrqtusuario_inicio,
                                nridade_inicio) loop

/*dbms_output.put_line('vnr_regra/vcd_chave_preco/vnr_faixa antes: ' || vnr_regra || '/' || vcd_chave_preco || '/' || vnr_faixa);
dbms_output.put_line('antes da comparacao: ' ||
          preco_usu.nrperiodo_ult_reajuste || '-' ||
          preco_usu.cdcategserv || '-' ||
          preco_usu.tpplano || '-' ||
          preco_usu.cdusucateg || '-' ||
          preco_usu.tpdependente || '-' ||
          preco_usu.nrqtusuario_inicio);*/

      --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
      if (preco_usu.nrperiodo_ult_reajuste || '-' ||
          preco_usu.cdcategserv || '-' ||
          --preco_usu.tpplano || '-' ||
          preco_usu.cd_padrao_cobertura || '-' ||
          --preco_usu.cdusucateg || '-' ||
          --preco_usu.tpdependente || '-' ||
          preco_usu.cd_grau_parentesco || '-' ||
          preco_usu.nrqtusuario_inicio) <> vcd_chave_preco then

        vcd_chave_preco := preco_usu.nrperiodo_ult_reajuste || '-' ||
                           preco_usu.cdcategserv || '-' ||
                           --preco_usu.tpplano || '-' ||
                           preco_usu.cd_padrao_cobertura || '-' ||
                           --preco_usu.cdusucateg || '-' ||
                           --preco_usu.tpdependente || '-' ||
                           preco_usu.cd_grau_parentesco || '-' ||
                           preco_usu.nrqtusuario_inicio;
        vnr_faixa       := 1;

        --identificar a data inicio e fim de validade do preço
        --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
        --montá-la a partir do início do contrato
        begin
          select dtiniciocontrato, dtfimcontrato
            into vddtini_contrato, vddtfim_contrato
            from contrato_da_pessoa cdp
           where cdp.nrregistro = tab_preco_usu.nrregistro
             and cdp.nrcontrato = tab_preco_usu.nrcontrato;
        exception
          when no_data_found then
            vddtini_contrato := '01/01/1900';
            vddtfim_contrato := '31/12/9999';
        end;

        -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
        if preco_usu.nrperiodo_ult_reajuste <> 0 then
          vddtini_contrato := preco_usu.dat_inic;
        end if;

        --identificar a data fim de validade do preço
        begin
          --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
          --ex: atual 201509 prox 201609 então 31/08/2016
          --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
          select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                          substr(periodo_fim, 1, 4),
                          'DD/MM/YYYY') - 1)
            into vddtfim_reajuste
            from (select decode(min(nrperiodo_ult_reajuste),
                                null,
                                '999912',
                                min(nrperiodo_ult_reajuste)) periodo_fim
                    from preco_contrato_pessoa pc1
                   where pc1.nrtabela_contrato = preco_usu.nrtabela_contrato
                     and pc1.cdcategserv = preco_usu.cdcategserv
                     and pc1.nrsequencial_usuario =
                         decode(preco_usu.origem_preco,
                                3,
                                preco_usu.nrsequencial_usuario,
                                0)
                     and pc1.nrfamilia = decode(preco_usu.origem_preco,
                                                2,
                                                preco_usu.nrfamilia,
                                                0)
                     and pc1.cdlotacao = '*'
                     and pc1.nrperiodo_ult_reajuste >
                         preco_usu.nrperiodo_ult_reajuste);

          --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
          if (vddtfim_contrato is not null) and
             (vddtfim_reajuste = '30/11/9999') then
            vddtfim_reajuste := vddtfim_contrato;
          end if;
          --se a data fim é 30/11/9999 virará 31/12/9999
          if vddtfim_reajuste = '30/11/9999' then
            vddtfim_reajuste := '31/12/9999';
          end if;
        exception
          when no_data_found then
            null;
        end;

        vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
        vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

      else
        vnr_faixa := vnr_faixa + 1;
      end if;

--      dbms_output.put_line('como ficou vnr_faixa: ' || vnr_faixa);

      /*dbms_output.put_line('REGRA_MENSLID_CRITER3(vnr_regra,preco_tab.cd_padrao_cobertura,preco_tab.cd_modulo,preco_tab.cd_grau_parentesco,' ||
                           'vnr_faixa,preco_tab.nridade_inicio,preco_tab.nridade_fim,preco_tab.vlpreco_mensal,preco_tab.vlpreco_inscricao,' ||
                           'vddat_inic,vddat_fim,preco_tab.nrqtusu_ini,preco_tab.nrqtusu_fim;' ||
                           vnr_regra || ';' ||
                           preco_usu.cd_padrao_cobertura || ';' ||
                           preco_usu.cd_modulo || ';' ||
                           preco_usu.cd_grau_parentesco || ';' ||
                           vnr_faixa || ';' || preco_usu.nridade_inicio || ';' ||
                           preco_usu.nridade_fim || ';' ||
                           preco_usu.vlpreco_mensal || ';' ||
                           preco_usu.vlpreco_inscricao || ';' ||
                           vddat_inic || ';' || vddat_fim || ';' ||
                           preco_usu.nrqtusu_ini || ';' ||
                           preco_usu.nrqtusu_fim);*/

      --insere os criterios da regra
      p_insert_regra_menslid_criter(pInSimular,
                                    vnr_regra,
                                    preco_usu.cd_padrao_cobertura,
                                    preco_usu.cd_modulo,
                                    preco_usu.cd_grau_parentesco,
                                    vnr_faixa,
                                    preco_usu.nridade_inicio,
                                    preco_usu.nridade_fim,
                                    preco_usu.vlpreco_mensal,
                                    preco_usu.vlpreco_inscricao,
                                    vddat_inic,
                                    vddat_fim,
                                    preco_usu.nrqtusu_ini,
                                    preco_usu.nrqtusu_fim,
                                    preco_usu.nrsequencia);
    end loop; --preco_usu  --loop dos precos do usuario
  end loop; --tab_preco_usu  --loop das tabelas dos usuarios

  /*=====================================================================================
   =  Inicio do processo que migra os preços específicos por usuario do contrato        =
   =  cada nrregistro + nrcontrato + lotacao = 1 regra                                  =
   ======================================================================================
  */

  for tab_preco_lota in (select distinct prc.nrtabela_contrato,
                                         prc.nrregistro,
                                         prc.nrcontrato,
                                         prc.nrtabela_padrao_origem,
                                         'PRECO LOTACAO - CONTR: ' ||
                                         prc.nrcontrato || ' LOTACAO: ' ||
                                         pcp.cdlotacao des_regra,
                                         prc.aopreco_por_qtde_dependente,
                                         prc.dtultimo_reajuste,
                                         prc.nrperiodo_proximo_reajuste,
                                         (substr(prc.nrperiodo_proximo_reajuste,
                                                 1,
                                                 4) - 1) ||
                                         substr(prc.nrperiodo_proximo_reajuste,
                                                5,
                                                2) reaj_atual,
                                         prc.nrperiodo_inicio,
                                         prc.cdlotacao cdlotacao_refer,
                                         cp.dtiniciocontrato dat_inic,
                                         nvl(cp.dtfimcontrato, '31/12/9999') dat_fim,
                                         pcp.nrfamilia,
                                         pcp.nrsequencial_usuario,
                                         prp.cdcontrato,
                                         pcp.cdlotacao cdlotacao,
                                         (Select nvl(max(cdn_tip_idx), 1) /*valor '1' é default*/
                                          From   depara_indice_financeiro
                                          Where  cdindice = cp.cdindice) cdn_tip_idx,
                                         (select nvl(count(*),'0')
                                            from preco_contrato_pessoa pcp1
                                           where pcp1.nrtabela_contrato = prc.nrtabela_contrato
                                             and pcp1.tpplano <> '*') lg_tpplano_diferente

                           from preco_referencia_contrato prc,
                                contrato_da_pessoa        cp,
                                preco_referencia_padrao   prp,
                                preco_contrato_pessoa     pcp
                          where cp.nrregistro = prc.nrregistro
                            And (cp.nrregistro = pNrregistro Or
                                pNrregistro Is Null)
                            And (cp.nrcontrato = pNrcontrato Or
                                pNrcontrato Is Null)

                            and cp.nrcontrato = prc.nrcontrato
                            and prp.nrtabela_padrao =
                                prc.nrtabela_padrao_origem
                            and pcp.nrtabela_contrato =
                                prc.nrtabela_contrato
                            and pcp.cdlotacao <> '*'

                         --a regra deve ser usada por ao menos um beneficiario, pois no Unicoo podem existir
                         --regras associadas ao contrato mas sem vinculo com nenhum beneficiario.
                         --estava criando criterios sobrepostos (Alex Boeira 02/01/2019)
                           and exists
                         (select 1 from usuario uu
                                  where uu.nrregistro = prc.nrregistro
                                    and uu.nrcontrato = prc.nrcontrato
                                    and uu.nrtabela_contrato = prc.nrtabela_contrato)

                          order by prc.nrregistro,
                                   prc.nrcontrato,
                                   pcp.cdlotacao,
                                   prc.nrtabela_contrato) loop

    --Se é um novo contrato da pessoa ou nova lotacao é criada uma nova regra
    if (tab_preco_lota.nrregistro <> vnrregistro or
       tab_preco_lota.nrcontrato <> vnrcontrato or
       tab_preco_lota.cdcontrato <> vcdcontrato or
       tab_preco_lota.cdlotacao <> vcdlotacao) then
      vnr_regra   := vnr_regra + 1;
      vnrregistro := tab_preco_lota.nrregistro;
      vnrcontrato := tab_preco_lota.nrcontrato;
      vcdcontrato := tab_preco_lota.cdcontrato;
      vcdlotacao  := tab_preco_lota.cdlotacao;

      /*dbms_output.put_line('REGRA_MENSLID4(REGRA,DESCRICAO,INICIO,FIM);' ||
                           vnr_regra || ';' || tab_preco_lota.des_regra || ';' ||
                           tab_preco_lota.dat_inic || ';' ||
                           tab_preco_lota.dat_fim);*/

      --insere a regra para a estrutura
      p_insert_regra_menslid(pInSimular,
                             vnr_regra,
                             tab_preco_lota.des_regra,
                             tab_preco_lota.dat_inic,
                             tab_preco_lota.dat_fim,
                             tab_preco_lota.cdn_tip_idx);

      /*dbms_output.put_line('REGRA_MENSLID_REAJ4(vnr_regra,tab_preco_refer.reaj_atual);' ||
                           vnr_regra || ';' || tab_preco_lota.reaj_atual);*/

      --insere a data de reajuste da regra
      p_insert_regra_menslid_reaj(pInSimular,
                                  vnr_regra,
                                  tab_preco_lota.reaj_atual);

      --Localizar o código da proposta e dos beneficiarios da lotacao
      /* Evandro Levi (16/05/2018): Considerar a lotação conforme parametro USULOTAC do Unicoo
      for usu_fam in (select nrsequencial_usuario
                        from usuario u, familia f
                       where f.nrregistro = u.nrregistro
                         and f.nrcontrato = u.nrcontrato
                         and f.nrfamilia = u.nrfamilia
                         and u.nrregistro = tab_preco_lota.nrregistro
                         and u.nrcontrato = tab_preco_lota.nrcontrato
                         and nvl(u.cdlotacao, f.cdlotacao) = tab_preco_lota.cdlotacao) loop*/
      for estrutura in (select ta.cd_modalidade vcd_modalidade,
                               ta.cd_plano      vcd_plano,
                               ta.cd_tipo_plano vcd_tipo_plano
                          from preco_referencia_padrao pp,
                               temp_depara_detalhado   td,
                               temp_depara_agrupado    ta
                         where pp.nrtabela_padrao =
                               tab_preco_lota.nrtabela_padrao_origem --join com a nrtabela origem do loop
                           and pp.cdcontrato = td.cdcontrato --join plano detalhado
                           and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
                        ) loop

        for usu_fam in (select nrsequencial_usuario, ugp.nr_proposta, ugp.cd_usuario
                          from usuario u, gp.import_bnfciar ib, gp.usuario ugp
                         where u.nrregistro = tab_preco_lota.nrregistro
                           and u.nrcontrato = tab_preco_lota.nrcontrato
                           and ib.num_seqcial_bnfciar = nrsequencial_usuario
                           and ugp.cd_carteira_antiga = ib.cd_carteira_antiga
                           and ugp.cd_modalidade = estrutura.vcd_modalidade
                           and f_lotacao_usuario(u.nrsequencial_usuario) = tab_preco_lota.cdlotacao
                           ) Loop
/*          dbms_output.put_line('REGRA_MENSLID_ESTRUT4(vnr_regra,vcd_modalidade,vcd_plano,vcd_tipo_plano,' ||
                               'tab_preco_refer.dat_inic,tab_preco_refer.dat_fim,vnr_proposta,beneficiario);' ||
                               vnr_regra || ';' ||
                               estrutura.vcd_modalidade || ';' ||
                               estrutura.vcd_plano || ';' ||
                               estrutura.vcd_tipo_plano || ';' ||
                               tab_preco_lota.dat_inic || ';' ||
                               tab_preco_lota.dat_fim || ';' ||
                               vnr_proposta || ';' || vnr_seq_usuario);
*/
          --insere a estrutura da regra
          p_insert_regra_menslid_estrut(pInSimular,
                                        vnr_regra,
                                        estrutura.vcd_modalidade,
                                        estrutura.vcd_plano,
                                        estrutura.vcd_tipo_plano,
                                        tab_preco_lota.dat_inic,
                                        tab_preco_lota.dat_fim,
                                        usu_fam.nr_proposta,
                                        usu_fam.cd_usuario);
        end loop;
      end loop;

    end if; --criação da regra

    --Gravação da tabela temporária com as tabelas de preços do Unicoo e as regras que as mesmas viraram no TOTVS
    --Antonio 19/11/2016
    insert into temp_depara_tabela_preco
    values
      (tab_preco_lota.nrtabela_contrato, --Tabela de Preços do Unicoo
       vnr_regra, --Código da Regra que virou no TOTVS
       tab_preco_lota.nrfamilia, --Código da Família quando preço por familia
       tab_preco_lota.nrsequencial_usuario, --Código do Usuario quando preço por usuario
       tab_preco_lota.cdlotacao); --Código da Lotação quando preço por lotacao

    vcd_chave_preco := ' ';
    --Varre os valores da tabela de referência na preco_contrato_pessoa procurando os valores da familia
    for preco_lota in (select case
                               when pc.cdusucateg <> '*' then
                                nvl((select tgp.cdvalores_externo
                                       from temp_grau_paren tgp,
                                            tipo_de_usuario tu
                                      where tgp.cdvalor_interno =
                                            tu.tpusuario
                                        and tu.cdusucateg =
                                            pc.cdusucateg),'0')
                               else
                                 case
                                   when pc.tpdependente = 'T' then
                                     '01'
                                   when pc.tpdependente = 'A' then
                                     f_tm_parametro('CDGRAU_AGREGADO')
                                   else
                                     '00'
                                 end
                             end cd_grau_parentesco,
                              --'0' cd_grau_parentesco,
                              rm.cdvalor_externo cd_modulo,
                              pc.*,

/*                             -- Alex Boeira 27/12/2018 - se TPPLANO for * no Unicoo, deixar Padrao de Cobertura vazio, indicando default
                             --ta.cd_padrao_cobertura,
                             decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura) cd_padrao_cobertura,
*/

                             -- Alex Boeira 02/01/2019 - se TPPLANO for * no Unicoo e dentro da mesma tabela existirem outros
                             --criterios com TPPLANO diferente (A,B,C), deixar Padrao de Cobertura vazio, indicando default;
                             --se todos os criterios tiverem TPPLANO *, preencher o Padrao de Cobertura, pois no Unicoo um mesmo
                             --contrato pode ter varias tabelas default, ja no TOTVS sera criada uma mesma regra, e o que vai
                             --diferenciar eh o Padrao de Cobertura
                             case
                               when tab_preco_lota.lg_tpplano_diferente > 0 then
                                 decode(pc.tpplano,'*',' ',ta.cd_padrao_cobertura)
                               else
                                 ta.cd_padrao_cobertura
                             end cd_padrao_cobertura,

                              '01/' ||
                              substr(pc.nrperiodo_ult_reajuste, 5, 2) || '/' ||
                              substr(pc.nrperiodo_ult_reajuste, 1, 4) dat_inic,
                              decode(pc.nrqtusuario_inicio,
                                     0,
                                     1,
                                     pc.nrqtusuario_inicio) nrqtusu_ini,
                              decode(pc.nrqtusuario_fim,
                                     0,
                                     999999,
                                     pc.nrqtusuario_fim) nrqtusu_fim
                         from preco_contrato_pessoa pc,
                              preco_referencia_contrato prc,
                              preco_referencia_padrao prp,
                              temp_depara_detalhado td,
                              temp_depara_agrupado ta,
                              (select cdvalor_externo, cdvalor_interno
                                 from mig_tab_conversao     tc,
                                      mig_tab_conversao_exp ce
                                where notabela = 'MIGRACAO_MODULO'
                                  and tc.nrseq = ce.nrseq_tab_conversao) rm
                        where pc.nrtabela_contrato =
                              tab_preco_lota.nrtabela_contrato --nrtabela do loop da tabela referencia
                          and pc.cdlotacao = tab_preco_lota.cdlotacao --nrfamilia do loop da tabela referencia
                          and pc.nrtabela_contrato = prc.nrtabela_contrato --join refer contrato x preco contrato
                          and prp.nrtabela_padrao =
                              prc.nrtabela_padrao_origem --join refer padrao   x refer contrato
                          and prp.cdcontrato = td.cdcontrato --join refer padrao   x plano detalhado
                          and td.cdcontrato_agr = ta.cdcontrato --join plano detalhad x plano agrupado
                          and rm.cdvalor_interno = pc.cdcategserv --join de/para modulo x preco contrato
                        order by pc.nrperiodo_ult_reajuste,
                                 pc.cdcategserv,
                                 --pc.tpplano,
                                 cd_padrao_cobertura,
                                 --pc.cdusucateg,
                                 --pc.tpdependente,
                                 cd_grau_parentesco,
                                 pc.nrqtusuario_inicio,
                                 pc.nridade_inicio) loop

      --Verifica se é a primeira faixa do preço para iniciar o número da faixa ou somar mais um
      if (preco_lota.nrperiodo_ult_reajuste || '-' ||
         preco_lota.cdcategserv || '-' ||
         --preco_lota.tpplano || '-' ||
         preco_lota.cd_padrao_cobertura || '-' ||
         --preco_lota.cdusucateg || '-' ||
         --preco_lota.tpdependente || '-' ||
         preco_lota.cd_grau_parentesco || '-' ||
         preco_lota.nrqtusuario_inicio) <> vcd_chave_preco then
        vcd_chave_preco := preco_lota.nrperiodo_ult_reajuste || '-' ||
                           preco_lota.cdcategserv || '-' ||
                           --preco_lota.tpplano || '-' ||
                           preco_lota.cd_padrao_cobertura || '-' ||
                           --preco_lota.cdusucateg || '-' ||
                           --preco_lota.tpdependente || '-' ||
                           preco_lota.cd_grau_parentesco || '-' ||
                           preco_lota.nrqtusuario_inicio;
        vnr_faixa       := 1;

        --identificar a data inicio e fim de validade do preço
        --a data inicio já está montada na query com o dia 01 + ult reaj, porém, quando o último reajuste for 0 precisará
        --montá-la a partir do início do contrato
        begin
          select dtiniciocontrato, dtfimcontrato
            into vddtini_contrato, vddtfim_contrato
            from contrato_da_pessoa cdp
           where cdp.nrregistro = tab_preco_lota.nrregistro
             and cdp.nrcontrato = tab_preco_lota.nrcontrato;
        exception
          when no_data_found then
            vddtini_contrato := '01/01/1900';
            vddtfim_contrato := '31/12/9999';
        end;

        -- se o ultimo reajuste não for o zero, será utilizada como data de início do preço o que vier da query
        if preco_lota.nrperiodo_ult_reajuste <> 0 then
          vddtini_contrato := preco_lota.dat_inic;
        end if;

        --identificar a data fim de validade do preço
        begin
          --procura o menor próximo reajuste maior que o atual e coloca o dia anterior
          --ex: atual 201509 prox 201609 então 31/08/2016
          --se nao houver próximo reajuste irá mover 999912 então o dia anterior será 30/11/9999
          select (to_date('01/' || substr(periodo_fim, 5, 2) || '/' ||
                          substr(periodo_fim, 1, 4),
                          'DD/MM/YYYY') - 1)
            into vddtfim_reajuste
            from (select decode(min(nrperiodo_ult_reajuste),
                                null,
                                '999912',
                                min(nrperiodo_ult_reajuste)) periodo_fim
                    from preco_contrato_pessoa pc1
                   where pc1.nrtabela_contrato =
                         preco_lota.nrtabela_contrato
                     and pc1.cdlotacao = preco_lota.cdlotacao
                     and pc1.nrperiodo_ult_reajuste >
                         preco_lota.nrperiodo_ult_reajuste);
          --se o contrato estiver excluído e a data fim for 30/11/9999 , a data de exclusão será a final
          if (vddtfim_contrato is not null) and
             (vddtfim_reajuste = '30/11/9999') then
            vddtfim_reajuste := vddtfim_contrato;
          end if;
          --se a data fim é 30/11/9999 virará 31/12/9999
          if vddtfim_reajuste = '30/11/9999' then
            vddtfim_reajuste := '31/12/9999';
          end if;
        exception
          when no_data_found then
            null;
        end;

        vddat_inic := vddtini_contrato; --data inicial do contrato quando prox reaj = 0 ou o primeiro dia do ult reaj
        vddat_fim  := vddtfim_reajuste; --data exclusao do contrato quando for o último reajuste ou dia anterior do reajuste seguinte

      else
        vnr_faixa := vnr_faixa + 1;
      end if;

      /*dbms_output.put_line('REGRA_MENSLID_CRITER4(vnr_regra,preco_tab.cd_padrao_cobertura,preco_tab.cd_modulo,preco_tab.cd_grau_parentesco,' ||
                           'vnr_faixa,preco_tab.nridade_inicio,preco_tab.nridade_fim,preco_tab.vlpreco_mensal,preco_tab.vlpreco_inscricao,' ||
                           'vddat_inic,vddat_fim,preco_tab.nrqtusu_ini,preco_tab.nrqtusu_fim;' ||
                           vnr_regra || ';' ||
                           preco_lota.cd_padrao_cobertura || ';' ||
                           preco_lota.cd_modulo || ';' ||
                           preco_lota.cd_grau_parentesco || ';' ||
                           vnr_faixa || ';' || preco_lota.nridade_inicio || ';' ||
                           preco_lota.nridade_fim || ';' ||
                           preco_lota.vlpreco_mensal || ';' ||
                           preco_lota.vlpreco_inscricao || ';' ||
                           vddat_inic || ';' || vddat_fim || ';' ||
                           preco_lota.nrqtusu_ini || ';' ||
                           preco_lota.nrqtusu_fim);*/

      --insere os criterios da regra
      p_insert_regra_menslid_criter(pInSimular,
                                    vnr_regra,
                                    preco_lota.cd_padrao_cobertura,
                                    preco_lota.cd_modulo,
                                    preco_lota.cd_grau_parentesco,
                                    vnr_faixa,
                                    preco_lota.nridade_inicio,
                                    preco_lota.nridade_fim,
                                    preco_lota.vlpreco_mensal,
                                    preco_lota.vlpreco_inscricao,
                                    vddat_inic,
                                    vddat_fim,
                                    preco_lota.nrqtusu_ini,
                                    preco_lota.nrqtusu_fim,
                                    preco_lota.nrsequencia);
    end loop; --preco_lota  --loop dos precos da lotacao
  end loop; --tab_preco_lota  --loop das tabelas das lotacoes

  --caso seja processamento completo (todos os contratos) e algum contrato ficou sem regra, atribuir default
  if pNrregistro is null and pNrcontrato is null then
    pck_unicoogps.P_REGRA_DEFAULT_CONTRATO(null, --pcdmodalidade number,
                                           null, --pcdplano number,
                                           null, --pcdtipo_plano number,
                                           null  --pnrproposta number
                                           );
  end if;
end p_migra_regra_proposta2;

  /*========================================================================================
   =  Procedure : p_insert_regra_menslid                                     Antônio Prado =
   =              p_insert_regra_menslid_estrut                                            =
   =              p_insert_regra_menslid_criter                                            =
   =                                                                                       =
   =  Objetivo  : procedures chamadas pela p_migra_preco_proposta para realizarem os       =
   =              inserts nas tabelas de preços do TOTVS (regras)                          =
   =                                                                            19/11/2016 =
   =========================================================================================
  */

  --Procedure para insert da regra_menslid - Utilizada na p_migra_regra_proposta
  procedure p_insert_regra_menslid(pInSimular   varchar2,
                                   pcdd_regra   number,
                                   pdes_regra   varchar2,
                                   pdat_inic    Date,
                                   pdat_fim     date,
                                   pcdn_tip_idx Number) is
  begin
    if pInSimular in ('S','T') then
      insert into regra_menslid_sim
        (cdd_regra,
         des_regra,
         dat_inic,
         dat_fim,
         des_obs,
         cdn_tip_idx,
         in_tipo_regra,
         log_livre_1, --indicador se é regra modelo
         progress_recid)
      values
        (pcdd_regra,
         pdes_regra,
         trunc(pdat_inic, 'mm'), --primeiro dia do mês
         last_day(pdat_fim), --ultimo dia do mês
         ' ',
         pcdn_tip_idx, /*1 - Default*/
         1,
         0, -- 1: é regra modelo; 0: é regra de um contrato/beneficiário
         regra_menslid_sim_seq.nextval);
    end if;

    if pInSimular in ('N','T') then
      insert into gp.regra_menslid
        (cdd_regra,
         des_regra,
         dat_inic,
         dat_fim,
         des_obs,
         cdn_tip_idx,
         in_tipo_regra,
         log_livre_1, --indicador se é regra modelo
         progress_recid)
      values
        (pcdd_regra,
         pdes_regra,
         trunc(pdat_inic, 'mm'), --primeiro dia do mês
         last_day(pdat_fim), --ultimo dia do mês
         ' ',
         1,
         1,
         0, -- 1: é regra modelo; 0: é regra de um contrato/beneficiário
         gp.regra_menslid_seq.nextval);
    end if;
  end p_insert_regra_menslid;

  --Procedure para insert da regra_menslid_estrut - Utilizada na p_migra_regra_proposta
  procedure p_insert_regra_menslid_estrut(pInSimular     varchar2,
                                          pcdd_regra     number,
                                          pcd_modalidade number,
                                          pcd_plano      number,
                                          pcd_tipo_plano number,
                                          pdat_inic      date,
                                          pdat_fim       date,
                                          pnr_proposta   number,
                                          pnr_usuario    number) is

    vgp_propost gp.regra_menslid_propost%rowtype;

  begin
    if pInSimular in ('S','T') then
      insert into regra_menslid_estrut_sim
      values
        (regra_menslid_estrut_sim_seq.nextval,
         pcdd_regra,
         pcd_modalidade,
         pcd_plano,
         pcd_tipo_plano,
         pnr_proposta, --nr_proposta,
         pnr_usuario, --cd_usuario,
         pdat_inic,
         pdat_fim,
         ' ', --des_observacao,
         ' ', --cod_livre_1,
         ' ', --cod_livre_2,
         ' ', --cod_livre_3,
         ' ', --cod_livre_4,
         ' ', --cod_livre_5,
         ' ', --cod_livre_6,
         ' ', --cod_livre_7,
         ' ', --cod_livre_8,
         ' ', --cod_livre_9,
         ' ', --cod_livre_10,
         0, --num_livre_1,
         0, --num_livre_2,
         0, --num_livre_3,
         0, --num_livre_4,
         0, --num_livre_5,
         0, --num_livre_6,
         0, --num_livre_7,
         0, --num_livre_8,
         0, --num_livre_9,
         0, --num_livre_10,
         0, --val_livre_1,
         0, --val_livre_2,
         0, --val_livre_3,
         0, --val_livre_4,
         0, --val_livre_5,
         0, --val_livre_6,
         0, --val_livre_7,
         0, --val_livre_8,
         0, --val_livre_9,
         0, --val_livre_10,
         0, --log_livre_1,
         0, --log_livre_2,
         0, --log_livre_3,
         0, --log_livre_4,
         0, --log_livre_5,
         0, --log_livre_6,
         0, --log_livre_7,
         0, --log_livre_8,
         0, --log_livre_9,
         0, --log_livre_10,
         null, --dat_livre_1,
         null, --dat_livre_2,
         null, --dat_livre_3,
         null, --dat_livre_4,
         null, --dat_livre_5,
         null, --dat_livre_6,
         null, --dat_livre_7,
         null, --dat_livre_8,
         null, --dat_livre_9,
         null, --dat_livre_10,
         'migracao',
         sysdate,
         regra_menslid_estrut_sim_seq.currval);

      -- valores imutaveis
      vgp_propost.cod_livre_1           := ' ';
      vgp_propost.cod_livre_2           := ' ';
      vgp_propost.cod_livre_3           := ' ';
      vgp_propost.cod_livre_4           := ' ';
      vgp_propost.cod_livre_5           := ' ';
      vgp_propost.cod_livre_6           := ' ';
      vgp_propost.cod_livre_7           := ' ';
      vgp_propost.cod_livre_8           := ' ';
      vgp_propost.cod_livre_9           := ' ';
      vgp_propost.num_livre_1           := 0;
      vgp_propost.num_livre_2           := 0;
      vgp_propost.num_livre_3           := 0;
      vgp_propost.num_livre_4           := 0;
      vgp_propost.num_livre_5           := 0;
      vgp_propost.num_livre_6           := 0;
      vgp_propost.num_livre_7           := 0;
      vgp_propost.num_livre_8           := 0;
      vgp_propost.num_livre_9           := 0;
      vgp_propost.num_livre_10          := 0;
      vgp_propost.val_livre_1           := 0;
      vgp_propost.val_livre_2           := 0;
      vgp_propost.val_livre_3           := 0;
      vgp_propost.val_livre_4           := 0;
      vgp_propost.val_livre_5           := 0;
      vgp_propost.val_livre_6           := 0;
      vgp_propost.val_livre_7           := 0;
      vgp_propost.val_livre_8           := 0;
      vgp_propost.val_livre_9           := 0;
      vgp_propost.val_livre_10          := 0;
      vgp_propost.log_livre_1           := 0;
      vgp_propost.log_livre_2           := 0;
      vgp_propost.log_livre_3           := 0;
      vgp_propost.log_livre_4           := 0;
      vgp_propost.log_livre_5           := 0;
      vgp_propost.log_livre_6           := 0;
      vgp_propost.log_livre_7           := 0;
      vgp_propost.log_livre_8           := 0;
      vgp_propost.log_livre_9           := 0;
      vgp_propost.log_livre_10          := 0;
      vgp_propost.dat_ult_atualiz       := sysdate;
      vgp_propost.hra_ult_atualiz       := ' ';
      vgp_propost.cod_usuar_ult_atualiz := 'migracao';

      -- mutaveis aqui
      vgp_propost.cdd_regra       := pcdd_regra;
      vgp_propost.cd_modalidade   := pcd_modalidade;
      vgp_propost.nr_proposta     := pnr_proposta;
      vgp_propost.cd_usuario      := pnr_usuario;
      vgp_propost.dt_ini_validade := pdat_inic;
      vgp_propost.dt_fim_validade := pdat_fim;

      select regra_menslid_propost_sim_seq.nextval into vgp_propost.cdd_seq from dual;
      vgp_propost.progress_recid := vgp_propost.cdd_seq;

      insert into regra_menslid_propost_sim values vgp_propost;
    end if;

    if pInSimular in ('N','T') then
      insert into gp.regra_menslid_estrut
      values
        (seq_regra_menslid_estrut.nextval,
         pcdd_regra,
         pcd_modalidade,
         pcd_plano,
         pcd_tipo_plano,
         pnr_proposta, --nr_proposta,
         pnr_usuario, --cd_usuario,
         pdat_inic,
         pdat_fim,
         ' ', --des_observacao,
         ' ', --cod_livre_1,
         ' ', --cod_livre_2,
         ' ', --cod_livre_3,
         ' ', --cod_livre_4,
         ' ', --cod_livre_5,
         ' ', --cod_livre_6,
         ' ', --cod_livre_7,
         ' ', --cod_livre_8,
         ' ', --cod_livre_9,
         ' ', --cod_livre_10,
         0, --num_livre_1,
         0, --num_livre_2,
         0, --num_livre_3,
         0, --num_livre_4,
         0, --num_livre_5,
         0, --num_livre_6,
         0, --num_livre_7,
         0, --num_livre_8,
         0, --num_livre_9,
         0, --num_livre_10,
         0, --val_livre_1,
         0, --val_livre_2,
         0, --val_livre_3,
         0, --val_livre_4,
         0, --val_livre_5,
         0, --val_livre_6,
         0, --val_livre_7,
         0, --val_livre_8,
         0, --val_livre_9,
         0, --val_livre_10,
         0, --log_livre_1,
         0, --log_livre_2,
         0, --log_livre_3,
         0, --log_livre_4,
         0, --log_livre_5,
         0, --log_livre_6,
         0, --log_livre_7,
         0, --log_livre_8,
         0, --log_livre_9,
         0, --log_livre_10,
         null, --dat_livre_1,
         null, --dat_livre_2,
         null, --dat_livre_3,
         null, --dat_livre_4,
         null, --dat_livre_5,
         null, --dat_livre_6,
         null, --dat_livre_7,
         null, --dat_livre_8,
         null, --dat_livre_9,
         null, --dat_livre_10,
         'migracao',
         sysdate,
         gp.regra_menslid_estrut_seq.nextval);

      -- valores imutaveis
      vgp_propost.cod_livre_1           := ' ';
      vgp_propost.cod_livre_2           := ' ';
      vgp_propost.cod_livre_3           := ' ';
      vgp_propost.cod_livre_4           := ' ';
      vgp_propost.cod_livre_5           := ' ';
      vgp_propost.cod_livre_6           := ' ';
      vgp_propost.cod_livre_7           := ' ';
      vgp_propost.cod_livre_8           := ' ';
      vgp_propost.cod_livre_9           := ' ';
      vgp_propost.num_livre_1           := 0;
      vgp_propost.num_livre_2           := 0;
      vgp_propost.num_livre_3           := 0;
      vgp_propost.num_livre_4           := 0;
      vgp_propost.num_livre_5           := 0;
      vgp_propost.num_livre_6           := 0;
      vgp_propost.num_livre_7           := 0;
      vgp_propost.num_livre_8           := 0;
      vgp_propost.num_livre_9           := 0;
      vgp_propost.num_livre_10          := 0;
      vgp_propost.val_livre_1           := 0;
      vgp_propost.val_livre_2           := 0;
      vgp_propost.val_livre_3           := 0;
      vgp_propost.val_livre_4           := 0;
      vgp_propost.val_livre_5           := 0;
      vgp_propost.val_livre_6           := 0;
      vgp_propost.val_livre_7           := 0;
      vgp_propost.val_livre_8           := 0;
      vgp_propost.val_livre_9           := 0;
      vgp_propost.val_livre_10          := 0;
      vgp_propost.log_livre_1           := 0;
      vgp_propost.log_livre_2           := 0;
      vgp_propost.log_livre_3           := 0;
      vgp_propost.log_livre_4           := 0;
      vgp_propost.log_livre_5           := 0;
      vgp_propost.log_livre_6           := 0;
      vgp_propost.log_livre_7           := 0;
      vgp_propost.log_livre_8           := 0;
      vgp_propost.log_livre_9           := 0;
      vgp_propost.log_livre_10          := 0;
      vgp_propost.dat_ult_atualiz       := sysdate;
      vgp_propost.hra_ult_atualiz       := ' ';
      vgp_propost.cod_usuar_ult_atualiz := 'migracao';

      -- mutaveis aqui
      vgp_propost.cdd_regra       := pcdd_regra;
      vgp_propost.cd_modalidade   := pcd_modalidade;
      vgp_propost.nr_proposta     := pnr_proposta;
      vgp_propost.cd_usuario      := pnr_usuario;
      vgp_propost.dt_ini_validade := pdat_inic;
      vgp_propost.dt_fim_validade := pdat_fim;

      select seq_temp_propost.nextval into vgp_propost.cdd_seq from dual;
      select gp.regra_menslid_propost_seq.nextval
        into vgp_propost.progress_recid
        from dual;

      insert into gp.regra_menslid_propost values vgp_propost;
    end if;
  end p_insert_regra_menslid_estrut;

--ATRIBUIR UMA REGRA DEFAULT PARA AS PROPOSTAS QUE NAO POSSUEM REGRA E SEUS BENEFICIARIOS POSSUEM
/*procedure P_REGRA_DEFAULT_CONTRATO(pcdmodalidade number,
                                   pcdplano      number,
                                   pcdtipo_plano number,
                                   pnrproposta   number) is
  vcddseq  number;
  vnrregra number;
begin

  p_ajustar_sequences_migr_mens;

  -- SOMENTE CRIAR A REGRA DEFAULT CASO AINDA NAO EXISTA
  begin
    select r.cdd_regra
      into vnrregra
      from gp.regra_menslid r
     where r.des_regra = 'REGRA GENERICA PADRAO'
       and rownum = 1;
  exception
    when no_data_found then
      vnrregra := 0;
  end;

  if vnrregra = 0 then

    begin
      select nvl(max(r.cdd_regra), 0)
        into vnrregra
        from gp.regra_menslid r;
    exception
      when no_data_found then
        vnrregra := 0;
    end;

    vnrregra := vnrregra + 1;

    insert into gp.REGRA_MENSLID
      (CDD_REGRA,
       DES_REGRA,
       DAT_INIC,
       DAT_FIM,
       DES_OBS,
       CDN_TIP_IDX,
       IN_TIPO_REGRA,
       COD_LIVRE_1,
       COD_LIVRE_2,
       COD_LIVRE_3,
       COD_LIVRE_4,
       COD_LIVRE_5,
       COD_LIVRE_6,
       COD_LIVRE_7,
       COD_LIVRE_8,
       COD_LIVRE_9,
       COD_LIVRE_10,
       NUM_LIVRE_1,
       NUM_LIVRE_2,
       NUM_LIVRE_3,
       NUM_LIVRE_4,
       NUM_LIVRE_5,
       NUM_LIVRE_6,
       NUM_LIVRE_7,
       NUM_LIVRE_8,
       NUM_LIVRE_9,
       NUM_LIVRE_10,
       VAL_LIVRE_1,
       VAL_LIVRE_2,
       VAL_LIVRE_3,
       VAL_LIVRE_4,
       VAL_LIVRE_5,
       VAL_LIVRE_6,
       VAL_LIVRE_7,
       VAL_LIVRE_8,
       VAL_LIVRE_9,
       VAL_LIVRE_10,
       LOG_LIVRE_1,
       LOG_LIVRE_2,
       LOG_LIVRE_3,
       LOG_LIVRE_4,
       LOG_LIVRE_5,
       LOG_LIVRE_6,
       LOG_LIVRE_7,
       LOG_LIVRE_8,
       LOG_LIVRE_9,
       LOG_LIVRE_10,
       DAT_LIVRE_1,
       DAT_LIVRE_2,
       DAT_LIVRE_3,
       DAT_LIVRE_4,
       DAT_LIVRE_5,
       DAT_LIVRE_6,
       DAT_LIVRE_7,
       DAT_LIVRE_8,
       DAT_LIVRE_9,
       DAT_LIVRE_10,
       COD_USUAR_ULT_ATUALIZ,
       DAT_ULT_ATUALIZ,
       PROGRESS_RECID)
    values
      (vnrregra,
       'REGRA GENERICA PADRAO',
       to_date('01-01-1900', 'dd-mm-yyyy'),
       to_date('31-12-9999', 'dd-mm-yyyy'),
       ' ',
       1,
       '1',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       ' ',
       null,
       gp.regra_menslid_seq.nextval);

    insert into gp.REGRA_MENSLID_ESTRUT
      (CDD_ID,
       CDD_REGRA,
       CD_MODALIDADE,
       CD_PLANO,
       CD_TIPO_PLANO,
       NR_PROPOSTA,
       CD_USUARIO,
       DAT_INIC,
       DAT_FIM,
       DES_OBSERVACAO,
       COD_LIVRE_1,
       COD_LIVRE_2,
       COD_LIVRE_3,
       COD_LIVRE_4,
       COD_LIVRE_5,
       COD_LIVRE_6,
       COD_LIVRE_7,
       COD_LIVRE_8,
       COD_LIVRE_9,
       COD_LIVRE_10,
       NUM_LIVRE_1,
       NUM_LIVRE_2,
       NUM_LIVRE_3,
       NUM_LIVRE_4,
       NUM_LIVRE_5,
       NUM_LIVRE_6,
       NUM_LIVRE_7,
       NUM_LIVRE_8,
       NUM_LIVRE_9,
       NUM_LIVRE_10,
       VAL_LIVRE_1,
       VAL_LIVRE_2,
       VAL_LIVRE_3,
       VAL_LIVRE_4,
       VAL_LIVRE_5,
       VAL_LIVRE_6,
       VAL_LIVRE_7,
       VAL_LIVRE_8,
       VAL_LIVRE_9,
       VAL_LIVRE_10,
       LOG_LIVRE_1,
       LOG_LIVRE_2,
       LOG_LIVRE_3,
       LOG_LIVRE_4,
       LOG_LIVRE_5,
       LOG_LIVRE_6,
       LOG_LIVRE_7,
       LOG_LIVRE_8,
       LOG_LIVRE_9,
       LOG_LIVRE_10,
       DAT_LIVRE_1,
       DAT_LIVRE_2,
       DAT_LIVRE_3,
       DAT_LIVRE_4,
       DAT_LIVRE_5,
       DAT_LIVRE_6,
       DAT_LIVRE_7,
       DAT_LIVRE_8,
       DAT_LIVRE_9,
       DAT_LIVRE_10,
       COD_USUAR_ULT_ATUALIZ,
       DAT_ULT_ATUALIZ,
       PROGRESS_RECID)
    values
      (seq_regra_menslid_estrut.nextval,
       vnrregra,
       0, --cd_modalidade
       0, --cd_plano
       0, --cd_tipo_plano
       0, --nr_proposta
       0, --cd_usuario
       to_date('01-01-1900', 'dd-mm-yyyy'), --dat_inic
       to_date('31-12-9999', 'dd-mm-yyyy'), --dat_fim
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       ' ',
       null,
       gp.regra_menslid_estrut_seq.nextval);

    insert into gp.REGRA_MENSLID_CRITER
      (CDD_ID,
       CDD_REGRA,
       U##CD_PADRAO_COBERTURA,
       CD_PADRAO_COBERTURA,
       CD_MODULO,
       CD_GRAU_PARENTESCO,
       NR_FAIXA_ETARIA,
       NR_IDADE_MINIMA,
       NR_IDADE_MAXIMA,
       VL_MENSALIDADE_BASE,
       VL_TAXA_INSCRICAO,
       DAT_INIC,
       DAT_FIM,
       QT_REPASSE,
       COD_LIVRE_1,
       COD_LIVRE_2,
       COD_LIVRE_3,
       COD_LIVRE_4,
       COD_LIVRE_5,
       COD_LIVRE_6,
       COD_LIVRE_7,
       COD_LIVRE_8,
       COD_LIVRE_9,
       COD_LIVRE_10,
       NUM_LIVRE_1,
       NUM_LIVRE_2,
       NUM_LIVRE_3,
       NUM_LIVRE_4,
       NUM_LIVRE_5,
       NUM_LIVRE_6,
       NUM_LIVRE_7,
       NUM_LIVRE_8,
       NUM_LIVRE_9,
       NUM_LIVRE_10,
       VAL_LIVRE_1,
       VAL_LIVRE_2,
       VAL_LIVRE_3,
       VAL_LIVRE_4,
       VAL_LIVRE_5,
       VAL_LIVRE_6,
       VAL_LIVRE_7,
       VAL_LIVRE_8,
       VAL_LIVRE_9,
       VAL_LIVRE_10,
       LOG_LIVRE_1,
       LOG_LIVRE_2,
       LOG_LIVRE_3,
       LOG_LIVRE_4,
       LOG_LIVRE_5,
       LOG_LIVRE_6,
       LOG_LIVRE_7,
       LOG_LIVRE_8,
       LOG_LIVRE_9,
       LOG_LIVRE_10,
       DAT_LIVRE_1,
       DAT_LIVRE_2,
       DAT_LIVRE_3,
       DAT_LIVRE_4,
       DAT_LIVRE_5,
       DAT_LIVRE_6,
       DAT_LIVRE_7,
       DAT_LIVRE_8,
       DAT_LIVRE_9,
       DAT_LIVRE_10,
       COD_USUAR_ULT_ATUALIZ,
       DAT_ULT_ATUALIZ,
       PROGRESS_RECID)
    values
      (seq_cdd_id.nextval, --CDD_ID
       vnrregra,
       ' ', --cd_padrao_cobertura
       ' ', --cd_padrao_cobertura
       999, --modulo mensalidade
       0, --grau_parentesco
       1, --nr_faixa_etaria
       0, --nr_idade_minima
       999, --nr_idade_maxima
       1, --vl_mensalidade_base
       0, --vl_inscricao
       to_date('01-01-1900', 'dd-mm-yyyy'), --dat_inic
       to_date('31-12-9999', 'dd-mm-yyyy'), --dat_fim
       1, --qt_repasse
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       ' ',
       0,
       999999,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       null,
       ' ',
       null,
       gp.regra_menslid_criter_seq.nextval);
  end if;

  select nvl(max(rp.cdd_seq), 0)
    into vcddseq
    from gp.regra_menslid_propost rp;

  for x in (select distinct rp.cd_modalidade,
                            ip.cd_plano,
                            ip.cd_tipo_plano,
                            rp.nr_proposta,
                            ip.num_livre_2 NRREGISTRO,
                            lpad(ip.num_livre_3, 4, '0') NRCONTRATO,
                            p.dt_proposta,
                            p.progress_recid recid_proposta
              from gp.regra_menslid_propost rp,
                   import_propost           ip,
                   gp.propost               p
             where rp.cd_usuario <> 0
               and ip.cd_modalidade = rp.cd_modalidade
               and ip.num_livre_10 = rp.nr_proposta
               and p.cd_modalidade = ip.cd_modalidade
               and p.nr_proposta = ip.num_livre_10
               and not exists
             (select 1
                      from gp.regra_menslid_propost rp2
                     where rp2.cd_modalidade = rp.cd_modalidade
                       and rp2.nr_proposta = rp.nr_proposta
                       and rp2.cd_usuario = 0)) loop

    if (x.cd_modalidade = pcdmodalidade or pcdmodalidade is null) and
       (x.cd_plano = pcdplano or pcdplano is null) and
       (x.cd_tipo_plano = pcdtipo_plano or pcdtipo_plano is null) and
       (x.nr_proposta = pnrproposta or pnrproposta is null) then

      vcddseq := vcddseq + 1;

      insert into gp.regra_menslid_propost rp
        (cdd_seq,
         cdd_regra,
         cd_modalidade,
         nr_proposta,
         cd_usuario,
         dt_ini_validade,
         dt_fim_validade,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         progress_recid)
      values
        (vcddseq,
         vnrregra,
         x.cd_modalidade,
         x.nr_proposta,
         0, --FORCAR USUARIO ZERO POIS A REGRA EH DA PROPOSTA
         x.dt_proposta,
         '31/12/9999',
         sysdate,
         ' ',
         'migracao',
         gp.regra_menslid_propost_seq.nextval);
    end if;
  end loop;
end P_REGRA_DEFAULT_CONTRATO;*/

procedure P_REGRA_DEFAULT_CONTRATO(pcdmodalidade number,
                                   pcdplano      number,
                                   pcdtipo_plano number,
                                   pnrproposta   number) is
  vcddseq  number;
  vnrregra number;
begin

  p_ajustar_sequences_migr_mens;

  --buscar maior ID REGRA_MENSLID_PROPOST
  select nvl(max(rp.cdd_seq), 0)
    into vcddseq
    from gp.regra_menslid_propost rp;

  --identificar propostas que nao possuem regra mas seus beneficiarios possuem
  for x in (select distinct rp.cd_modalidade,
                            ip.cd_plano,
                            ip.cd_tipo_plano,
                            rp.nr_proposta,
                            ip.num_livre_2 NRREGISTRO,
                            lpad(ip.num_livre_3, 4, '0') NRCONTRATO,
                            p.dt_proposta,
                            p.progress_recid recid_proposta
              from gp.regra_menslid_propost rp,
                   import_propost           ip,
                   gp.propost               p
             where rp.cd_usuario <> 0
               and ip.cd_modalidade = rp.cd_modalidade
               and ip.num_livre_10 = rp.nr_proposta
               and p.cd_modalidade = ip.cd_modalidade
               and p.nr_proposta = ip.num_livre_10
               and not exists
             (select 1
                      from gp.regra_menslid_propost rp2
                     where rp2.cd_modalidade = rp.cd_modalidade
                       and rp2.nr_proposta = rp.nr_proposta
                       and rp2.cd_usuario = 0)) loop

    if (x.cd_modalidade = pcdmodalidade or pcdmodalidade is null) and
       (x.cd_plano = pcdplano or pcdplano is null) and
       (x.cd_tipo_plano = pcdtipo_plano or pcdtipo_plano is null) and
       (x.nr_proposta = pnrproposta or pnrproposta is null) then

      begin
        select nvl(max(r.cdd_regra), 0)
          into vnrregra
          from gp.regra_menslid r;
      exception
        when no_data_found then
          vnrregra := 0;
      end;

      vnrregra := vnrregra + 1;

      insert into gp.REGRA_MENSLID
        (CDD_REGRA,
         DES_REGRA,
         DAT_INIC,
         DAT_FIM,
         DES_OBS,
         CDN_TIP_IDX,
         IN_TIPO_REGRA,
         COD_LIVRE_1,
         COD_LIVRE_2,
         COD_LIVRE_3,
         COD_LIVRE_4,
         COD_LIVRE_5,
         COD_LIVRE_6,
         COD_LIVRE_7,
         COD_LIVRE_8,
         COD_LIVRE_9,
         COD_LIVRE_10,
         NUM_LIVRE_1,
         NUM_LIVRE_2,
         NUM_LIVRE_3,
         NUM_LIVRE_4,
         NUM_LIVRE_5,
         NUM_LIVRE_6,
         NUM_LIVRE_7,
         NUM_LIVRE_8,
         NUM_LIVRE_9,
         NUM_LIVRE_10,
         VAL_LIVRE_1,
         VAL_LIVRE_2,
         VAL_LIVRE_3,
         VAL_LIVRE_4,
         VAL_LIVRE_5,
         VAL_LIVRE_6,
         VAL_LIVRE_7,
         VAL_LIVRE_8,
         VAL_LIVRE_9,
         VAL_LIVRE_10,
         LOG_LIVRE_1,
         LOG_LIVRE_2,
         LOG_LIVRE_3,
         LOG_LIVRE_4,
         LOG_LIVRE_5,
         LOG_LIVRE_6,
         LOG_LIVRE_7,
         LOG_LIVRE_8,
         LOG_LIVRE_9,
         LOG_LIVRE_10,
         DAT_LIVRE_1,
         DAT_LIVRE_2,
         DAT_LIVRE_3,
         DAT_LIVRE_4,
         DAT_LIVRE_5,
         DAT_LIVRE_6,
         DAT_LIVRE_7,
         DAT_LIVRE_8,
         DAT_LIVRE_9,
         DAT_LIVRE_10,
         COD_USUAR_ULT_ATUALIZ,
         DAT_ULT_ATUALIZ,
         PROGRESS_RECID)
      values
        (vnrregra,
         'REGRA GENERICA PADRAO - MODALIDADE: ' || x.cd_modalidade ||
         ' PROPOSTA: ' || x.nr_proposta,
         to_date('01-01-1900', 'dd-mm-yyyy'),
         to_date('31-12-9999', 'dd-mm-yyyy'),
         ' ',
         1,
         '1',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         ' ',
         null,
         gp.regra_menslid_seq.nextval);

      insert into gp.REGRA_MENSLID_ESTRUT
        (CDD_ID,
         CDD_REGRA,
         CD_MODALIDADE,
         CD_PLANO,
         CD_TIPO_PLANO,
         NR_PROPOSTA,
         CD_USUARIO,
         DAT_INIC,
         DAT_FIM,
         DES_OBSERVACAO,
         COD_LIVRE_1,
         COD_LIVRE_2,
         COD_LIVRE_3,
         COD_LIVRE_4,
         COD_LIVRE_5,
         COD_LIVRE_6,
         COD_LIVRE_7,
         COD_LIVRE_8,
         COD_LIVRE_9,
         COD_LIVRE_10,
         NUM_LIVRE_1,
         NUM_LIVRE_2,
         NUM_LIVRE_3,
         NUM_LIVRE_4,
         NUM_LIVRE_5,
         NUM_LIVRE_6,
         NUM_LIVRE_7,
         NUM_LIVRE_8,
         NUM_LIVRE_9,
         NUM_LIVRE_10,
         VAL_LIVRE_1,
         VAL_LIVRE_2,
         VAL_LIVRE_3,
         VAL_LIVRE_4,
         VAL_LIVRE_5,
         VAL_LIVRE_6,
         VAL_LIVRE_7,
         VAL_LIVRE_8,
         VAL_LIVRE_9,
         VAL_LIVRE_10,
         LOG_LIVRE_1,
         LOG_LIVRE_2,
         LOG_LIVRE_3,
         LOG_LIVRE_4,
         LOG_LIVRE_5,
         LOG_LIVRE_6,
         LOG_LIVRE_7,
         LOG_LIVRE_8,
         LOG_LIVRE_9,
         LOG_LIVRE_10,
         DAT_LIVRE_1,
         DAT_LIVRE_2,
         DAT_LIVRE_3,
         DAT_LIVRE_4,
         DAT_LIVRE_5,
         DAT_LIVRE_6,
         DAT_LIVRE_7,
         DAT_LIVRE_8,
         DAT_LIVRE_9,
         DAT_LIVRE_10,
         COD_USUAR_ULT_ATUALIZ,
         DAT_ULT_ATUALIZ,
         PROGRESS_RECID)
      values
        (seq_regra_menslid_estrut.nextval,
         vnrregra,
         x.cd_modalidade, --cd_modalidade
         x.cd_plano, --cd_plano
         x.cd_tipo_plano, --cd_tipo_plano
         0, --nr_proposta
         0, --cd_usuario
         to_date('01-01-1900', 'dd-mm-yyyy'), --dat_inic
         to_date('31-12-9999', 'dd-mm-yyyy'), --dat_fim
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         ' ',
         null,
         gp.regra_menslid_estrut_seq.nextval);

      insert into gp.REGRA_MENSLID_CRITER
        (CDD_ID,
         CDD_REGRA,
         U##CD_PADRAO_COBERTURA,
         CD_PADRAO_COBERTURA,
         CD_MODULO,
         CD_GRAU_PARENTESCO,
         NR_FAIXA_ETARIA,
         NR_IDADE_MINIMA,
         NR_IDADE_MAXIMA,
         VL_MENSALIDADE_BASE,
         VL_TAXA_INSCRICAO,
         DAT_INIC,
         DAT_FIM,
         QT_REPASSE,
         COD_LIVRE_1,
         COD_LIVRE_2,
         COD_LIVRE_3,
         COD_LIVRE_4,
         COD_LIVRE_5,
         COD_LIVRE_6,
         COD_LIVRE_7,
         COD_LIVRE_8,
         COD_LIVRE_9,
         COD_LIVRE_10,
         NUM_LIVRE_1,
         NUM_LIVRE_2,
         NUM_LIVRE_3,
         NUM_LIVRE_4,
         NUM_LIVRE_5,
         NUM_LIVRE_6,
         NUM_LIVRE_7,
         NUM_LIVRE_8,
         NUM_LIVRE_9,
         NUM_LIVRE_10,
         VAL_LIVRE_1,
         VAL_LIVRE_2,
         VAL_LIVRE_3,
         VAL_LIVRE_4,
         VAL_LIVRE_5,
         VAL_LIVRE_6,
         VAL_LIVRE_7,
         VAL_LIVRE_8,
         VAL_LIVRE_9,
         VAL_LIVRE_10,
         LOG_LIVRE_1,
         LOG_LIVRE_2,
         LOG_LIVRE_3,
         LOG_LIVRE_4,
         LOG_LIVRE_5,
         LOG_LIVRE_6,
         LOG_LIVRE_7,
         LOG_LIVRE_8,
         LOG_LIVRE_9,
         LOG_LIVRE_10,
         DAT_LIVRE_1,
         DAT_LIVRE_2,
         DAT_LIVRE_3,
         DAT_LIVRE_4,
         DAT_LIVRE_5,
         DAT_LIVRE_6,
         DAT_LIVRE_7,
         DAT_LIVRE_8,
         DAT_LIVRE_9,
         DAT_LIVRE_10,
         COD_USUAR_ULT_ATUALIZ,
         DAT_ULT_ATUALIZ,
         PROGRESS_RECID)
      values
        (seq_cdd_id.nextval, --CDD_ID
         vnrregra,
         ' ', --cd_padrao_cobertura
         ' ', --cd_padrao_cobertura
         999, --modulo mensalidade
         0, --grau_parentesco
         1, --nr_faixa_etaria
         0, --nr_idade_minima
         999, --nr_idade_maxima
         1, --vl_mensalidade_base
         0, --vl_inscricao
         to_date('01-01-1900', 'dd-mm-yyyy'), --dat_inic
         to_date('31-12-9999', 'dd-mm-yyyy'), --dat_fim
         1, --qt_repasse
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         0,
         999999,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         ' ',
         null,
         gp.regra_menslid_criter_seq.nextval);

      vcddseq := vcddseq + 1;

      insert into gp.regra_menslid_propost rp
        (cdd_seq,
         cdd_regra,
         cd_modalidade,
         nr_proposta,
         cd_usuario,
         dt_ini_validade,
         dt_fim_validade,
         dat_ult_atualiz,
         hra_ult_atualiz,
         cod_usuar_ult_atualiz,
         progress_recid)
      values
        (vcddseq,
         vnrregra,
         x.cd_modalidade,
         x.nr_proposta,
         0, --FORCAR USUARIO ZERO POIS A REGRA EH DA PROPOSTA
         x.dt_proposta,
         '31/12/9999',
         sysdate,
         ' ',
         'migracao',
         gp.regra_menslid_propost_seq.nextval);
    end if;
  end loop;
end P_REGRA_DEFAULT_CONTRATO;

  --Procedure para insert da regra_menslid_reaj - Utilizada na p_migra_regra_proposta
  procedure p_insert_regra_menslid_reaj(pInSimular varchar2,
                                        pcdd_regra number,
                                        pnrcompet  number) is
  begin
    if pInSimular in ('S','T') then
      insert into regra_menslid_reaj_sim
        (cdd_id,
         cdd_regra,
         aa_mm_referencia,
         cd_modulo,
         perc_reajuste,
         cdn_tipo_reajuste,
         cod_oficio_reaj,
         log_incid_tax_inscr,
         des_observacao,
         ind_reaj_contrat,
         log_livre_1,
         dat_ult_atualiz,
         cod_usuar_ult_atualiz,
         progress_recid)
      values
        (regra_menslid_reaj_sim_seq.nextval, --cod-seq
         pcdd_regra, --cdd-regra
         pnrcompet, --aa-mm-referencia
         0, --cd_modulo
         0, --perc-reajuste
         1, --cdn-tipo-reajuste 1-Aniversario do Contrato  2-Aniversario Modulo  3-Data Base Reajuste
         0, --cod-oficio-reaj
         1, --log-incid-tax-inscr incide na tx inscr
         ' ', --des-observacao
         'C', --ind-reaj-contrat interno-utilizado em conjunto com o cdn-tipo-reajuste
         0, --log-livre-1 indicador de valido apenas para contratos novos
         sysdate, --dat_ult_atualiz
         'migracao', --cod_usuar_ult_atualiz
         regra_menslid_reaj_sim_seq.currval);
    end if;

    if pInSimular in ('N','T') then
      insert into gp.regra_menslid_reaj
        (cdd_id,
         cdd_regra,
         aa_mm_referencia,
         cd_modulo,
         perc_reajuste,
         cdn_tipo_reajuste,
         cod_oficio_reaj,
         log_incid_tax_inscr,
         des_observacao,
         ind_reaj_contrat,
         log_livre_1,
         dat_ult_atualiz,
         cod_usuar_ult_atualiz,
         progress_recid)
      values
        (gp.regra_menslid_reaj_seq.nextval, --cod-seq
         pcdd_regra, --cdd-regra
         pnrcompet, --aa-mm-referencia
         0, --cd_modulo
         0, --perc-reajuste
         1, --cdn-tipo-reajuste 1-Aniversario do Contrato  2-Aniversario Modulo  3-Data Base Reajuste
         0, --cod-oficio-reaj
         1, --log-incid-tax-inscr incide na tx inscr
         ' ', --des-observacao
         'C', --ind-reaj-contrat interno-utilizado em conjunto com o cdn-tipo-reajuste
         0, --log-livre-1 indicador de valido apenas para contratos novos
         sysdate, --dat_ult_atualiz
         'migracao', --cod_usuar_ult_atualiz
         gp.regra_menslid_reaj_seq.currval);
    end if;
  end p_insert_regra_menslid_reaj;

  --Procedure para insert da regra_menslid_criter - Utilizada na p_migra_regra_proposta2
  procedure p_insert_regra_menslid_criter(pInSimular varchar2,
                                          pcdd_regra           number,
                                          pcd_padrao_cobertura varchar2,
                                          pcd_modulo           number,
                                          pcd_grau_parentesco  number,
                                          pnr_faixa            number,
                                          pnridade_inicio      number,
                                          pnridade_fim         number,
                                          pvlpreco_mensal      number,
                                          pvlpreco_inscricao   number,
                                          pdat_inic            date,
                                          pdat_fim             date,
                                          pnrqtusuario_inicio  number,
                                          pnrqtusuario_fim     number,
                                          pnrsequencia         number) is
  begin
    if pInSimular in ('S','T') then
      insert into regra_menslid_criter_sim
        (cdd_id,
         cdd_regra,
         u##cd_padrao_cobertura,
         cd_padrao_cobertura,
         cd_modulo,
         cd_grau_parentesco,
         nr_faixa_etaria,
         nr_idade_minima,
         nr_idade_maxima,
         vl_mensalidade_base,
         vl_taxa_inscricao,
         dat_inic,
         dat_fim,
         qt_repasse,
         num_livre_1,
         num_livre_2,
         num_livre_10, --PRECO_CONTRATO_PESSOA.NRSEQUENCIA DO CRITERIO MIGRADO DO UNICOO
         progress_recid)
      values
        (regra_menslid_criter_sim_seq.nextval,
         pcdd_regra,
         pcd_padrao_cobertura,
         pcd_padrao_cobertura,
         pcd_modulo, -- modulo da mensalidade
         pcd_grau_parentesco,
         pnr_faixa,
         pnridade_inicio,
         pnridade_fim,
         pvlpreco_mensal, -- vl_mensalidade_base,
         pvlpreco_inscricao, -- vl_taxa_inscricao,
         pdat_inic, -- dat_inic,
         pdat_fim, -- dat_fim,
         1, -- qt_repasse,
         pnrqtusuario_inicio, -- qtusu_inicial
         pnrqtusuario_fim, -- qtusu_final
         pnrsequencia,     -- num_livre_10 PRECO_CONTRATO_PESSOA.NRSEQUENCIA DO CRITERIO MIGRADO DO UNICOO
         regra_menslid_criter_sim_seq.currval);
    end if;

    if pInSimular in ('N','T') then
      insert into gp.regra_menslid_criter
        (cdd_id,
         cdd_regra,
         u##cd_padrao_cobertura,
         cd_padrao_cobertura,
         cd_modulo,
         cd_grau_parentesco,
         nr_faixa_etaria,
         nr_idade_minima,
         nr_idade_maxima,
         vl_mensalidade_base,
         vl_taxa_inscricao,
         dat_inic,
         dat_fim,
         qt_repasse,
         num_livre_1,
         num_livre_2,
         num_livre_10, --PRECO_CONTRATO_PESSOA.NRSEQUENCIA DO CRITERIO MIGRADO DO UNICOO
         progress_recid)
      values
        (seq_cdd_id.nextval,
         pcdd_regra,
         pcd_padrao_cobertura,
         pcd_padrao_cobertura,
         pcd_modulo, -- modulo da mensalidade
         pcd_grau_parentesco,
         pnr_faixa,
         pnridade_inicio,
         pnridade_fim,
         pvlpreco_mensal, -- vl_mensalidade_base,
         pvlpreco_inscricao, -- vl_taxa_inscricao,
         pdat_inic, -- dat_inic,
         pdat_fim, -- dat_fim,
         1, -- qt_repasse,
         pnrqtusuario_inicio, -- qtusu_inicial
         pnrqtusuario_fim, -- qtusu_final
         pnrsequencia,     -- num_livre_10 PRECO_CONTRATO_PESSOA.NRSEQUENCIA DO CRITERIO MIGRADO DO UNICOO
         gp.regra_menslid_criter_seq.nextval);
    end if;
  end p_insert_regra_menslid_criter;

  procedure p_migra_regra_menslid is

    procedure migra_regra_menslid is
    begin
      for regra in (select *
                      from tm_regra_menslid a
                     where not exists
                     (select 1
                              from gp.regra_menslid b
                             where a.cdd_regra = b.cdd_regra)) loop

        insert into gp.regra_menslid
          (cdd_regra,
           des_regra,
           dat_inic,
           dat_fim,
           des_obs,
           cdn_tip_idx,
           in_tipo_regra,
           progress_recid)
        values
          (regra.cdd_regra,
           regra.des_regra,
           regra.dat_inic,
           regra.dat_fim,
           regra.des_obs,
           1,
           1,
           gp.regra_menslid_seq.nextval);

        update tm_regra_menslid tr
           set tr.cdsituacao = 'IT'
         where tr.cdd_regra = regra.cdd_regra;

      end loop;
    end;

    procedure migra_regra_menslid_criter is
    begin
      for criterio in (select t.*,
                              dense_rank() over(partition by t.cd_modulo, cd_grau_parentesco, cdd_regra order by cd_grau_parentesco, nridade_inicio, nridade_fim) nrfaixa
                         from tm_reagra_menslid_criter t
                        where not exists
                        (select 1
                                 from gp.regra_menslid_criter m
                                where t.cdd_regra = m.cdd_regra
                                  and t.cd_padrao_cobertura =
                                      m.cd_padrao_cobertura)) loop
        begin
          insert into gp.regra_menslid_criter
            (cdd_id,
             cdd_regra,
             u##cd_padrao_cobertura,
             cd_padrao_cobertura,
             cd_modulo,
             cd_grau_parentesco,
             nr_faixa_etaria,
             nr_idade_minima,
             nr_idade_maxima,
             vl_mensalidade_base,
             vl_taxa_inscricao,
             dat_inic,
             dat_fim,
             qt_repasse,
             num_livre_1,
             num_livre_2,
             progress_recid)
          values
            (seq_cdd_id.nextval,
             criterio.cdd_regra,
             criterio.cd_padrao_cobertura,
             criterio.cd_padrao_cobertura,
             criterio.cd_modulo,
             criterio.cd_grau_parentesco,
             criterio.nrfaixa,
             criterio.nridade_inicio,
             criterio.nridade_fim,
             criterio.vl_mensalidade_base,
             criterio.vl_taxa_inscricao,
             criterio.dat_inic,
             criterio.dat_fim,
             criterio.qt_repasse,
             0,
             999999,
             gp.regra_menslid_criter_seq.nextval);
        exception
          when others then
            null;
            /*
            raise_application_error(-20001,sqlerrm||chr(13)||
              criterio.cdd_regra||' '||
              criterio.cd_padrao_cobertura||' '||
              criterio.cd_padrao_cobertura||' '||
              criterio.cd_modulo||' '||
              criterio.cd_grau_parentesco||' '||
              criterio.nrfaixa||' '||
              criterio.nridade_inicio||' '||
              criterio.nridade_fim||' '||
              criterio.vl_mensalidade_base||' '||
              criterio.vl_taxa_inscricao||' '||
              criterio.dat_inic||' '||
              criterio.dat_fim||' '||
              criterio.qt_repasse||' '||
              gp.regra_menslid_criter_seq.nextval);
              */
        end;
        --
        update tm_reagra_menslid_criter trmc
           set trmc.cdsituacao = 'IT'
         where trmc.cd_id = criterio.cd_id
           and trmc.cdd_regra = criterio.cdd_regra;

      end loop;
    end;

    procedure migra_regra_menslid_propost is
      vgp_propost gp.regra_menslid_propost%rowtype;
    begin
      -- pegar sequencia regra_menslid_propost
      -- valores imutaveis
      vgp_propost.cod_livre_1  := ' ';
      vgp_propost.cod_livre_2  := ' ';
      vgp_propost.cod_livre_3  := ' ';
      vgp_propost.cod_livre_4  := ' ';
      vgp_propost.cod_livre_5  := ' ';
      vgp_propost.cod_livre_6  := ' ';
      vgp_propost.cod_livre_7  := ' ';
      vgp_propost.cod_livre_8  := ' ';
      vgp_propost.cod_livre_9  := ' ';
      vgp_propost.num_livre_1  := 0;
      vgp_propost.num_livre_2  := 0;
      vgp_propost.num_livre_3  := 0;
      vgp_propost.num_livre_4  := 0;
      vgp_propost.num_livre_5  := 0;
      vgp_propost.num_livre_6  := 0;
      vgp_propost.num_livre_7  := 0;
      vgp_propost.num_livre_8  := 0;
      vgp_propost.num_livre_9  := 0;
      vgp_propost.num_livre_10 := 0;
      vgp_propost.val_livre_1  := 0;
      vgp_propost.val_livre_2  := 0;
      vgp_propost.val_livre_3  := 0;
      vgp_propost.val_livre_4  := 0;
      vgp_propost.val_livre_5  := 0;
      vgp_propost.val_livre_6  := 0;
      vgp_propost.val_livre_7  := 0;
      vgp_propost.val_livre_8  := 0;
      vgp_propost.val_livre_9  := 0;
      vgp_propost.val_livre_10 := 0;
      vgp_propost.log_livre_1  := 0;
      vgp_propost.log_livre_2  := 0;
      vgp_propost.log_livre_3  := 0;
      vgp_propost.log_livre_4  := 0;
      vgp_propost.log_livre_5  := 0;
      vgp_propost.log_livre_6  := 0;
      vgp_propost.log_livre_7  := 0;
      vgp_propost.log_livre_8  := 0;
      vgp_propost.log_livre_9  := 0;
      vgp_propost.log_livre_10 := 0;

      -- carga regra_migracao_propost
      for vpropost1 in (select ip.nr_contrato_antigo,
                               ip.num_livre_7,
                               tpro.cd_modalidade,
                               tpro.nr_proposta,
                               to_date('01' ||
                                       to_char(tpro.dt_proposta, 'mmyyyy'),
                                       'ddmmyyyy') dt_proposta
                          from import_propost ip, gp.propost tpro
                         where tpro.nr_contrato_antigo =
                               ip.nr_contrato_antigo --ip.u##nr_contrato_antigo
                           and not exists
                         (select 1
                                  from gp.regra_menslid_propost a
                                 where ip.num_livre_7 = a.cdd_regra
                                   and tpro.cd_modalidade = a.cd_modalidade
                                   and tpro.nr_proposta = a.nr_proposta
                                   and a.cd_usuario = 0)
                           and ip.num_livre_7 > 0) loop

        vgp_propost.cdd_regra       := vpropost1.num_livre_7;
        vgp_propost.cd_modalidade   := vpropost1.cd_modalidade;
        vgp_propost.nr_proposta     := vpropost1.nr_proposta;
        vgp_propost.cd_usuario      := 0;
        vgp_propost.dt_fim_validade := to_date('31/12/9999', 'dd/mm/yyyy');
        -- imutaveis aqui
        vgp_propost.dat_ult_atualiz       := sysdate;
        vgp_propost.hra_ult_atualiz       := ' ';
        vgp_propost.cod_usuar_ult_atualiz := 'MIGRACAO';
        select seq_temp_propost.nextval into vgp_propost.cdd_seq from dual;
        vgp_propost.dt_ini_validade := vpropost1.dt_proposta;
        select gp.regra_menslid_propost_seq.nextval
          into vgp_propost.progress_recid
          from dual;

        begin
          insert into gp.regra_menslid_propost values vgp_propost;
        exception
          when dup_val_on_index then
            null;
        end;
      end loop;

    end;

    procedure migra_regra_menslid_benef is
      vgp_propost gp.regra_menslid_propost%rowtype;
    begin

      -- valores imutaveis
      vgp_propost.cod_livre_1  := ' ';
      vgp_propost.cod_livre_2  := ' ';
      vgp_propost.cod_livre_3  := ' ';
      vgp_propost.cod_livre_4  := ' ';
      vgp_propost.cod_livre_5  := ' ';
      vgp_propost.cod_livre_6  := ' ';
      vgp_propost.cod_livre_7  := ' ';
      vgp_propost.cod_livre_8  := ' ';
      vgp_propost.cod_livre_9  := ' ';
      vgp_propost.num_livre_1  := 0;
      vgp_propost.num_livre_2  := 0;
      vgp_propost.num_livre_3  := 0;
      vgp_propost.num_livre_4  := 0;
      vgp_propost.num_livre_5  := 0;
      vgp_propost.num_livre_6  := 0;
      vgp_propost.num_livre_7  := 0;
      vgp_propost.num_livre_8  := 0;
      vgp_propost.num_livre_9  := 0;
      vgp_propost.num_livre_10 := 0;
      vgp_propost.val_livre_1  := 0;
      vgp_propost.val_livre_2  := 0;
      vgp_propost.val_livre_3  := 0;
      vgp_propost.val_livre_4  := 0;
      vgp_propost.val_livre_5  := 0;
      vgp_propost.val_livre_6  := 0;
      vgp_propost.val_livre_7  := 0;
      vgp_propost.val_livre_8  := 0;
      vgp_propost.val_livre_9  := 0;
      vgp_propost.val_livre_10 := 0;
      vgp_propost.log_livre_1  := 0;
      vgp_propost.log_livre_2  := 0;
      vgp_propost.log_livre_3  := 0;
      vgp_propost.log_livre_4  := 0;
      vgp_propost.log_livre_5  := 0;
      vgp_propost.log_livre_6  := 0;
      vgp_propost.log_livre_7  := 0;
      vgp_propost.log_livre_8  := 0;
      vgp_propost.log_livre_9  := 0;
      vgp_propost.log_livre_10 := 0;

      -- carga regra_migracao_propost
      for vusuario1 in (select ib.num_livre_9,
                               tus.cd_modalidade,
                               tus.nr_proposta,
                               tus.cd_usuario,
                               tus.dt_inclusao_plano
                          from import_propost ip,
                               import_bnfciar ib,
                               gp.usuario     tus
                         where ip.nr_contrato_antigo /*ip.u##nr_contrato_antigo*/ = ib.nr_contrato_antigo
                           and tus.cd_carteira_antiga =
                               ib.cd_carteira_antiga
                           and ip.num_livre_7 <> ib.num_livre_9
                           and ib.num_livre_9 > 0
                           and not exists
                         (select 1
                                  from gp.regra_menslid_propost a
                                 where tus.cd_modalidade = a.cd_modalidade
                                   and tus.nr_proposta = a.nr_proposta
                                   and tus.cd_usuario = a.cd_usuario)) loop
        vgp_propost.cdd_regra       := vusuario1.num_livre_9;
        vgp_propost.cd_modalidade   := vusuario1.cd_modalidade;
        vgp_propost.nr_proposta     := vusuario1.nr_proposta;
        vgp_propost.cd_usuario      := vusuario1.cd_usuario;
        vgp_propost.dt_fim_validade := to_date('31/12/9999', 'dd/mm/yyyy');
        -- imutaveis aqui
        vgp_propost.dat_ult_atualiz       := sysdate;
        vgp_propost.hra_ult_atualiz       := ' ';
        vgp_propost.cod_usuar_ult_atualiz := 'MIGRACAO';
        select seq_temp_propost.nextval into vgp_propost.cdd_seq from dual;
        vgp_propost.dt_ini_validade := vusuario1.dt_inclusao_plano;
        select gp.regra_menslid_propost_seq.nextval
          into vgp_propost.progress_recid
          from dual;

        insert into gp.regra_menslid_propost values vgp_propost;

      end loop;

      --commit;

    end;

    procedure corrige_modulo_adaptado is
    begin
      update tm_reagra_menslid_criter
         set cd_modulo = 106
       where rowid in (select a.rowid
                         from tm_reagra_menslid_criter a, import_propost b
                        where a.cdd_regra = b.num_livre_7
                          and b.num_livre_8 = 3
                          and a.cd_modulo = 6);

    end;

    procedure p_carrega_estrut is

      vexiste char;

      cursor c_regras_estrut is

        select seq_regra_menslid_estrut.nextval cdd_id,
               r.cdd_regra cdd_regra,
               pr.cd_modalidade cd_modalidade,
               pr.cd_plano cd_plano,
               pr.cd_tipo_plano cd_tipo_plano,
               pr.nr_proposta nr_proposta,
               r.cd_usuario cd_usuario,
               r.dt_ini_validade dat_inic,
               r.dt_fim_validade dat_fim,
               ' ' des_observacao,
               cod_livre_1,
               cod_livre_2,
               cod_livre_3,
               cod_livre_4,
               cod_livre_5,
               cod_livre_6,
               cod_livre_7,
               cod_livre_8,
               cod_livre_9,
               cod_livre_10,
               num_livre_1,
               num_livre_2,
               num_livre_3,
               num_livre_4,
               num_livre_5,
               num_livre_6,
               num_livre_7,
               num_livre_8,
               num_livre_9,
               num_livre_10,
               val_livre_1,
               val_livre_2,
               val_livre_3,
               val_livre_4,
               val_livre_5,
               val_livre_6,
               val_livre_7,
               val_livre_8,
               val_livre_9,
               val_livre_10,
               log_livre_1,
               log_livre_2,
               log_livre_3,
               log_livre_4,
               log_livre_5,
               log_livre_6,
               log_livre_7,
               log_livre_8,
               log_livre_9,
               log_livre_10,
               dat_livre_1,
               dat_livre_2,
               dat_livre_3,
               dat_livre_4,
               dat_livre_5,
               dat_livre_6,
               dat_livre_7,
               dat_livre_8,
               dat_livre_9,
               dat_livre_10,
               cod_usuar_ult_atualiz,
               dat_ult_atualiz,
               gp.regra_menslid_estrut_seq.nextval progress_recid
          from gp.regra_menslid_propost r, propost pr
         where r.cd_modalidade = pr.cd_modalidade
           and r.nr_proposta = pr.nr_proposta;

    begin

      for estrut in c_regras_estrut loop

        begin
          select 'S'
            into vexiste
            from gp.regra_menslid_estrut r
           where r.cdd_regra = estrut.cdd_regra
             and r.cd_modalidade = estrut.cd_modalidade
             and r.cd_plano = estrut.cd_plano
             and r.cd_tipo_plano = estrut.cd_tipo_plano
             and r.nr_proposta = estrut.nr_proposta
             and r.cd_usuario = estrut.cd_usuario;
        exception
          when no_data_found then
            begin

              insert into gp.regra_menslid_estrut values estrut;

              p_commit;

            exception
              when dup_val_on_index then
                null;
            end;
        end;

      end loop;

      --commit;
    end p_carrega_estrut;

  begin
    migra_regra_menslid;
    migra_regra_menslid_criter;
    migra_regra_menslid_propost;
    migra_regra_menslid_benef;
    -- corrige_modulo_adaptado;
    p_carrega_estrut;
  end;

  procedure p_gera_regra_desc is

    vaoexiste char;

    cursor c_regras_unicoo is
      select rd.*, rt.noregra_desconto
        from regra_desc_fat_contrato_pessoa rd, regra_desconto_fat rt
       where rt.cdregra_desconto = rd.cdregra_desconto
         and (rd.nrperiodo_vigencia_fim is null or
             rd.nrperiodo_vigencia_fim >=
             to_char((trunc(sysdate)), 'YYYYMM'));

    procedure p_atualiza_regra is

      vaoexistedepara       char;
      vcdregra_totvs        tm_depara_regra_desc.cdregra_desc_totvs%type;
      vnrregra_totvs        number;
      vcdmodalidade         number;
      vplano                number;
      vtipo_plano           number;
      vnrteradesao          number;
      vaoexistetermomigrado char;
      cursor c_dados_desc is
        select * from tm_regra_desconto where cdsituacao <> 'IT';

    begin
      for cdd in c_dados_desc loop
        begin
          select 'S', tm.cdregra_desc_totvs
            into vaoexistedepara, vcdregra_totvs
            from tm_depara_regra_desc tm
           where tm.cdregra_desc_unicoo = cdd.cod_regra_unicoo
             and tm.cdregra_desc_totvs is not null;
        exception
          when no_data_found then
            vaoexistedepara := 'N';
            update tm_regra_desconto trd
               set trd.cdsituacao = 'ER', txobservacao = 'SEM DEPARA'
             where trd.nr_sequencia = cdd.nr_sequencia;
        end;

        if vaoexistedepara = 'S' then

          begin
            select r.cdn_regra
              into vnrregra_totvs
              from gp.regra_desc_menslid r
             where r.u##des_regra = vcdregra_totvs;
          end;

          begin
            select pr.cd_modalidade,
                   pr.cd_plano,
                   pr.cd_tipo_plano,
                   pr.nr_ter_adesao,
                   'S'
              into vcdmodalidade,
                   vplano,
                   vtipo_plano,
                   vnrteradesao,
                   vaoexistetermomigrado
              from import_propost ip, gp.propost pr
             where pr.nr_contrato_antigo = ip.nr_contrato_antigo --ip.u##nr_contrato_antigo
               and ip.num_livre_2 = cdd.nrregistro
               and ip.num_livre_3 = cdd.nrcontrato
               and ip.num_livre_4 = nvl(cdd.nrfamilia, 0)
               and rownum = 1;
          exception
            when no_data_found then
              vaoexistetermomigrado := 'N';

          end;

          if vaoexistetermomigrado = 'S' then

            update tm_regra_desconto tm
               set cdn_regra     = vnrregra_totvs,
                   cd_modalidade = vcdmodalidade,
                   cd_plano      = vplano,
                   cd_tipo_plano = vtipo_plano,
                   nr_ter_adesao = vnrteradesao,
                   dat_inic      = '01/01/2015',
                   dat_fim       = '31/12/9999',
                   cdsituacao    = 'RC'
             where tm.nr_sequencia = cdd.nr_sequencia;

          end if;

        end if;

      end loop;

    end p_atualiza_regra;

  begin

    for cru in c_regras_unicoo loop

      begin
        select 'S'
          into vaoexiste
          from tm_regra_desconto trd
         where trd.nr_sequencia = cru.nrsequencial
           and trd.cod_regra_unicoo = cru.noregra_desconto
           and trd.cdsituacao in ('IT', 'RC');
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        insert into tm_regra_desconto
          (cdn_regra,
           nr_sequencia,
           cd_modalidade,
           cd_plano,
           cd_tipo_plano,
           nr_ter_adesao,
           dat_inic,
           dat_fim,
           nrregistro,
           nrcontrato,
           nrfamilia,
           cod_regra_unicoo,
           nrperiodo_ini,
           nrperiodo_fim,
           cdsituacao)
        values
          (0, --cdn_regra,
           cru.nrsequencial, --nr_sequencia,
           null, --cd_modalidade,
           null, --cd_plano,
           null, --cd_tipo_plano,
           null, --nr_ter_adesao,
           null, --dat_inic,
           null, --dat_fim,
           cru.nrregistro, --nrregistro,
           cru.nrcontrato, --nrcontrato,
           cru.nrfamilia, --nrfamilia,
           cru.noregra_desconto, --cod_regra_unicoo,
           cru.nrperiodo_vigencia_ini, --nrperiodo_ini,
           cru.nrperiodo_vigencia_fim, --nrperiodo_fim,
           'GE'); --cdsituacao

        p_commit;
      end if;
    end loop;

    --commit;

    p_atualiza_regra;
    --commit;

  end p_gera_regra_desc;

  procedure p_migra_regra_desc is

    vaoregramigrada char;

    cursor c_regras is
      select * from tm_regra_desconto where cdsituacao = 'RC';

  begin

    for cr in c_regras loop

      begin
        select 'S'
          into vaoregramigrada
          from gp.estrut_desc_menslid e
         where e.nr_sequencia = cr.nr_sequencia
           and e.cdn_regra = cr.cdn_regra;
      exception
        when no_data_found then
          vaoregramigrada := 'N';
      end;

      if vaoregramigrada = 'N' then

        insert into gp.estrut_desc_menslid
          (cdn_regra,
           nr_sequencia,
           cd_modalidade,
           cd_plano,
           cd_tipo_plano,
           nr_ter_adesao,
           dat_inic,
           dat_fim,
           progress_recid)
        values
          (cr.cdn_regra, --cdn_regra,
           cr.nr_sequencia, --nr_sequencia,
           cr.cd_modalidade, --cd_modalidade,
           cr.cd_plano, --cd_plano,
           cr.cd_tipo_plano, --cd_tipo_plano,
           cr.nr_ter_adesao, --nr_ter_adesao,
           cr.dat_inic, --dat_inic,
           cr.dat_fim, --dat_fim,
           gp.estrut_desc_menslid_seq.nextval); --progress_recid;

        update tm_regra_desconto t
           set t.cdsituacao = 'IT'
         where t.nr_sequencia = cr.nr_sequencia;

        p_commit;

      end if;

    end loop;

    --commit;

  end p_migra_regra_desc;

  procedure apaga_beneficiario_totvs(pnrsequencial_usuario in number) is

  begin
    begin
      for ct in (select us.*
                   from gp.usuario us, import_bnfciar ib
                  where ib.cd_carteira_antiga = us.cd_carteira_antiga
                    and ib.num_seqcial_bnfciar = pnrsequencial_usuario) loop

          p_insere_log('BENEFICIARIO',
                       'apaga_beneficiario_totvs',
                       'APAGANDO NO TOTVS',
                       pnrsequencial_usuario, --pnrsequencial_origem
                       ct.cd_carteira_antiga, --pcdidentificador
                       'APAGANDO BENEFICIARIO COM RELACIONAMENTOS NO TOTVS',
                       ct.cd_modalidade || ';' || ct.nr_proposta || ';' || ct.cd_usuario); --complemento

        delete from gp.usuario
         where cd_modalidade = ct.cd_modalidade
           and nr_proposta = ct.nr_proposta
           and cd_usuario = ct.cd_usuario;

        delete from gp.motiv_demis d
         where d.cdn_modalid = ct.cd_modalidade
           and d.num_propost = ct.nr_proposta
           and d.cdn_usuar = ct.cd_usuario;

       delete from gp.histor_ocor_usuar h
          where h.cd_modalidade = ct.cd_modalidade
            and h.nr_proposta   = ct.nr_proposta
            and h.cd_usuario    = ct.cd_usuario;

        delete from gp.ususubst s
         where s.cd_modalidade = ct.cd_modalidade
           and s.nr_ter_adesao = ct.nr_ter_adesao
           and s.cd_usuario    = ct.cd_usuario;

        delete from gp.usucaren
         where cd_modalidade = ct.cd_modalidade
           and nr_proposta = ct.nr_proposta
           and cd_usuario = ct.cd_usuario;

        delete from gp.usumodu
         where cd_modalidade = ct.cd_modalidade
           and nr_proposta = ct.nr_proposta
           and cd_usuario = ct.cd_usuario;

        delete from gp.hist_movto_usuario
         where cd_modalidade = ct.cd_modalidade
           and nr_proposta = ct.nr_proposta
           and cd_usuario = ct.cd_usuario;

        delete from gp.car_ide
         where cd_unimed     = ct.cd_unimed
           and cd_modalidade = ct.cd_modalidade
           and nr_ter_adesao = ct.nr_ter_adesao
           and cd_usuario = ct.cd_usuario;

        /* delete from gp.regra_menslid_propost
           where cd_modalidade = ct.cd_modalidade
             and nr_proposta = ct.nr_proposta
             and cd_usuario = ct.cd_usuario;
        */
        delete from gp.usureate
         where cd_modalidade = ct.cd_modalidade
           and nr_proposta = ct.nr_proposta
           and cd_usuario = ct.cd_usuario;

        delete from gp.usurepas
         where cd_modalidade = ct.cd_modalidade
           and nr_proposta = ct.nr_proposta
           and cd_usuario = ct.cd_usuario;

        delete from gp.usmovadm
         where cd_modalidade = ct.cd_modalidade
           and nr_proposta = ct.nr_proposta
           and cd_usuario = ct.cd_usuario;

        delete from gp.gerac_cod_ident_benef g
         where g.cdn_modalid = ct.cd_modalidade
           and g.num_propost = ct.nr_proposta
           and g.cdn_usuar = ct.cd_usuario;

        p_commit;

      end loop;
    end;
  end;

  procedure apaga_beneficiario_import(pnrsequencial_usuario in number) is
  begin
    p_insere_log('BENEFICIARIO',
                 'apaga_beneficiario_import',
                 'APAGAR TEMPORARIAS',
                 pnrsequencial_usuario, --pnrsequencial_origem
                 0, --pcdidentificador
                 'APAGANDO TEMPORARIAS DE IMPORTACAO DE BENEFICIARIOS. IMPORT_BNFCIAR VOLTA A SER GE',
                 null); --complemento

    update import_bnfciar ib set ib.u##ind_sit_import = 'GE', ib.ind_sit_import = 'GE'
     where num_seqcial_bnfciar = pnrsequencial_usuario;

    --SE NAO EXISTIR USUARIO NO UNICOO COM NRSEQUENCIAL_USUARIO = IMPORT_BNFCIAR.NUM_SEQCIAL_BNFCIAR,
    --significa que eh registro 'ficticio' para carga de remidos. nesse caso, serao eliminados.
    --se o seu dependente estiver na lista para reprocessamento, os registros serao recriados.
    delete from gp.import_bnfciar ib where ib.num_seqcial_bnfciar = pnrsequencial_usuario
                                    and not exists(select 1 from usuario u
                                                           where u.nrsequencial_usuario = ib.num_seqcial_bnfciar);

    delete import_modul_bnfciar
     where num_seqcial_bnfciar = pnrsequencial_usuario;
    delete import_negociac_bnfciar
     where num_seqcial_bnfciar = pnrsequencial_usuario;
    delete import_atendim_bnfciar
     where num_seqcial_bnfciar = pnrsequencial_usuario;
    delete from gp.erro_process_import e
     where exists(select 1 from gp.import_bnfciar ib
                   where ib.num_seqcial_control = e.num_seqcial_control
                     and ib.num_seqcial_bnfciar = pnrsequencial_usuario);
  end;

  procedure apaga_beneficiario(pnrsequencial_usuario in number) is
  begin
    p_insere_log('BENEFICIARIO',
                 'apaga_beneficiario',
                 'APAGAR TEMP E BENEFICIARIO NO TOTVS',
                 pnrsequencial_usuario, --pnrsequencial_origem
                 0, --pcdidentificador
                 null,
                 null); --complemento

    apaga_beneficiario_totvs(pnrsequencial_usuario);
    apaga_beneficiario_import(pnrsequencial_usuario);
    --commit;
  end apaga_beneficiario;

  procedure apaga_proposta_totvs(pcd_modalidade in number,
                                 pnr_proposta   in number) is
  begin

    p_insere_log('PROPOSTA_TOTVS',
                 'apaga_proposta_totvs',
                 'APAGANDO PROPOSTA TOTVS COM RELACIONAMENTOS',
                 0, --pnrsequencial_origem
                 0, --pcdidentificador
                 'MODALIDADE;PROPOSTA: ',
                 pcd_modalidade || ';' || pnr_proposta); --complemento

    delete from gp.pro_pla
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.teadgrpa
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.propost
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.lotac_propost
     where cdn_modalid = pcd_modalidade
       and num_propost = pnr_proposta;

    delete from gp.usuario
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.usucaren
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.usumodu
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.histor_ocor_usuar h
      where h.cd_modalidade = pcd_modalidade
        and h.nr_proposta   = pnr_proposta;

    delete from gp.car_ide
     where cd_modalidade = pcd_modalidade
       and nr_ter_adesao = pnr_proposta;

    delete from gp.ter_ade
     where cd_modalidade = pcd_modalidade
       and nr_ter_adesao = pnr_proposta;

    delete from gp.sit_aprov_proposta
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    /* delete from gp.regra_menslid_propost
    where cd_modalidade = pcd_modalidade
      and nr_proposta = pnr_proposta;*/

    delete from gp.usureate
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.usurepas
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete gp.propcopa m
     where m.cd_modalidade = pcd_modalidade
       and m.nr_proposta = pnr_proposta;

    /* delete from gp.aditivo_contratual
    where cd_modalidade = pcd_modalidade
      and nr_proposta = pnr_proposta;*/

    delete from gp.audit_cad
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.campprop
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.histabpreco
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.histor_param_faturam
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.hist_alter_gp
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.hist_aprov_proposta
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.hist_movto_usuario
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    /*delete from gp.menslid_estrut_histor
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;*/

    delete from gp.partic_limit
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.propcart
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    delete from gp.propunim
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;

    /*delete from gp.regra_menslid_estrut
     where cd_modalidade = pcd_modalidade
       and nr_proposta = pnr_proposta;*/

    delete from gp.gerac_cod_ident_propost g
     where g.cdn_modalid = pcd_modalidade
       and g.num_propost = pnr_proposta;

    delete from gp.gerac_cod_ident_benef g
     where g.cdn_modalid = pcd_modalidade
       and g.num_propost = pnr_proposta;

    delete from gp.ususubst g
     where g.cd_modalidade = pcd_modalidade
       and g.nr_ter_adesao = pnr_proposta;

    p_commit;
  end;

  procedure apaga_proposta_import(pnr_contrato_antigo  in number,
                                  pnum_seqcial_propost in number,
                                  papagar_benefs varchar2) is
  begin
    p_insere_log('IMPORT_PROPOSTA',
                 'apaga_proposta_import',
                 'APAGANDO TEMPORARIAS DE PROPOSTA COM RELACIONAMENTOS. IMPORT_PROPOST VOLTA A SER GE',
                 0, --pnrsequencial_origem
                 0, --pcdidentificador
                 'NR_CONTRATO_ANTIGO: ',
                 pnr_contrato_antigo); --complemento

    update import_propost ip set ip.u##ind_sit_import = 'GE', ip.ind_sit_import = 'GE'
     where num_seqcial_propost = pnum_seqcial_propost;

    delete from gp.erro_process_import e
     where exists(select 1 from gp.import_propost ip
                   where ip.num_seqcial_control = e.num_seqcial_control
                     and ip.num_seqcial_propost = pnum_seqcial_propost);

    delete import_negociac_propost
     where num_seqcial_propost = pnum_seqcial_propost;

    delete import_modul_propost
     where num_seqcial_propost = pnum_seqcial_propost;

    delete gp.import_lotac_propost
     where num_seqcial_propost = pnum_seqcial_propost;

    delete importpadrcobertpropost k
     where num_seqcial_propost = pnum_seqcial_propost;

    delete import_faixa_propost ifp
     where ifp.num_seqcial_propost = pnum_seqcial_propost;

    if papagar_benefs = 'S' then
      for x in (select ib.num_seqcial_bnfciar, ib.num_seqcial_control
                  from gp.import_bnfciar ib
                 where ib.nr_contrato_antigo = pnr_contrato_antigo) loop

        update gp.import_bnfciar ib set ib.u##ind_sit_import = 'GE', ib.ind_sit_import = 'GE'
         where ib.num_seqcial_bnfciar = x.num_seqcial_bnfciar;

        --SE NAO EXISTIR USUARIO NO UNICOO COM NRSEQUENCIAL_USUARIO = IMPORT_BNFCIAR.NUM_SEQCIAL_BNFCIAR,
        --significa que eh registro 'ficticio' para carga de remidos. nesse caso, serao eliminados.
        --se o seu dependente estiver na lista para reprocessamento, os registros serao recriados.
        delete from gp.import_bnfciar ib where ib.num_seqcial_bnfciar = x.num_seqcial_bnfciar
                                        and not exists(select 1 from usuario u
                                                               where u.nrsequencial_usuario = ib.num_seqcial_bnfciar);

        delete import_modul_bnfciar j
         where j.num_seqcial_bnfciar = x.num_seqcial_bnfciar;

        delete import_atendim_bnfciar j
         where j.num_seqcial_bnfciar = x.num_seqcial_bnfciar;

        delete import_negociac_bnfciar j
         where j.num_seqcial_bnfciar = x.num_seqcial_bnfciar;

        delete from gp.erro_process_import e where e.num_seqcial_control = x.num_seqcial_control;
      end loop;
    end if;
  end apaga_proposta_import;
/*
  procedure p_apaga_base_movimentacao is

    cursor c_tables is
      select 'TRUNCATE TABLE ' || t.owner || '.' || t.table_name comando
        from tm_tabelas_movimentacao t;

  begin
    for c in c_tables loop

      execute immediate c.comando;

    end loop;

  end p_apaga_base_movimentacao;
*/

  /*-----------------------------------------------------------------------------------------------
    04/04/2018 - ALEX BOEIRA
    PROCEDURE CRIADA PARA GERAR A LISTAGEM DE COMANDOS DE LIMPEZA DA BASE DE MOVIMENTACAO PARA INICIAR
    NOVA CARGA DE DADOS DE MIGRACAO.

    ENTRADA: GARANTIR QUE A TABELA TM_TABELAS_EMS5_GP ESTA CORRETAMENTE PREENCHIDA COM A LISTAGEM
             DE TABELAS DE MOVIMENTACAO QUE DEVEM SER APAGADAS.

    SAIDA:   AO EXECUTAR NO PL/SQL, O SCRIPT DE LIMPEZA DE DADOS ESTARA NA ABA 'OUTPUT' (DBMS_OUTPUT).
             COPIAR TODO O CODIGO E COLAR EM UMA SQL WINDOW.
   ----------------------------------------------------------------------------------------------*/
  procedure p_gerar_comandos_limpeza_base is
    vcount number;
    ult_owner varchar2(100) := ' ';
    temSequence number;
    cursor c_tables is
      select t.*,
             decode(nvl(t.comando_especial_limpeza,' '),
             ' ', 'TRUNCATE TABLE ' || t.table_name || ';',t.comando_especial_limpeza) c_truncate,

             'analyze table ' || t.owner || '.' || t.table_name || ' compute statistics for table' || ' for all indexes' ||' for all indexed columns;' c_analyse,

             'drop sequence ' || t.table_name || '_SEQ;' c_drop_seq,
             'Create Sequence ' || t.table_name || '_SEQ minvalue 1 maxvalue 9999999999999999999999999999 start with 1 increment by 1 cache 20;' c_create_seq,
             'grant all on ' || t.table_name || '_SEQ to UNICOOGPS;' c_grant_seq_gp,
             'grant all on ' || t.table_name || '_SEQ to EMS506UNICOO;' c_grant_seq_ems5
        from tm_tabelas_ems5_gp t where t.tipo = 'MOVIMENTO'
                                    and t.validado = 'OK'
                                    /*and t.num_rows_destino > 0*/ order by t.owner;
  begin
    dbms_output.enable(null);

    --atualizar contagem de registros de MOVIMENTOS A SEREM APAGADOS por tabela
    for x in (
              select ' select count(*) from ' || m.owner || '.' || table_name comando,
                      m.table_name,
                      m.owner
                from tm_tabelas_ems5_gp m
               where m.tipo in ('MOVIMENTO')) loop
      begin
        execute immediate x.comando
          into vcount;
        exception
          when others then null; --DBMS_OUTPUT.PUT_LINE(x.comando || ' - ERRO!!!');
        end;

      update tm_tabelas_ems5_gp tm
         set tm.num_rows_destino = vcount
       where tm.owner = x.owner
         and tm.table_name = x.table_name;
    end loop;
    commit;
    --FIM DA ATUALIZACAO DA CONTAGEM DE REGISTROS A SEREM APAGADOS

    for c in c_tables loop
      if ult_owner <> c.owner then
        dbms_output.put_line('connect ' || c.owner || ';');
        ult_owner := c.owner;
      end if;

      dbms_output.put_line(c.c_truncate);

      --checar se sequence existe
      select count(*) into temSequence from all_sequences s where upper(s.sequence_name) = upper(c.table_name || '_SEQ');

      if nvl(c.comando_especial_limpeza,' ') = ' ' /*and temSequence > 0*/ then
        dbms_output.put_line(c.c_drop_seq);
        dbms_output.put_line(c.c_create_seq);
      end if;
    end loop;

    dbms_output.put_line('connect gp;');

    for c in c_tables loop
      select count(*) into temSequence from all_sequences s where upper(s.sequence_name) = upper(c.table_name || '_SEQ');
      /*if temSequence > 0 then*/
        dbms_output.put_line(c.c_grant_seq_gp);
        dbms_output.put_line(c.c_grant_seq_ems5);
      /*end if;*/
    end loop;

    dbms_output.put_line('connect ems5;');

    for c in c_tables loop
      select count(*) into temSequence from all_sequences s where upper(s.sequence_name) = upper(c.table_name || '_SEQ');
      /*if temSequence > 0 then*/
        dbms_output.put_line(c.c_grant_seq_gp);
        dbms_output.put_line(c.c_grant_seq_ems5);
     /* end if;*/
    end loop;

    commit;
  end p_gerar_comandos_limpeza_base;

--ler TM_TABELAS_EMS5_GP do tipo PARAMETRO e PAR_MIG e montar script de carga da HML para HML-PROD

  /*-----------------------------------------------------------------------------------------------
    09/04/2018 - ALEX BOEIRA
    PROCEDURE CRIADA PARA GERAR A LISTAGEM DE COMANDOS PARA BUSCAR PARAMETROS DE UM AMBIENTE
    E ESPELHAR EM OUTRO. EX: BUSCAR DA PRODUCAO PARA CARREGAR NO PROTOTIPO

    PRE-REQUISITOS: OS AMBIENTES ORIGEM E DESTINO PRECISAM ESTAR NA MESMA VERSAO DO BANCO DE DADOS.
                    CRIAR DATABASE LINKS NO AMBIENTE DESTINO PARA LEITURA DE DADOS DO AMBIENTE ORIGEM.
                    CONFIGURA-LOS NO 'DECODE' DO CODIGO ABAIXO.
    ENTRADA: GARANTIR QUE A TABELA TM_TABELAS_EMS5_GP ESTA CORRETAMENTE PREENCHIDA COM A LISTAGEM
             DE TABELAS DO TIPO 'PARAMETRO' E 'PAR_MIG'.
    SAIDA:   TM_COMANDOS_ESPELHAR_PARAM. COPIAR A COLUNA 'COMANDO' RESPEITANDO A SEQUENCIA (SEQ)
             PARA UMA JANELA DE COMANDO DO PL/SQL. (select * from tmp_comandos_espelhar_param order by seq)
   ----------------------------------------------------------------------------------------------*/
/*procedure p_comandos_espelhar_parametros is
  vseq number;
  vcount number;
begin

  --atualizar contagem de registros de PARAMETROS por tabela com base no ambiente de origem
  for x in (
            select ' select count(*) from ' || m.owner || '.' || table_name || decode(m.owner,'GP','@db_gp_treina',
                                                                                    'EMS5','@db_ems5_treina',
                                                                                    'UNICOOGPS','@db_unicoogps_treina',
                                                                                    'EMS506UNICOO','@db_ems506unicoo_treina') comando,
                    m.table_name,
                    m.owner
              from tm_tabelas_ems5_gp m
             where m.tipo in ('PARAMETRO','PAR_MIG')) loop

    --      DBMS_OUTPUT.PUT_LINE( 'PROCESSANDO1:' || x.comando);

    begin
      execute immediate x.comando
        into vcount;

    --          DBMS_OUTPUT.PUT_LINE(x.comando || ' - OK!');
      exception
        when others then null; --DBMS_OUTPUT.PUT_LINE(x.comando || ' - ERRO!!!');
      end;

    update tm_tabelas_ems5_gp tm
       set tm.num_rows = vcount
     where tm.owner = x.owner
       and tm.table_name = x.table_name;
  end loop;

  delete from tm_comandos_espelhar_param;
  commit;

  vseq := 1;
  insert into tm_comandos_espelhar_param values(vseq,'declare');
  vseq := vseq + 1;
  insert into tm_comandos_espelhar_param values(vseq,'  vult_progress_recid number;');
  vseq := vseq + 1;
  insert into tm_comandos_espelhar_param values(vseq,'  vloop number;');
  vseq := vseq + 1;
  insert into tm_comandos_espelhar_param values(vseq,'  vseq number;');
  vseq := vseq + 1;
  insert into tm_comandos_espelhar_param values(vseq,'begin');

  for x in(select * from unicoogps.tm_tabelas_ems5_gp t where t.tipo in ('PARAMETRO','PAR_MIG') and t.num_rows > 0
    ) loop

    vseq := vseq + 1;
    insert into tm_comandos_espelhar_param values(vseq,'  delete from ' || x.owner || '.' || x.table_name || ';');
    vseq := vseq + 1;
    insert into tm_comandos_espelhar_param values(vseq,'  insert into ' || x.owner || '.' || x.table_name ||
                ' select * from ' || x.owner || '.' || x.table_name || decode(x.owner,'GP','@db_gp_treina;',
                                                                                      'EMS5','@db_ems5_treina;',
                                                                                      'UNICOOGPS','@db_unicoogps_treina;',
                                                                                      'EMS506UNICOO','@db_ems506unicoo_treina;'));

--    vseq := vseq + 1;
--    insert into tm_comandos_espelhar_param values(vseq,'  analyze table ' || x.owner || '.' || x.table_name || ' compute statistics for table' || ' for all indexes' ||' for all indexed columns;');

    vseq := vseq + 1;
    insert into tm_comandos_espelhar_param values(vseq,'  select max(progress_recid) into vult_progress_recid from ' || x.owner || '.' || x.table_name || ';');
    vseq := vseq + 1;
    insert into tm_comandos_espelhar_param values(vseq,'  if vult_progress_recid is null then vult_progress_recid := 0; end if;');
    vseq := vseq + 1;
    insert into tm_comandos_espelhar_param values(vseq,'  vloop := 1;');
    vseq := vseq + 1;
    insert into tm_comandos_espelhar_param values(vseq,'  while vloop = 1 loop');
    vseq := vseq + 1;
    insert into tm_comandos_espelhar_param values(vseq,'    select ' || x.owner || '.' || x.table_name || '_seq.nextval into vseq from dual;');
    vseq := vseq + 1;
    insert into tm_comandos_espelhar_param values(vseq,'        if vseq > vult_progress_recid then vloop := 0; end if;');
    vseq := vseq + 1;
    insert into tm_comandos_espelhar_param values(vseq,'  end loop;');
  end loop;

  vseq := vseq + 1;
  insert into tm_comandos_espelhar_param values(vseq,'end;');
  commit;
end p_comandos_espelhar_parametros;
*/--select * from tm_comandos_espelhar_param

--GERAR GRANTS PARA TODAS AS TABELAS E SEQUENCES.
--SAIDA: DBMS_OUTPUT
procedure p_gerar_grants is
begin
  dbms_output.enable(null);
  for x in (select * from all_tables a where a.owner in ('UNICOOGPS','EMS506UNICOO','GP','EMS5')) loop
    dbms_output.put_line('grant all on ' || x.owner || '.' || x.table_name || ' to unicoogps;');
  end loop;
  for x in (select * from all_sequences a where a.sequence_owner in ('UNICOOGPS','EMS506UNICOO','GP','EMS5')) loop
    dbms_output.put_line('grant all on ' || x.sequence_owner || '.' || x.sequence_name || ' to unicoogps;');
  end loop;
end p_gerar_grants;


  /*-----------------------------------------------------------------------------------------------
    09/04/2018 - ALEX BOEIRA
    PROCEDURE CRIADA PARA GERAR A LISTAGEM DE COMANDOS PARA BUSCAR PARAMETROS DE UM AMBIENTE
    E ESPELHAR EM OUTRO. EX: BUSCAR DA PRODUCAO PARA CARREGAR NO PROTOTIPO

    PRE-REQUISITOS: OS AMBIENTES ORIGEM E DESTINO PRECISAM ESTAR NA MESMA VERSAO DO BANCO DE DADOS.
                    CRIAR DATABASE LINKS NO AMBIENTE DESTINO PARA LEITURA DE DADOS DO AMBIENTE ORIGEM.
                    CONFIGURA-LOS NO 'DECODE' DO CODIGO ABAIXO.
    ENTRADA: GARANTIR QUE A TABELA TM_TABELAS_EMS5_GP ESTA CORRETAMENTE PREENCHIDA COM A LISTAGEM
             DE TABELAS DO TIPO 'PARAMETRO' E 'PAR_MIG'.
    SAIDA:   AO EXECUTAR NO PL/SQL, O SCRIPT DE CRIACAO DE UMA NOVA PROCEDURE (P_ESPELHAR_PARAMETROS)
             ESTARA GERADO NA ABA 'OUTPUT' (DBMS_OUTPUT). COPIAR TODO O CODIGO E COLAR EM UMA SQL WINDOW.
             EM SEGUIDA, EXECUTAR A NOVA PROCEDURE EM OUTRA SQL WINDOW.
   ----------------------------------------------------------------------------------------------*/

  procedure p_comandos_espelhar_parametros is

    vseq        number;
    vcount      number;
    vprimeiro   varchar2(1);
    dblink      varchar2(9999);
    temSequence number;
    comando     varchar2(200);

  begin
    DBMS_OUTPUT.ENABLE(buffer_size => NULL);

    --atualizar contagem de registros de PARAMETROS por tabela com base no ambiente de origem
    for x in (select ' select count(*) from ' || m.owner || '.' ||
                     table_name ||
                     decode(m.owner,
                            'GP',
                            '@db_gp_hml_prod',
                            'EMS5',
                            '@db_ems5_hml_prod',
                            'UNICOOGPS',
                            '@db_unicoogps_hml_prod',
                            'EMS506UNICOO',
                            '@db_ems506unicoo_hml_prod') comando,
                     m.table_name,
                     m.owner
                from tm_tabelas_ems5_gp m
               where m.tipo in ('PARAMETRO', 'PAR_MIG')) loop

      begin
        execute immediate x.comando
          into vcount;

      exception
        when others then
          null;
      end;

      update tm_tabelas_ems5_gp tm
         set tm.num_rows = vcount
       where tm.owner = x.owner
         and tm.table_name = x.table_name;
    end loop;
    commit;
    -- FIM DA ATUALIZACAO DE QUANTIDADE DE REGISTROS.

    -- INICIO DA MONTAGEM DO SCRIPT DE ESPELHAMENTO DE PARAMETROS
    dbms_output.put_line('create or replace procedure p_espelhar_parametros (pconfirmacao varchar2) is');
    dbms_output.put_line('  vult_progress_recid number;');
    dbms_output.put_line('  vloop number;');
    dbms_output.put_line('  vseq number;');

    for x in (select distinct t.owner, t.table_name
                from unicoogps.tm_tabelas_ems5_gp t
               where t.tipo in ('PARAMETRO', 'PAR_MIG')
                 and t.num_rows > 0
                 and t.owner <> 'UNICOO'
                 and upper(t.table_name) <> 'TM_TABELAS_EMS5_GP') loop

      dbms_output.put_line(' ');
      dbms_output.put_line('procedure p' || substr(x.table_name, 1, 29) ||
                           ' is begin');
      dbms_output.put_line('  dbms_output.put_line(''' || x.table_name ||
                           ''');');

      /*    comando := '''drop table BKP' || substr(x.table_name,1,27);
          dbms_output.put_line('  begin execute immediate ' || comando || '''; exception when others then dbms_output.put_line(''p1 '' || sqlerrm); end;');


          comando := '''create table BKP' || substr(x.table_name,1,27) || ' as select * from ' || x.owner || '.' || x.table_name;
          dbms_output.put_line('  begin execute immediate ' || comando || '''; exception when others then dbms_output.put_line(''p2 '' || sqlerrm); end;');
      */
      comando := '''truncate table ' || x.owner || '.' || x.table_name;
      dbms_output.put_line('  begin execute immediate ' || comando ||
                           '''; exception when others then dbms_output.put_line(''p3 '' || sqlerrm); end;');

      vseq := vseq + 1;

      case
        when x.owner = 'GP' then
          dblink := '@db_gp_hml_prod';
        when x.owner = 'EMS5' then
          dblink := '@db_ems5_hml_prod';
        when x.owner = 'UNICOOGPS' then
          dblink := '@db_unicoogps_hml_prod';
        when x.owner = 'EMS506UNICOO' then
          dblink := '@db_ems506unicoo_hml_prod';
        else
          dblink := '@db_unicoogps_hml_prod';
      end case;

      dbms_output.put_line('  for rec in (select * from ' || x.owner || '.' ||
                           x.table_name || dblink || ') loop');

      dbms_output.put_line('    insert into ' || x.owner || '.' ||
                           x.table_name);
      dbms_output.put('(');
      vprimeiro := 'S';
      for y in (select column_name
                  from ALL_TAB_COLUMNS c
                 where upper(c.OWNER) = upper(x.owner)
                   and upper(c.TABLE_NAME) = upper(x.table_name)) loop
        if vprimeiro = 'N' then
          dbms_output.put_line(',' || y.column_name);
        else
          vprimeiro := 'N';
          dbms_output.put_line(y.column_name);
        end if;
      end loop;

      dbms_output.put(')');

      dbms_output.put_line('        values(');

      vprimeiro := 'S';
      for y in (select column_name
                  from ALL_TAB_COLUMNS c
                 where upper(c.OWNER) = upper(x.owner)
                   and upper(c.TABLE_NAME) = upper(x.table_name)) loop
        if vprimeiro = 'N' then
          dbms_output.put_line(',' || 'rec.' || y.column_name);
        else
          vprimeiro := 'N';
          dbms_output.put_line('rec.' || y.column_name);
        end if;
      end loop;

      dbms_output.put(');');

      dbms_output.put_line('  end loop;');

      --SE A TABELA TEM SEQUENCE, INICIALIZAR
      select count(*)
        into temSequence
        from all_sequences s
       where upper(s.sequence_name) = upper(x.table_name || '_SEQ');

      if temSequence > 0 then
        dbms_output.put_line('  select max(progress_recid) into vult_progress_recid from ' ||
                             x.owner || '.' || x.table_name || ';');
        dbms_output.put_line('  if vult_progress_recid is null then vult_progress_recid := 0; end if;');
        dbms_output.put_line('  vloop := 1;');
        dbms_output.put_line('  while vloop = 1 loop');
        dbms_output.put_line('    select ' || x.owner || '.' ||
                             x.table_name ||
                             '_seq.nextval into vseq from dual;');
        dbms_output.put_line('        if vseq > vult_progress_recid then vloop := 0; end if;');
        dbms_output.put_line('  end loop;');
      end if;

      dbms_output.put_line('end p' || substr(x.table_name, 1, 29) || ';');

    end loop;

    dbms_output.put_line('begin');

    dbms_output.put_line('  dbms_output.enable(null);');

    dbms_output.put_line('  if pconfirmacao <> ' || '''apagar e recriar todos os parametros''' || ' then return; end if;');

    for x in (select distinct t.owner, t.table_name
                from unicoogps.tm_tabelas_ems5_gp t
               where t.tipo in ('PARAMETRO', 'PAR_MIG')
                 and t.num_rows > 0
                 and t.owner <> 'UNICOO'
                 and upper(t.table_name) <> 'TM_TABELAS_EMS5_GP') loop

      dbms_output.put_line('  p' || substr(x.table_name, 1, 29) || ';');
    end loop;
    dbms_output.put_line('pck_UNICOOGPS.P_ACERTA_SEQUENCES;');
    dbms_output.put_line('  commit;');
    dbms_output.put_line('end p_espelhar_parametros;');
  end p_comandos_espelhar_parametros;

  /*-----------------------------------------------------------------------------------------------
    19/04/2018 - ALEX BOEIRA
    PROCEDURE CRIADA PARA GERAR COMANDOS 'ANALYSE TABLE', PARA OTIMIZAR PERFORMANCE DOS PROCESSOS DE MIGRACAO.

    ENTRADA: GARANTIR QUE A TABELA TM_TABELAS_EMS5_GP ESTA CORRETAMENTE PREENCHIDA COM A LISTAGEM
             DAS TABELAS DO PRODUTO E MIGRACAO.
    SAIDA:   TM_COMANDOS_ANALYSE. COPIAR A COLUNA 'COMANDO' RESPEITANDO A SEQUENCIA (SEQ)
             PARA UMA JANELA DE COMANDO DO PL/SQL (select * from tmp_comandos_analyse order by seq).
   ----------------------------------------------------------------------------------------------*/
  procedure p_gerar_comandos_analyse is
    cursor c_tables is
      select t.*,
             'analyze table ' || t.owner || '.' || t.table_name || ' compute statistics for table' || ' for all indexes' ||' for all indexed columns;' c_analyse
        from tm_tabelas_ems5_gp t where t.table_name is not null and t.table_name <> ' ' and t.tipo <> 'LIXO' order by t.owner;
  begin
    dbms_output.enable(null);

    for c in c_tables loop
      dbms_output.put_line(c.c_analyse);
    end loop;
  end p_gerar_comandos_analyse;

  procedure p_atualiza_status_guia_aut(pnrsessoes number) is
    vqtde number;
    x     number;

  begin

    loop

      select count(*) / pnrsessoes
        into vqtde
        from import_guia ig
       where ig.u##ind_sit_import = 'RC';

      x := 0;

      while x <= pnrsessoes loop

        update import_guia g
           set g.u##ind_sit_import = /*'R' ||*/ x, g.ind_sit_import = /*'R' ||*/ x
         where g.u##ind_sit_import = 'RC'
           and rownum <= vqtde;

        commit;

        x := x + 1;

      end loop;

    end loop;

  end p_atualiza_status_guia_aut;

  procedure p_atualiza_status_guia_aut_jk(pnrsessoes number) is
    vqtde number;
    x     number;

  begin
    select count(*) / pnrsessoes
      into vqtde
      from import_guia ig
     where ig.u##ind_sit_import = 'RC';

    x := 0;
    while x < pnrsessoes loop

      update import_guia g
         set g.u##ind_sit_import = x, g.ind_sit_import = x
       where g.u##ind_sit_import = 'RC'
         and rownum <= vqtde;
      commit;
      x := x + 1;

    end loop;

  end p_atualiza_status_guia_aut_jk;

/*  --setar para status JK - consumido pelo Jenkins
  procedure p_atualiza_status_guia_aut_JK is
    vqtde number;
    x     number;
  begin
        update import_guia g
           set g.u##ind_sit_import = 'JK', g.ind_sit_import = 'JK'
         where g.u##ind_sit_import = 'RC';
        commit;

  end p_atualiza_status_guia_aut_JK;*/

procedure p_atualizar_contagem_regs is
  vcount number;
begin
  --atualizar contagem de registros de MOVIMENTOS DO AMBIENTE DESTINO
  for x in (select ' select count(*) from ' || m.owner || '.' || table_name comando,
                   m.table_name,
                   m.owner
              from tm_tabelas_ems5_gp m) loop
    begin
      execute immediate x.comando
        into vcount;
    exception
      when others then
        null; --DBMS_OUTPUT.PUT_LINE(x.comando || ' - ERRO!!!');
    end;

    update tm_tabelas_ems5_gp tm
       set tm.num_rows_destino = vcount
     where tm.owner = x.owner
       and tm.table_name = x.table_name;
  end loop;
  commit;
  --FIM DA ATUALIZACAO DA CONTAGEM DE REGISTROS A SEREM APAGADOS

  --ATUALIZAR CONTAGEM DO AMBIENTE ORIGEM
  for x in (select ' select count(*) from ' || m.owner || '.' || table_name ||
                   decode(m.owner,
                          'GP',
                          '@db_gp_treina',
                          'EMS5',
                          '@db_ems5_treina',
                          'UNICOOGPS',
                          '@db_unicoogps_treina',
                          'EMS506UNICOO',
                          '@db_ems506unicoo_treina') comando,
                   m.table_name,
                   m.owner
              from tm_tabelas_ems5_gp m) loop

    begin
      execute immediate x.comando
        into vcount;

    exception
      when others then
        null;
    end;

    update tm_tabelas_ems5_gp tm
       set tm.num_rows = vcount
     where tm.owner = x.owner
       and tm.table_name = x.table_name;
  end loop;
  commit;
end;

-- ATUALIZAR TM_TABELAS_EMS5_GP COM TABELAS NOVAS DO EMS5 E GP. A HOMOLOGACAO DEVERA SER FEITA POSTERIORMENTE
-- MANUALMENTE (PREENCHER AS COLUNAS TIPO, VALIDADO e OBSERVACOES)
procedure p_criar_new_tm_tabelas_ems5_gp is
begin
  for x in (select *
              from all_tables t
             where (t.OWNER like ('EMS5') or t.OWNER like ('GP'))
               and not exists
             (select 1
                      from tm_tabelas_ems5_gp tm
                     where tm.table_name = t.TABLE_NAME)) loop

    insert into tm_tabelas_ems5_gp tm
      (TABLE_NAME, TIPO, VALIDADO, OWNER, OBSERVACOES)
    VALUES
      (x.table_name,
       null,
       null,
       x.owner,
       'REGISTRO PENDENTE DE HOMOLOGACAO');

  end loop;
  p_atualizar_contagem_regs;
end p_criar_new_tm_tabelas_ems5_gp;

/* 13/02/2019 - Alex Boeira - tratamento da temp retirado pois o processo foi alterado para ser executado
                              continuamente no jenkins (sincronizacao constante)
  --carregar temporaria TEMP_AUTORIZACAO com espelho da tabela AUTORIZACAO do UNICOO para otimizar a performance
  --da migracao de Guias de Autorizacao
  procedure p_carga_temp_autorizacao is
    rec temp_autorizacao%ROWTYPE;
    CURSOR C1Cursor IS
      SELECT * FROM autorizacao a
       where not exists(select 1 from temp_autorizacao t
                         where t.nrautorizacao = a.nrautorizacao);
  BEGIN
    OPEN C1Cursor;
    LOOP
      FETCH C1Cursor
        INTO rec;
      EXIT WHEN C1Cursor%NOTFOUND;

      begin
        INSERT INTO temp_autorizacao
          (NRAUTORIZACAO,
           CDTIPO_GUIA,
           CDTIPO_ATEND,
           CDSITUACAO,
           CDUNIDADE_ATEND,
           NRSEQ_USUARIO,
           CDUSUARIO_ORIGINAL,
           CDFUNCIONARIO_DIGITACAO,
           DTDIGITACAO,
           CDFUNCIONARIO_COMPETENTE,
           CDFUNCIONARIO_APROVACAO,
           DTAPROVACAO,
           NRPERICIA,
           NRSEQ_REQUISITANTE,
           DTREQUISICAO,
           NRSEQ_PRESTADOR,
           DTINTERNACAO,
           DTALTA,
           TXOBSERVACOES,
           CDCID,
           NRAREA_ACAO,
           NRCONTRATO,
           NRFAMILIA,
           TPUSUARIO,
           NRDIGITO,
           NOUSU_OUTRAAREA,
           CDAREA_ACAO_REQUISITANTE,
           NRREGISTRO_REQUISITANTE,
           CDAREA_ACAO_PRESTADOR,
           NRREGISTRO_PRESTADOR,
           CDTIPO_ACOMOD,
           TPPLANO_USUARIO,
           DTNASCIMENTO,
           DTVALIDCAR,
           NRREGISTRO_USUARIO,
           NRREGISTRO_PESSOA_CONTR,
           AORECEM_NASCIDO,
           AOEMERGENCIA,
           NROCORRENCIA,
           CDESPECIALIDADE,
           AOURGENCIA,
           CDLOCAL_DIGITACAO,
           CDMOTIVO_AUTORIZACAO,
           AOMEIO_SOLICITACAO,
           NRTRANSACAO_CANCELAMENTO,
           CDMOTIVO_CANCELAMENTO,
           HRDIGITACAO,
           TXSENHA_EXTERNA,
           NRTRANSACAO_AUTORIZACAO,
           NRPOS,
           AOTRANSFERE_PRODUCAO,
           TPTRANS_AUTORIZ,
           CDSENHA_INTERNA,
           CDMEDICO,
           NRREGISTRO_MEDICO,
           NRPOS_SOLICITANTE,
           NOARQUIVO_REQUISICAO,
           CDOCORRENCIA,
           CDAMB,
           TXSENHA_AUTORIZ,
           TPLAYOUT,
           SEGMENTO_CONEXAO,
           AOAPROVACAO_REMOTA,
           NOARQUIVO_RESPOSTA,
           HRENVIO_PTU,
           HRRESPOSTA_PTU,
           NRVIA_CARTAO,
           DTATENDIMENTO,
           HRATENDIMENTO,
           CODIGO_RESPOSTA,
           TPAUTORIZACAO,
           DTVALIDADE_PRE_AUTORIZ,
           TXFORMA_SOLICITACAO_PRE,
           HRENVIO_CANC,
           HRRESPOSTA_CANC,
           CDABRANGENCIA_USU,
           DTVALIDADE,
           TRILHA2,
           CDSEXO,
           CDFUNCIONARIO_CANCELOU,
           DTCANCELAMENTO,
           CDFUNCIONARIO_ALTERACAO,
           DTULTIMA_ALTERACAO,
           NRPROTOCOLO,
           STATUS_NOTIFICACAO,
           TXEMAIL,
           NRTELEFONE,
           NOCONTATO,
           CDUSUARIO_EMPRESA,
           CDTRANSACAO,
           NRCHEQUE_CONSULTA,
           NRCNS,
           CDTIPO_INTERNACAO,
           CDREGIME_INTERNACAO,
           TXINDICACAO_CLINICA,
           CDBIOMETRIA_SENSOR,
           NOPLANO_USUARIO,
           CDTIPO_CONSULTA,
           CDTIPO_ATENDIMENTO_TISS,
           CDTIPO_ACIDENTE,
           CDTIPO_SAIDA,
           CDMEDICO_SOLICITANTE,
           NRREGISTRO_MEDICO_SOLICITANTE,
           AOEMGESTACAO,
           AOABORTO,
           AOTRANSTORNO,
           AOCOMPLPUERPERIO,
           AOATENDRNSALA,
           AOCOMPLNEONATAL,
           AOBAIXO_PESO,
           AOPARTO_CESAREO,
           AOPARTO_NORMAL,
           CDCOND_OBITO_MULHER,
           NRDECLARACAO_NASC_VIVOS,
           CDCID_OBITO,
           NRDECLARACAO_OBITO,
           HRREALIZACAO,
           HRFIM_REALIZACAO,
           CDTIPO_DOENCA,
           CDCID_2,
           CDCID_3,
           CDCID_4,
           NOFABRICANTE,
           CDBARRA_SERVICO,
           CDTIPO_ACOMOD_TISS,
           CDUNIDADE_TEMPO_DOENCA,
           VLTEMPO_DOENCA,
           AOUTILIZA_VIA,
           CDTECNICA_UTILIZADA,
           CDSERIE_GUIA_PRINCIPAL,
           NRGUIA_PRINCIPAL,
           NRAREA_ACAO_INT,
           NRCONTRATO_INT,
           NRFAMILIA_INT,
           TPUSUARIO_INT,
           NRDIGITO_INT,
           AOINTERPTU30,
           CDSCHEMA_XML,
           NRVERSAO_PTU,
           CDTIPO_AUTORIZ_PTU,
           TPACOMODACAO_PTU,
           NRTRANS_SOLIC_PTU,
           NRAREA_ACAO_SOLIC_PTU,
           NRDDD_CELULAR,
           NRCELULAR,
           AOJUSTIFICATIVA,
           AOPREVISAOOPME,
           AOPREVISAOQUIMIOTERAPICO,
           DTSUGERIDAINTERNACAO,
           CDTIPO_GUIA_TISS,
           TXNOME_CONTRATADO,
           NRTELEFONE_CIRURGIAO,
           TXEMAIL_CIRURGIAO,
           TXESPECIFICACAO_MATERIAL,
           TXJUSTIFICATIVA_TECNICA,
           NRPESO,
           NRALTURA,
           NRSUPERFICIE_CORPORAL,
           CDESTADIAMENTO_TUMOR,
           CDFINALIDADE_TRATAMENTO,
           CDESCALA_CAP_FUNCIONAL,
           TXDIAG_CIPA_HISTO,
           TPQUIMIOTERAPIA,
           TXPLANO_TERAPEUTICO,
           NRCICLO_QUIMIO,
           NRCICLO_QUIMIO_ATUAL,
           NRDIAS_ENTRE_CICLOS,
           CDDIAGNOSTICO_IMAGEM,
           NRCAMPO_IRRADIACAO,
           NRDOSE_RADIO_DIA,
           NRDOSE_RADIO_TOTAL,
           TXCIRURGIA_ANTERIOR,
           DTCIRURGIA_ANTERIOR,
           TXAREA_IRRADIADA_ANTERIOR,
           DTIRRADIADA_ANTERIOR,
           TXQUIMIOTERAPIA_ANTERIOR,
           DTQUIMIOTERAPIA_ANTERIOR,
           NRDIAS_PREV_RADIOTERAPIA,
           DTPREVISTA_INICIO,
           TXINFO_RELEVANTES,
           NRSTATUS_AUTORIZACAO_WSD,
           NRAUTORIZACAO_PRINCIPAL,
           CDMEDICO_AUDITOR,
           CDENFERMEIRO_AUDITOR,
           NRREGISTRO_MED_AUDITOR,
           NRREGISTRO_ENF_AUDITOR,
           TXSENHA_OPERADORA,
           TXDIAG_CIPA_HISTO_RADIO,
           TXINFO_RELEVANTES_RADIO,
           CDESTADIAMENTO_TUMOR_RADIO,
           CDFINALIDADE_TRATAMENTO_RADIO,
           CDESCALA_CAP_FUNCIONAL_RADIO,
           TXCIRURGIA_ANTERIOR_RADIO,
           DTCIRURGIA_ANTERIOR_RADIO,
           TXOBSERVACOES_QUIMIO,
           TXOBSERVACOES_RADIO,
           TXOBSERVACOES_OPME,
           DTDIAGNOSTICO_QUIMIO,
           DTDIAGNOSTICO_RADIO,
           TXNMPROSOLIC_OPME,
           NRTELEFONE_OPME,
           TXEMAIL_OPME,
           TXNMPROSOLIC_QUIMIO,
           NRTELEFONE_QUIMIO,
           TXEMAIL_QUIMIO,
           TXNMPROSOLIC_RADIO,
           NRTELEFONE_RADIO,
           TXEMAIL_RADIO,
           CDPROF_SOLIC_OPME,
           CDPROF_SOLIC_QUIMIO,
           CDPROF_SOLIC_RADIO,
           NRAUTORIZACAO_OS,
           NRSEQ_PROTOCOLO,
           CDMETASTASE,
           CDNODULO,
           CDTUMOR,
           CDVERSAO_PADRAO,
           CDFORMA_ENVIO,
           NRDIAS_CICLO_ATUAL,
           AOLIMINAR,
           TPREDE_MIN,
           TXMOTIVO_CANCELAMENTO,
           CDLOTACAO,
           NRSEQ_TOKEN

           )
        VALUES
          (rec.NRAUTORIZACAO,
           rec.CDTIPO_GUIA,
           rec.CDTIPO_ATEND,
           rec.CDSITUACAO,
           rec.CDUNIDADE_ATEND,
           rec.NRSEQ_USUARIO,
           rec.CDUSUARIO_ORIGINAL,
           rec.CDFUNCIONARIO_DIGITACAO,
           trunc(rec.DTDIGITACAO),
           rec.CDFUNCIONARIO_COMPETENTE,
           rec.CDFUNCIONARIO_APROVACAO,
           rec.DTAPROVACAO,
           rec.NRPERICIA,
           rec.NRSEQ_REQUISITANTE,
           rec.DTREQUISICAO,
           rec.NRSEQ_PRESTADOR,
           rec.DTINTERNACAO,
           rec.DTALTA,
           rec.TXOBSERVACOES,
           rec.CDCID,
           rec.NRAREA_ACAO,
           rec.NRCONTRATO,
           rec.NRFAMILIA,
           rec.TPUSUARIO,
           rec.NRDIGITO,
           rec.NOUSU_OUTRAAREA,
           rec.CDAREA_ACAO_REQUISITANTE,
           rec.NRREGISTRO_REQUISITANTE,
           rec.CDAREA_ACAO_PRESTADOR,
           rec.NRREGISTRO_PRESTADOR,
           rec.CDTIPO_ACOMOD,
           rec.TPPLANO_USUARIO,
           rec.DTNASCIMENTO,
           rec.DTVALIDCAR,
           rec.NRREGISTRO_USUARIO,
           rec.NRREGISTRO_PESSOA_CONTR,
           rec.AORECEM_NASCIDO,
           rec.AOEMERGENCIA,
           rec.NROCORRENCIA,
           rec.CDESPECIALIDADE,
           rec.AOURGENCIA,
           rec.CDLOCAL_DIGITACAO,
           rec.CDMOTIVO_AUTORIZACAO,
           rec.AOMEIO_SOLICITACAO,
           rec.NRTRANSACAO_CANCELAMENTO,
           rec.CDMOTIVO_CANCELAMENTO,
           rec.HRDIGITACAO,
           rec.TXSENHA_EXTERNA,
           rec.NRTRANSACAO_AUTORIZACAO,
           rec.NRPOS,
           rec.AOTRANSFERE_PRODUCAO,
           rec.TPTRANS_AUTORIZ,
           rec.CDSENHA_INTERNA,
           rec.CDMEDICO,
           rec.NRREGISTRO_MEDICO,
           rec.NRPOS_SOLICITANTE,
           rec.NOARQUIVO_REQUISICAO,
           rec.CDOCORRENCIA,
           rec.CDAMB,
           rec.TXSENHA_AUTORIZ,
           rec.TPLAYOUT,
           rec.SEGMENTO_CONEXAO,
           rec.AOAPROVACAO_REMOTA,
           rec.NOARQUIVO_RESPOSTA,
           rec.HRENVIO_PTU,
           rec.HRRESPOSTA_PTU,
           rec.NRVIA_CARTAO,
           rec.DTATENDIMENTO,
           rec.HRATENDIMENTO,
           rec.CODIGO_RESPOSTA,
           rec.TPAUTORIZACAO,
           rec.DTVALIDADE_PRE_AUTORIZ,
           rec.TXFORMA_SOLICITACAO_PRE,
           rec.HRENVIO_CANC,
           rec.HRRESPOSTA_CANC,
           rec.CDABRANGENCIA_USU,
           rec.DTVALIDADE,
           rec.TRILHA2,
           rec.CDSEXO,
           rec.CDFUNCIONARIO_CANCELOU,
           rec.DTCANCELAMENTO,
           rec.CDFUNCIONARIO_ALTERACAO,
           rec.DTULTIMA_ALTERACAO,
           rec.NRPROTOCOLO,
           rec.STATUS_NOTIFICACAO,
           rec.TXEMAIL,
           rec.NRTELEFONE,
           rec.NOCONTATO,
           rec.CDUSUARIO_EMPRESA,
           rec.CDTRANSACAO,
           rec.NRCHEQUE_CONSULTA,
           rec.NRCNS,
           rec.CDTIPO_INTERNACAO,
           rec.CDREGIME_INTERNACAO,
           rec.TXINDICACAO_CLINICA,
           rec.CDBIOMETRIA_SENSOR,
           rec.NOPLANO_USUARIO,
           rec.CDTIPO_CONSULTA,
           rec.CDTIPO_ATENDIMENTO_TISS,
           rec.CDTIPO_ACIDENTE,
           rec.CDTIPO_SAIDA,
           rec.CDMEDICO_SOLICITANTE,
           rec.NRREGISTRO_MEDICO_SOLICITANTE,
           rec.AOEMGESTACAO,
           rec.AOABORTO,
           rec.AOTRANSTORNO,
           rec.AOCOMPLPUERPERIO,
           rec.AOATENDRNSALA,
           rec.AOCOMPLNEONATAL,
           rec.AOBAIXO_PESO,
           rec.AOPARTO_CESAREO,
           rec.AOPARTO_NORMAL,
           rec.CDCOND_OBITO_MULHER,
           rec.NRDECLARACAO_NASC_VIVOS,
           rec.CDCID_OBITO,
           rec.NRDECLARACAO_OBITO,
           rec.HRREALIZACAO,
           rec.HRFIM_REALIZACAO,
           rec.CDTIPO_DOENCA,
           rec.CDCID_2,
           rec.CDCID_3,
           rec.CDCID_4,
           rec.NOFABRICANTE,
           rec.CDBARRA_SERVICO,
           rec.CDTIPO_ACOMOD_TISS,
           rec.CDUNIDADE_TEMPO_DOENCA,
           rec.VLTEMPO_DOENCA,
           rec.AOUTILIZA_VIA,
           rec.CDTECNICA_UTILIZADA,
           rec.CDSERIE_GUIA_PRINCIPAL,
           rec.NRGUIA_PRINCIPAL,
           rec.NRAREA_ACAO_INT,
           rec.NRCONTRATO_INT,
           rec.NRFAMILIA_INT,
           rec.TPUSUARIO_INT,
           rec.NRDIGITO_INT,
           rec.AOINTERPTU30,
           rec.CDSCHEMA_XML,
           rec.NRVERSAO_PTU,
           rec.CDTIPO_AUTORIZ_PTU,
           rec.TPACOMODACAO_PTU,
           rec.NRTRANS_SOLIC_PTU,
           rec.NRAREA_ACAO_SOLIC_PTU,
           rec.NRDDD_CELULAR,
           rec.NRCELULAR,
           rec.AOJUSTIFICATIVA,
           rec.AOPREVISAOOPME,
           rec.AOPREVISAOQUIMIOTERAPICO,
           rec.DTSUGERIDAINTERNACAO,
           rec.CDTIPO_GUIA_TISS,
           rec.TXNOME_CONTRATADO,
           rec.NRTELEFONE_CIRURGIAO,
           rec.TXEMAIL_CIRURGIAO,
           rec.TXESPECIFICACAO_MATERIAL,
           rec.TXJUSTIFICATIVA_TECNICA,
           rec.NRPESO,
           rec.NRALTURA,
           rec.NRSUPERFICIE_CORPORAL,
           rec.CDESTADIAMENTO_TUMOR,
           rec.CDFINALIDADE_TRATAMENTO,
           rec.CDESCALA_CAP_FUNCIONAL,
           rec.TXDIAG_CIPA_HISTO,
           rec.TPQUIMIOTERAPIA,
           rec.TXPLANO_TERAPEUTICO,
           rec.NRCICLO_QUIMIO,
           rec.NRCICLO_QUIMIO_ATUAL,
           rec.NRDIAS_ENTRE_CICLOS,
           rec.CDDIAGNOSTICO_IMAGEM,
           rec.NRCAMPO_IRRADIACAO,
           rec.NRDOSE_RADIO_DIA,
           rec.NRDOSE_RADIO_TOTAL,
           rec.TXCIRURGIA_ANTERIOR,
           rec.DTCIRURGIA_ANTERIOR,
           rec.TXAREA_IRRADIADA_ANTERIOR,
           rec.DTIRRADIADA_ANTERIOR,
           rec.TXQUIMIOTERAPIA_ANTERIOR,
           rec.DTQUIMIOTERAPIA_ANTERIOR,
           rec.NRDIAS_PREV_RADIOTERAPIA,
           rec.DTPREVISTA_INICIO,
           rec.TXINFO_RELEVANTES,
           rec.NRSTATUS_AUTORIZACAO_WSD,
           rec.NRAUTORIZACAO_PRINCIPAL,
           rec.CDMEDICO_AUDITOR,
           rec.CDENFERMEIRO_AUDITOR,
           rec.NRREGISTRO_MED_AUDITOR,
           rec.NRREGISTRO_ENF_AUDITOR,
           rec.TXSENHA_OPERADORA,
           rec.TXDIAG_CIPA_HISTO_RADIO,
           rec.TXINFO_RELEVANTES_RADIO,
           rec.CDESTADIAMENTO_TUMOR_RADIO,
           rec.CDFINALIDADE_TRATAMENTO_RADIO,
           rec.CDESCALA_CAP_FUNCIONAL_RADIO,
           rec.TXCIRURGIA_ANTERIOR_RADIO,
           rec.DTCIRURGIA_ANTERIOR_RADIO,
           rec.TXOBSERVACOES_QUIMIO,
           rec.TXOBSERVACOES_RADIO,
           rec.TXOBSERVACOES_OPME,
           rec.DTDIAGNOSTICO_QUIMIO,
           rec.DTDIAGNOSTICO_RADIO,
           rec.TXNMPROSOLIC_OPME,
           rec.NRTELEFONE_OPME,
           rec.TXEMAIL_OPME,
           rec.TXNMPROSOLIC_QUIMIO,
           rec.NRTELEFONE_QUIMIO,
           rec.TXEMAIL_QUIMIO,
           rec.TXNMPROSOLIC_RADIO,
           rec.NRTELEFONE_RADIO,
           rec.TXEMAIL_RADIO,
           rec.CDPROF_SOLIC_OPME,
           rec.CDPROF_SOLIC_QUIMIO,
           rec.CDPROF_SOLIC_RADIO,
           rec.NRAUTORIZACAO_OS,
           rec.NRSEQ_PROTOCOLO,
           rec.CDMETASTASE,
           rec.CDNODULO,
           rec.CDTUMOR,
           rec.CDVERSAO_PADRAO,
           rec.CDFORMA_ENVIO,
           rec.NRDIAS_CICLO_ATUAL,
           rec.AOLIMINAR,
           rec.TPREDE_MIN,
           rec.TXMOTIVO_CANCELAMENTO,
           rec.CDLOTACAO,
           rec.NRSEQ_TOKEN);
      exception
        when dup_val_on_index then
             null;
      end;

    END LOOP;
    CLOSE C1Cursor;
  end p_carga_temp_autorizacao;
*/

--se o servico_da_autorizacao ja esta mapeado na temporaria
-- e sofreu mudanca no unicoo, apagar para reprocessar
procedure p_remover_guias_para_atualizar is
  qt_lidos number := 0;
  qt_removidos number := 0;
  hash_atual varchar2(100);
begin
  if PAOLOG_DBMS_OUTPUT = 'S' then
    DBMS_OUTPUT.ENABLE(null);
  else
    dbms_output.disable;
  end if;

  log_dbms('INICIO p_remover_guias_para_atualizar');
  --TODO: isolar apenas os status de guia que fazem sentido sofrerem atualizacao na origem!
  for x in (select s.nrseq_serv_autorizacao,
                   s.nrautorizacao,
                   s.nrocorrencia,
                   igm.u##ind_tip_guia,
                   igm.val_seq_guia,
                   igm.cod_livre_9 --hash das tabelas originais do unicoo
              from servico_da_autorizacao s,
                   autorizacao            a,
                   gp.import_guia_movto   igm
             where a.nrautorizacao = s.nrautorizacao
               and a.dtdigitacao >= PDT_INICIAL_GUIAS_AUTORIZ
               and igm.num_livre_5 = s.nrseq_serv_autorizacao
               ) loop

      hash_atual := gerar_hash_servico_da_autoriz(x.nrseq_serv_autorizacao,
                                                  x.nrautorizacao,
                                                  x.nrocorrencia);

      log_dbms('ANTES DE COMPARAR HASH(gravado/atual): ' || x.nrseq_serv_autorizacao || ' '
      || x.cod_livre_9 || ' ' || hash_atual);

    --se hash mudou, remover temporarias e guia (com relacionamentos) do TOTVS para ser criado novamente
    if x.cod_livre_9 <> hash_atual then
      qt_removidos := qt_removidos + 1;

      log_dbms('VAI APAGAR TEMP E GUIA POIS HASH MUDOU. NRSEQ_SERV_AUTORIZACAO: ' || x.nrseq_serv_autorizacao);

      --remover guia nas temporarias (basta apagar IMPORT_GUIA, a sua trigger apaga os relacionamentos) e no TOTVS
      if x.u##ind_tip_guia = 'SADT' then
        for y in (select ig.progress_recid,
                         ig.cd_unimed,
                         ig.aa_guia_atendimento,
                         ig.nr_guia_atendimento
                    from gp.import_guia_sadt igs, gp.import_guia ig
                   where igs.val_seq_import = ig.num_seqcial
                     and igs.val_seqcial = x.val_seq_guia) loop
          apagar_guia_totvs(y.cd_unimed,
                            y.aa_guia_atendimento,
                            y.nr_guia_atendimento);
          delete from gp.import_guia ig
           where ig.progress_recid = y.progress_recid;
        end loop;
      else
        if x.u##ind_tip_guia = 'CONS' then
          for y in (select ig.progress_recid,
                           ig.cd_unimed,
                           ig.aa_guia_atendimento,
                           ig.nr_guia_atendimento
                      from gp.import_guia_con igc, gp.import_guia ig
                     where igc.num_seq_import = ig.num_seqcial
                       and igc.num_seqcial_guia = x.val_seq_guia) loop
            apagar_guia_totvs(y.cd_unimed,
                              y.aa_guia_atendimento,
                              y.nr_guia_atendimento);
            delete from gp.import_guia ig
             where ig.progress_recid = y.progress_recid;
          end loop;
        else
          if x.u##ind_tip_guia = 'INTE' then
            for y in (select ig.progress_recid,
                             ig.cd_unimed,
                             ig.aa_guia_atendimento,
                             ig.nr_guia_atendimento
                        from gp.import_guia_intrcao igi, gp.import_guia ig
                       where igi.num_seqcial_guia = ig.num_seqcial
                         and igi.num_seqcial_guia = x.val_seq_guia) loop
              apagar_guia_totvs(y.cd_unimed,
                                y.aa_guia_atendimento,
                                y.nr_guia_atendimento);
              delete from gp.import_guia ig
               where ig.progress_recid = y.progress_recid;
            end loop;
          else
            if x.u##ind_tip_guia = 'QUIM' then
              for y in (select ig.progress_recid,
                               ig.cd_unimed,
                               ig.aa_guia_atendimento,
                               ig.nr_guia_atendimento
                          from gp.import_anexo_quimio iaq, gp.import_guia ig, gp.import_anexo_solicit ias
                         where ias.num_seq_import = ig.num_seqcial
                           and iaq.num_seqcial = x.val_seq_guia
                           and iaq.num_seqcial_import_anexo = ias.num_seqcial) loop
                apagar_guia_totvs(y.cd_unimed,
                                  y.aa_guia_atendimento,
                                  y.nr_guia_atendimento);
                delete from gp.import_guia ig
                 where ig.progress_recid = y.progress_recid;
              end loop;
            else
              if x.u##ind_tip_guia = 'RADI' then
              for y in (select ig.progress_recid,
                               ig.cd_unimed,
                               ig.aa_guia_atendimento,
                               ig.nr_guia_atendimento
                          from gp.import_anexo_radio iar, gp.import_guia ig, gp.import_anexo_solicit ias
                         where ias.num_seq_import = ig.num_seqcial
                           and iar.num_seqcial = x.val_seq_guia
                           and iar.num_seqcial_import_anexo = ias.num_seqcial) loop
                  apagar_guia_totvs(y.cd_unimed,
                                    y.aa_guia_atendimento,
                                    y.nr_guia_atendimento);
                  delete from gp.import_guia ig
                   where ig.progress_recid = y.progress_recid;
                end loop;
              else
                if x.u##ind_tip_guia = 'OPME' then
              for y in (select ig.progress_recid,
                               ig.cd_unimed,
                               ig.aa_guia_atendimento,
                               ig.nr_guia_atendimento
                          from gp.import_anexo_opme iao, gp.import_guia ig, gp.import_anexo_solicit ias
                         where ias.num_seq_import = ig.num_seqcial
                           and iao.num_seqcial = x.val_seq_guia
                           and iao.num_seqcial_import_anexo = ias.num_seqcial) loop
                    apagar_guia_totvs(y.cd_unimed,
                                      y.aa_guia_atendimento,
                                      y.nr_guia_atendimento);
                    delete from gp.import_guia ig
                     where ig.progress_recid = y.progress_recid;
                  end loop;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;

    qt_lidos := qt_lidos + 1;
    p_commit;
  end loop;
  commit;
  log_dbms('QT_LIDOS: ' || qt_lidos || ' ' ||
           'QT_REMOVIDOS: ' || qt_removidos);
end p_remover_guias_para_atualizar;

procedure apagar_guia_totvs(pcd_unimed           number,
                            paa_guia_atendimento number,
                            pnr_guia_atendimento number) is
begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    log_dbms('APAGANDO NO TOTVS UNIDADE; ANO; NR_GUIA: ' ||
             pcd_unimed || '; ' ||
             paa_guia_atendimento || '; ' ||
             pnr_guia_atendimento);

  delete from gp.guia_autoriz_comp g
   where g.cdn_unid = pcd_unimed
     and g.num_ano_guia_atendim = paa_guia_atendimento
     and g.num_guia_atendim = pnr_guia_atendimento;

  delete from gp.GUIAINOD g
   where g.cd_unidade = pcd_unimed
     and g.aa_guia_atendimento = paa_guia_atendimento
     and g.nr_guia_atendimento = pnr_guia_atendimento;

  delete from gp.GUIA_HIS g
   where g.cd_unidade = pcd_unimed
     and g.aa_guia_atendimento = paa_guia_atendimento
     and g.nr_guia_atendimento = pnr_guia_atendimento;

  delete from gp.PROCGUIA g
   where g.cd_unidade = pcd_unimed
     and g.aa_guia_atendimento = paa_guia_atendimento
     and g.nr_guia_atendimento = pnr_guia_atendimento;

  delete from gp.PROCED_GUIA_COMP g
   where g.cdn_unid = pcd_unimed
     and g.num_ano_guia_atendim = paa_guia_atendimento
     and g.num_guia_atendim = pnr_guia_atendimento;

  delete from gp.INSUGUIA g
   where g.cd_unidade = pcd_unimed
     and g.aa_guia_atendimento = paa_guia_atendimento
     and g.nr_guia_atendimento = pnr_guia_atendimento;

  delete from gp.INSUMO_GUIA_COMP g
   where g.cdn_unid = pcd_unimed
     and g.num_ano_guia_atendim = paa_guia_atendimento
     and g.num_guia_atendim = pnr_guia_atendimento;

  delete from gp.MOVATGLO g
   where g.cd_unidade = pcd_unimed
     and g.aa_guia_atendimento = paa_guia_atendimento
     and g.nr_guia_atendimento = pnr_guia_atendimento;

  delete from gp.guiautor g
   where g.cd_unidade = pcd_unimed
     and g.aa_guia_atendimento = paa_guia_atendimento
     and g.nr_guia_atendimento = pnr_guia_atendimento;

end apagar_guia_totvs;

  procedure p_import_guia_autorizacao(PQT_GUIAS_POR_CICLO number) is

    vcdsituacao_totvs       varchar2(2);
    vnrsqimportguia         number;
    vnrsqimportguiasadt     number;
    vnrsqimportguiacon      number;
    vnrsqimportguiaintrcao  number;
    vnrsqimportanexosolicit number;
    vnrsqimportanexoopme    number;
    vnrsqimportguiamovto    number;
    vnrsqimportmovtoglosa   number;

    vcdmedicoexec           number;
    vareaacaoexec           number;

    vareaacaoprest          number; --siderley
    vcdprestador            varchar2(6);
    vnoprestador            varchar2(100);
    vcdespecialidade        varchar2(4);
    vcdconselhoprof         varchar2(7);
    vnrconselhoprof         varchar2(15);
    vcdestadocrm            varchar2(2);
    vareaacaoreq            number; --siderley
    vcdprestadorreq         varchar2(6);
    vnoprestadorreq         varchar2(100);
    vcdespecialidadereq     varchar2(4);
    vcdcboreq               varchar2(6);
    vcdconselhoprofreq      varchar2(7);
    vnrconselhoprofreq      varchar2(15);
    --vprestgenerico          number;
    vcdestadocrmreq varchar2(2);
    vcdcaratersolic varchar2(2);
    vindtipguia     varchar2(4);
    vdescglosa      ocorrencia.txocorrencia%type;
    vnrunimed       parametro.vlparametro%type;
    vdesintercam    import_guia.des_intercam%type;
    vnrglosa        number;
    --vnrclasse_erro          number;
    vcdclasse            varchar2(4);
    vindtpmovtoguia      varchar2(1);
    vnrsqimportguiaprinc number;
    vqtdiariasolic       number;
    vcdmodulo            number;
    --vaogerareprovada        varchar2(2);
    vaoanexoquimioinc boolean;
    vaoanexoradioinc  boolean;
    vaoanexoopmeinc   boolean;
    vnrseq_guia       number;
    --    voaoexige_local         char;
    vlocal         number;
    vcdsituacao    varchar2(2);
    vaomigrado     char;
    vcdmodalidade  propost.cd_modalidade%type;
    vcd_plano      propost.cd_plano%type;
    vcd_tipo_plano propost.cd_tipo_plano%type;
    vaoachou varchar2(1);

    --dtiniaux date;
    --dtfimaux date;
    --mmaux int;
    --aaaux int;
    ixaux int := 0;
    aocriar_import_guia varchar2(1);
    aoexiste_principal varchar2(1);
    vachou varchar2(1);

    timport_guia_movrto gp.import_guia_movto%rowtype;

    cursor c_autorizacao (pnrseq_serv_autorizacao number) is
      select t.cd_transacao cd_transacao,
             t.cd_tipo_guia cd_tipo_guia,

             case --aa_guia_autorizacao
             --Usuario local em prestador local e tem guia emitida -> chave da GUIAUTOR sera SERIE+NRGUIA da EMISSAO_GUIA
               when a.NRAREA_ACAO = pnrunimed and
                    a.cdarea_acao_prestador = pnrunimed and
                    e.cdserie_guia is not null then
                    case
                      when length(e.cdserie_guia || e.nrguia) = 9 then
                       to_number(200 || substr(e.cdserie_guia, 1, 1)) -- 200 + 1o digito da serie
                      when length(e.cdserie_guia || e.nrguia) = 10 then
                       to_number(20 || e.cdserie_guia)                -- 20 + os 2 digitos da serie
                      when length(e.cdserie_guia || e.nrguia) <= 8 then
                       to_number(to_char(sysdate,'YYYY'))             -- ano atual
                    end

             --Intercambio - usuario meu fora
               when a.NRAREA_ACAO = pnrunimed and
                    a.cdarea_acao_prestador <> pnrunimed then
                    --to_number(to_char(sysdate,'YYYY'))                -- ano atual
                    --ALEX 26/04/18 - ALTERADO PARA FORÇAR 2000 PARA CORRETA IMPORTACAO DO A500 (conforme orientado Thealth)
                    2000

             --Intercambio - usuario de fora na minha base (eventual) - tem guia emitida - mesma regra do usuario local
               when a.NRAREA_ACAO <> pnrunimed and
                    a.cdarea_acao_prestador = pnrunimed and
                    e.cdserie_guia is not null then
                    case
                      when length(e.cdserie_guia || e.nrguia) = 9 then
                       to_number(200 || substr(e.cdserie_guia, 1, 1))
                      when length(e.cdserie_guia || e.nrguia) = 10 then
                       to_number(20 || e.cdserie_guia)
                      when length(e.cdserie_guia || e.nrguia) <= 8 then
                       to_number(to_char(sysdate,'YYYY'))
                    end

             --Autorização não emitida
               else
                2000 -- fixo 2000, que eh tratado na importação de XML no TOTVS
             end aa_guia_autorizacao,

             case --nr_guia_autorizacao
             --Usuario Local
               when a.NRAREA_ACAO = pnrunimed and
                    a.cdarea_acao_prestador = pnrunimed and
                    e.cdserie_guia is not null then
                      case
                        when length(e.cdserie_guia || e.nrguia) = 9 then
                         to_number(substr(e.cdserie_guia || e.nrguia, 2, 8))
                        when length(e.cdserie_guia || e.nrguia) = 10 then
                         to_number(substr(e.cdserie_guia || e.nrguia, 2, 8))
                        when length(e.cdserie_guia || e.nrguia) <= 8 then
                         to_number(e.cdserie_guia || e.nrguia)
                      end

             --Intercambio usuario MEU fora
               when a.NRAREA_ACAO = pnrunimed and
                    a.cdarea_acao_prestador <> pnrunimed then
                    --a.nrautorizacao alterado em 02/06/17 para tratamento de solicitacoes em complemento
                      s.nrseq_complemento -- quando eh a solicitacao original, nrseq_complemento eh igual a nrautorizacao

             --Intercambio usuario eventual
/*               when a.NRAREA_ACAO <> pnrunimed and
                    a.cdarea_acao_prestador = pnrunimed and
                    e.cdserie_guia is not null then
                    case
                      when length(e.cdserie_guia || e.nrguia) = 9 then
                       to_number(substr(e.cdserie_guia || e.nrguia, 2, 8))
                      when length(e.cdserie_guia || e.nrguia) = 10 then
                       to_number(substr(e.cdserie_guia || e.nrguia, 2, 8))
                      when length(e.cdserie_guia || e.nrguia) <= 8 then
                       to_number(e.cdserie_guia || e.nrguia)
                    end*/

               when a.NRAREA_ACAO <> pnrunimed and
                    a.cdarea_acao_prestador = pnrunimed and
                    e.cdserie_guia is not null
                    and s.nrautorizacao = s.nrseq_complemento then --eh a guia principal
                          case
                            when length(e.cdserie_guia || e.nrguia) = 9 then
                             to_number(substr(e.cdserie_guia || e.nrguia, 2, 8))
                            when length(e.cdserie_guia || e.nrguia) = 10 then
                             to_number(substr(e.cdserie_guia || e.nrguia, 2, 8))
                            when length(e.cdserie_guia || e.nrguia) <= 8 then
                             to_number(e.cdserie_guia || e.nrguia)
                          end
               when a.NRAREA_ACAO <> pnrunimed and
                    a.cdarea_acao_prestador = pnrunimed and
                    e.cdserie_guia is not null
                    and s.nrautorizacao <> s.nrseq_complemento --eh guia complementar
                    then s.nrseq_complemento

             --Autorização não emitida
               else
                a.nrautorizacao
             end nr_guia_autorizacao,

             --a.nrautorizacao        nrseq_complemento,
             s.nrseq_complemento    nrseq_complemento,
             a.nrautorizacao        nrautorizacao_origem,
             s.nrseq_serv_autorizacao,

             case
               when e.NRPRORROGACAO is not null and
                    e.cdserie_guia is not null then
                'S'
               else
                'N'
             end aoprorrogacao,
             s.cdsituacao cdsituacao_servico,
             decode(s.nrseq_complemento,s.nrautorizacao,'S',0,'S','N') aoguia_principal,
             a.*
        from servico_da_autorizacao       s,
             autorizacao                  a,
             emissao_servico_guia         e,
             tm_depara_transacao_tipoguia t
             --prestador                    ps,
             --preserv                      pvs,
             --area_de_acao                 aas,
             --prestador                    pp,
             --preserv                      pvp,
             --area_de_acao                 aap
       --where s.dtdigitacao between pdtiniaux and pdtfimaux
       where s.nrseq_serv_autorizacao = pnrseq_serv_autorizacao

         -- DESCOMENTAR A LINHA ABAIXO APENAS PARA TESTES PONTUAIS. INFORMAR O NR DA GUIA DESEJADO
--         and (a.nrautorizacao = 26570409) -- anteriormente era parametro da procedure, mas afetava performance

         and e.nrseq_serv_autorizacao(+) = s.nrseq_serv_autorizacao
         and t.cdtipo_guia_tiss_unicoo = a.cdtipo_guia_tiss(+)
         and t.in_atend_base = decode(a.cdarea_acao_prestador,pnrunimed,'S','N')
         and a.nrautorizacao = s.nrautorizacao

         /*ALEX 07/06/2018 - essas validacoes afetavam muito a performance. sera tratado dentro do loop do cursor.
         and ps.nrregistro_prest = nvl(a.nrregistro_requisitante,pcdprestador)
         and aas.cdprestador(+) = ps.cdprestador
         and pvs.cd_unidade = nvl(aas.cdareaacao,vnrunimed)
         and pvs.cd_prestador = NVL(aas.CDAREAACAO, ps.CDPRESTADOR)

         and pp.nrregistro_prest = nvl(a.nrregistro_prestador,pcdprestador)
         and aap.cdprestador(+) = pp.cdprestador
         and pvp.cd_unidade = nvl(aap.cdareaacao,vnrunimed)
         and pvp.cd_prestador = NVL(aap.CDAREAACAO, pp.CDPRESTADOR)*/

       order by s.nrseq_complemento;

    cursor c_ocorrencia_autorizacao(pnrocorrencia number) is
      select oa.*
        from ocorrencia_autorizacao oa
       where oa.nrocorrencia = pnrocorrencia;

    cursor c_servico_autorizacao(pnrserv_nrautorizacao number) is
    --serviços ja executados
      --select nvl(ds.cdvalor_externo, nvl(sr.cdservico_prest, sr.cdservico)) cdservico_refer, --alterado pois não usa cdservico_prest ao criar AMBPROCE, e sim cdservico
      select nvl(ds.cdvalor_externo, sr.cdservico) cdservico_refer,
             se.cdclasse,
             null saldo,
             sr.*
        from servico_da_autorizacao   sr,
             unicoogps.temp_depara_servico ds,
             servico                  se
       where sr.cdservico = ds.cdvalor_interno(+)
         and sr.cdservico = se.cdservico
         and sr.nrseq_serv_autorizacao = pnrserv_nrautorizacao
         --se for Procedimento, deve ter 8 digitos
         and(   se.cdclasse in(pclsmater, pclsmedic, pcltaxa, pclasdia)
             or length(se.cdservico) = 8);

  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    begin
      select p.vlparametro
        into vnrunimed
        from parametro p
       where p.cdparametro = 'NRUNIMED';
    exception
      when others then
        vnrunimed := null;
    end;

    --verificar se guias ja migradas foram alteradas no UNICOO. Se sim, serao removidas (temp e TOTVS)
    --para serem recriadas nos processos seguintes;
    p_remover_guias_para_atualizar;

    --apagar erros de extracao para reprocessamento
    delete from gp.import_guia g where g.u##ind_sit_import = 'ER';

    --setar erros de negocio para reprocessar
    update gp.import_guia g set g.ind_sit_import = 'RC', g.u##ind_sit_import = 'RC'
     where g.u##ind_sit_import = 'PE';

    vnrcontrolemigracao := 0;

    --mmaux := to_char(pdatageracao,'MM');
    --aaaux := to_char(pdatageracao,'YYYY');
    --loop
      --dtiniaux := to_date(aaaux || mmaux, 'YYYYMM');
      --mmaux := mmaux + 1;
      --if mmaux > 12 then
      --   mmaux := 1;
      --   aaaux := aaaux + 1;
      --end if;
      --dtfimaux := to_date(aaaux || mmaux, 'YYYYMM');
      ixaux := 0;

      --dbms_output.put_line('P1' || ' / ' || dtiniaux || ' / ' || dtfimaux || ' / ' || ixaux || ' / ' || sysdate || ' / ' || to_char(sysdate, 'HH24:MI:SS'));

/* BKP - O TESTE ABAIXO UTILIZA UMA NOVA TABELA TEMP_AUTORIZACAO QUE DEVE SER CARREGADA
         COM UM ESPELHO DA AUTORIZACAO ANTES DE INICIAR ESSA ETAPA
      for s in (select sa.nrseq_serv_autorizacao
                  from servico_da_autorizacao sa,
                       autorizacao a
                 where a.nrautorizacao = sa.nrautorizacao
                   and a.dtdigitacao between dtiniaux and dtfimaux
                   and a.nrarea_acao <> parea_acao_monitoramento_ie -- guias do monitoramento nao devem migrar (Intercambio Eletronico)
*/
      for s in (select sa.nrseq_serv_autorizacao
                  from servico_da_autorizacao sa,
                       autorizacao a
                       --TEMP_AUTORIZACAO a
                 where a.nrautorizacao = sa.nrautorizacao
                   and a.dtdigitacao >= PDT_INICIAL_GUIAS_AUTORIZ     --between dtiniaux and dtfimaux
                   and a.nrarea_acao <> parea_acao_monitoramento_ie -- guias do monitoramento nao devem migrar (Intercambio Eletronico)

         -- DESCOMENTAR A LINHA ABAIXO APENAS PARA TESTES PONTUAIS. INFORMAR O NR DA GUIA DESEJADO
--         and (sa.nrautorizacao = 26570409) -- anteriormente era parametro da procedure, mas afetava performance
--           and sa.nrseq_complemento = 26353873
--           and sa.nrautorizacao = 18974341

                   --desconsiderar se o servico_da_autorizacao ja esta mapeado nas temporarias do migrador
                   and not exists
                          (select 1
                           from gp.import_guia_movto img
                          where img.num_livre_5 = sa.nrseq_serv_autorizacao)

                   --lista de prestadores que o cliente solicitou para nao migrar
                   AND NOT EXISTS
                           (SELECT 1
                            FROM TM_PRESTADORES_EXC TPE
                           WHERE TPE.NRREGISTRO_PREST = a.nrregistro_requisitante)

                   --garantir que o beneficiário existe no UNICOO e GPS, ou eh de intercambio
                   and (   a.nrarea_acao <> vnrunimed

                        --procurar usuario no unicoo com nrseq_usuario
                        or exists(select 1 from usuario u
                           where u.nrsequencial_usuario = a.nrseq_usuario
                             and exists(select 1 from gp.usuario us
                                         where us.cd_carteira_antiga =
                                         to_number(u.nrcontrato || lpad(u.nrfamilia, 6, '0') || u.tpusuario || u.nrdigitoct)))

                        --procurar usuario no unicoo com carteira
                        or exists(select 1 from usuario u
                           where u.nrcontrato = a.nrcontrato
                             and u.nrfamilia = a.nrfamilia
                             and u.tpusuario = a.tpusuario
                             and u.nrdigitoct = a.nrdigito
                             and exists(select 1 from gp.usuario us
                                         where us.cd_carteira_antiga =
                                         to_number(u.nrcontrato || lpad(u.nrfamilia, 6, '0') || u.tpusuario || u.nrdigitoct))))

                   --garantir que area de acao do beneficiario existe
                   and exists(select 1 from area_de_acao aa where aa.cdareaacao = a.nrarea_acao)

                   --parametro de numero de guias a processar por ciclo
                   and rownum <= PQT_GUIAS_POR_CICLO
               order by sa.nrseq_complemento) loop

--        for a in c_autorizacao(dtiniaux, dtfimaux) loop
        for a in c_autorizacao(s.nrseq_serv_autorizacao) loop

          ixaux := ixaux + 1;

          vcdsituacao  := 'RC';

          --setar area de acao default caso esteja invalida
          if a.nrarea_acao is null or a.nrarea_acao = 0 then
            a.nrarea_acao := nvl(a.cdarea_acao_requisitante,a.cdarea_acao_prestador);
          end if;

    --DBMS_OUTPUT.PUT_LINE('NRAUTORIZACAO/NRSEQ_COMPLEMENTO: ' || a.nrautorizacao || '/' || a.nrseq_complemento);

          -- se já existir IMPORT_GUIA com a mesma chave, significa que está adicionando mais serviços à mesma guia.
          -- caso contrário, vai gerar nova guia (inclusive para Prorrogações e Complementos).
          aocriar_import_guia := 'N';
          begin
            select num_seqcial
              into vnrsqimportguia
              from import_guia ig
             where ig.cd_unimed           = pnrunimed
               and ig.aa_guia_atendimento = a.aa_guia_autorizacao
               and ig.nr_guia_atendimento = a.nr_guia_autorizacao
               --and ig.cd_transacao = a.cd_transacao
               --and ig.cd_tipo_guia = a.cd_tipo_guia
               and rownum = 1;

            vnrcontrolemigracao := fn_retorna_controle(a.nrautorizacao,
                                                       'AU');

          exception
            when no_data_found then
              select sq_import_guia.nextval into vnrsqimportguia from dual;
              aocriar_import_guia := 'S';

              p_insere_controle('AU',
                                a.nrautorizacao,
                                a.nrarea_acao || a.nrfamilia || a.tpusuario || a.nrdigito);

          end;

          vcdsituacao_totvs := f_situacao_autorizacao_migra(a.cdsituacao_servico);
          if vcdsituacao_totvs = 'ERRO' then
              p_insere_falha(vnrcontrolemigracao,
                             'AU',
                             'Situacao da guia invalida: ' ||
                             a.cdsituacao_servico,
                             'Complemento: ' || a.nrseq_complemento,
                             a.nrautorizacao);
              vcdsituacao := 'ER';
          end if;

          --checar se PRESTADOR PRINCIPAL existe na PRESERV e setar default caso necessario.
          begin
            select 'S' into vaoachou
              from preserv pr, prestador p
             where pr.cd_prestador = p.cdprestador
               and p.nrregistro_prest = a.nrregistro_prestador;

            begin
              -- buscar dados do Prestador Principal
              select nvl(ac.cdareaacao, pr.cdprestador),
                     nvl(ac.cdareaacao, pp.vlparametro) cdareaacao,
                     p.nopessoa,
                     nvl(nvl((select d.cd_especialidade_totvs
                           from depara_especialidade d
                          where d.cdespecialidade_unicoo = e.cdespecialidade),
                         pr.cdespecial_predom),PCDESPECIALIDADE), --pr.cdespecial_predom,
                         substr(pr.cdconselho_prof,1,5),
                     pr.nrconselho_prof,
                     pr.cdestado_crm
                into vcdprestador,
                     vareaacaoprest,
                     vnoprestador,
                     vcdespecialidade,
                     vcdconselhoprof,
                     vnrconselhoprof,
                     vcdestadocrm
                from prestador     pr,
                     pessoa        p,
                     especialidade e,
                     area_de_acao  ac,
                     parametro     pp
               where pr.nrregistro_prest = p.nrregistro
                 and pr.nrregistro_prest = a.nrregistro_prestador
                 and pr.cdespecial_predom = e.cdespecialidade
                 and pr.cdprestador = ac.cdprestador(+)
                 and pp.cdparametro = 'NRUNIMED'
                 and rownum = 1;
            exception
              when no_data_found then
                vareaacaoprest          := vnrunimed;
                vcdprestador            := pcdprestador;
                vnoprestador            := pnoprestador;
                vcdespecialidade        := pcdespecialidade;
                vcdconselhoprof         := pcdconselhoprof;
                vnrconselhoprof         := pnrconselhoprof;
                vcdestadocrm            := pcdestadocrm;
                a.cdarea_acao_prestador := vnrunimed;

              when others then
                p_insere_falha(vnrcontrolemigracao,
                               'AU',
                               'Erro ao pesquisar Prestador ' ||
                               a.nrregistro_prestador ||
                               ' (NRREGISTRO_PRESTADOR) principal da autorização.',
                               'Verificar o cadastro do prestador (Tabela PRESTADOR) informado na autorização (Tabela AUTORIZACAO).' ||
                               ' Complemento: ' || a.nrseq_complemento,
                               a.nrautorizacao);

                vcdsituacao := 'ER';
            end;
          exception
            when no_data_found then
              vareaacaoprest          := vnrunimed;
              vcdprestador            := pcdprestador;
              vnoprestador            := pnoprestador;
              vcdespecialidade        := pcdespecialidade;
              vcdconselhoprof         := pcdconselhoprof;
              vnrconselhoprof         := pnrconselhoprof;
              vcdestadocrm            := pcdestadocrm;
              a.cdarea_acao_prestador := vnrunimed;

            when others then
              p_insere_falha(vnrcontrolemigracao,
                             'AU',
                             'Prestador Principal nao existe no GP (PRESERV). NRREGISTRO_PRESTADOR: ' ||
                             a.nrregistro_prestador,
                             'Verificar o cadastro do prestador (Tabela PRESTADOR) informado na autorização (Tabela AUTORIZACAO).' ||
                             ' Complemento: ' || a.nrseq_complemento,
                             a.nrautorizacao);

              vcdsituacao := 'ER';
          end;

          -- buscar dados do Prestador Solicitante
          --DBMS_OUTPUT.PUT_LINE('P1.NRAUTORIZACAO/NRSEQ_COMPLEMENTO/VAREAACAOREQ: ' || a.nrautorizacao || '/' || a.nrseq_complemento || '/' || vareaacaoreq);
          begin
            select 'S' into vaoachou
              from preserv pr, prestador p
             where pr.cd_prestador = p.cdprestador
               and p.nrregistro_prest = a.nrregistro_requisitante;

            begin

          --checar se PRESTADOR SOLICITANTE existe na PRESERV e setar default caso necessario.
              select NVL(ac.CDAREAACAO, PR_req.CDPRESTADOR) cdprestador_req,
                     nvl2(ac.cdareaacao, ac.cdareaacao, pp.vlparametro) cdareaacao,
                     p.nopessoa,

                     nvl(nvl((select d.cd_especialidade_totvs
                           from depara_especialidade d
                          where d.cdespecialidade_unicoo = e.cdespecialidade),
                         pr_req.cdespecial_predom),PCDESPECIALIDADE), --pr.cdespecial_predom,

                     --%%%e.cdptu,
                     nvl(c.cod_totvs,cc.cdcbo_atual),
                     substr(pr_req.cdconselho_prof,1,5),
                     pr_req.nrconselho_prof,
                     pr_req.cdestado_crm
                into vcdprestadorreq,
                     vareaacaoreq,
                     vnoprestadorreq,
                     vcdespecialidadereq,
                     vcdcboreq,
                     vcdconselhoprofreq,
                     vnrconselhoprofreq,
                     vcdestadocrmreq
                from pessoa               p,
                     prestador            pr_req,
                     especialidade        e,
                     area_de_acao         ac,
                     parametro            pp,
                     unicoogps.depara_cbo c,
                     cbo                  cc
               where p.nrregistro(+) = pr_req.nrregistro_prest
                 and pr_req.cdespecial_predom = e.cdespecialidade
                 and pr_req.nrregistro_prest(+) = a.nrregistro_requisitante
                 and pr_req.cdprestador = ac.cdprestador(+)
                 and e.cdcbo = cc.cdcbo
                 and cc.cdcbo_atual = c.cod_unicoo(+)
                 and pp.cdparametro = 'NRUNIMED'
                 and rownum = 1;

              --DBMS_OUTPUT.PUT_LINE('P2.NRAUTORIZACAO/NRSEQ_COMPLEMENTO/VAREAACAOREQ: ' || a.nrautorizacao || '/' || a.nrseq_complemento ||
              --'/' || vareaacaoreq);

            exception
              when no_data_found then
                vcdprestadorreq            := pcdprestador;
                vareaacaoreq               := vnrunimed;
                vnoprestadorreq            := pnoprestador;
                vcdespecialidadereq        := pcdespecialidade; --%%%p1
                vcdconselhoprofreq         := pcdconselhoprof;
                vnrconselhoprofreq         := pnrconselhoprof;
                vcdestadocrmreq            := pcdestadocrm;
                a.cdarea_acao_requisitante := vnrunimed;

--DBMS_OUTPUT.PUT_LINE('P3.NRAUTORIZACAO/NRSEQ_COMPLEMENTO/VAREAACAOREQ: ' || a.nrautorizacao || '/' || a.nrseq_complemento ||
--'/' || vareaacaoreq);

              when others then
                p_insere_falha(vnrcontrolemigracao,
                               'AU',
                               'Erro ao pesquisar Prestador Solicitante ' ||
                               nvl(a.nrregistro_medico_solicitante,
                                   a.nrregistro_requisitante) ||
                               ' (NRREGISTRO_MEDICO_SOLICITANTE ou NRREGISTRO_REQUISITANTE) da autorização.',
                               'Verificar o cadastro do prestador (Tabela PRESTADOR) informado na autorização (Tabela AUTORIZACAO).' ||
                               ' Complemento: ' || a.nrseq_complemento,
                               a.nrautorizacao);
                vcdsituacao := 'ER';
            end;

          exception
            when no_data_found then
              vareaacaoreq          := vnrunimed;
              vcdprestadorreq            := pcdprestador;
              vnoprestadorreq            := pnoprestador;
              vcdespecialidadereq        := pcdespecialidade;
              vcdconselhoprofreq         := pcdconselhoprof;
              vnrconselhoprofreq         := pnrconselhoprof;
              vcdestadocrmreq            := pcdestadocrm;
              a.cdarea_acao_requisitante := vnrunimed;

            when others then
              p_insere_falha(vnrcontrolemigracao,
                             'AU',
                             'Prestador Solicitante nao existe no GP (PRESERV). NRREGISTRO_SOLICITANTE: ' ||
                             a.nrregistro_requisitante,
                             'Verificar o cadastro do prestador (Tabela PRESTADOR) informado na autorização (Tabela AUTORIZACAO).' ||
                             ' Complemento: ' || a.nrseq_complemento,
                             a.nrautorizacao);
              vcdsituacao := 'ER';
          end;

          -- buscar dados do Prestador Executante
          vcdmedicoexec := null;
          vareaacaoexec := null;

          if a.cdmedico is not null then
            --checar se PRESTADOR EXECUTANTE existe na PRESERV e setar default caso necessario.
            begin
              select 'S' into vaoachou
                from preserv pr
               where pr.cd_prestador = a.cdmedico;

              begin
                select nvl(ac.cdareaacao, pr.cdprestador),
                       nvl(ac.cdareaacao, pnrunimed)
                  into vcdmedicoexec, vareaacaoexec
                  from prestador     pr,
                       pessoa        p,
                       especialidade e,
                       area_de_acao  ac,
                       parametro     pp,
                       preserv       pv
                 where pr.nrregistro_prest = p.nrregistro
                   and pr.cdprestador = a.cdmedico
                   and pr.cdespecial_predom = e.cdespecialidade
                   and pr.cdprestador = ac.cdprestador(+)
                   and pp.cdparametro = 'NRUNIMED'
                   and pv.cd_unidade  = nvl(ac.cdareaacao, pnrunimed)
                   and pv.cd_prestador = nvl(ac.cdareaacao, pr.cdprestador)
                   and rownum = 1;
              exception
                when no_data_found then
                  vcdmedicoexec := pcdprestador;
                  vareaacaoexec := pnrunimed;
                when others then
                  p_insere_falha(vnrcontrolemigracao,
                                 'AU',
                                 'Erro ao pesquisar Médico ' || a.cdmedico ||
                                 ' (CDMEDICO)',
                                 'Verificar o cadastro do prestador (Tabela PRESTADOR) informado na autorização (Tabela AUTORIZACAO).' ||
                                 ' nrseq_complemento/autorizacao: ' || a.nrseq_complemento || '/' || a.nrautorizacao,
                                 a.nrautorizacao);

                  vcdsituacao := 'ER';
              end;
            exception
              when no_data_found then
                  vcdmedicoexec := pcdprestador;
                  vareaacaoexec := pnrunimed;

              when others then
                p_insere_falha(vnrcontrolemigracao,
                               'AU',
                               'Prestador Executante nao existe no GP (PRESERV). CDMEDICO: ' ||
                               a.cdmedico,
                               'Verificar o cadastro do prestador (Tabela PRESTADOR) informado na autorização (Tabela AUTORIZACAO).' ||
                               ' Complemento: ' || a.nrseq_complemento,
                               a.nrautorizacao);
                vcdsituacao := 'ER';
            end;
          else
            vcdmedicoexec := vcdprestador;
            vareaacaoexec := vareaacaoprest;
          end if;

          vdesintercam := '';

          if a.cdarea_acao_prestador <> vnrunimed then
            vcdprestador     := a.cdarea_acao_prestador;
            vcdespecialidade := pcdespecialidade;
          end if;

          if a.cdarea_acao_requisitante <> vnrunimed then
            vcdprestadorreq     := a.cdarea_acao_requisitante;
            vcdespecialidadereq := pcdespecialidade; --%%%p2
    --DBMS_OUTPUT.PUT_LINE('%%%P2');
          end if;

          begin
            select 1
              into vlocal
              from gp.tip_guia t
             where t.cd_tipo_guia = a.cd_tipo_guia
               and t.lgtratalocalautorizacao = 1;
          exception
            when no_data_found then
              vlocal := 0;
          end;

  --          begin
  --            select 'S'
  --              into vaomigrado
  --              from import_guia_histor i
  --             where i.val_seq_guia = vnrsqimportguia;
  --          exception
  --            when no_data_found then

              begin
                insert into unicoogps.import_guia_histor
                  (val_seq_guia,
                   val_seqcial,
                   in_lib_guias_alt,
                   cd_userid_alt,
                   dt_alt,
                   progress_recid)
                values
                  (vnrsqimportguia,
                   sq_import_guia_histor.nextval,
                   a.cdsituacao,
                   'MIGRACAO',
                   nvl(a.dtaprovacao, a.dtdigitacao), --data utilizada para calculo da validade
                   sq_import_guia_histor.currval);
              exception
                -- se já existe, não é erro.
                when dup_val_on_index then
                     null;
                when others then
                  p_insere_falha(vnrcontrolemigracao,
                                 'AU',
                                 'Erro ao inserir import_guia_histor.',
                                 'Verificar estrutura da tabela e os dados da autorização. ' ||
                                 ' Complemento: ' || a.nrseq_complemento,
                                 a.nrautorizacao);
                  vcdsituacao := 'ER';
              end;
  --          end;

          if (a.aourgencia = 'S' or a.aoemergencia = 'S') then
            vcdcaratersolic := 'U';
          else
            vcdcaratersolic := 'E';
          end if;

          if (a.cdtipo_guia_tiss = 'E') then --Exames
            begin
              select 'S'
                into vaomigrado
                from import_guia_sadt i
               where i.val_seq_import = vnrsqimportguia;
            exception
              when no_data_found then
                select sq_import_guia_sadt.nextval
                  into vnrsqimportguiasadt
                  from dual;

                begin
                  if vcdmedicoexec is not null then

                    begin
                      select nvl(d.cd_especialidade_totvs, e.cdespecialidade)
                        into vcdespecialidade
                        from especialista         es,
                             especialidade        e,
                             prestador            pr,
                             depara_especialidade d
                       where pr.nrregistro_prest = es.nrregistro_prest
                         and es.cdespecialidade = e.cdespecialidade
                         and pr.cdespecial_predom = e.cdespecialidade
                         and d.cdespecialidade_unicoo(+) = e.cdespecialidade
                         and pr.cdprestador = vcdmedicoexec;
                    exception
                      when others then
                        vcdespecialidade := pcdespecialidade;
                    end;

                  end if;

                  insert into unicoogps.import_guia_sadt
                    (val_seqcial,
                     val_seq_import,
                     ind_carac_solicit,
                     des_indic_clinic,
                     cd_prest_exec,
                     cd_unidade_exec,
                     cd_especialid_exec,
                     ind_tip_atendim,
                     ind_tip_acid,
                     ind_tip_con,
                     progress_recid)
                  values
                    (vnrsqimportguiasadt,
                     vnrsqimportguia,
                     vcdcaratersolic,
                     nvl(a.txindicacao_clinica,'.'),
                     nvl(vcdmedicoexec, vcdprestador),
                     nvl(vareaacaoexec, a.cdarea_acao_prestador),
                     vcdespecialidade,
                     nvl(decode(a.cdtipo_atendimento_tiss,
                                '00',
                                '01',
                                a.cdtipo_atendimento_tiss),
                         decode(a.cdtipo_guia, 1, '04', 2, '05', 3, '07')),
                     nvl(a.cdtipo_acidente, 9),
                     nvl(a.cdtipo_consulta, 0),
                     vnrsqimportguiasadt);
                exception
                  when others then
                    p_insere_falha(vnrcontrolemigracao,
                                   'AU',
                                   'Erro ao inserir import_guia_sadt.',
                                   'Verificar estrutura da tabela e os dados da autorização. ' ||
                                   ' Complemento: ' || a.nrseq_complemento,
                                   a.nrautorizacao);
                    vcdsituacao := 'ER';
                end;
            end; --begin/exception
          end if; --Exames

          if (a.cdtipo_guia_tiss = 'C') then

            begin
              select 'S'
                into vaomigrado
                from import_guia_con i
               where i.num_seq_import = vnrsqimportguia;
            exception
              when no_data_found then

                select sq_import_guia_con.nextval
                  into vnrsqimportguiacon
                  from dual;

                begin
                  insert into unicoogps.import_guia_con
                    (num_seqcial_guia,
                     num_seq_import,
                     cd_unidade_exec,
                     cd_prestador_exec,
                     cd_especialid_exec,
                     in_acidente,
                     dat_atendim,
                     ind_tip_con,
                     progress_recid)
                  values
                    (vnrsqimportguiacon,
                     vnrsqimportguia,
                     nvl(vareaacaoexec,a.cdarea_acao_prestador),
                     vcdprestador,
                     vcdespecialidade,
                     nvl(a.cdtipo_acidente, 9),
                     a.dtrequisicao,
                     nvl(a.cdtipo_consulta, 1),
                     vnrsqimportguiacon);
                exception
                  when others then
                    p_insere_falha(vnrcontrolemigracao,
                                   'AU',
                                   'Erro ao inserir import_guia_con.',
                                   'Verificar estrutura da tabela e os dados da autorização. ' ||
                                   ' Complemento: ' || a.nrseq_complemento,
                                   a.nrautorizacao);
                    vcdsituacao := 'ER';
                end;
            end;
          end if;

          if (a.cdtipo_guia_tiss = 'I') then

            begin
              select 'S'
                into vaomigrado
                from import_guia_intrcao i
               where i.num_seq_import = vnrsqimportguia;
            exception
              when no_data_found then

                select sq_import_guia_intrcao.nextval
                  into vnrsqimportguiaintrcao
                  from dual;

                begin
                  select sum(sa.qtservico_solicitado)
                    into vqtdiariasolic
                    from servico_da_autorizacao sa, servico s
                   where sa.nrautorizacao = a.nrautorizacao
                     and sa.cdservico = s.cdservico
                     and s.cdclasse = pclasdia;
                exception
                  when others then
                    p_insere_falha(vnrcontrolemigracao,
                                   'AU',
                                   'Erro ao pesquisar quantidade de diárias solicitadas. ' ||
                                   ' Classe: ' || pclasdia,
                                   'Verificar estrutura da tabela e os dados da autorização. ' ||
                                   ' Complemento: ' || a.nrseq_complemento,
                                   a.nrautorizacao);
                    vqtdiariasolic := null;
                    vcdsituacao    := 'ER';
                end;

                begin
                  insert into unicoogps.import_guia_intrcao
                    (num_seqcial_guia,
                     num_seq_import,
                     cd_unidade_exec,
                     cd_prestador_exec,
                     cd_especialid_exec,
                     dt_internacao,
                     cod_caract_atendim,
                     cdn_tip_inter,
                     cod_regim_intrcao,
                     qtd_diaria_solicitad,
                     log_opme,
                     log_quimio,
                     des_indcao_clinic,
                     cod_cid_princ,
                     cod_cid_2,
                     cod_cid_3,
                     cod_cid_4,
                     idi_acid,
                     num_livre_1,
                     progress_recid,
                     num_livre_7,
                     num_livre_8,
                     num_livre_9,
                     num_livre_10)
                  values
                    (vnrsqimportguiaintrcao,
                     vnrsqimportguia,
                     nvl(vareaacaoexec,a.cdarea_acao_prestador),
                     nvl(vcdmedicoexec, vcdprestador),
                     vcdespecialidade,
                     nvl(nvl(a.dtinternacao, a.dtrequisicao),a.dtdigitacao),
                     vcdcaratersolic,
                     nvl(decode(a.cdtipo_internacao,
                            6,
                            1,
                            7,
                            1,
                            a.cdtipo_internacao),1), --cdn_tip_inter
                     nvl(a.cdregime_internacao,1),
                     vqtdiariasolic,
                     decode(a.aoprevisaoopme, 'S', 1, 0),
                     decode(a.aoprevisaoquimioterapico, 'S', 1, 0),
                     nvl(a.txindicacao_clinica,decode(a.txindicacao_clinica,null,'.',' ','.')),
                     nvl(a.cdcid,' '),
                     nvl(a.cdcid_2,' '),
                     nvl(a.cdcid_3,' '),
                     nvl(a.cdcid_4,' '),
                     nvl(a.cdtipo_acidente, 0),
                     nvl(a.cdtipo_atendimento_tiss,decode(a.cdtipo_guia, 1, '04', 2, '05', 3, '07')),
                     import_guia_intrcao_seq.nextval,
                     a.cd_transacao,
                     a.cd_tipo_guia,
                     a.aa_guia_autorizacao,
                     a.nr_guia_autorizacao);
                exception
                  when others then
                    p_insere_falha(vnrcontrolemigracao,
                                   'AU',
                                   'Erro ao inserir import_guia_intrcao.',
                                   'Verificar estrutura da tabela e os dados da autorização. ' ||
                                   ' Complemento: ' || a.nrseq_complemento,
                                   a.nrautorizacao);
                    vcdsituacao := 'ER';
                end;
            end;
          end if;

          if (a.cdtipo_guia_tiss in ('O', 'Q', 'R')) then

            begin

              select 'S'
                into vaomigrado
                from import_anexo_solicit i
               where i.num_seq_import = vnrsqimportguia;
            exception
              when no_data_found then

                select sq_import_anexo_solicit.nextval
                  into vnrsqimportanexosolicit
                  from dual;
                begin
                  insert into unicoogps.import_anexo_solicit
                    (num_seqcial,
                     num_seq_import,
                     ind_tip_anexo,
                     nr_telefone,
                     nom_email,
                     cod_livre_10,
                     progress_recid)
                  values
                    (vnrsqimportanexosolicit,
                     vnrsqimportguia,
                     decode(a.cdtipo_guia_tiss, 'Q', 1, 'R', '2', 'O', 3),
                     null,
                     null,
                     null,
                     vnrsqimportanexosolicit);
                exception
                  when others then
                    p_insere_falha(vnrcontrolemigracao,
                                   'AU',
                                   'Erro ao inserir import_anexo_solicit.',
                                   'Verificar estrutura da tabela e os dados da autorização. ' ||
                                   ' Complemento: ' || a.nrseq_complemento,
                                   a.nrautorizacao);
                    vcdsituacao := 'ER';

                end;
                if (a.cdtipo_guia_tiss = 'O') then

                  begin
                    insert into unicoogps.import_anexo_opme
                      (num_seqcial,
                       num_seqcial_import_anexo,
                       des_justificativa,
                       des_especif_mater,
                       cod_livre_1,
                       cod_livre_3,
                       cod_livre_4,
                       progress_recid)
                    values
                      (sq_import_anexo_opme.nextval,
                       vnrsqimportanexosolicit,
                       nvl(a.txjustificativa_tecnica,'.'),
                       nvl(a.txespecificacao_material,'.'),
                       ' ',
                       ' ',
                       ' ',
                       import_anexo_opme_seq.nextval);
                  exception
                    when others then
                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao inserir import_anexo_opme.',
                                     'Verificar estrutura da tabela e os dados da autorização. ' ||
                                     'Complemento: ' || a.nrseq_complemento,
                                     a.nrautorizacao);
                      vcdsituacao := 'ER';
                  end;
                end if;

                if (a.cdtipo_guia_tiss = 'Q') then
                  begin
                    insert into unicoogps.import_anexo_quimio
                      (num_seqcial,
                       num_seqcial_import_anexo,
                       val_peso_bnfciar,
                       val_alt_bnfciar,
                       val_sup_cor_bnfciar,
                       dat_diag,
                       cod_cid_princ,
                       cod_cid_2,
                       cod_cid_3,
                       cod_cid_4,
                       cod_estag,
                       ind_finalid_tratam,
                       ind_tip_quimio,
                       cod_classif_capac_funcnal,
                       des_plano_terap,
                       des_diag,
                       des_inform,
                       des_cirurgia_ant,
                       dt_realizacao,
                       des_area,
                       dat_aplic_radio,
                       num_ciclo,
                       num_ciclo_atual,
                       num_interv_ciclo,
                       cod_livre_1,
                       cod_livre_3,
                       cod_livre_4,
                       progress_recid)
                    values
                      (sq_import_anexo_quimio.nextval, /*num_seqcial*/
                       vnrsqimportanexosolicit, /*num_seqcial_import_anexo*/
                       a.nrpeso, /*val_peso_bnfciar*/
                       a.nraltura, /*val_alt_bnfciar*/
                       a.nrsuperficie_corporal, /*val_sup_cor_bnfciar*/
                       a.dtdiagnostico_quimio, /*dat_diag*/
                       a.cdcid, /*cod_cid_princ*/
                       a.cdcid_2,
                       a.cdcid_3,
                       a.cdcid_4,
                       a.cdestadiamento_tumor, /*cod_estag*/
                       a.cdfinalidade_tratamento, /*ind_finalid_tratam*/
                       a.tpquimioterapia, /*ind_tip_quimio*/
                       a.cdescala_cap_funcional, /*cod_classif_capac_funcnal*/
                       a.txplano_terapeutico, /*des_plano_terap*/
                       a.txdiag_cipa_histo, /*des_diag*/
                       a.txinfo_relevantes, /*des_inform*/
                       a.txcirurgia_anterior, /*des_cirurgia_ant*/
                       a.dtcirurgia_anterior, /*dt_realizacao*/
                       a.txarea_irradiada_anterior, /*des_area*/
                       a.dtprevista_inicio, /*dat_aplic_radio*/
                       a.nrciclo_quimio, /*num_ciclo*/
                       a.nrciclo_quimio_atual, /*num_ciclo*/
                       a.nrdias_entre_ciclos, /*num_interv_ciclo*/
                       null, /*cod_livre_1*/
                       null, /*cod_livre_3*/
                       null,
                       import_anexo_quimio_seq.nextval); /*cod_livre_4*/
                  exception
                    when others then
                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao inserir import_anexo_quimio.',
                                     'Verificar estrutura da tabela e os dados da autorização. ' ||
                                     'Complemento: ' || a.nrseq_complemento,
                                     a.nrautorizacao);
                      vcdsituacao := 'ER';
                  end;
                end if;

                if (a.cdtipo_guia_tiss = 'R') then
                  begin
                    insert into unicoogps.import_anexo_radio
                      (num_seqcial,
                       num_seqcial_import_anexo,
                       dat_diag,
                       cod_cid_princ,
                       cod_cid_2,
                       cod_cid_3,
                       cod_cid_4,
                       cdn_diag_img,
                       cod_estag,
                       ind_finalid_tratam,
                       cod_classif_capac_funcnal,
                       des_diag,
                       des_inform,
                       des_cirurgia_ant,
                       dat_realiz,
                       des_quimio,
                       dat_aplic,
                       qti_campos,
                       qtd_dosag_diaria,
                       qtd_dosag_tot,
                       num_dias,
                       dat_inic_adm,
                       cod_livre_1,
                       cod_livre_3,
                       cod_livre_4,
                       progress_recid)
                    values
                      (sq_import_anexo_radio.nextval, /*num_seqcial*/
                       vnrsqimportanexosolicit, /*num_seqcial_import_anexo*/
                       a.dtdiagnostico_radio, /*dat_diag*/
                       a.cdcid, /*cod_cid_princ*/
                       a.cdcid_2,
                       a.cdcid_3,
                       a.cdcid_4,
                       a.cddiagnostico_imagem, /*cdn_diag_img*/
                       a.cdestadiamento_tumor, /*cod_estag*/
                       a.cdfinalidade_tratamento, /*ind_finalid_tratam*/
                       a.cdescala_cap_funcional, /*cod_classif_capac_funcnal*/
                       a.txdiag_cipa_histo, /*des_diag*/
                       a.txinfo_relevantes, /*des_inform*/
                       a.txcirurgia_anterior, /*des_cirurgia_ant*/
                       a.dtcirurgia_anterior, /*dt_realizacao*/
                       a.txquimioterapia_anterior, /*des_quimio*/
                       a.dtquimioterapia_anterior, /*dat_aplic*/
                       a.nrcampo_irradiacao, /*qti_campos*/
                       a.nrdose_radio_dia, /*qtd_dosag_diaria*/
                       a.nrdose_radio_total, /*qtd_dosag_tot*/
                       a.nrdias_prev_radioterapia, /*num_dias*/
                       a.dtprevista_inicio, /*dat_inic_adm*/
                       ' ', /*cod_livre_1*/
                       ' ', /*cod_livre_3*/
                       ' ',
                       import_anexo_radio_seq.nextval); /*cod_livre_4*/
                  exception
                    when others then
                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao inserir import_anexo_radio.',
                                     'Verificar estrutura da tabela e os dados da autorização. ' ||
                                     'Complemento: ' || a.nrseq_complemento,
                                     a.nrautorizacao);
                      vcdsituacao := 'ER';
                  end;
                end if;

            end;

          end if;

          if (a.cdtipo_guia_tiss = 'E') then
            vindtipguia := 'SADT';
          elsif (a.cdtipo_guia_tiss = 'C') then
            vindtipguia := 'CONS';
          elsif (a.cdtipo_guia_tiss = 'I') then
            vindtipguia := 'INTE';
          elsif (a.cdtipo_guia_tiss = 'Q') then
            vindtipguia := 'QUIM';
          elsif (a.cdtipo_guia_tiss = 'R') then
            vindtipguia := 'RADI';
          elsif (a.cdtipo_guia_tiss = 'O') then
            vindtipguia := 'OPME';
          end if;

          vaoanexoquimioinc := false;
          vaoanexoradioinc  := false;
          vaoanexoopmeinc   := false;

          for sa in c_servico_autorizacao(a.nrseq_serv_autorizacao) loop
            begin
              select 'S'
                into vaomigrado
                from gp.import_guia_movto m
               where m.num_livre_5 = a.nrseq_serv_autorizacao;
            exception
              when no_data_found then
                vnrglosa := null;
                for oa in c_ocorrencia_autorizacao(sa.nrocorrencia) loop
                  begin
                    select re.cdvalor_externo
                      into vnrglosa
                      from mig_tab_conversao_exp re, mig_tab_conversao r
                     where re.nrseq_tab_conversao = r.nrseq
                       and r.notabela = 'MIGRACAO_GLOSA'
                       and re.cdvalor_interno = oa.cdocorrencia;

                    exit;

                  exception
                    when no_data_found then
                      vnrglosa := pCD_GLOSA_DEFAULT;
                    when others then
                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao pesquisar De/para da glosa da autorização: ' ||
                                     oa.cdocorrencia ||
                                     ' Através da tabela de conversão MIGRACAO_GLOSA.',
                                     'Verificar cadastro de de/para. ' ||
                                     'Complemento: ' || a.nrseq_complemento,
                                     a.nrautorizacao);
                      vcdsituacao := 'ER';
                  end;
                end loop;

                select gp.import_guia_movto_seq.nextval
                  into vnrsqimportguiamovto
                  from dual;

                begin
                  select cdclasse
                    into vcdclasse
                    from servico
                   where cdservico = sa.cdservico_refer;
                exception
                  when others then
                    p_insere_falha(vnrcontrolemigracao,
                                   'AU',
                                   'Erro ao pesquisar classe de serviço do serviço.',
                                   'Verificar cadastro do serviço. ' ||
                                   'Servico: ' || sa.cdservico_refer || ' nrseq_complemento: ' || a.nrseq_complemento,
                                   a.nrautorizacao);
                    vcdclasse   := null;
                    vcdsituacao := 'ER';
                end;

                -- checar se é insumo
                if ((pclsmater like '%' || vcdclasse || '%') or
                   (pclsmedic like '%' || vcdclasse || '%') or
                   (pcltaxa like '%' || vcdclasse || '%') or
                   (pclasdia like '%' || vcdclasse || '%')) then
                  vindtpmovtoguia := 'I';
                else
                  vindtpmovtoguia := 'P';
                end if;

    --linha abaixo comentada em 09/06, pois poderia perder erros registrados acima
                --vcdsituacao := 'RC';

                --Procura estrutura do benef
                if a.nrarea_acao = pnrunimed then
                  -- BENEFICIARIO DA BASE
                  begin
                    select p.cd_modalidade, p.cd_plano, p.cd_tipo_plano
                      into vcdmodalidade, vcd_plano, vcd_tipo_plano
                      from usuario u, import_bnfciar ib, import_propost p
                     where ib.num_seqcial_bnfciar = u.nrsequencial_usuario
                       and ib.nr_contrato_antigo = p.nr_contrato_antigo --p.u##nr_contrato_antigo
                       and nvl(ib.cod_livre_2, ' ') <> 'A'
                       and rownum = 1;
                  exception
                    when no_data_found then

                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao pesquisar Beneficiario: Contrato' ||
                                     a.nrcontrato || ' Familia ' || a.nrfamilia ||
                                     ' Uusario ' || a.tpusuario,
                                     'Verificar beneficiario na import_bnfciar. ',
                                     a.nrautorizacao);
                      vcdmodulo   := null;
                      vcdsituacao := 'ER';
                  end;
                else
                  -- BENEFICIÁRIO DE FORA SENDO ATENDIDO NA BASE DA UNIMED
                  begin
                    select un.cd_modalidade, un.cd_plano, un.cd_tipo_plano
                      into vcdmodalidade, vcd_plano, vcd_tipo_plano
                      from unicamco un
                     where un.cd_unidade = a.nrarea_acao
                       and un.dt_limite >= trunc(sysdate)
                       and rownum = 1;
                  exception
                    when no_data_found then
                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao pesquisar area de acao de Beneficiario de Intercambio.',
                                     'Verificar tabela Unicamco. Unidade: ' || a.nrarea_acao,
                                     a.nrautorizacao);
                      vcdmodulo   := null;
                      vcdsituacao := 'ER';

                  end;
                end if;

                if vcdsituacao = 'RC' then

                  if vindtpmovtoguia = 'P' then
                    --checar se o procedimento existe na AMBPROCE
                    begin
                      select 'S' into vachou
                        from ambproce amb
                       where amb.cdprocedimentocompleto = sa.cdservico_refer
                         and rownum = 1;

                      begin
                        select p.cd_modulo
                          into vcdmodulo
                          from pl_mo_am p, ambproce amb, trmodamb t
                         where t.cd_esp_amb = amb.cd_esp_amb
                           and t.cd_grupo_proc_amb = amb.cd_grupo_proc_amb
                           and t.cd_procedimento = amb.cd_procedimento
                           and t.dv_procedimento = amb.dv_procedimento
                           and p.cd_amb = amb.cdprocedimentocompleto
                           and amb.cdprocedimentocompleto = sa.cdservico_refer
                           and p.cd_modulo = t.cd_modulo
                           and t.cd_transacao = a.cd_transacao
                           and p.cd_modalidade = vcdmodalidade
                           and p.cd_plano = vcd_plano
                           and p.cd_tipo_plano = vcd_tipo_plano
                           and rownum = 1;
                      exception
                        when others then
                          -- se não achou PL_MO_AM (cobertura normal), procurar cobertura PADRÃO antes de apresentar erro.
                          begin
                            select p.cd_modulo
                              into vcdmodulo
                              from plamodpr p, trmodamb t, ambproce amb
                             where p.u##in_procedimento_insumo = 'P'
                               and t.cd_esp_amb = amb.cd_esp_amb
                               and t.cd_grupo_proc_amb = amb.cd_grupo_proc_amb
                               and t.cd_procedimento = amb.cd_procedimento
                               and t.dv_procedimento = amb.dv_procedimento
                               and amb.cdprocedimentocompleto =
                                   sa.cdservico_refer
                               and p.cd_modulo = t.cd_modulo
                               and t.cd_transacao = a.cd_transacao
                               and p.cd_modalidade = vcdmodalidade
                               and p.cd_plano = vcd_plano
                               and p.cd_tipo_plano = vcd_tipo_plano
                               and rownum = 1;
                          exception
                            when others then

                              p_insere_falha(vnrcontrolemigracao,
                                             'AU',
                                             'Erro ao pesquisar Modulo para Transação x Modulo x Procedimento.',
                                             'Servico: ' || sa.cdservico_refer
                                             --|| ' Transacao: ' ||
                                             --a.cd_transacao || ' Beneficiario: ' ||
                                             --a.nrcontrato ||
                                             --lpad(a.nrfamilia, 6, '0') ||
                                             --lpad(a.tpusuario, 2, 0) ||
                                             --a.nrdigito ||
                                             --' Seq.Complemento: ' ||
                                             --a.nrseq_complemento
                                             ,
                                             a.nrautorizacao);
                              vcdsituacao := 'ER';
                              vcdmodulo := null;

                          end;
                      end;
                    exception
                      when no_data_found then
                        p_insere_falha(vnrcontrolemigracao,
                                       'AU',
                                       'Procedimento nao encontrado (AMBPROCE).',
                                       'Procedimento: ' || sa.cdservico_refer,
                                       a.nrautorizacao);
                        vcdsituacao := 'ER';
                        vcdmodulo := null;
                    end;

                  else -- EH INSUMO
                    --checar se o insumo existe na INSUMOS
                    begin
                      select 'S' into vachou
                        from insumos ins
                       where ins.cd_insumo = sa.cdservico_refer
                         and rownum = 1;

                      begin
                          select p.cd_modulo
                            into vcdmodulo
                            from partinsu p, insumos ins, trmodtpi t
                           where p.cd_modalidade = vcdmodalidade
                             and p.cd_plano = vcd_plano
                             and p.cd_tipo_plano = vcd_tipo_plano
                             and p.cd_tipo_insumo = ins.cd_tipo_insumo
                             and p.cd_modulo = t.cd_modulo
                             and t.cd_tipo_insumo = p.cd_tipo_insumo
                             and t.cd_transacao = a.cd_transacao
                             and ins.cd_insumo = sa.cdservico_refer
                             and rownum = 1;
                        exception
                          when others then
                            -- se não achou PARTINSU (cobertura normal), procurar cobertura PADRÃO antes de apresentar erro.
                            begin
                              select p.cd_modulo
                                into vcdmodulo
                                from plamodpr p, insumos ins, trmodtpi t
                               where p.cd_modalidade = vcdmodalidade
                                 and p.cd_plano = vcd_plano
                                 and p.cd_tipo_plano = vcd_tipo_plano
                                 and p.u##in_procedimento_insumo = 'I'
                                 and p.cd_modulo = t.cd_modulo
                                 and t.cd_transacao = a.cd_transacao
                                 and ins.cd_insumo = sa.cdservico_refer
                                 and ins.cd_tipo_insumo = t.cd_tipo_insumo
                                 and rownum = 1;
                            exception
                              when others then
                                p_insere_falha(vnrcontrolemigracao,
                                               'AU',
                                               'Erro ao pesquisar Modulo para TransaçãoxModuloxInsumo.',
                                               'Servico: ' || sa.cdservico_refer
                                               --|| ' Transacao: ' ||
                                               --a.cd_transacao || ' Beneficiario: ' ||
                                               --a.nrcontrato ||
                                               --lpad(a.nrfamilia, 6, '0') ||
                                               --lpad(a.tpusuario, 2, 0) ||
                                               --a.nrdigito ||
                                               --' Seq.Complemento: ' ||
                                               --a.nrseq_complemento
                                               ,
                                               a.nrautorizacao);
                                vcdsituacao := 'ER';
                                vcdmodulo := null;
                            end;
                        end;
                    exception
                      when no_data_found then
                        p_insere_falha(vnrcontrolemigracao,
                                       'AU',
                                       'Insumo nao encontrado (INSUMOS).',
                                       'Insumo: ' || sa.cdservico_refer,
                                       a.nrautorizacao);
                        vcdsituacao := 'ER';
                        vcdmodulo := null;
                    end;

                  end if;

                end if;

                if (vindtipguia = 'SADT') then
                  begin
                    select igs.val_seqcial
                      into vnrseq_guia
                      from import_guia_sadt igs
                     where igs.val_seq_import = vnrsqimportguia;
                  exception
                    when others then
                      null;
                  end;
                elsif (vindtipguia = 'CONS') then
                  begin
                    select igc.num_seqcial_guia
                      into vnrseq_guia
                      from import_guia_con igc
                     where igc.num_seq_import = vnrsqimportguia;
                  exception
                    when others then
                      null;
                  end;
                elsif (vindtipguia = 'INTE') then
                  begin
                    select igi.num_seqcial_guia
                      into vnrseq_guia
                      from import_guia_intrcao igi
                     where igi.num_seq_import = vnrsqimportguia;
                  exception
                    when others then
                      null;
                  end;
                elsif (vindtipguia = 'QUIM') then
                  begin
                    select iaq.num_seqcial
                      into vnrseq_guia
                      from import_anexo_quimio iaq
                     where iaq.num_seqcial_import_anexo = vnrsqimportguia;
                  exception
                    when others then
                      null;
                  end;
                elsif (vindtipguia = 'RADI') then
                  begin
                    select iar.num_seqcial
                      into vnrseq_guia
                      from import_anexo_radio iar
                     where iar.num_seqcial_import_anexo = vnrsqimportguia;
                  exception
                    when others then
                      null;
                  end;
                elsif (vindtipguia = 'OPME') then
                  begin
                    select iao.num_seqcial
                      into vnrseq_guia
                      from import_anexo_opme iao
                     where iao.num_seqcial_import_anexo = vnrsqimportanexoopme;
                  exception
                    when others then
                      null;
                  end;
                end if;
                --vinicius fim

                begin

                  timport_guia_movrto.u##ind_tip_guia    := vindtipguia;
                  timport_guia_movrto.ind_tip_guia       := vindtipguia;
                  timport_guia_movrto.val_seqcial        := vnrsqimportguiamovto;
                  timport_guia_movrto.val_seq_guia       := vnrseq_guia;
                  timport_guia_movrto.ind_tip_movto_guia := vindtpmovtoguia;
                  timport_guia_movrto.cod_movto_guia     := sa.cdservico_refer;
                  timport_guia_movrto.qtd_solicitad      := sa.qtservico_solicitado;
                  timport_guia_movrto.qtd_autoriza       := nvl(sa.saldo,
                                                                sa.qtservico_aprovado);
                  timport_guia_movrto.val_movto_pagto    := 0;
                  timport_guia_movrto.val_taxas_adm      := 0;
                  timport_guia_movrto.val_co_partic      := 0;
                  timport_guia_movrto.cd_validacao       := '0';
                  timport_guia_movrto.cd_modulo          := vcdmodulo;
                  timport_guia_movrto.des_insumo         := sa.txservico_prestador;
                  timport_guia_movrto.ind_dente_regiao   := null;
                  timport_guia_movrto.ind_face_dente     := null;
                  timport_guia_movrto.des_opc_fabrican   := sa.nropcao_fabricante;
                  timport_guia_movrto.dat_previs         := sa.dtprovavel;
                  timport_guia_movrto.cdn_via_administ   := nvl(trim(sa.cdvia_administracao),0);
                  timport_guia_movrto.cdn_freq           := sa.nrfrequencia_diaria_doses;
                  timport_guia_movrto.cod_livre_1        := ' ';
                  timport_guia_movrto.cod_livre_2        := ' ';
                  timport_guia_movrto.cod_livre_3        := ' ';
                  timport_guia_movrto.cod_livre_4        := ' ';
                  timport_guia_movrto.cod_livre_5        := ' ';
                  timport_guia_movrto.cod_livre_6        := ' ';
                  timport_guia_movrto.cod_livre_7        := ' ';
                  timport_guia_movrto.cod_livre_8        := ' ';
                  timport_guia_movrto.cod_livre_10       := ' ';
                  timport_guia_movrto.num_livre_1        := nvl(vnrglosa, 0);

                  if vnrglosa is not null then

                    begin
                      select cd_classe_erro
                        into timport_guia_movrto.num_livre_2
                        from gp.codiglos c
                       where c.cd_cod_glo = vnrglosa;
                    exception
                      when no_data_found then
                        p_insere_falha(vnrcontrolemigracao,
                                       'AU',
                                       'Glosa nao cadastrada (CODIGLOS) com codigo: ' ||
                                       vnrglosa,
                                       'Seq.Complemento:' || a.nrseq_complemento,
                                       a.nrautorizacao);
                        vcdsituacao := 'ER';
                      when others then
                        p_insere_falha(vnrcontrolemigracao,
                                       'AU',
                                       'Erro ao tentar consultar a Glosa (CODIGLOS) com codigo: ' ||
                                       vnrglosa,
                                       'Seq.Complemento:' || a.nrseq_complemento,
                                       a.nrautorizacao);
                        vcdsituacao := 'ER';
                    end;

                    --Tipo de cobrança
                    --0 Conforme contrato / 1 Custo / 2 Cobrança por Uso Indevido
                    --3 Desconsiderar Cobrança / 4 Cobertura Intercambio
                    --5 Suspenso por validacao posterior / 6 Cobrar somente participacao
                    --7 Desconsiderar participacao / 8 Participacao intercambio
                    --9 Cobranca conforme movimento
                    timport_guia_movrto.num_livre_3 := 3;

                    --Tipo de Pagamento
                    --0 Conforme Contrato / 1 Desconsiderar Pagamento
                    timport_guia_movrto.num_livre_4 := 0;

                  else

                    timport_guia_movrto.num_livre_2 := 0;
                    timport_guia_movrto.num_livre_3 := 0;
                    timport_guia_movrto.num_livre_4 := 0;

                  end if;

                  timport_guia_movrto.num_livre_5           := a.nrseq_serv_autorizacao;
                  timport_guia_movrto.num_livre_6           := 0;
                  timport_guia_movrto.num_livre_7           := 0;
                  timport_guia_movrto.num_livre_8           := 0;
                  timport_guia_movrto.num_livre_9           := 0;
                  timport_guia_movrto.num_livre_10          := 0;
                  timport_guia_movrto.val_livre_1           := 0;
                  timport_guia_movrto.val_livre_2           := 0;
                  timport_guia_movrto.val_livre_3           := 0;
                  timport_guia_movrto.val_livre_4           := 0;
                  timport_guia_movrto.val_livre_5           := 0;
                  timport_guia_movrto.val_livre_6           := 0;
                  timport_guia_movrto.val_livre_7           := 0;
                  timport_guia_movrto.val_livre_8           := 0;
                  timport_guia_movrto.val_livre_9           := 0;
                  timport_guia_movrto.val_livre_10          := 0;
                  timport_guia_movrto.log_livre_1           := 0;
                  timport_guia_movrto.log_livre_2           := 0;
                  timport_guia_movrto.log_livre_3           := 0;
                  timport_guia_movrto.log_livre_4           := 0;
                  timport_guia_movrto.log_livre_5           := 0;
                  timport_guia_movrto.log_livre_6           := 0;
                  timport_guia_movrto.log_livre_7           := 0;
                  timport_guia_movrto.log_livre_8           := 0;
                  timport_guia_movrto.log_livre_9           := 0;
                  timport_guia_movrto.log_livre_10          := 0;
                  timport_guia_movrto.dat_livre_1           := '';
                  timport_guia_movrto.dat_livre_2           := '';
                  timport_guia_movrto.dat_livre_3           := '';
                  timport_guia_movrto.dat_livre_4           := '';
                  timport_guia_movrto.dat_livre_5           := '';
                  timport_guia_movrto.dat_livre_6           := '';
                  timport_guia_movrto.dat_livre_7           := '';
                  timport_guia_movrto.dat_livre_8           := '';
                  timport_guia_movrto.dat_livre_9           := '';
                  timport_guia_movrto.dat_livre_10          := '';
                  timport_guia_movrto.dat_ult_atualiz       := '';
                  timport_guia_movrto.hra_ult_atualiz       := ' ';
                  timport_guia_movrto.cod_usuar_ult_atualiz := ' ';

                  timport_guia_movrto.cod_livre_9 := gerar_hash_servico_da_autoriz(a.nrseq_serv_autorizacao,
                                                                                   a.nrautorizacao,
                                                                                   a.nrocorrencia);

                  select gp.import_guia_movto_seq.nextval
                    into timport_guia_movrto.progress_recid
                    from dual;

                  begin

                    insert into gp.import_guia_movto
                    values timport_guia_movrto;

                    /*
                          exception
                            when others then
                              null;
                    */
                  end;
                  p_commit;

                  /*exception
                  when others then
                    p_insere_falha(vnrcontrolemigracao,
                                   'AU',
                                   'Erro ao inserir import_guia_movto. Serviço: ' ||
                                   sa.cdservico_refer || ' Erro: ' || sqlerrm ||
                                   ' Linha: ' ||
                                   dbms_utility.format_error_backtrace,
                                   'Verificar estrutura dos dados. ',
                                   a.nrautorizacao);
                    vcdsituacao := 'ER';*/
                end;

                /* informações de anexo referentes ao ptu 5.0 online */
                if (sa.tpanexo <> '9') then

                  select sq_import_anexo_solicit.nextval
                    into vnrsqimportanexosolicit
                    from dual;

                  begin
                    insert into unicoogps.import_anexo_solicit
                      (num_seqcial,
                       num_seq_import,
                       ind_tip_anexo,
                       nr_telefone,
                       nom_email,
                       cod_livre_10,
                       progress_recid)
                    values
                      (vnrsqimportanexosolicit,
                       vnrsqimportguia,
                       sa.tpanexo,
                       nvl(nvl(a.nrtelefone_opme, a.nrtelefone_quimio),
                           a.nrtelefone_radio),
                       nvl(nvl(a.txemail_opme, a.txemail_quimio),
                           a.txemail_radio),
                       nvl(nvl(a.txobservacoes_opme, a.txobservacoes_quimio),
                           a.txobservacoes_radio),
                       import_anexo_solicit_seq.nextval);
                  exception
                    when others then
                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao inserir import_anexo_solicit.' ||
                                     ' Erro: ' || sqlerrm || ' Linha: ' ||
                                     dbms_utility.format_error_backtrace,
                                     'Verificar estrutura da tabela e os dados da autorização. ' ||
                                     'Complemento: ' || a.nrseq_complemento,
                                     a.nrautorizacao);
                      vcdsituacao := 'ER';
                  end;

                  if (sa.tpanexo = '3' and not vaoanexoopmeinc) then
                    begin
                      insert into unicoogps.import_anexo_opme
                        (num_seqcial,
                         num_seqcial_import_anexo,
                         des_justificativa,
                         des_especif_mater,
                         cod_livre_1,
                         cod_livre_3,
                         cod_livre_4,
                         progress_recid)
                      values
                        (sq_import_anexo_opme.nextval,
                         vnrsqimportanexosolicit,
                         a.txjustificativa_tecnica,
                         a.txespecificacao_material,
                         a.txnmprosolic_opme,
                         a.nrtelefone_opme,
                         a.txemail_opme,
                         import_anexo_opme_seq.nextval);
                    exception
                      when others then
                        p_insere_falha(vnrcontrolemigracao,
                                       'AU',
                                       'Erro ao inserir import_anexo_opme.' ||
                                       ' Erro: ' || sqlerrm || ' Linha: ' ||
                                       dbms_utility.format_error_backtrace,
                                       'Verificar estrutura da tabela e os dados da autorização. ' ||
                                       'Complemento: ' || a.nrseq_complemento,
                                       a.nrautorizacao);
                        vcdsituacao := 'ER';
                    end;
                    vaoanexoopmeinc := true;
                  end if;

                  if (sa.tpanexo = '1' and not vaoanexoquimioinc) then
                    begin
                      insert into unicoogps.import_anexo_quimio
                        (num_seqcial,
                         num_seqcial_import_anexo,
                         val_peso_bnfciar,
                         val_alt_bnfciar,
                         val_sup_cor_bnfciar,
                         dat_diag,
                         cod_cid_princ,
                         cod_cid_2,
                         cod_cid_3,
                         cod_cid_4,
                         cod_estag,
                         ind_finalid_tratam,
                         ind_tip_quimio,
                         cod_classif_capac_funcnal,
                         des_plano_terap,
                         des_diag,
                         des_inform,
                         des_cirurgia_ant,
                         dt_realizacao,
                         des_area,
                         dat_aplic_radio,
                         num_ciclo,
                         num_ciclo_atual,
                         num_interv_ciclo,
                         cod_livre_1,
                         cod_livre_3,
                         cod_livre_4,
                         progress_recid)
                      values
                        (sq_import_anexo_quimio.nextval, /*num_seqcial*/
                         vnrsqimportanexosolicit, /*num_seqcial_import_anexo*/
                         a.nrpeso, /*val_peso_bnfciar*/
                         a.nraltura, /*val_alt_bnfciar*/
                         a.nrsuperficie_corporal, /*val_sup_cor_bnfciar*/
                         a.dtdiagnostico_quimio, /*dat_diag*/
                         a.cdcid, /*cod_cid_princ*/
                         a.cdcid_2,
                         a.cdcid_3,
                         a.cdcid_4,
                         a.cdestadiamento_tumor, /*cod_estag*/
                         a.cdfinalidade_tratamento, /*ind_finalid_tratam*/
                         a.tpquimioterapia, /*ind_tip_quimio*/
                         a.cdescala_cap_funcional, /*cod_classif_capac_funcnal*/
                         a.txplano_terapeutico, /*des_plano_terap*/
                         a.txdiag_cipa_histo, /*des_diag*/
                         a.txinfo_relevantes, /*des_inform*/
                         a.txcirurgia_anterior, /*des_cirurgia_ant*/
                         a.dtcirurgia_anterior, /*dt_realizacao*/
                         a.txarea_irradiada_anterior, /*des_area*/
                         a.dtprevista_inicio, /*dat_aplic_radio*/
                         a.nrciclo_quimio, /*num_ciclo*/
                         a.nrciclo_quimio_atual, /*num_ciclo*/
                         a.nrdias_entre_ciclos, /*num_interv_ciclo*/
                         a.txnmprosolic_quimio, /*cod_livre_1*/
                         a.nrtelefone_quimio, /*cod_livre_3*/
                         a.txemail_quimio,
                         sq_import_anexo_quimio.nextval); /*cod_livre_4*/
                    exception
                      when others then
                        p_insere_falha(vnrcontrolemigracao,
                                       'AU',
                                       'Erro ao inserir import_anexo_quimio.' ||
                                       ' Erro: ' || sqlerrm || ' Linha: ' ||
                                       dbms_utility.format_error_backtrace,
                                       'Verificar estrutura da tabela e os dados da autorização. ' ||
                                       'Complemento: ' || a.nrseq_complemento,
                                       a.nrautorizacao);
                        vcdsituacao := 'ER';
                    end;
                    vaoanexoquimioinc := true;
                  end if;

                  if (sa.tpanexo = '2' and not vaoanexoradioinc) then
                    begin
                      insert into unicoogps.import_anexo_radio
                        (num_seqcial,
                         num_seqcial_import_anexo,
                         dat_diag,
                         cod_cid_princ,
                         cod_cid_2,
                         cod_cid_3,
                         cod_cid_4,
                         cdn_diag_img,
                         cod_estag,
                         ind_finalid_tratam,
                         cod_classif_capac_funcnal,
                         des_diag,
                         des_inform,
                         des_cirurgia_ant,
                         dat_realiz,
                         des_quimio,
                         dat_aplic,
                         qti_campos,
                         qtd_dosag_diaria,
                         qtd_dosag_tot,
                         num_dias,
                         dat_inic_adm,
                         cod_livre_1,
                         cod_livre_3,
                         cod_livre_4,
                         progress_recid)
                      values
                        (sq_import_anexo_radio.nextval, /*num_seqcial*/
                         vnrsqimportanexosolicit, /*num_seqcial_import_anexo*/
                         a.dtdiagnostico_radio, /*dat_diag*/
                         a.cdcid, /*cod_cid_princ*/
                         a.cdcid_2,
                         a.cdcid_3,
                         a.cdcid_4,
                         a.cddiagnostico_imagem, /*cdn_diag_img*/
                         nvl(a.cdestadiamento_tumor_radio,
                             a.cdestadiamento_tumor), /*cod_estag*/
                         nvl(a.cdfinalidade_tratamento_radio,
                             a.cdfinalidade_tratamento), /*ind_finalid_tratam*/
                         nvl(a.cdescala_cap_funcional_radio,
                             a.cdescala_cap_funcional), /*cod_classif_capac_funcnal*/
                         nvl(a.txdiag_cipa_histo_radio, a.txdiag_cipa_histo), /*des_diag*/
                         nvl(a.txinfo_relevantes_radio, a.txinfo_relevantes), /*des_inform*/
                         nvl(a.txcirurgia_anterior_radio, a.txcirurgia_anterior), /*des_cirurgia_ant*/
                         nvl(a.dtcirurgia_anterior_radio, a.dtcirurgia_anterior), /*dt_realizacao*/
                         a.txcirurgia_anterior, /*des_quimio*/
                         a.dtcirurgia_anterior, /*dat_aplic*/
                         a.nrcampo_irradiacao, /*qti_campos*/
                         a.nrdose_radio_dia, /*qtd_dosag_diaria*/
                         a.nrdose_radio_total, /*qtd_dosag_tot*/
                         a.nrdias_prev_radioterapia, /*num_dias*/
                         a.dtprevista_inicio, /*dat_inic_adm*/
                         a.txnmprosolic_radio, /*cod_livre_1*/
                         a.nrtelefone_radio, /*cod_livre_3*/
                         a.txemail_radio,
                         import_anexo_radio_seq.nextval); /*cod_livre_4*/
                    exception
                      when others then
                        p_insere_falha(vnrcontrolemigracao,
                                       'AU',
                                       'Erro ao inserir import_anexo_radio.' ||
                                       ' Erro: ' || sqlerrm || ' Linha: ' ||
                                       dbms_utility.format_error_backtrace,
                                       'Verificar estrutura da tabela e os dados da autorização. ' ||
                                       'Complemento: ' || a.nrseq_complemento,
                                       a.nrautorizacao);
                        vcdsituacao := 'ER';
                    end;
                    vaoanexoradioinc := true;
                  end if;

                end if;

                vnrsqimportmovtoglosa := 1;
                vnrglosa              := null;

                for oa in c_ocorrencia_autorizacao(sa.nrocorrencia) loop

                  begin
                    select o.txocorrencia
                      into vdescglosa
                      from ocorrencia o
                     where o.cdocorrencia = oa.cdocorrencia;
                  exception
                    when others then
                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao pesquisar descrição da glosa. Glosa: ' ||
                                     oa.cdocorrencia || ' Erro: ' || sqlerrm ||
                                     ' Linha: ' ||
                                     dbms_utility.format_error_backtrace,
                                     'Verificar estrutura dos dados. ' ||
                                     'Complemento: ' || a.nrseq_complemento,
                                     a.nrautorizacao);
                      vdescglosa  := null;
                      vcdsituacao := 'ER';
                  end;

                  begin
                    select re.cdvalor_externo
                      into vnrglosa
                      from mig_tab_conversao_exp re, mig_tab_conversao r
                     where re.nrseq_tab_conversao = r.nrseq
                       and r.notabela = 'MIGRACAO_GLOSA'
                       and re.cdvalor_interno = oa.cdocorrencia;
                  exception
                    when no_data_found then
                      vnrglosa := pCD_GLOSA_DEFAULT;
                    when others then
                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao pesquisar De/para da glosa da autorização: ' ||
                                     oa.cdocorrencia ||
                                     ' Através da tabela de conversão MIGRACAO_GLOSA.',
                                     'Verificar cadastro de de/para. ' ||
                                     'Complemento: ' || a.nrseq_complemento,
                                     a.nrautorizacao);
                      vnrglosa    := null;
                      vcdsituacao := 'ER';
                  end;

                  begin
                    begin
                      select c.cd_classe_erro
                        into vcdclasse
                        from gp.codiglos c
                       where c.cd_cod_glo = vnrglosa;
                    exception
                      when no_data_found then
                        p_insere_falha(vnrcontrolemigracao,
                                       'AU',
                                       '(p2)Glosa nao cadastrada (CODIGLOS) com codigo: ' ||
                                       vnrglosa,
                                       'Seq.Complemento:' || a.nrseq_complemento,
                                       a.nrautorizacao);
                        vcdsituacao := 'ER';
                      when others then
                        p_insere_falha(vnrcontrolemigracao,
                                       'AU',
                                       '(p2)Erro ao tentar consultar a Glosa (CODIGLOS) com codigo: ' ||
                                       vnrglosa,
                                       'Seq.Complemento:' || a.nrseq_complemento,
                                       a.nrautorizacao);
                        vcdsituacao := 'ER';
                    end;

                    insert into unicoogps.import_movto_glosa
                      (in_modulo,
                       u##in_modulo,
                       ind_tip_guia,
                       u##ind_tip_guia,
                       val_seqcial_movto,
                       val_seq_guia,
                       val_seqcial,
                       cd_classe_erro,
                       cd_cod_glo,
                       des_motiv_glosa,
                       progress_recid)
                    values
                      ('AT',
                       'AT',
                       vindtipguia,
                       vindtipguia,
                       vnrsqimportguiamovto,
                       vnrseq_guia,
                       vnrsqimportmovtoglosa,
                       vcdclasse,
                       vnrglosa,
                       vdescglosa,
                       import_movto_glosa_seq.nextval);
                  exception
                    when others then
                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao inserir Import_Movto_Glosa. Serviço: ' ||
                                     sa.cdservico || ' Glosa: ' ||
                                     oa.cdocorrencia || ' Erro: ' || sqlerrm ||
                                     ' Linha: ' ||
                                     dbms_utility.format_error_backtrace,
                                     'Verificar estrutura dos dados. ' ||
                                     'Complemento: ' || a.nrseq_complemento,
                                     a.nrautorizacao);
                      vcdsituacao := 'ER';
                  end;

                  vnrsqimportmovtoglosa := vnrsqimportmovtoglosa + 1;

                end loop;
            end;
          end loop;

          -- se for guia principal, VNRSQIMPORTGUIAPRINC fica nulo. Caso contrário, fará o relacionamento.
          vnrsqimportguiaprinc := null;

          if aocriar_import_guia = 'N' then
            if vcdsituacao <> 'RC' then
              update gp.import_guia ig set ig.u##ind_sit_import = vcdsituacao, ig.ind_sit_import = vcdsituacao
               where ig.num_seqcial = vnrsqimportguia;
            end if;
          else
/*          begin
            select 'S'
              into vaomigrado
              from import_guia ig
             where ig.cd_unimed           = pnrunimed
               and ig.aa_guia_atendimento = a.aa_guia_autorizacao
               and ig.nr_guia_atendimento = a.nr_guia_autorizacao
               and ig.cd_transacao = a.cd_transacao
               and ig.cd_tipo_guia = a.cd_tipo_guia;*/

    --DBMS_OUTPUT.PUT_LINE('GUIA JA EXISTE NA IMPORT_GUIA. NRAUTORIZACAO/NRSEQ_COMPLEMENTO: ' || a.nrautorizacao || '/' || a.nrseq_complemento);

          --exception
          --  when no_data_found then
              -- procurar pela guia principal
              --if (a.nrautorizacao <> a.nrseq_complemento) then
              if a.aoguia_principal = 'N' then
                begin
                  select ig.num_seqcial
                    into vnrsqimportguiaprinc
                    from import_guia ig
                   where ig.u##cod_guia_operdra = a.nrautorizacao
                     and ig.num_seqcial_princ = 0; -- guia principal fica com esse campo zerado

                exception
                  when no_data_found then
                    -- se não existir nenhum SERVICO_DA_AUTORIZACAO com NRAUTORIZACAO = NRSEQ_COMPLEMENTO, entao
                    -- considera que esse NRSEQ_COMPLEMENTO eh principal.
                    -- caso contrário, apontar o erro.
                    begin
                      select 'S' into aoexiste_principal
                        from servico_da_autorizacao s
                          where s.nrautorizacao = a.nrautorizacao
                            and s.nrseq_complemento = a.nrautorizacao
                            and rownum = 1;
                    exception
                      when others then
                        aoexiste_principal := 'N';
                    end;

                    if aoexiste_principal = 'S' then
                      p_insere_falha(vnrcontrolemigracao,
                                     'AU',
                                     'Erro ao procurar a guia principal(1). ' ||
                                     ' Erro: ' || sqlerrm || ' Linha: ' ||
                                     dbms_utility.format_error_backtrace,
                                     ' Verificar se a guia original foi migrada. ' ||
                                     'nrseq_complemento/nrautorizacao: ' || a.nrseq_complemento || '/' || a.nrautorizacao,
                                     a.nrautorizacao);
                      vcdsituacao := 'ER';
                      vnrsqimportguiaprinc := vnrsqimportguia;
                    end if;

                  when TOO_MANY_ROWS then
                    begin
                      select ig.num_seqcial
                        into vnrsqimportguiaprinc
                        from import_guia ig
                       where ig.u##cod_guia_operdra = a.nrautorizacao
                         and ig.num_seqcial_princ = 0 -- guia principal fica com esse campo zerado
                         and ig.ind_sit_guia = '2' -- AUTORIZADA
                         and rownum = 1;
                    exception
                      when others then
                        begin
                          select ig.num_seqcial
                            into vnrsqimportguiaprinc
                            from import_guia ig
                           where ig.u##cod_guia_operdra = a.nrautorizacao
                             and ig.num_seqcial_princ = 0 -- guia principal fica com esse campo zerado
                             and ig.ind_sit_guia = '9' -- EM AUDITORIA
                             and rownum = 1;
                        exception
                          when others then
                            begin
                              select ig.num_seqcial
                                into vnrsqimportguiaprinc
                                from import_guia ig
                               where ig.u##cod_guia_operdra = a.nrautorizacao
                                 and ig.num_seqcial_princ = 0 -- guia principal fica com esse campo zerado
                                 and ig.ind_sit_guia = '1' -- ABERTA
                                 and rownum = 1;
                            exception
                              when others then
                                begin
                                  select ig.num_seqcial
                                    into vnrsqimportguiaprinc
                                    from import_guia ig
                                   where ig.u##cod_guia_operdra = a.nrautorizacao
                                     and ig.num_seqcial_princ = 0 -- guia principal fica com esse campo zerado
                                     and ig.ind_sit_guia = '3' -- CANCELADA
                                     and rownum = 1;
                                exception
                                  when others then
                                    begin
                                      select ig.num_seqcial
                                        into vnrsqimportguiaprinc
                                        from import_guia ig
                                       where ig.u##cod_guia_operdra = a.nrautorizacao
                                         and ig.num_seqcial_princ = 0 -- guia principal fica com esse campo zerado
                                         and ig.ind_sit_guia = '8' -- REPROVADA
                                         and rownum = 1;
                                    exception
                                      when others then
                                        begin
                                          select ig.num_seqcial
                                            into vnrsqimportguiaprinc
                                            from import_guia ig
                                           where ig.u##cod_guia_operdra = a.nrautorizacao
                                             and ig.num_seqcial_princ = 0 -- guia principal fica com esse campo zerado
                                             and rownum = 1;
                                        exception
                                          when others then
                                            null;
                                        end;
                                    end;
                                end;
                            end;
                        end;
                    end;

                  when others then
                    p_insere_falha(vnrcontrolemigracao,
                                   'AU',
                                   'Erro ao procurar a guia principal(2). ' ||
                                   ' Erro: ' || sqlerrm || ' Linha: ' ||
                                   dbms_utility.format_error_backtrace,
                                   ' Verificar se a guia original foi migrada. ' ||
                                   'nrseq_complemento/nrautorizacao: ' || a.nrseq_complemento || '/' || a.nrautorizacao,
                                   a.nrautorizacao);
                    vcdsituacao := 'ER';
                    vnrsqimportguiaprinc := vnrsqimportguia;
                end;

    --DBMS_OUTPUT.PUT_LINE('ACHOU PRINCIPAL?: NRAUTORIZACAO/NRSEQ_COMPLEMENTO/NUM_SEQCIAL: ' || a.nrautorizacao || '/' || a.nrseq_complemento || '/' || vnrsqimportguiaprinc);

              end if;

              begin

    --DBMS_OUTPUT.PUT_LINE('INSERT IMPORT_GUIA. NRAUTORIZACAO/NRSEQ_COMPLEMENTO/NUM_SEQCIAL/NUM_SEQCIAL_PRINC: '
    --|| a.nrautorizacao || '/' || a.nrseq_complemento || '/' || vnrsqimportguia || '/' || vnrsqimportguiaprinc);

                insert into import_guia
                  (num_seqcial,
                   num_seqcial_control,
                   ind_tip_guia,
                   cod_guia_prestdor,
                   u##cod_guia_operdra,
                   cod_guia_operdra,
                   cd_carteira_usuario,
                   log_atendim_rn,
                   nom_prestdor_solic,
                   cod_cons_profis,
                   ind_nume_cons,
                   uf_conselho,
                   cdn_cbo,
                   cod_livre_1,
                   cod_livre_2,
                   cod_livre_3,
                   cod_livre_4,
                   cod_livre_5,
                   cod_livre_6,
                   cod_livre_7,
                   cod_livre_8,
                   cod_livre_9,
                   cod_livre_10,
                   num_livre_1,
                   num_livre_2,
                   num_livre_3,
                   num_livre_4,
                   num_livre_5,
                   num_livre_6,
                   num_livre_7,
                   num_livre_8,
                   num_livre_9,
                   num_livre_10,
                   val_livre_1,
                   val_livre_2,
                   val_livre_3,
                   val_livre_4,
                   val_livre_5,
                   val_livre_6,
                   val_livre_7,
                   val_livre_8,
                   val_livre_9,
                   val_livre_10,
                   log_livre_1,
                   log_livre_2,
                   log_livre_3,
                   log_livre_4,
                   log_livre_5,
                   log_livre_6,
                   log_livre_7,
                   log_livre_8,
                   log_livre_9,
                   log_livre_10,
                   dat_livre_1,
                   dat_livre_2,
                   dat_livre_3,
                   dat_livre_4,
                   dat_livre_5,
                   dat_livre_6,
                   dat_livre_7,
                   dat_livre_8,
                   dat_livre_9,
                   dat_livre_10,
                   dat_ult_atualiz,
                   hra_ult_atualiz,
                   cod_usuar_ult_atualiz,
                   ind_sit_guia,
                   cd_unimed,
                   aa_guia_atendimento,
                   nr_guia_atendimento,
                   nom_benef_intercam,
                   cd_especialidade,
                   cd_tipo_guia,
                   cd_transacao,
                   log_intercam_eletron,
                   cod_guia_unimed_intercam,
                   des_intercam,
                   u##ind_sit_import,
                   ind_sit_import,
                   num_seqcial_princ,
                   cd_unidade_carteira,
                   nr_via_carteira,
                   cd_clinica,
                   cd_unidade_principal,
                   cd_prestador_principal,
                   cd_unidade_solic,
                   cd_prestador_solic,
                   des_obs,
                   dat_solicit,
                   progress_recid)
                values
                  (vnrsqimportguia, --num_seqcial,
                   vnrcontrolemigracao, --num_seqcial_control,
                   decode(upper(a.cdtipo_guia_tiss),
                          'E',
                          'S',
                          a.cdtipo_guia_tiss), --ind_tip_guia,
                   a.nrautorizacao, --' ', --cod_guia_prestdor,

--                   a.nrseq_complemento, --u##cod_guia_operdra,
--                   a.nrseq_complemento, --cod_guia_operdra,
                   a.nrautorizacao, --u##cod_guia_operdra,
                   a.nrautorizacao, --cod_guia_operdra,

                   a.nrcontrato || lpad(a.nrfamilia, 6, '0') ||
                   lpad(a.tpusuario, 2, 0) || a.nrdigito, --cd_carteira_usuario,
                   decode(a.aorecem_nascido, 'S', 1, 0), --log_atendim_rn,
                   vnoprestadorreq, --nom_prestdor_solic,
                   nvl(vcdconselhoprofreq,PCDCONSELHOPROF), --cod_cons_profis,
                   vnrconselhoprofreq, --ind_nume_cons,
                   vcdestadocrmreq, --uf_conselho,
                   vcdcboreq, --cdn_cbo,
                   replace(a.hrdigitacao, ':', ''), --cod_livre_1,
                   ' ', --cod_livre_2,
                   ' ', --cod_livre_3,
                   ' ', --cod_livre_4,
                   ' ', --cod_livre_5,
                   ' ', --cod_livre_6,
                   ' ', --cod_livre_7,
                   ' ', --cod_livre_8,
                   ' ', --cod_livre_9,
                   ' ', --cod_livre_10,
                   vlocal, --num_livre_1,
                   a.nrseq_complemento, --num_livre_2,
                   0, --num_livre_3,
                   0, --num_livre_4,
                   0, --num_livre_5,
                   0, --num_livre_6,
                   0, --num_livre_7,
                   0, --num_livre_8,
                   0, --num_livre_9,
                   0, --num_livre_10,
                   0, --val_livre_1,
                   0, --val_livre_2,
                   0, --val_livre_3,
                   0, --val_livre_4,
                   0, --val_livre_5,
                   0, --val_livre_6,
                   0, --val_livre_7,
                   0, --val_livre_8,
                   0, --val_livre_9,
                   0, --val_livre_10,
                   decode(a.cdsexo, 'F', 1, 0), --log_livre_1,
                   0, --log_livre_2,
                   0, --log_livre_3,
                   0, --log_livre_4,
                   0, --log_livre_5,
                   0, --log_livre_6,
                   0, --log_livre_7,
                   0, --log_livre_8,
                   0, --log_livre_9,
                   0, --log_livre_10,
                   a.dtnascimento, --dat_livre_1,
                   a.dtvalidade, --dat_livre_2,
                   null, --dat_livre_3,
                   null, --dat_livre_4,
                   null, --dat_livre_5,
                   null, --dat_livre_6,
                   null, --dat_livre_7,
                   null, --dat_livre_8,
                   null, --dat_livre_9,
                   null, --dat_livre_10,
                   null, --dat_ult_atualiz,
                   null, --hra_ult_atualiz,
                   ' ', --cod_usuar_ult_atualiz,
                   --'2', --ind_sit_guia,
                   vcdsituacao_totvs, --f_situacao_autorizacao_migra(a.cdsituacao), --ind_sit_guia,
                   pnrunimed, --cd_unimed,
                   a.aa_guia_autorizacao, --aa_guia_atendimento,
                   a.nr_guia_autorizacao, --nr_guia_atendimento,
                   nvl(a.nousu_outraarea, ' '), --nom_benef_intercam,
                   vcdespecialidadereq, --cd_especialidade,
                   a.cd_tipo_guia, --cd_tipo_guia,
                   a.cd_transacao, --cd_transacao,
                   decode(a.nrarea_acao,
                          vnrunimed,
                          decode(a.cdarea_acao_prestador, vnrunimed, 0, 1),
                          1), --log_intercam_eletron,
                   nvl(nvl(a.txsenha_externa, a.nrtransacao_autorizacao), ' '), --cod_guia_unimed_intercam,
                   nvl(vdesintercam, ' '), --des_intercam,
                   vcdsituacao, --u##ind_sit_import,
                   vcdsituacao, --ind_sit_import,
                   nvl(vnrsqimportguiaprinc, 0), --num_seqcial_princ, -- se for principal, fica zero.
                   a.nrarea_acao, --cd_unidade_carteira,
                   a.nrvia_cartao, --nr_via_carteira,
                   0, --cd_clinica,

                   nvl(vareaacaoprest, a.cdarea_acao_prestador), --cd_unidade_principal,
                   vcdprestador, --cd_prestador_principal,

                   nvl(vareaacaoreq, a.cdarea_acao_requisitante), --cd_unidade_solic,
                   vcdprestadorreq,                               --cd_prestador_solic,

                   ' ', --des_obs,
                   nvl(trunc(a.dtdigitacao), a.dtrequisicao), --dat_solicit,
                   vnrsqimportguia --progress_recid
                   );
--DBMS_OUTPUT.PUT_LINE('P4.NRAUTORIZACAO/NRSEQ_COMPLEMENTO/VAREAACAOREQ/a.cdarea_acao_requisitante: ' || a.nrautorizacao || '/' || a.nrseq_complemento ||
--'/' || vareaacaoreq || '/' || a.cdarea_acao_requisitante);

                p_commit;

              exception
                when dup_val_on_index then
                  null;
                when others then
                  p_insere_falha(vnrcontrolemigracao,
                                 'AU',
                                 'Erro ao inserir import_guia. Erro: ' ||
                                 sqlerrm || ' Linha: ' ||
                                 dbms_utility.format_error_backtrace,
                                 'Verificar estrutura da tabela e os dados da autorização. ' ||
                                 'Complemento' || a.nrseq_complemento,
                                 a.nrautorizacao);
                  vcdsituacao := 'ER';
              end;
            --end;
            end if;
          end loop; --    for a in c_autorizacao loop
        end loop; -- for servico_da_autorizacao

      --dbms_output.put_line('P2' || ' / ' || dtiniaux || ' / ' || dtfimaux || ' / ' || ixaux || ' / ' || sysdate || ' / ' || to_char(sysdate, 'HH24:MI:SS'));

      --exit when dtiniaux >= sysdate;

    --end loop; -- controle por meses
    commit;
  end p_import_guia_autorizacao;

  procedure p_obs_guia_autor is

    thistor_obs_guia gp.histor_obs_guia%rowtype;
    vexiste_obs      char;
    aojaexiste varchar2(1);

    cursor c_obs_guia is
      select h.NRSEQUENCIAL,
             h.NRAUTORIZACAO,
             h.DTOCORRENCIA,
             h.TXOCORRENCIA,
             h.NODOCUMENTO,
             h.NOOPERADOR,
             h.AOORIGEM_HISTORICO,
             ig.*
        from historico_autorizacao  h,
             import_guia            ig,
             autorizacao            a,
             ocorrencia_autorizacao o
       where ig.cod_guia_operdra = h.nrautorizacao
         and a.nrautorizacao = h.nrautorizacao
         and a.nrocorrencia = o.nrocorrencia(+)
         and ig.ind_sit_import = 'IT'
       order by h.nrautorizacao, nrsequencial;

  begin

    for obs in c_obs_guia loop

      thistor_obs_guia.cd_unidade            := pnrunimed;
      thistor_obs_guia.aa_guia_atendimento   := obs.aa_guia_atendimento;
      thistor_obs_guia.nr_guia_atendimento   := obs.nr_guia_atendimento;
      thistor_obs_guia.des_observacao        := /*upper(*/ obs.txocorrencia /*)*/ ;
      thistor_obs_guia.u##ind_tip_obs        := '1';
      thistor_obs_guia.ind_tip_obs           := '1';
      thistor_obs_guia.cod_livre_1           := ' ';
      thistor_obs_guia.cod_livre_2           := ' ';
      thistor_obs_guia.cod_livre_3           := ' ';
      thistor_obs_guia.cod_livre_4           := ' ';
      thistor_obs_guia.cod_livre_5           := ' ';
      thistor_obs_guia.cod_livre_6           := ' ';
      thistor_obs_guia.cod_livre_7           := ' ';
      thistor_obs_guia.cod_livre_8           := ' ';
      thistor_obs_guia.cod_livre_9           := ' ';
      thistor_obs_guia.cod_livre_10          := ' ';
      thistor_obs_guia.num_livre_1           := 0;
      thistor_obs_guia.num_livre_2           := 0;
      thistor_obs_guia.num_livre_3           := 0;
      thistor_obs_guia.num_livre_4           := 0;
      thistor_obs_guia.num_livre_5           := 0;
      thistor_obs_guia.num_livre_6           := 0;
      thistor_obs_guia.num_livre_7           := 0;
      thistor_obs_guia.num_livre_8           := 0;
      thistor_obs_guia.num_livre_9           := 0;
      thistor_obs_guia.num_livre_10          := 0;
      thistor_obs_guia.val_livre_1           := 0;
      thistor_obs_guia.val_livre_2           := 0;
      thistor_obs_guia.val_livre_3           := 0;
      thistor_obs_guia.val_livre_4           := 0;
      thistor_obs_guia.val_livre_5           := 0;
      thistor_obs_guia.val_livre_6           := 0;
      thistor_obs_guia.val_livre_7           := 0;
      thistor_obs_guia.val_livre_8           := 0;
      thistor_obs_guia.val_livre_9           := 0;
      thistor_obs_guia.val_livre_10          := 0;
      thistor_obs_guia.log_livre_1           := 0;
      thistor_obs_guia.log_livre_2           := 0;
      thistor_obs_guia.log_livre_3           := 0;
      thistor_obs_guia.log_livre_4           := 0;
      thistor_obs_guia.log_livre_5           := 0;
      thistor_obs_guia.log_livre_6           := 0;
      thistor_obs_guia.log_livre_7           := 0;
      thistor_obs_guia.log_livre_8           := 0;
      thistor_obs_guia.log_livre_9           := 0;
      thistor_obs_guia.log_livre_10          := 0;
      thistor_obs_guia.dat_livre_1           := '';
      thistor_obs_guia.dat_livre_2           := '';
      thistor_obs_guia.dat_livre_3           := '';
      thistor_obs_guia.dat_livre_4           := '';
      thistor_obs_guia.dat_livre_5           := '';
      thistor_obs_guia.dat_livre_6           := '';
      thistor_obs_guia.dat_livre_7           := '';
      thistor_obs_guia.dat_livre_8           := '';
      thistor_obs_guia.dat_livre_9           := '';
      thistor_obs_guia.dat_livre_10          := '';
      thistor_obs_guia.dat_ult_atualiz       := to_char(obs.dtocorrencia,
                                                        'DD/MM/YYYY');
      thistor_obs_guia.hra_ult_atualiz       := to_char(obs.dtocorrencia,
                                                        'HH24MMSS');
      thistor_obs_guia.cod_usuar_ult_atualiz := obs.nooperador;

      /* verificar se a mensagem ja existe */
      begin
        select 'S' into aojaexiste
          from gp.histor_obs_guia h
         where h.cd_unidade = pnrunimed
           and h.aa_guia_atendimento = obs.aa_guia_atendimento
           and h.nr_guia_atendimento = obs.nr_guia_atendimento
           and h.dat_ult_atualiz = to_char(obs.dtocorrencia,'DD/MM/YYYY')
           and h.hra_ult_atualiz = to_char(obs.dtocorrencia,'HH24MMSS');
       exception
         when others then
           aojaexiste := 'N';
       end;

       if aojaexiste = 'N' then

          select count(*) + 1
            into thistor_obs_guia.num_seqcial
            from gp.histor_obs_guia h
           where h.cd_unidade = pnrunimed
             and h.aa_guia_atendimento = obs.aa_guia_atendimento
             and h.nr_guia_atendimento = obs.nr_guia_atendimento;

          select gp.histor_obs_guia_seq.nextval
            into thistor_obs_guia.progress_recid
            from dual;

          -- QUANDO ESSE PARAMETRO ESTIVER ATIVADO, IRA IGNORAR AS MENSAGENS IDENTICAS.
          if aoignorar_histor_guia_iguais = 'S'
          then
              begin
                select 'S'
                  into vexiste_obs
                  from gp.histor_obs_guia h
                 where h.cd_unidade = thistor_obs_guia.cd_unidade
                   and h.aa_guia_atendimento = thistor_obs_guia.aa_guia_atendimento
                   and h.nr_guia_atendimento = thistor_obs_guia.nr_guia_atendimento
                   and h.des_observacao = thistor_obs_guia.des_observacao;

              exception
                when no_data_found then

                  insert into gp.histor_obs_guia values thistor_obs_guia;
                  p_commit;

              end;
          else
              insert into gp.histor_obs_guia values thistor_obs_guia;
              p_commit;
          end if;
       end if;
    end loop;

    commit;
  end p_obs_guia_autor;

  procedure p_apaga_migracao_parame is

  begin

    delete from gp.ti_pl_sa;
    --commit;
    delete from gp.abraplan;
    --commit;
    delete from gp.pla_mod;
    --commit;
    delete from gp.tabpremo;
    --commit;
    delete from gp.contippl;
    --commit;
    delete from gp.for_pag;
    --commit;
    delete from gp.forpagtx;
    --commit;
    delete from gp.reg_plano_saude;
    --commit;
    delete from gp.tipomens;
    --commit;
    delete from gp.tpplabra;
    --commit;
    delete from gp.propabra;
    --commit;
    delete from gp.assabran;
    --commit;
    delete from gp.abraunid;
    --commit;

    delete from temp_depara_agrupado;
    --commit;

    delete from temp_depara_detalhado;
    --commit;

    delete from gp.pl_mo_am;
    --commit;

  end p_apaga_migracao_parame;

  /*procedure p_migra_cidade is
  begin
    insert into dzcidade
      select c.cdcidade,
             trim(upper(c.nocidade)),
             trim(upper(c.nocidade)),
             '1',
             trim(c.cdestado),
             trim(c.cdestado),
             0, --cep geral
             (select min(x.nrcep_inicial)
                from producao.cidade_cep@unicoo_homologa x
               where x.cdcidade = c.cdcidade) cep_inicial,
             (select max(x.nrcep_final)
                from producao.cidade_cep@unicoo_homologa x
               where x.cdcidade = c.cdcidade) cep_final,
             c.cdareaacao, --cd_unimed
             '01/01/2000',
             'super',
             null,
             null,
             null,
             0,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             c.cdcidade_ibge,
             null,
             null,
             null,
             0,
             0,
             0,
             0,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             null,
             0,
             0,
             0,
             gp.dzcidade_seq.nextval
        from producao.cidade@unicoo_homologa c
             where c.nocidade <> ' ';
  end p_migra_cidade;*/

  procedure p_migra_cidade is
    cd_cidade_aux number;
    cd_cidade_gp_aux number;
    cd_cidade_pk number;
    aoexiste varchar(1);
  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;
    --guardar maior CDCIDADE do UNICOO, para tratar como sequencia a codificacao das cidades do migrador
    begin
      select max(to_number(cid.cdcidade)) + 1 into cd_cidade_aux
        from producao.cidade@unicoo_homologa cid;
    exception
      when others then cd_cidade_aux := 1;
    end;

    --buscar maior CDCIDADE da DZCIDADE (caso ja possua registros)
    begin
      select max(to_number(cid.cd_cidade)) + 1
      into cd_cidade_gp_aux
        from gp.dzcidade cid;
    exception
      when others then cd_cidade_gp_aux := 1;
    end;

    if cd_cidade_gp_aux > cd_cidade_aux
    then cd_cidade_aux := cd_cidade_gp_aux;
    end if;

    for x in (select cid.progress_recid, cid.int_3, cid.nm_cidade, cid.estado from dzcidade_temp cid) loop
      --procurar cidade no unicoo com mesmo NOME e UF - essa busca eh antes da buasca por codigo IBGE
      --pois podem existir distritos que compartilham o mesmo codigo IBGE do municipio ao qual pertencem
      begin
        select 'S', c.cdcidade into aoexiste, cd_cidade_pk
          from producao.cidade@unicoo_homologa c
         where trim(c.nocidade) = trim(x.nm_cidade)
           and trim(c.cdestado) = trim(x.estado)
           and rownum = 1;
      exception
        when others then
          --procurar cidade no unicoo com mesmo codigo IBGE
        /*  begin
            select 'S', c.cdcidade into aoexiste, cd_cidade_pk
              from producao.cidade@unicoo_homologa c
             where c.cdcidade_ibge = x.int_3
               and rownum = 1;
          exception
            when others then */
              aoexiste := 'N';
              cd_cidade_pk := 0;
          /*end;*/
      end;

      --se encontrou, criar DZCIDADE com base no registro do Unicoo, e mantendo mesmo CDCIDADE,
      --pois esse eh o codigo que sera migrado no endereco das pessoas. Caso contrario, criar conforme
      --DZCIDADE_TEMP, mas com CD_CIDADE unico e sequencial
      if aoexiste = 'S' then
        begin
          insert into gp.dzcidade
            select c.cdcidade,
                   trim(upper(c.nocidade)),
                   trim(upper(c.nocidade)),
                   '1',
                   trim(c.cdestado),
                   trim(c.cdestado),
                   0, --cep geral
                   (select min(x.nrcep_inicial)
                      from producao.cidade_cep@unicoo_homologa x
                     where x.cdcidade = c.cdcidade) cep_inicial,
                   (select max(x.nrcep_final)
                      from producao.cidade_cep@unicoo_homologa x
                     where x.cdcidade = c.cdcidade) cep_final,
                   c.cdareaacao, --cd_unimed
                   '01/01/2000',
                   'super',
                   null,
                   null,
                   null,
                   0,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   c.cdcidade_ibge,
                   null,
                   null,
                   null,
                   0,
                   0,
                   0,
                   0,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   0,
                   0,
                   0,
                   gp.dzcidade_seq.nextval
              from producao.cidade@unicoo_homologa c
                   where c.cdcidade = cd_cidade_pk
                     and c.nocidade <> ' ';
        exception
          when others then null;
        end;
      else
        --criar conforme DZCIDADE_TEMP, com CD_CIDADE unico e sequencial
        begin
          insert into dzcidade
            select cd_cidade_aux,
                    c.u##nm_cidade      ,
                    c.nm_cidade         ,
                    c.lg_cep_distribuido,
                    c.u##estado         ,
                    c.estado            ,
                    c.cd_cep_padrao     ,
                    c.cd_cep_inicial    ,
                    c.cd_cep_final      ,
                    c.cd_unimed         ,
                    c.dt_atualizacao    ,
                    c.cd_userid         ,
                    c.cd_cep_inicial2   ,
                    c.char_1            ,
                    c.dec_1             ,
                    c.log_1             ,
                    c.char_2            ,
                    c.char_3            ,
                    c.char_4            ,
                    c.char_5            ,
                    c.date_1            ,
                    c.date_2            ,
                    c.date_3            ,
                    c.date_4            ,
                    c.date_5            ,
                    c.dec_2             ,
                    c.dec_3             ,
                    c.dec_4             ,
                    c.dec_5             ,
                    c.u_char_1          ,
                    c.cd_cep_final2     ,
                    c.int_3             , --codigo IBGE
                    c.int_4             ,
                    c.int_5             ,
                    c.u_date_3          ,
                    c.log_2             ,
                    c.log_3             ,
                    c.log_4             ,
                    c.log_5             ,
                    c.u_int_2           ,
                    c.u_char_2          ,
                    c.u_char_3          ,
                    c.u_date_1          ,
                    c.u_date_2          ,
                    c.u_dec_1           ,
                    c.u_dec_2           ,
                    c.u_dec_3           ,
                    c.u_int_1           ,
                    c.u_int_3           ,
                    c.u_log_1           ,
                    c.u_log_2           ,
                    c.u_log_3           ,
                   gp.dzcidade_seq.nextval
              from dzcidade_temp c
                   where c.progress_recid = x.progress_recid;
          cd_cidade_aux := cd_cidade_aux + 1;
        exception
          when others then null;
        end;
      end if;
    end loop;

    -- SE CIDADE EXISTE APENAS NO UNICOO MAS NAO NA DZCIDADE_TEMP, CARREGAR MANTENDO CODIFICACAO DO UNICOO
    for x in (select * from cidade c
                      where not exists(select 1 from gp.dzcidade d
                                               where trim(d.nm_cidade) = trim(c.nocidade)
                                                 and trim(d.estado) = trim(c.cdestado))) loop
        begin
          insert into gp.dzcidade
            select c.cdcidade,
                   trim(upper(c.nocidade)),
                   trim(upper(c.nocidade)),
                   '1',
                   trim(c.cdestado),
                   trim(c.cdestado),
                   0, --cep geral
                   (select min(x.nrcep_inicial)
                      from producao.cidade_cep@unicoo_homologa x
                     where x.cdcidade = c.cdcidade) cep_inicial,
                   (select max(x.nrcep_final)
                      from producao.cidade_cep@unicoo_homologa x
                     where x.cdcidade = c.cdcidade) cep_final,
                   nvl(c.cdareaacao,0), --cd_unimed
                   '01/01/2000',
                   'super',
                   null,
                   null,
                   null,
                   0,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   c.cdcidade_ibge,
                   null,
                   null,
                   null,
                   0,
                   0,
                   0,
                   0,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   null,
                   0,
                   0,
                   0,
                   gp.dzcidade_seq.nextval
              from producao.cidade@unicoo_homologa c
                   where c.cdcidade = x.cdcidade
                     and c.nocidade <> ' ';
        exception
           when dup_val_on_index then
             dbms_output.put_line('DUPLICANDO! ' || x.cdcidade || ';' || x.nocidade || ';' || x.cdestado);
           when others then null;
        end;


    end loop;

  end p_migra_cidade;

  procedure p_ajusta_codigo_cidade_no_cep is
    begin
      --join pelo nome da cidade e UF, apenas quando CD_CIDADE esta zerado
      for x in (select cep.progress_recid, cid.cd_cidade
                  from gp.dz_cadcep cep, dzcidade cid
                 where cid.nm_cidade = cep.nm_cidade
                   and cep.cd_uf = cid.estado
                   and cep.cd_cidade = 0) loop

            update gp.dz_cadcep cep set cep.cd_cidade = x.cd_cidade
             where cep.progress_recid = x.progress_recid;
      end loop;

      --join pelo codigo IBGE, apenas quando CD_CIDADE esta zerado
      for x in (select cep.progress_recid, cid.cd_cidade
                  from gp.dz_cadcep cep, dzcidade cid
                 where cid.int_3 = cep.u_int_1 --codigo IBGE
                   and cep.u_int_1 <> 0
                   and cep.u_int_1 is not null
                   and cep.cd_cidade = 0) loop

            update gp.dz_cadcep cep set cep.cd_cidade = x.cd_cidade
             where cep.progress_recid = x.progress_recid;
      end loop;

  end p_ajusta_codigo_cidade_no_cep;

  procedure p_migra_cep is
  begin

    --transformar os enderecos em cep´s caso não exista a tabela de cep´s do ECT
    for cep_cidade in (select distinct c.cdestado a,
                                       c.cdestado b,
                                       c.cdcidade c,
                                       e.nobairro d,
                                       e.nobairro e,
                                       ' ' f,
                                       ' ' g,
                                       e.nrcep h,
                                       null i,
                                       '000' j,
                                       '000' k,
                                       null l,
                                       null m,
                                       '0' n,
                                       null o,
                                       c.nocidade p,
                                       null q,
                                       null r,
                                       null s,
                                       null t,
                                       null u,
                                       null v,
                                       null w,
                                       null x,
                                       null y,
                                       null z,
                                       null ab,
                                       null ac,
                                       null ad,
                                       null ae,
                                       null af,
                                       null ag,
                                       null ah,
                                       null ai,
                                       null aj,
                                       null ak,
                                       null al,
                                       null am,
                                       0 an,
                                       0 ao,
                                       0 ap,
                                       0 aq,
                                       0 ar,
                                       null at,
                                       null au,
                                       null av,
                                       0 aw,
                                       0 ax,
                                       null ay,
                                       null az,
                                       null ba,
                                       null bb,
                                       null bc,
                                       null bd,
                                       null be,
                                       0 bf,
                                       'super' bg,
                                       '01/01/2000' bh,
                                       null progress_recid
                         from endereco e, producao.cidade@unicoo_homologa c
                        where c.cdcidade = e.cdcidade) loop
      begin
        select gp.DZ_CADCEP_SEQ.NEXTVAL
          into cep_cidade.progress_recid
          from dual;
        insert into dz_cadcep values cep_cidade;
      exception
        when others then
          null;
          ----DBMS_OUTPUT.put_line ('ERRO Cidade:' || CEP_CIDADE.c || '  Bairro: ' || CEP_CIDADE.e || '   Cep: ' || CEP_CIDADE.h || ' - ' || sqlerrm);
      end;
    end loop;
  end p_migra_cep;

  procedure p_migra_endereco is

    vtplogradouro  number;
    vtpendereco    number;
    vaomigrado     char;
    countofrecords number;
    vaoaviso       varchar2(1) := 'N';
    vendereco_completo varchar2(500);
    hash_atual varchar2(100);

    --vcont          number := 0;

    cursor cur_endereco is
      select rownum,
             nvl(conversao.cdvalor_externo, nvl(c.cdcidade,PCDCIDADEDEFAULT)) cdcidade,
             e.nrregistro,
             e.tpendereco,
             e.nologradouro,
             e.nrimovel,
             e.txcomplemento,
             e.nobairro,
             fn_tirarmascara(e.nrcep, 8) nrcep,
             nvl(c.cdestado, e.cdestado) cdestado,
             null id_endereco,
             te.tpendereco_a400,
             decode(e.aocorrespondencia, 'S', 1, 0) lg_principal,
             nvl(e.txreferencia_endereco, ' ') referencia,
             case
               when e.nrimovel is not null then
                e.nologradouro || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || to_char(e.nrimovel)
               else
                e.nologradouro
             end ds_endereco,
             te.aopessoafisica,
             e.aocorrespondencia,

             case
               when e.nrimovel is not null then
                e.nologradouro || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || to_char(e.nrimovel) ||
                ' ' || e.txcomplemento || ' ' || e.nobairro || ' ' || e.nrcep
               else
                e.nologradouro ||
                ' ' || e.txcomplemento || ' ' || e.nobairro || ' ' || e.nrcep
             end ds_endereco_completo

        from endereco         e,
             tipo_de_endereco te,
             cidade           c,
             (select re.cdvalor_externo, re.cdvalor_interno
                from mig_tab_conversao_exp re, mig_tab_conversao r
               where re.nrseq_tab_conversao = r.nrseq
                 and r.notabela = 'MIGRACAO_CIDADE') conversao
       where te.tpendereco(+) = e.tpendereco
         and (te.aopessoafisica = 'S' or te.aopessoajuridica = 'S')
         and conversao.cdvalor_interno(+) = e.cdcidade
         and e.cdcidade = c.cdcidade(+)
       order by e.nrregistro, e.tpendereco;

    --VARIAVEIS PARA TRATAR E REDUZ O ENDERECO
    VQTLOGRA             NUMBER;
    VQTCOMPL             NUMBER;
    VQTLOGRA_REDUZ       NUMBER;
    VQTCOMPL_REDUZ       NUMBER;
    VQTLOGRA_REDUZ_ABREV NUMBER;
    VQTNRIMOVEL          NUMBER;
    VLOGRA               VARCHAR2(50);
    VCOMPL               VARCHAR2(15);
    VLOGRA_REDUZ         VARCHAR2(50);
    VCOMPL_REDUZ         VARCHAR2(15);
    VLOGRA_REDUZ_ABREV   VARCHAR2(50);

    --VLOGRADOURO E VCOMPLEMENTO RECEBERAO OS CONTEUDOS DO ENDERECO E COMPLEMENTO APOS ANALISE DE TAMANHOS
    VLOGRADOURO  VARCHAR2(40);
    VCOMPLEMENTO VARCHAR2(10);
    VBAIRRO      VARCHAR2(25);

    --VARIAVIES QUE CONTROLAM O NUMERO MAXIMO DE REGISTROS NOS CAMPOS DE ENDERECO
    VQTLOGRADOURO  NUMBER := 40;
    VQTCOMPLEMENTO NUMBER := 10;

  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    --se hash tiver mudado, apagar registro no TOTVS para ser recriado
    for x in (select e.char_4, e.progress_recid, e.id_pessoa from gp.endereco e) loop
      if x.char_4 <> gerar_hash_endereco_unicoo(x.id_pessoa) then
        delete from gp.endereco e where e.progress_recid = x.progress_recid;
        log_dbms('vai apagar endereco pois mudou o hash: ' || x.id_pessoa);
      end if;
    end loop;

    for re in cur_endereco loop

      if (re.nologradouro like 'AVENIDA%' or re.nologradouro like 'AV.%' or
         re.nologradouro like 'AV %') then
        vtplogradouro := 8; -- 008 avenida
      elsif (re.nologradouro like 'RUA%' or re.nologradouro like 'R %' or
            re.nologradouro like 'R.%') then
        vtplogradouro := 81; -- 081 rua
      elsif (re.nologradouro like 'ALAMEDA%' or
            re.nologradouro like 'ALAM.%') then
        vtplogradouro := 4; -- 081 rua
      elsif (re.nologradouro like 'BECO%') then
        vtplogradouro := 11; -- 081 rua
      elsif (re.nologradouro like 'CHACARA%') then
        vtplogradouro := 481; -- 081 rua
      elsif (re.nologradouro like 'ESTRADA%' or
            re.nologradouro like 'ESTR.%' or
            re.nologradouro like 'EST.%' or
            re.nologradouro like 'ESTR %') then
        vtplogradouro := 31; -- 081 rua
      elsif (re.nologradouro like 'LADEIRA%') then
        vtplogradouro := 53; -- 081 rua
      elsif (re.nologradouro like 'PASSAGEM%') then
        vtplogradouro := 74; -- 081 rua
      elsif (re.nologradouro like 'PRACA%' or
            re.nologradouro like 'PRAÇA%' or
            re.nologradouro like 'PCA.%' or re.nologradouro like 'PCA %') then
        vtplogradouro := 65; -- 081 rua
      elsif (re.nologradouro like 'RODOVIA%' or
            re.nologradouro like 'RDV%' or re.nologradouro like 'ROD.%' or
            re.nologradouro like 'ROD %') then
        vtplogradouro := 90; -- 081 rua
      elsif (re.nologradouro like 'SITIO%' or
            re.nologradouro like 'SÍTIO%') then
        vtplogradouro := 92; -- 081 rua
      elsif (re.nologradouro like 'TRAVESSA%' or
            re.nologradouro like 'TRAV.%' or re.nologradouro like 'TR.%' or
            re.nologradouro like 'TR %') then
        vtplogradouro := 100; -- 081 rua
      elsif (re.nologradouro like 'TREVO%') then
        vtplogradouro := 99; -- 081 rua
      elsif (re.nologradouro like 'VIA %') then
        vtplogradouro := 101; -- 081 rua
      elsif (re.nologradouro like 'VIADULTO%' or
            re.nologradouro like 'VIAD.%') then
        vtplogradouro := 103; -- 081 rua
      elsif (re.nologradouro like 'VILA %') then
        vtplogradouro := 104; -- 081 rua
      elsif (re.nologradouro like 'PARQUE %' or
            re.nologradouro like 'PQ.%' or re.nologradouro like 'PQ %') then
        vtplogradouro := 72; -- 081 rua
      else
        vtplogradouro := 0; -- 081 rua
      end if;

      -- criar regras e tratamentos p/ o campo "in_tipo_endereco"
      /*
      ptu a400
      1 = atendimento
      2 = comercial (envio de correspondencia)
      3 = atendimento e comercial

      gps2
      1=residencial
      2=comercial
      3=atendimento
      */
      if ((re.tpendereco_a400 is not null) and (re.tpendereco_a400 >= 0)) then
        if (re.tpendereco_a400 = '0') then
          -- residencial
          vtpendereco := 1;
        elsif (re.tpendereco_a400 = '1') then
          -- atendimento
          vtpendereco := 2;
        elsif (re.tpendereco_a400 = '2') then
          -- comercial (envio de correspondencia)
          vtpendereco := 2;
        elsif (re.tpendereco_a400 = '3') then
          -- atendimento e comercial
          vtpendereco := 2;
        end if;
      else
        if re.aopessoafisica = 'S' then
           vtpendereco := 1; -- residencial
        else
           vtpendereco := 2; --comercial
        end if;
      end if;

      begin

        --QTDE E CONTEUDOS DO ENDERECO
        VQTLOGRA             := LENGTH(TRIM(re.nologradouro));
        VQTCOMPL             := LENGTH(TRIM(re.txcomplemento));
        VQTLOGRA_REDUZ       := LENGTH(TRIM(F_REDUZ_END(re.nologradouro,
                                                        0)));
        VQTCOMPL_REDUZ       := LENGTH(TRIM(F_REDUZ_COMPL(re.txcomplemento,
                                                          0)));
        VQTLOGRA_REDUZ_ABREV := LENGTH(TRIM(F_REDUZ_END_ABREV(F_REDUZ_END(re.nologradouro,
                                                                          0),
                                                              0)));
        VQTNRIMOVEL          := LENGTH(re.nrimovel) + length(nvl(pSEPARADOR_ENDERECO_NUMERO,', ')); /*tamanho do separador, que pode ser (,) (, ) etc*/
        VLOGRA               := TRIM(re.nologradouro);
        VCOMPL               := NVL(TRIM(re.txcomplemento), ' ');
        VLOGRA_REDUZ         := TRIM(F_REDUZ_END(re.nologradouro, 0));
        VCOMPL_REDUZ         := TRIM(F_REDUZ_COMPL(re.txcomplemento, 0));
        VLOGRA_REDUZ_ABREV   := TRIM(F_REDUZ_END_ABREV(F_REDUZ_END(re.nologradouro,0),0));

        vendereco_completo := substr(re.ds_endereco_completo,1,500);

        --TRATATIVA DOS ENDEÇOES E LOGRADOUROS (21/10/2016)
        --COMPLEMENTO NULO OU ATÉ 10 E O LOGRADOURO + NRIMOVEL ATÉ 40
        --LINHAS 1 E 2 DA PLANILHA
        IF ((VCOMPL IS NULL OR LENGTH(VCOMPL) <= VQTCOMPLEMENTO) AND
           VQTLOGRA + NVL(VQTNRIMOVEL, 0) <= VQTLOGRADOURO) THEN

          IF RE.NRIMOVEL IS NULL THEN
            VLOGRADOURO := VLOGRA;
          ELSE
            VLOGRADOURO := VLOGRA || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || RE.NRIMOVEL;
          END IF;

          VCOMPLEMENTO := VCOMPL;

          --INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '1', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);

          --FIM DA TRATATIVA DAS LINHAS 1 E 2
          --LOGRADOURO+NRIMOVEL ACIMA DE 40, PORÉM LOGRAD+IMOVEL REDUZ ATÉ 40 E O COMPLEMENTO ATÉ 10
          --LINHA 3 DA PLANILHA
        ELSIF (((VQTCOMPL <= VQTCOMPLEMENTO) OR (VQTCOMPL IS NULL)) AND
              VQTLOGRA_REDUZ + NVL(VQTNRIMOVEL, 0) <=
              VQTLOGRADOURO) THEN

          IF RE.NRIMOVEL IS NULL THEN
            VLOGRADOURO := VLOGRA_REDUZ;
          ELSE
            VLOGRADOURO := VLOGRA_REDUZ || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || RE.NRIMOVEL;
          END IF;

          VCOMPLEMENTO := VCOMPL;

          --INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '3', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);

          --FIM DA TRATATIVA DA LINHA 3
          --COMPLEMENTO ACIMA DE 10, PORÉM COMPL REDUZ ATÉ 10 E O LOGRADOURO + NRIMOVEL ATÉ 40
          --LINHA 4 DA PLANILHA
        ELSIF ((VQTCOMPL > VQTCOMPLEMENTO AND
              VQTCOMPL_REDUZ <= VQTCOMPLEMENTO) AND
              VQTLOGRA + NVL(VQTNRIMOVEL, 0) <= VQTLOGRADOURO) THEN

          IF RE.NRIMOVEL IS NULL THEN
            VLOGRADOURO := VLOGRA;
          ELSE
            VLOGRADOURO := VLOGRA || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || RE.NRIMOVEL;
          END IF;

          VCOMPLEMENTO := VCOMPL_REDUZ;

          --INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '4', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);

          --FIM DA TRATATIVA DA LINHA 4
          --COMPLEMENTO ACIMA DE 10, PORÉM COMPL REDUZ ATÉ 10 E O LOGRADOURO + NRIMOVEL ACIMA DE 40, PORÉM LOGR+IMOVEL REDUZ ATÉ 40
          --LINHA 5 DA PLANILHA
        ELSIF ((VQTCOMPL > VQTCOMPLEMENTO AND
              VQTCOMPL_REDUZ <= VQTCOMPLEMENTO) AND
              (VQTLOGRA + NVL(VQTNRIMOVEL, 0) > VQTLOGRADOURO) AND
              (VQTLOGRA_REDUZ + NVL((VQTNRIMOVEL + 1), 0) <=
              VQTLOGRADOURO)) THEN

          IF RE.NRIMOVEL IS NULL THEN
            VLOGRADOURO := VLOGRA_REDUZ;
          ELSE
            VLOGRADOURO := VLOGRA_REDUZ || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || RE.NRIMOVEL;
          END IF;

          VCOMPLEMENTO := VCOMPL_REDUZ;

          --INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '5', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);

          --FIM DA TRATATIVA DA LINHA 5

          --COMPLEMENTO REDUZ ACIMA DE 10, PORÉM COMPL REDUZ E O LOGRADOURO + NRIMOVEL ATE 40
          --LINHA 6 DA PLANILHA
        ELSIF ((VQTCOMPL > VQTCOMPLEMENTO AND
              VQTCOMPL_REDUZ > VQTCOMPLEMENTO) AND
              (VQTLOGRA + NVL(VQTNRIMOVEL, 0) + 1 + VQTCOMPL_REDUZ <=
              VQTLOGRADOURO)) THEN

          IF RE.NRIMOVEL IS NULL THEN
            VLOGRADOURO := VLOGRA || '-' || VCOMPL_REDUZ;
          ELSE
            VLOGRADOURO := VLOGRA || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || RE.NRIMOVEL || '-' ||
                           VCOMPL_REDUZ;
          END IF;

          VCOMPLEMENTO := ' ';

          --INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '6', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);

          --FIM DA TRATATIVA DA LINHA 6
          --COMPLEMENTO REDUZ ACIMA DE 10, PORÉM COMPL REDUZ E O LOGRADOURO REDUZ + NRIMOVEL ATE 40
          --LINHA 7 DA PLANILHA
        ELSIF ((VQTCOMPL > VQTCOMPLEMENTO AND
              VQTCOMPL_REDUZ > VQTCOMPLEMENTO) AND
              (VQTLOGRA + NVL(VQTNRIMOVEL, 0) + 1 + VQTCOMPL_REDUZ >
              VQTLOGRADOURO) AND
              (VQTLOGRA_REDUZ + NVL(VQTNRIMOVEL, 0) + 1 +
              VQTCOMPL_REDUZ <= VQTLOGRADOURO)) THEN

          IF RE.NRIMOVEL IS NULL THEN
            VLOGRADOURO := VLOGRA_REDUZ || '-' || VCOMPL_REDUZ;
          ELSE
            VLOGRADOURO := VLOGRA_REDUZ || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || RE.NRIMOVEL || '-' ||
                           VCOMPL_REDUZ;
          END IF;

          VCOMPLEMENTO := ' ';

          --INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '7', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);

          --FIM DA TRATATIVA DA LINHA 7
          --COMPLEMENTO NULO OU ATÉ 10, LOGR REDUZ + NR ACIMA DE 40, PORÉM LOGRADOURO REDUZ E ABREV + NRIMOVEL ATE 40
          --LINHA 8 DA PLANILHA
        ELSIF ((VQTCOMPL <= VQTCOMPLEMENTO OR VCOMPL IS NULL) AND
              (VQTLOGRA + NVL(VQTNRIMOVEL, 0) > VQTLOGRADOURO) AND
              (VQTLOGRA_REDUZ + NVL(VQTNRIMOVEL, 0) >
              VQTLOGRADOURO) AND
              (VQTLOGRA_REDUZ_ABREV + NVL(VQTNRIMOVEL, 0) <=
              VQTLOGRADOURO)) THEN

          IF RE.NRIMOVEL IS NULL THEN
            VLOGRADOURO := VLOGRA_REDUZ_ABREV;
          ELSE
            VLOGRADOURO := VLOGRA_REDUZ_ABREV || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || RE.NRIMOVEL;
          END IF;

          VCOMPLEMENTO := VCOMPL;

          --INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '8', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);

          --FIM DA TRATATIVA DA LINHA 8

          --COMPLEMENTO ACIMA DE 10, PORÉM REDUZ ATÉ 10 E LOGR REDUZ + NR ACIMA DE 40, PORÉM LOGRADOURO REDUZ E ABREV + NRIMOVEL ATE 40
          --LINHA 9 DA PLANILHA
        ELSIF ((VQTCOMPL > VQTCOMPLEMENTO AND
              VQTCOMPL_REDUZ <= VQTCOMPLEMENTO) AND
              (VQTLOGRA + NVL(VQTNRIMOVEL, 0) > VQTLOGRADOURO) AND
              (VQTLOGRA_REDUZ + NVL(VQTNRIMOVEL, 0) >
              VQTLOGRADOURO) AND
              (VQTLOGRA_REDUZ_ABREV + NVL(VQTNRIMOVEL, 0) <=
              VQTLOGRADOURO)) THEN

          IF RE.NRIMOVEL IS NULL THEN
            VLOGRADOURO := VLOGRA_REDUZ_ABREV;
          ELSE
            VLOGRADOURO := VLOGRA_REDUZ_ABREV || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || RE.NRIMOVEL;
          END IF;

          VCOMPLEMENTO := VCOMPL_REDUZ;

          --INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '8', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);

          --FIM DA TRATATIVA DA LINHA 9
          --COMPLEMENTO REDUZ ACIMA DE 10, PORÉM COMPL REDUZ E O LOGRADOURO REDUZ E ABREVIADO (ÚLTIMO RECURSO) + NRIMOVEL ATE 40
          --LINHA 10 DA PLANILHA
        ELSIF ((VQTCOMPL > VQTCOMPLEMENTO AND
              VQTCOMPL_REDUZ > VQTCOMPLEMENTO) AND
              (VQTLOGRA + NVL(VQTNRIMOVEL, 0) + 1 + VQTCOMPL_REDUZ >
              VQTLOGRADOURO) AND
              (VQTLOGRA_REDUZ + NVL(VQTNRIMOVEL, 0) + 1 +
              VQTCOMPL_REDUZ > VQTLOGRADOURO) AND
              (VQTLOGRA_REDUZ_ABREV + NVL(VQTNRIMOVEL, 0) + 1 +
              VQTCOMPL_REDUZ <= VQTLOGRADOURO)) THEN

          IF RE.NRIMOVEL IS NULL THEN
            VLOGRADOURO := VLOGRA_REDUZ_ABREV || '-' || VCOMPL_REDUZ;
          ELSE
            VLOGRADOURO := VLOGRA_REDUZ_ABREV || nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || RE.NRIMOVEL || '-' ||
                           VCOMPL_REDUZ;
          END IF;

          VCOMPLEMENTO := ' ';

          --INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '8', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);

          --FIM DA TRATATIVA DA LINHA 10
        else
          --*****ver se ficará
          --INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '0', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);

          -- se nao entrou nas logicas acima, truncar, perdendo o final do logadouro e preservando o numero
          IF RE.NRIMOVEL IS NULL THEN
            VLOGRADOURO := substr(VLOGRA_REDUZ_ABREV || '-' || VCOMPL_REDUZ,1,40);
          ELSE
            VLOGRADOURO := substr(VLOGRA_REDUZ_ABREV || '-' || VCOMPL_REDUZ,1,40 - VQTNRIMOVEL) ||
                           nvl(pSEPARADOR_ENDERECO_NUMERO,', ') || RE.NRIMOVEL;
          END IF;

          VCOMPLEMENTO := substr(VCOMPL_REDUZ,1,10);
          vaoaviso := 'S';
          dbms_output.put_line('ALERTA: Nao foi possivel migrar corretamente o endereco: ' ||
                               VLOGRA || ' ' ||
                               re.nrimovel || ' ' ||
                               vcompl || '. Foi criado da seguinte forma (caso necessario ajustar manualmente no sistema): ' ||
                               VLOGRADOURO || ' ' ||
                               VCOMPLEMENTO);

          /*   -- ERRO - NAO ENTROU EM NENHUM DOS IFS ACIMA
              ELSIF ((LENGTH(TENDERECO.TXCOMPLEMENTO) > VQTCOMPLEMENTO AND LENGTH(f_reduz_compl(TENDERECO.TXCOMPLEMENTO,0))> VQTCOMPLEMENTO) AND
                   ((LENGTH(TRIM(TENDERECO.NOLOGRADOURO)))+ NVL((VQTNRIMOVEL + 1),0) +1+ LENGTH(f_reduz_compl(TENDERECO.TXCOMPLEMENTO,0)) > VQTLOGRADOURO) AND
                   ((LENGTH(F_REDUZ_END(TRIM(TENDERECO.NOLOGRADOURO),0)))+ NVL((VQTNRIMOVEL + 1),0) +1+ LENGTH(f_reduz_compl(TENDERECO.TXCOMPLEMENTO,0)) > VQTLOGRADOURO) AND
                   ((LENGTH(F_REDUZ_END_ABREV(F_REDUZ_END(TRIM(TENDERECO.NOLOGRADOURO),0),0)))+ NVL((VQTNRIMOVEL + 1),0) +1+ LENGTH(f_reduz_compl(TENDERECO.TXCOMPLEMENTO,0)) > VQTLOGRADOURO)
                   ) THEN

                -- VER COM O VINI PARA GRAVAR FALHA NO PROCESSO
                VLOGRADOURO  := NULL;
                VCOMPLEMENTO := NULL;

                INSERT INTO END_MIGRA VALUES (TENDERECO.NOLOGRADOURO, TENDERECO.TXCOMPLEMENTO, VLOGRADOURO, VCOMPLEMENTO, '9', TENDERECO.NRIMOVEL, TENDERECO.NRREGISTRO);
          */
        END IF;

        --VALIDACAO DO TAMANHO DO BAIRRO
        --SE NAO ENVIAR O BAIRRO COMPLETO, TENTA O REDUZIDO E POR ÚLTIMO TRUNCA
        VBAIRRO := '';

        IF LENGTH(RE.NOBAIRRO) > 20 THEN
          IF LENGTH(f_reduz_bairro(RE.NOBAIRRO, 0)) > 20 THEN
            VBAIRRO := SUBSTR(F_REDUZ_BAIRRO(RE.NOBAIRRO, 0), 1, 20); --20 POSICOES DO REDUZIDO
          ELSE
            VBAIRRO := f_reduz_bairro(RE.NOBAIRRO, 0); -- BAIRRO REDUZIDO
          END IF;
        ELSE
          VBAIRRO := RE.NOBAIRRO; -- BAIRRO INTEIRO
        END IF;
      exception
        when others then null;
      end;

        --INSERT INTO END_MIGRA VALUES (VBAIRRO,NULL,TENDERECO.NOBAIRRO,NULL,NULL,NULL,TENDERECO.NRREGISTRO);

        --FINAL DA VERIFICACAO E TRATAMENTO DO ENDERECO

      begin
        select 'S'
          into vaomigrado
          from gp.endereco g
         where (/*g.lg_principal = re.lg_principal or*/ g.ds_endereco = vlogradouro)
           and g.id_pessoa = re.nrregistro
           and rownum = 1;
      exception
        when no_data_found then
          vaomigrado := 'N';
      end;

      if vaomigrado = 'N' then
        begin
          hash_atual := gerar_hash_endereco_unicoo(re.nrregistro);
          insert into gp.endereco
            (id_endereco,
             ds_endereco,
             ds_complemento,
             ds_bairro,
             cd_cep,
             cd_uf,
             cd_cidade,
             in_tipo_endereco,
             cd_userid,
             dt_atualizacao,
             char_1,
             char_2,
             char_3,
             char_4,
             char_5,
             date_1,
             date_2,
             date_3,
             date_4,
             date_5,
             dec_1,
             dec_2,
             dec_3,
             dec_4,
             dec_5,
             lg_principal,
             log_2,
             log_3,
             log_4,
             log_5,
             nr_endereco,
             id_pessoa_old,
             int_3,
             int_4,
             int_5,
             u_char_1, --> TPENDERECO: COBR, COM, CON1, CON2, CON3, CON4, COR, ENT, RES
             u_char_2,
             u_char_3,
             u_date_1,
             u_date_2,
             u_date_3,
             u_dec_1,
             u_dec_2,
             u_dec_3,
             u_int_1,
             u_int_2,
             u_int_3,
             u_log_1, --> 1-AOCORRESPONDENCIA='S'; 0-AOCORRESPONDENCIA='N';
             u_log_2,
             u_log_3,
             nr_caixa_postal,
             tp_logradouro,
             lg_end_cobranca,
             id_pessoa,
             progress_recid)
          values
            (gp.seq_endereco.nextval, --id_endereco,
             NVL(VLOGRADOURO, ' '),
             nvl(VCOMPLEMENTO, ' '),
             nvl(VBAIRRO, ' '),
             re.nrcep,
             re.cdestado,
             re.cdcidade,
             vtpendereco, -- decode(re.tpendereco, 'COBR', 2, 3),
             'MIGRACAO',
             trunc(sysdate),
             re.referencia,
             ' ',
             ' ',
             hash_atual, --char_4 - hash MD5 da tabela original do unicoo
             vendereco_completo,--char_5 - guarda endereco completo, sem concatenacoes
             null,
             null,
             null,
             null,
             null,
             0,
             0,
             0,
             0,
             0,
             re.lg_principal,
             0,
             0,
             0,
             0,
             re.nrimovel, -- O NRIMOVEL ESTÁ JUNTO COM O LOGRADOURO
             0,
             0,
             0,
             0,
             re.tpendereco, --u_char_1 -> TPENDERECO: COBR, COM, CON1, CON2, CON3, CON4, COR, ENT, RES
             ' ',
             ' ',
             null,
             null,
             null,
             0,
             0,
             0,
             0,
             0,
             0,
             decode(re.aocorrespondencia,'S',1,0), --u_log_1 -> 1-AOCORRESPONDENCIA='S'; 0-AOCORRESPONDENCIA='N';
             0,
             0,
             ' ',
             vtplogradouro,
             decode(re.tpendereco, 'COBR', 1, 0), --re.lg_principal,
             re.nrregistro,
             gp.endereco_seq.nextval);
        exception
          when others then
            null;
        end;
        --vqtregistro1 := vqtregistro1 + 1;

        countofrecords := countofrecords + 1;
        if (countofrecords >= 5000) then
          --commit;
          countofrecords := 0;
        end if;

      end if;
    end loop;

    -- garantir que nenhuma pessoa fique sem endereço principal
    begin
      for x in (select distinct e.id_pessoa
                  from gp.endereco e
                 where not exists (select 1
                          from gp.endereco c
                         where c.id_pessoa = e.id_pessoa
                           and c.lg_principal = 1)) loop
        update gp.endereco en
           set en.lg_principal = 1
         where en.id_pessoa = x.id_pessoa
           and rownum = 1;
      end loop;

      commit;
    end;

    if vaoaviso = 'S' then
       RAISE_APPLICATION_ERROR(-20102,
                              'Verifique os erros/alertas na aba OUTPUT (DBMS_OUTPUT)');
    end if;

  end p_migra_endereco;

  procedure p_migra_pessoajuridica is

    vaomigrado     char;
    countofrecords number := 0;
    hash_atual varchar2(100);

    cursor cur_pj_unicoo is
      select p.nrregistro,
             p.nopessoa,
             p.nrcgc_cpf noabrev,
             fn_tirarmascara(p.nrcgc_cpf, 15) nrcgc_cpf,
             p.dtnascimento,
             nvl(p.nrinscest_rg, 'ISENTO') nrinscest_rg,
             p.nrcei,
             p.nrinscmun,
             nvl(ra.cdvalor_externo, p.cdramoativ) ramo_ativ,
             p.noabreviado
        from pessoa p,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_RAMO_ATIVIDADE'
                 and tc.nrseq = ce.nrseq_tab_conversao) ra
       where p.tppessoa = 'J'
         and p.cdramoativ = ra.cdvalor_interno(+)
         and not exists (select 1
                from gp.pessoa_juridica pj
               where p.nrregistro = pj.id_pessoa)

         and exists (select 1
                from (select nrregistro_cliente nrregistro
                        from producao.cliente@unicoo_homologa
                      union
                      select nrregistro_prest
                        from producao.prestador@unicoo_homologa
                      union
                      select nrregistro_usuario nrregistro
                        from usuario) a
               where a.nrregistro = p.nrregistro);

    procedure p_insere_pessoa(rpf cur_pj_unicoo%rowtype) is
      vcnpj varchar2(15);
    begin

      vaomigrado := 'N';

      if vaomigrado = 'N' then

        vcnpj := rpf.nrcgc_cpf; /*f_retorna_cpf_cnpj(rpf.nrcgc_cpf, 'J')*/
        hash_atual := gerar_hash_pessoa_unicoo(rpf.nrregistro);

        insert into gp.pessoa_juridica p
          (id_pessoa,
           id_pessoa_old,
           nm_pessoa,
           u##nm_pessoa,
           cd_cnpj,
           u##cd_cnpj,
           dt_fundacao,
           nome_abrev,
           cd_ramo_atividade,
           nm_cartao,
           nr_inscricao_estadual,
           u##nr_inscricao_estadual,
           nr_cei,
           u##nr_cei,
           nr_inscricao_municipal,
           u##nr_inscricao_municipal,
           cd_userid,
           progress_recid,
           id_pessoa_crm,
           ds_integracao_crm,
           dt_integracao_crm,
           char_5)
        values
          (rpf.nrregistro,     --id_pessoa           NUMERICO
           0,                  --id_pessoa_old       NUMERICO
           trim(rpf.nopessoa), --nm_pessoa
           trim(rpf.nopessoa), --u##nm_pessoa
           vcnpj,              --cd_cnpj
           vcnpj,              --u##cd_cnpj
           rpf.dtnascimento,   --dt_fundacao
           rpf.noabrev,        --nome_abrev
           decode(rpf.ramo_ativ,'I',0,'L',0,'U',0,rpf.ramo_ativ),  --cd_ramo_atividade   NUMERICO
           rpf.noabreviado,    --nm_cartao          --estava trazendo as 50 posicoes iniciais do nome da pessoa
           rpf.nrinscest_rg,   --nr_inscricao_estadual       VARCHAR
           rpf.nrinscest_rg,   --u##nr_iscricao_estadual     VARCHAR
           rpf.nrcei,          --nr_cei                      VARCHAR2(40)
           rpf.nrcei,          --u##nr_cei                   VARCHAR2(40)
           rpf.nrinscmun,      --nr_inscricao_municipal      VARCHAR2(40)
           rpf.nrinscmun,      --u##nr_inscricao_municipal   VARCHAR2(40)
           'MIGRACAO',         --cd_userid
           gp.pessoa_juridica_seq.nextval, --progress_recid
           0,                              --id_pessoa_crm
           ' ',                            --ds_integracao_crm
           trunc(sysdate),
           hash_atual
           );                --dt_integracao_crm

        --vqtregistro1 := vqtregistro1 + 1;

        countofrecords := countofrecords + 1;
        if (countofrecords >= 10000) then
          --commit;
          countofrecords := 0;
        end if;
      end if;
    end p_insere_pessoa;

  begin
    --se hash tiver mudado, apagar registro no TOTVS para ser recriado
    for x in (select pj.char_5, pj.progress_recid, pj.id_pessoa from gp.pessoa_juridica pj) loop
      if x.char_5 <> gerar_hash_pessoa_unicoo(x.id_pessoa) then
        delete from gp.pessoa_juridica pj where pj.progress_recid = x.progress_recid;
        log_dbms('vai apagar pessoa juridica pois mudou o hash: ' || x.id_pessoa);
      end if;
    end loop;

    /*as informac?es de cpf/cnpj e nome abreviado sempre dever?o
    ser obtidos do cadastro do ems*/

    for rpessoa in cur_pj_unicoo loop
      p_insere_pessoa(rpessoa);
    end loop;

  end p_migra_pessoajuridica;

  procedure p_migra_contato is
    countofrecords number := 0;
    vaoexiste      char;
    nrcelular_aux VARCHAR2(24);
    hash_atual varchar2(100);

    --1-Telefone Comercial
    --2-Telefone Residencial
    --3-Telefone Celular
    --4-Email
    --5-MSN
    --6-Google talk (IMS)
    --7-HomePage

    cursor cur_endereco is
      select distinct p.tppessoa,
                      to_char(decode(nrtelefone, '0', null, nrtelefone)) nrtelefone,
                      e.nrregistro,
                      to_char(decode(nrfax, '0', null, nrfax)) nrfax,
                      to_char(decode(cdemail, '0', null, cdemail)) cdemail,
                      to_char(decode(nrcelular, '0', null, nrcelular)) nrcelular,
                      e.nocontato,
                      e.nocargocontato,
                      to_char(decode(e.nrddd, '0', null, e.nrddd)) nrddd,
                      to_char(decode(e.cdemail_adicional,
                                     '0',
                                     null,
                                     e.cdemail_adicional)) cdemail_adicional,
                      to_char(decode(e.txobservacoes,
                                     '0',
                                     null,
                                     '/  00000000',
                                     null,
                                     substr(e.txobservacoes, 1, 100))) txobservacoes
        from endereco e, pessoa p, tipo_de_endereco t
       where p.nrregistro = e.nrregistro
         and t.tpendereco = e.tpendereco
         and (t.aopessoafisica = 'S' or t.aopessoajuridica = 'S')
         and (e.nrtelefone is not null or e.nrfax is not null or
             e.nocontato is not null or e.nocargocontato is not null or
             e.cdemail is not null or e.nrcelular is not null or
             e.cdemail_adicional is not null);
  begin

    --se hash tiver mudado, apagar registro no TOTVS para ser recriado
    for x in (select c.char_4, c.progress_recid, c.id_pessoa from gp.contato_pessoa c) loop
      if x.char_4 <> gerar_hash_endereco_unicoo(x.id_pessoa) then
        delete from gp.contato_pessoa c where c.progress_recid = x.progress_recid;
        log_dbms('vai apagar contato pois mudou o hash: ' || x.id_pessoa);
      end if;
    end loop;

    for re in cur_endereco loop

      begin

        hash_atual := gerar_hash_endereco_unicoo(re.nrregistro);

        if (re.nrtelefone is not null) then

          begin
            select 'S'
              into vaoexiste
              from gp.contato_pessoa cp
             where cp.ds_contato =
                   decode(re.nrddd,
                          null,
                          re.nrtelefone,
                          re.nrddd || ' ' || re.nrtelefone)
               and cp.id_pessoa = re.nrregistro;
          exception
            when no_data_found then

              insert into gp.contato_pessoa
                (id_contato,
                 tp_contato,
                 nm_contato,
                 ds_contato,
                 ds_ramal,
                 id_pessoa,
                 cd_userid,
                 char_4,
                 progress_recid)
              values
                (gp.seq_contato_pessoa.nextval,
                 decode(re.tppessoa, 'F', 2, 1),
                 substr(decode(re.nocontato,
                               null,
                               'TELEFONE',
                               re.nocontato ||
                               decode(re.nocargocontato,
                                      null,
                                      '',
                                      '-' || re.nocargocontato)),
                        1,
                        40),
                 decode(re.nrddd,
                        null,
                        re.nrtelefone,
                        re.nrddd || ' ' || re.nrtelefone),
                 ' ',
                 re.nrregistro,
                 'migracao',
                 hash_atual,
                 gp.contato_pessoa_seq.nextval);
          end;
        end if;

        if (re.nrfax is not null) then

          begin
            select 'S'
              into vaoexiste
              from gp.contato_pessoa cp
             where cp.ds_contato =
                   decode(re.nrddd,
                          null,
                          re.nrfax,
                          re.nrddd || ' ' || re.nrfax)
               and cp.id_pessoa = re.nrregistro;
          exception
            when no_data_found then

              insert into gp.contato_pessoa
                (id_contato,
                 tp_contato,
                 nm_contato,
                 ds_contato,
                 ds_ramal,
                 id_pessoa,
                 cd_userid,
                 char_4,
                 progress_recid)
              values
                (gp.seq_contato_pessoa.nextval,
                 decode(re.tppessoa, 'F', 2, 1),
                 substr(decode(re.nocontato,
                               null,
                               'FAX',
                               re.nocontato ||
                               decode(re.nocargocontato,
                                      null,
                                      '',
                                      '-' || re.nocargocontato)),
                        1,
                        40),
                 decode(re.nrddd,
                        null,
                        re.nrfax,
                        re.nrddd || ' ' || re.nrfax),
                 ' ',
                 re.nrregistro,
                 'migracao',
                 hash_atual,
                 gp.contato_pessoa_seq.nextval);

          end;

        end if;

        if (re.cdemail is not null) then
          begin
            select 'S'
              into vaoexiste
              from gp.contato_pessoa cp
             where cp.ds_contato = re.cdemail
               and cp.id_pessoa = re.nrregistro;
          exception
            when no_data_found then

              insert into gp.contato_pessoa
                (id_contato,
                 tp_contato,
                 nm_contato,
                 ds_contato,
                 ds_ramal,
                 id_pessoa,
                 cd_userid,
                 char_4,
                 progress_recid)
              values
                (gp.seq_contato_pessoa.nextval,
                 4,
                 substr(decode(re.nocontato,
                               null,
                               'E-MAIL',
                               re.nocontato ||
                               decode(re.nocargocontato,
                                      null,
                                      '',
                                      '-' || re.nocargocontato)),
                        1,
                        40),
                 re.cdemail,
                 ' ',
                 re.nrregistro,
                 'migracao',
                 hash_atual,
                 gp.contato_pessoa_seq.nextval);
          end;
        end if;

        if (re.cdemail_adicional is not null) then
          begin
            select 'S'
              into vaoexiste
              from gp.contato_pessoa cp
             where cp.ds_contato = SUBSTR(re.cdemail_adicional, 1, 50)
               and cp.id_pessoa = re.nrregistro;
          exception
            when no_data_found then

              insert into gp.contato_pessoa
                (id_contato,
                 tp_contato,
                 nm_contato,
                 ds_contato,
                 ds_ramal,
                 id_pessoa,
                 cd_userid,
                 char_4,
                 progress_recid)
              values
                (gp.seq_contato_pessoa.nextval,
                 4,
                 substr(decode(re.nocontato,
                               null,
                               'E-MAIL ADICIONAL',
                               re.nocontato ||
                               decode(re.nocargocontato,
                                      null,
                                      '',
                                      '-' || re.nocargocontato)),
                        1,
                        40),
                 SUBSTR(re.cdemail_adicional, 1, 50),
                 ' ',
                 re.nrregistro,
                 'migracao',
                 hash_atual,
                 gp.contato_pessoa_seq.nextval);
          end;
        end if;

        if (re.nrcelular is not null) then
          --se nrcelular tiver no maximo 9 digitos, concatenar o DDD. caso contrario, considera-se que ja esta com DDD
          if length(trim(replace(replace(replace(re.nrcelular,' ',''),'.',''),'-',''))) <= 9
          and re.nrddd is not null
          then
            nrcelular_aux := re.nrddd || ' ' || re.nrcelular;
          else
            nrcelular_aux := re.nrcelular;
          end if;

          begin
            select 'S'
              into vaoexiste
              from gp.contato_pessoa cp
             where cp.ds_contato = nrcelular_aux
               and cp.id_pessoa = re.nrregistro;

          exception
            when no_data_found then

              insert into gp.contato_pessoa
                (id_contato,
                 tp_contato,
                 nm_contato,
                 ds_contato,
                 ds_ramal,
                 id_pessoa,
                 cd_userid,
                 char_4,
                 progress_recid)
              values
                (gp.seq_contato_pessoa.nextval,
                 3,
                 substr(decode(re.nocontato,
                               null,
                               'CELULAR',
                               re.nocontato ||
                               decode(re.nocargocontato,
                                      null,
                                      '',
                                      '-' || re.nocargocontato)),
                        1,
                        40),
                 nrcelular_aux,
                 ' ',
                 re.nrregistro,
                 'migracao',
                 hash_atual,
                 gp.contato_pessoa_seq.nextval);
          end;
        end if;

      end;

      countofrecords := countofrecords + 1;
      if (countofrecords >= 5000) then
        --        commit;
        countofrecords := 0;
      end if;
    end loop;

    --    commit;

  end p_migra_contato;

  procedure p_migra_pessoa_fisica is

    vcpf           varchar(15);
    vaomigrado     char;
    countofrecords number := 0;
    hash_atual varchar2(100);

    cursor cur_pf_unicoo is
      select p.nrregistro,
             p.nopessoa,
             trim(f_abrevia_nome(p.nopessoa, 12, 'PEA')) noabrev,
             nvl(noabreviado, trim(f_abrevia_nome(p.nopessoa, 25, 'PEA'))) noabreviado,
             nvl(fn_tirarmascara(p.nrcgc_cpf, 15), ' ') nrcgc_cpf,
             nvl(trim(p.nrinscest_rg), ' ') nrinscest_rg,
             nvl(conversao.cdvalor_externo, 9) cdestadocivil,
             p.dtnascimento,
             p.cdsexo,
             case
               when trim(p.nrinscest_rg) is not null then
                nvl(p.cdestado_emissor_rg, ' ')
               else
                ' '
             end cdestado_emissor_rg,
             p.nrpis,
             nvl(p.nomae, 'NAO INFORMADO') nomae,
             nvl(trim(p.nopai), ' ') nopai,
             case
               when trim(p.nrinscest_rg) is not null then

                nvl((select cdvalor_externo
                      from temp_depara_orgao_emissor o
                     where o.cdvalor_interno = P.NOORGAO_EMISSOR_RG),
                    'OUTROS EMISSORES')
               else
                ' '
             end noorgao_emissor_rg,
             case
               when trim(p.nrinscest_rg) is not null then
                p.dtexpedicao_rg
               else
                null
             end dtexpedicao_rg,
             trim(p.noesposo) noesposo,
             p.nrcei,
             p.nrcns,
             nvl(p.cdpais_emissor_id, 32) pais_depara,
             case
               when p.nrdeclaracao_nasc_vivo is null then
                ' '
               else
                lpad(p.nrdeclaracao_nasc_vivo, 11, 0)
             end nrdeclaracao_nasc_vivo,
             p.cdcidade_naturalidade,
             fn_tirarmascara(trim(p.nrreg_nascto), 6) nrreg_nascto,
             TRIM(p.nocartorio_reg) NOCARTORIO_REG,
             TRIM(P.TXOBSERVACOES) TXOBSERVACOES
        from pessoa p,
             (select cdvalor_interno, cdvalor_externo
                from mig_tab_conversao r, mig_tab_conversao_exp re
               where r.nrseq = re.nrseq_tab_conversao
                 and r.notabela = 'MIGRACAO_ESTADO_CIVIL') conversao
       where p.tppessoa = 'F'
         and p.cdestadocivil = conversao.cdvalor_interno(+)
         and exists (select 1
                from (select nrregistro_cliente nrregistro
                        from producao.cliente@unicoo_homologa
                      union
                      select nrregistro_prest
                        from producao.prestador@unicoo_homologa
                      union
                      select nrregistro_usuario nrregistro
                        from usuario
                      union
                      select nrregistro_dependente nrregistro
                        from prestador_dependente
                        ) a
               where a.nrregistro = p.nrregistro)
         and not exists (select 1
                from gp.pessoa_fisica pf
               where pf.id_pessoa = p.nrregistro);

  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    --se hash tiver mudado, apagar registro no TOTVS para ser recriado
    for x in (select pf.char_5, pf.progress_recid, pf.id_pessoa from gp.pessoa_fisica pf) loop
      if x.char_5 <> gerar_hash_pessoa_unicoo(x.id_pessoa) then
        delete from gp.pessoa_fisica pf where pf.progress_recid = x.progress_recid;
        delete from gp.pfis_inform_compltar c where c.id_pessoa = x.id_pessoa;

        log_dbms('vai apagar pessoa pois mudou o hash: ' || x.id_pessoa);
      end if;
    end loop;

    for rpf in cur_pf_unicoo loop
      vaomigrado := 'N';

      if vaomigrado = 'N' then

        vcpf := rpf.nrcgc_cpf; --f_retorna_cpf_cnpj(rpf.nrcgc_cpf, 'F');

        hash_atual := gerar_hash_pessoa_unicoo(rpf.nrregistro);

        insert into gp.pessoa_fisica
          (id_pessoa,
           u##nm_pessoa,
           nm_pessoa,
           u##cd_cpf,
           cd_cpf,
           dt_nascimento,
           in_estado_civil,
           nome_abrev,
           cd_cbo,
           lg_sexo,
           u##nr_identidade,
           nr_identidade,
           uf_emissor_ident,
           nm_cartao,
           u##nm_internacional,
           nm_internacional,
           ds_nacionalidade,
           ds_natureza_doc,
           nr_pis_pasep,
           u##nm_mae,
           nm_mae,
           nm_pai,
           ds_orgao_emissor_ident,
           nm_pais_emissor_ident,
           dt_emissao_ident,
           --nm_conjuge,
           nr_cei,
           cdcartaonacionalsaude,
           cd_userid,
           progress_recid,
           char_1,
           char_2,
           dec_1,
           dec_2,
           dec_3,
           dec_4,
           dec_5,
           int_1,
           int_2,
           int_3,
           int_4,
           int_5,
           u_char_1,
           u_char_2,
           u_char_3,
           u_dec_1,
           u_dec_2,
           u_dec_3,
           u_int_1,
           u_int_2,
           u_int_3,
           nm_conjuge,
           dt_atualizacao,
           id_pessoa_crm,
           ds_integracao_crm,
           int_6,
           int_7,
           int_8,
           int_9,
           int_10,
           int_11,
           int_12,
           int_13,
           int_14,
           int_15,
           dec_6,
           dec_7,
           dec_8,
           dec_9,
           dec_10,
           char_6,
           char_7,
           char_8,
           char_9,
           char_10,
           char_11,
           char_12,
           char_13,
           char_14,
           char_15,
           nom_prim,
           u##nom_prim,
           char_5)
        values
          (rpf.nrregistro,
           replace(trim(rpf.nopessoa), '  ', ' '),
           replace(trim(rpf.nopessoa), '  ', ' '),
           vcpf,
           vcpf,
           rpf.dtnascimento,
           rpf.cdestadocivil,
           rpf.noabrev,
           0,
           decode(rpf.cdsexo, 'F', 0, 1),
           nvl(rpf.nrinscest_rg, 0),
           nvl(rpf.nrinscest_rg, 0),
           nvl(rpf.cdestado_emissor_rg, ' '),
           rpf.noabreviado, --substr(rpf.nopessoa, 1, 50),
           nvl(reverse(substr(reverse(rtrim(replace(replace(rpf.nopessoa,
                                                            'JUNIOR',
                                                            null),
                                                    'NETO',
                                                    null))),
                              1,
                              instr(reverse(rtrim(replace(replace(rpf.nopessoa,
                                                                  'JUNIOR',
                                                                  null),
                                                          'NETO',
                                                          null))),
                                    ' ') - 1)),
               ' '),
           nvl(reverse(substr(reverse(rtrim(replace(replace(rpf.nopessoa,
                                                            'JUNIOR',
                                                            null),
                                                    'NETO',
                                                    null))),
                              1,
                              instr(reverse(rtrim(replace(replace(rpf.nopessoa,
                                                                  'JUNIOR',
                                                                  null),
                                                          'NETO',
                                                          null))),
                                    ' ') - 1)),
               ' '),
           'Brasileira',
           'Identidade',
           nvl(trim(rpf.nrpis), 0),
           nvl(replace(rpf.nomae, '  ', ' '), 'NAO INFORMADO'),
           nvl(replace(rpf.nomae, '  ', ' '), 'NAO INFORMADO'),
           rpf.nopai,
           RPF.NOORGAO_EMISSOR_RG,
           'BRASIL',
           rpf.dtexpedicao_rg,
           --rpf.noesposo,
           rpf.nrcei,
           nvl(rpf.nrcns, 0),
           'migracao',
           gp.pessoa_fisica_seq.nextval,
           ' ',
           rpf.nrdeclaracao_nasc_vivo,
           0,
           0,
           0,
           0,
           nvl(rpf.cdcidade_naturalidade, 0),
           0,
           0,
           0,
           0,
           0,
           ' ',
           ' ',
           ' ',
           0,
           0,
           0,
           0,
           0,
           0,
           rpf.noesposo,
           trunc(sysdate),
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           ' ',
           ' ',
           ' ',
           ' ',
           ' ',
           ' ',
           ' ',
           ' ',
           ' ',
           ' ',
           nvl((substr((rtrim(replace(replace(rpf.nopessoa, 'JUNIOR', null),
                                      'NETO',
                                      null))),
                       1,
                       instr((rtrim(replace(replace(rpf.nopessoa,
                                                    'JUNIOR',
                                                    null),
                                            'NETO',
                                            null))),
                             ' ') - 1)),
               ' '),
           nvl((substr((rtrim(replace(replace(rpf.nopessoa, 'JUNIOR', null),
                                      'NETO',
                                      null))),
                       1,
                       instr((rtrim(replace(replace(rpf.nopessoa,
                                                    'JUNIOR',
                                                    null),
                                            'NETO',
                                            null))),
                             ' ') - 1)),
               ' '),
               hash_atual);

        --inserir as informações de registro de nascimento e cartorio, quando existirem, no campo observações na tabela
        --pfis_inform_compltar. Estas informações aparecem no cadastro da pessoa, aba "Informações Complementares"
        if rpf.nrreg_nascto is not null or rpf.txobservacoes is not null then
          begin
            insert into pfis_inform_compltar
              (id_pessoa,
               ind_funcao,
               u##ind_funcao,
               cod_usuar_ult_atualiz,
               dat_ult_atualiz,
               des_obs,
               progress_recid)
            values
              (rpf.nrregistro,   --id_pessoa
               'pessoa-fisica',  --ind_funcao
               'PESSOA-FISICA',  --u##ind_funcao
               'migracao',       --cod_usuar_ult_atualiz
               sysdate,          --dat_ult_atualiz
               decode(rpf.nrreg_nascto,
                      null,
                      '',
                      'REGISTRO DE NASCIMENTO: ' || rpf.NRREG_NASCTO || ' - ' ||
                      rpf.NOCARTORIO_REG) ||
               DECODE(RPF.Txobservacoes,
                      null,
                      '',
                      decode(rpf.nrreg_nascto, null, '', chr(13)) ||
                      'OBSERVACOES: ' || rpf.txobservacoes), --des_obs
               gp.pfis_inform_compltar_seq.nextval);         --progress_recid
             exception
               when dup_val_on_index then
                 null;
             end;
        end if;

        --vqtregistro1 := vqtregistro1 + 1;

        countofrecords := countofrecords + 1;
        if (countofrecords >= 10000) then
          --          commit;
          countofrecords := 0;
        end if;
      end if;

    end loop;
  end p_migra_pessoa_fisica;

  --objetos migração estrutura 05/01/2016
  procedure p_carga_t_v_plano_padrao is
  begin
    delete t_v_plano_padrao;
    insert into t_v_plano_padrao
      select * from v_plano_padrao;
    commit;
  end p_carga_t_v_plano_padrao;

  procedure p_migra_tipo_plano is
    vidplanoans        number;
    vaoexistepadraocob char;
    vaoerro            char;
    vaoerro_aux        char;
    --vaoexisteregplano  char;
    --vaoexistetipplano  char;
    vaoexistepadr char;
    tti_pl_sa     gp.ti_pl_sa%rowtype;

  begin
    delete tm_erros_estrutura;

    p_carga_t_v_plano_padrao;

    for vr in (select * from t_v_plano_padrao) loop

      if vr.cd_padrao_cobertura is not null then

        begin
          select 'S'
            into vaoerro
            from t_v_plano_padrao v
           where v.cd_modalidade = vr.cd_modalidade
             and v.cd_plano = vr.cd_plano
             and v.cd_tipo_plano = vr.cd_tipo_plano
             and v.cd_padrao_cobertura is null;
        exception
          when no_data_found then
            vaoerro := 'N';

        end;

        if vaoerro = 'S' then
          vaoerro_aux := 'S';
          insert into tm_erros_estrutura
          values
            (vr.cd_modalidade, vr.cd_plano, vr.cd_tipo_plano, null);
          --commit;
        end if;

      end if;

    end loop;

    if vaoerro_aux = 'S' then

      raise_application_error(-20102,
                              'Foram encontrados Tipos de Plano com a coluna Padrão de Cobertura informada e

                                 outras ocorrências do mesmo tipo de plano com o Padrão de Cobertura em branco.

                                 Se o Tipo de Plano usa Padrão de Cobertura, então todas as suas ocorrências devem ter

                                 essa coluna preenchida.

                                Verifique na tabela tm_erros_estrutura');

    else

      for cp in (select pdr.cdsituacao_ans,
                         mp.cd_modalidade,
                         mp.cd_plano,
                         mp.cd_tipo_plano,
                         pdr.nocontrato,
                         case
                           when pdr.aonova_legislacao = 'S' then
                            pdr.cdproduto_min_saude
                           else
                            '0'
                         end cdn_plano_ans, -- regulamentado
                         case
                           when pdr.aonova_legislacao = 'N' then
                            pdr.cdproduto_min_saude
                           else
                            ' '
                         end cod_plano_operadora, -- não regulamentado
                         case
                           when pdr.aonova_legislacao = 'S' then
                            1
                           else
                            case
                              when pdr.aoadaptado = 'S' then
                               3
                              else
                               case
                                 when pdr.aonova_legislacao = 'N' and
                                      pdr.aoadaptado = 'N' then
                                  2
                               end
                            end
                         end in_tipo_regulamentacao,
                         nvl(pdr.nocomercial, pdr.noidentif_plano) cod_livre_1,
                         pdr.cdcobertura_ans NUM_LIVRE_5,
                         pdr.cdcontratacao_ans NUM_LIVRE_4,
                         pdr.cdncontratacao_ptu num_livre_3,
                         decode(tpc.tpplano, 'C', '03', 'B', '02', '01') cod_livre_2,
                         tpc.cdrede_referencia
                   from  t_v_plano_padrao    mp,
                         tipo_plano_contrato tpc,
                         contrato_padrao     pdr
                  where mp.cdcontrato = tpc.cdcontrato
                    and mp.tpplano = tpc.tpplano
                    and pdr.cdcontrato = tpc.cdcontrato) loop

        begin
          --
          select 'S'
            into vaomigrado
            from gp.reg_plano_saude rps
           where rps.cdn_plano_ans          = cp.cdn_plano_ans
             and rps.cod_plano_operadora    = cp.cod_plano_operadora
             and rps.in_tipo_regulamentacao = cp.in_tipo_regulamentacao;
        exception
          when no_data_found then
            vaomigrado := 'N';
        end;

        if vaomigrado = 'N' then
          select gp.seq_reg_plano_saude.nextval into vidplanoans from dual;

          insert into gp.reg_plano_saude
            (dat_livre_2,
             idi_registro,
             cdn_plano_ans,
             cod_plano_operadora,
             in_tipo_regulamentacao,
             cod_livre_1,
             cod_livre_2, --classe hospitalar
             cod_livre_3, --abrangencia (rede_referencia no unicoo)
             cod_livre_4,
             cod_livre_5,
             dat_livre_1,
             dat_livre_3,
             dat_livre_4,
             dat_livre_5,
             val_livre_1,
             val_livre_2,
             val_livre_3,
             val_livre_4,
             val_livre_5,
             log_livre_1,
             log_livre_2,
             log_livre_3,
             log_livre_4,
             log_livre_5,
             num_livre_1, --num_apolice
             num_livre_2,
             num_livre_3, --cdncontratacao_ptu
             num_livre_4, --cdcontratacao_ans
             num_livre_5, --cdcobertura_ans
             dat_cadastro,
             dat_alteracao,
             nom_plano_ans,
             progress_recid)
          values
            (null, --,dat_livre_2,
             vidplanoans, --,idi_registro,
             cp.cdn_plano_ans, --,cdn_plano_ans,
             cp.cod_plano_operadora, --,cod_plano_operadora,
             cp.in_tipo_regulamentacao, --,in_tipo_regulamentacao,
             cp.cod_livre_1, --,cod_livre_1,
             cp.cod_livre_2, --,cod_livre_2, --classe hospitalar
             cp.cdrede_referencia, --cod_livre_3 - código da ABRANGÊNCIA (ABRAPLAN),
             ' ', --,cod_livre_4,
             ' ', --,cod_livre_5,
             null, --,dat_livre_1,
             null, --,dat_livre_3,
             null, --,dat_livre_4,
             null, --,dat_livre_5,
             0, --,val_livre_1, --VALOR COPARTICIPACAO
             0, --,val_livre_2,
             0, --,val_livre_3,
             0, --,val_livre_4,
             0, --,val_livre_5,
             0, --,log_livre_1,
             0, --,log_livre_2,
             0, --,log_livre_3,
             0, --,log_livre_4,
             0, --,log_livre_5,

             case when f_parametro('NRUNIMED') = '023'
                  then -- regra específica solicitada pela Unimed Nova Iguaçu
                       3 -- LIVRE
                  else
                       1 -- NUM DA APOLICE 1=TP_PLANO + MODALIDADE + PROPOSTA
             end, --num_livre_1

             cp.cdsituacao_ans, --,num_livre_2,
             cp.num_livre_3, --,cdncontratacao_ptu
             cp.num_livre_4, --,cdcontratacao_ans
             cp.num_livre_5, --,cdcobertura_ans
             trunc(sysdate), --,dat_cadastro,
             trunc(sysdate), --,dat_alteracao,
             case when f_parametro('NRUNIMED') = '023'
                  then -- regra específica solicitada pela Unimed Nova Iguaçu
                       case when cp.in_tipo_regulamentacao = 1
                            then to_char(cp.cdn_plano_ans)
                            else cp.cod_plano_operadora
                       end || ' - ' || nvl(cp.nocontrato, '')
                  else
                       decode(cp.in_tipo_regulamentacao,1,'REG.',2,'NREG.',3,'ADAP.') ||
                       nvl(cp.nocontrato, '') || ' (' ||
                       case when cp.in_tipo_regulamentacao = 1
                            then to_char(cp.cdn_plano_ans)
                            else cp.cod_plano_operadora
                       end || ')'
             end, --,nom_plano_ans,
             gp.reg_plano_saude_seq.nextval --,progress_recid
             );

          p_commit;

        end if;
      end loop;

      for tp in (

                 select cd_modalidade,
                         cd_plano,
                         cd_tipo_plano,
                         u##nm_tipo_plano,
                         nm_tipo_plano,
                         u##nm_tipo_plano_reduz,
                         nm_tipo_plano_reduz,
                         dt_inicio_comerc,
                         dt_fim_comerc,
                         ds_observacao##1,
                         ds_observacao##2,
                         ds_observacao##3,
                         dt_atualizacao,
                         cd_userid,
                         nr_dias_reconsulta,
                         pc_acrescimo,
                         pc_desconto,
                         pc_acrescimo_inscr,
                         pc_desconto_inscr,
                         dt_lim_acres_mens,
                         dt_lim_acres_inscr,
                         dt_lim_desc_mens,
                         dt_lim_desc_inscr,
                         qt_validade_termo,
                         qt_validade_cart,
                         int_2,
                         pc_desc_prom_taxa,
                         pc_desc_prom_pl,
                         dt_val_prom_tax,
                         dt_val_prom_pl,
                         int_5,
                         char_4,
                         max(cd_cla_hos) cd_cla_hos,
                         int_4,
                         int_6,
                         char_6,
                         um_validade_cart,
                         um_validade_termo,
                         lg_obriga_responsavel,
                         cd_grau_parentesco,
                         lgusapadraocobertura,
                         cd_registro_plano,
                         qt_validade_cartao,
                         nr_dias_isento_rn,
                         lg_fatura_co_externo,
                         log_2,
                         log_3,
                         date_1,
                         date_2,
                         date_3,
                         um_validade_cartao,
                         cd_plano_operadora,
                         char_3##1,
                         char_3##2,
                         dec_1, --Desconsidera analise de credito
                         dec_3,
                         dec_2,
                         u_char_1,
                         u_char_2,
                         u_char_3,
                         u_int_1,
                         u_int_2,
                         u_int_3,
                         u_date_1,
                         u_date_2,
                         u_date_3,
                         u_log_1,
                         u_log_2,
                         u_log_3,
                         u_dec_1,
                         u_dec_2,
                         u_dec_3,
                         char_5,
                         date_4,
                         date_5,
                         dec_4,
                         dec_5,
                         log_4,
                         log_5,
                         cd_procs_excl_cobert,
                         int_1,
                         in_tipo_movto_recebido,
                         int_3,
                         lgtrataopcionalpadrao,
                         cd_plano_ans,
                         in_utiliza_dt_base_cpt,
                         idi_plano_ans,
                         des_observacao,
                         nom_audit,
                         progress_recid,
                         cd_padrao_cobertura,
                         noidentif_plano,
                         cdcontrato,
                         idi_registro
                   from (select  cd_modalidade,
                                 cd_plano,
                                 cd_tipo_plano,
                                 --                                 nvl(a.nm_tipo_plano, ' ') u##nm_tipo_plano,
                                 --                                 nvl(a.nm_tipo_plano, ' ') nm_tipo_plano,
                                 --                                 nvl(a.nm_tipo_plano, ' ') u##nm_tipo_plano_reduz,
                                 --                                 nvl(a.nm_tipo_plano, ' ') nm_tipo_plano_reduz,
                                 --                                 '01/01/1900' dt_inicio_comerc,
                                 upper(nvl(a.noidentif_plano, ' ')) u##nm_tipo_plano,
                                 nvl(a.noidentif_plano, ' ') nm_tipo_plano,
                                 upper(nvl(substr(a.noidentif_plano, 1, 15), ' ')) u##nm_tipo_plano_reduz,
                                 nvl(substr(a.noidentif_plano, 1, 15), ' ') nm_tipo_plano_reduz,
                                 '01/01/1900' dt_inicio_comerc,
                                 '31/12/9999' dt_fim_comerc,
                                 'MIGRACAO' ds_observacao##1,
                                 ' ' ds_observacao##2,
                                 ' ' ds_observacao##3,
                                 trunc(sysdate) dt_atualizacao,
                                 ' ' cd_userid,
                                 30 nr_dias_reconsulta,
                                 0 pc_acrescimo,
                                 0 pc_desconto,
                                 0 pc_acrescimo_inscr,
                                 0 pc_desconto_inscr,
                                 null dt_lim_acres_mens,
                                 null dt_lim_acres_inscr,
                                 null dt_lim_desc_mens,
                                 null dt_lim_desc_inscr,
                                 f_tm_parametro('QTVALIDTERMO') qt_validade_termo,
                                 f_tm_parametro('QTVALIDCART') qt_validade_cart,
                                 a.int_2 int_2,
                                 0 pc_desc_prom_taxa,
                                 0 pc_desc_prom_pl,
                                 null dt_val_prom_tax,
                                 null dt_val_prom_pl,
                                 0 int_5,
                                 ' ' char_4,
                                 decode(a.tpplano, 'A', 1, 'B', 2, 3) cd_cla_hos,
                                 0 int_4,
                                 a.int_6 int_6, -- segmentacao assistencial
                                 ' ' char_6,
                                 f_tm_parametro('UNVALIDCART') um_validade_cart,
                                 f_tm_parametro('UNVALIDTERMO') um_validade_termo,
                                 /* regra comentada pois deve ser sempre desligado durante a migração. exceto pea
                                    somente pode ser ativado após encerrar a migração dos beneficiários.
                                 case
                                   when a.cd_modalidade = pcd_modalidade_pea then
                                    1
                                   when a.tpusu_contrato = 'E' then --EMPRESA
                                    1
                                   when a.tpusu_contrato = 'C' then --COOPERADO
                                    1
                                   else --PARTICULAR, INTERCAMBIO (UNIMEDS)
                                    0
                                 end lg_obriga_responsavel,
                                 */
                                 case
                                   when a.cd_modalidade = pcd_modalidade_pea then
                                    1
                                   else
                                    0
                                 end lg_obriga_responsavel,
                                 1 cd_grau_parentesco,
                                 decode(a.cd_padrao_cobertura, null, 0, 1) lgusapadraocobertura,
                                 0 cd_registro_plano,
                                 f_tm_parametro('QTVALIDCART') qt_validade_cartao,
                                 30 nr_dias_isento_rn,
                                 decode(a.tpcontrato, 'SP', 1, 0) lg_fatura_co_externo,
                                 0 log_2,
                                 0 log_3,
                                 null date_1,
                                 null date_2,
                                 null date_3,
                                 f_tm_parametro('UNVALIDCART') um_validade_cartao,
                                 ' ' cd_plano_operadora,
                                 ' ' char_3##1,
                                 ' ' char_3##2,
                                 1 dec_1, --Desconsidera analise de credito
                                 0 dec_3,
                                 1 dec_2, -- LG_REPLICA_ENDERECO_TITULAR(DEFAULT)
                                 ' ' u_char_1,
                                 ' ' u_char_2,
                                 ' ' u_char_3,
                                 0 u_int_1,
                                 0 u_int_2,
                                 0 u_int_3,
                                 null u_date_1,
                                 null u_date_2,
                                 null u_date_3,
                                 0 u_log_1,
                                 0 u_log_2,
                                 0 u_log_3,
                                 0 u_dec_1,
                                 0 u_dec_2,
                                 0 u_dec_3,
                                 ' ' char_5,
                                 null date_4,
                                 null date_5,
                                 0 dec_4,
                                 0 dec_5,
                                 0 log_4,
                                 0 log_5,
                                 ' ' cd_procs_excl_cobert,
                                 0 int_1,
                                 0 in_tipo_movto_recebido,
                                 a.int_3 int_3,
                                 decode(a.cd_padrao_cobertura, null, 0, 1) lgtrataopcionalpadrao,
                                 0 cd_plano_ans,
                                 0 in_utiliza_dt_base_cpt,
                                 case
                                   when a.cd_padrao_cobertura is null then
                                    a.idi_registro
                                   else
                                    0
                                 end idi_plano_ans,
                                 --                                 'MIGRACAO' des_observacao,
                                 'PLANO DE SAUDE: ' || a.cdcontrato des_observacao,
                                 ' ' nom_audit,
                                 0 progress_recid,
                                 a.cd_padrao_cobertura,
                                 a.noidentif_plano,
                                 a.idi_registro,
                                 a.cdcontrato
                            from (select distinct mp.cd_modalidade,
                                                  mp.cd_plano,
                                                  mp.cd_tipo_plano,
                                                  cp.cdcontratacao_ans int_2,
                                                  cp.cdncontratacao_ptu int_3,
                                                  nvl(cp.cdcobertura_ans,'00') int_6, -- segmentacao assistencial
                                                  (select tp.txacomodacao
                                                     from tipo_de_plano tp
                                                    where tp.tpplano = mp.tpplano) nm_tipo_plano,
                                                  mp.tpplano,
                                                  --r.idi_registro,
                                                  nvl((select r.idi_registro from gp.reg_plano_saude r
                                                   where (to_char(r.cdn_plano_ans) = mp.cdproduto or r.cod_plano_operadora = mp.cdproduto)
                                                     and rownum = 1),0) idi_registro,
                                                  mp.cd_padrao_cobertura,
                                                  cp.noidentif_plano,
                                                  mp.cdcontrato,
                                                  cp.tpusu_contrato,
                                                  cp.tpcontrato
                                    from t_v_plano_padrao   mp,
                                         contrato_padrao    cp,
                                         gp.reg_plano_saude r
                                   where cp.cdcontrato = mp.cdcontrato
                                     --and (to_char(r.cdn_plano_ans) = mp.cdproduto or r.cod_plano_operadora = mp.cdproduto)
                                     ) a

                          )
                  group by cd_modalidade,
                            cd_plano,
                            cd_tipo_plano,
                            u##nm_tipo_plano,
                            nm_tipo_plano,
                            u##nm_tipo_plano_reduz,
                            nm_tipo_plano_reduz,
                            dt_inicio_comerc,
                            dt_fim_comerc,
                            ds_observacao##1,
                            ds_observacao##2,
                            ds_observacao##3,
                            dt_atualizacao,
                            cd_userid,
                            nr_dias_reconsulta,
                            pc_acrescimo,
                            pc_desconto,
                            pc_acrescimo_inscr,
                            pc_desconto_inscr,
                            dt_lim_acres_mens,
                            dt_lim_acres_inscr,
                            dt_lim_desc_mens,
                            dt_lim_desc_inscr,
                            qt_validade_termo,
                            qt_validade_cart,
                            int_2,
                            pc_desc_prom_taxa,
                            pc_desc_prom_pl,
                            dt_val_prom_tax,
                            dt_val_prom_pl,
                            int_5,
                            char_4,
                            int_4,
                            int_6,
                            char_6,
                            um_validade_cart,
                            um_validade_termo,
                            lg_obriga_responsavel,
                            cd_grau_parentesco,
                            lgusapadraocobertura,
                            cd_registro_plano,
                            qt_validade_cartao,
                            nr_dias_isento_rn,
                            lg_fatura_co_externo,
                            log_2,
                            log_3,
                            date_1,
                            date_2,
                            date_3,
                            um_validade_cartao,
                            cd_plano_operadora,
                            char_3##1,
                            char_3##2,
                            dec_1,
                            dec_3,
                            dec_2, -- LG_REPLICA_ENDERECO_TITULAR(DEFAULT)
                            u_char_1,
                            u_char_2,
                            u_char_3,
                            u_int_1,
                            u_int_2,
                            u_int_3,
                            u_date_1,
                            u_date_2,
                            u_date_3,
                            u_log_1,
                            u_log_2,
                            u_log_3,
                            u_dec_1,
                            u_dec_2,
                            u_dec_3,
                            char_5,
                            date_4,
                            date_5,
                            dec_4,
                            dec_5,
                            log_4,
                            log_5,
                            cd_procs_excl_cobert,
                            int_1,
                            in_tipo_movto_recebido,
                            int_3,
                            lgtrataopcionalpadrao,
                            cd_plano_ans,
                            in_utiliza_dt_base_cpt,
                            idi_plano_ans,
                            des_observacao,
                            nom_audit,
                            progress_recid,
                            cd_padrao_cobertura,
                            noidentif_plano,
                            idi_registro) loop

        begin
          select 'S'
            into vaomigrado
            from gp.ti_pl_sa t
           where t.cd_modalidade = tp.cd_modalidade
             and t.cd_plano = tp.cd_plano
             and t.cd_tipo_plano = tp.cd_tipo_plano;
        exception
          when no_data_found then
            vaomigrado := 'N';
        end;

        if vaomigrado = 'N' then

          tti_pl_sa.cd_modalidade           := tp.cd_modalidade;
          tti_pl_sa.cd_plano                := tp.cd_plano;
          tti_pl_sa.cd_tipo_plano           := tp.cd_tipo_plano;
          tti_pl_sa.u##nm_tipo_plano        := tp.u##nm_tipo_plano;
          tti_pl_sa.nm_tipo_plano           := tp.nm_tipo_plano;
          tti_pl_sa.u##nm_tipo_plano_reduz  := tp.u##nm_tipo_plano_reduz;
          tti_pl_sa.nm_tipo_plano_reduz     := tp.nm_tipo_plano_reduz;
          tti_pl_sa.dt_inicio_comerc        := tp.dt_inicio_comerc;
          tti_pl_sa.dt_fim_comerc           := tp.dt_fim_comerc;
          tti_pl_sa.ds_observacao##1        := tp.ds_observacao##1;
          tti_pl_sa.ds_observacao##2        := tp.ds_observacao##2;
          tti_pl_sa.ds_observacao##3        := tp.ds_observacao##3;
          tti_pl_sa.dt_atualizacao          := tp.dt_atualizacao;
          tti_pl_sa.cd_userid               := tp.cd_userid;
          tti_pl_sa.nr_dias_reconsulta      := tp.nr_dias_reconsulta;
          tti_pl_sa.pc_acrescimo            := tp.pc_acrescimo;
          tti_pl_sa.pc_desconto             := tp.pc_desconto;
          tti_pl_sa.pc_acrescimo_inscr      := tp.pc_acrescimo_inscr;
          tti_pl_sa.pc_desconto_inscr       := tp.pc_desconto_inscr;
          tti_pl_sa.dt_lim_acres_mens       := tp.dt_lim_acres_mens;
          tti_pl_sa.dt_lim_acres_inscr      := tp.dt_lim_acres_inscr;
          tti_pl_sa.dt_lim_desc_mens        := tp.dt_lim_desc_mens;
          tti_pl_sa.dt_lim_desc_inscr       := tp.dt_lim_desc_inscr;
          tti_pl_sa.qt_validade_termo       := tp.qt_validade_termo;
          tti_pl_sa.qt_validade_cart        := tp.qt_validade_cart;
          tti_pl_sa.int_2                   := tp.int_2;
          tti_pl_sa.pc_desc_prom_taxa       := tp.pc_desc_prom_taxa;
          tti_pl_sa.pc_desc_prom_pl         := tp.pc_desc_prom_pl;
          tti_pl_sa.dt_val_prom_tax         := tp.dt_val_prom_tax;
          tti_pl_sa.dt_val_prom_pl          := tp.dt_val_prom_pl;
          tti_pl_sa.int_5                   := tp.int_5;
          tti_pl_sa.char_4                  := tp.char_4;
          tti_pl_sa.cd_cla_hos              := tp.cd_cla_hos;
          tti_pl_sa.int_4                   := tp.int_4;
          tti_pl_sa.int_6                   := tp.int_6; -- segmentacao assistencial
          tti_pl_sa.char_6                  := tp.char_6;
          tti_pl_sa.um_validade_cart        := tp.um_validade_cart;
          tti_pl_sa.um_validade_termo       := tp.um_validade_termo;
          tti_pl_sa.lg_obriga_responsavel   := tp.lg_obriga_responsavel;
          tti_pl_sa.cd_grau_parentesco      := tp.cd_grau_parentesco;
          tti_pl_sa.lgusapadraocobertura    := tp.lgusapadraocobertura;
          tti_pl_sa.cd_registro_plano       := tp.cd_registro_plano;
          tti_pl_sa.qt_validade_cartao      := tp.qt_validade_cartao;
          tti_pl_sa.nr_dias_isento_rn       := tp.nr_dias_isento_rn;
          tti_pl_sa.lg_fatura_co_externo    := tp.lg_fatura_co_externo;
          tti_pl_sa.log_2                   := tp.log_2;
          tti_pl_sa.log_3                   := tp.log_3;
          tti_pl_sa.date_1                  := tp.date_1;
          tti_pl_sa.date_2                  := tp.date_2;
          tti_pl_sa.date_3                  := tp.date_3;
          tti_pl_sa.um_validade_cartao      := tp.um_validade_cartao;
          tti_pl_sa.cd_plano_operadora      := tp.cd_plano_operadora;
          tti_pl_sa.char_3##1               := tp.char_3##1;
          tti_pl_sa.char_3##2               := tp.char_3##2;
          tti_pl_sa.dec_1                   := tp.dec_1;
          tti_pl_sa.dec_3                   := tp.dec_3;
          tti_pl_sa.dec_2                   := tp.dec_2; -- LG_REPLICA_ENDERECO_TITULAR(DEFAULT)
          tti_pl_sa.u_char_1                := tp.u_char_1;
          tti_pl_sa.u_char_2                := tp.u_char_2;
          tti_pl_sa.u_char_3                := tp.u_char_3;
          tti_pl_sa.u_int_1                 := tp.u_int_1;
          tti_pl_sa.u_int_2                 := tp.u_int_2;
          tti_pl_sa.u_int_3                 := tp.u_int_3;
          tti_pl_sa.u_date_1                := tp.u_date_1;
          tti_pl_sa.u_date_2                := tp.u_date_2;
          tti_pl_sa.u_date_3                := tp.u_date_3;
          tti_pl_sa.u_log_1                 := tp.u_log_1;
          tti_pl_sa.u_log_2                 := tp.u_log_2;
          tti_pl_sa.u_log_3                 := tp.u_log_3;
          tti_pl_sa.u_dec_1                 := tp.u_dec_1;
          tti_pl_sa.u_dec_2                 := tp.u_dec_2;
          tti_pl_sa.u_dec_3                 := tp.u_dec_3;
          tti_pl_sa.char_5                  := tp.char_5;
          tti_pl_sa.date_4                  := tp.date_4;
          tti_pl_sa.date_5                  := tp.date_5;
          tti_pl_sa.dec_4                   := tp.dec_4;
          tti_pl_sa.dec_5                   := tp.dec_5;
          tti_pl_sa.log_4                   := tp.log_4;
          tti_pl_sa.log_5                   := tp.log_5;
          tti_pl_sa.cd_procs_excl_cobert    := tp.cd_procs_excl_cobert;
          tti_pl_sa.int_1                   := tp.int_1;
          tti_pl_sa.in_tipo_movto_recebido  := tp.in_tipo_movto_recebido;
          tti_pl_sa.int_3                   := tp.int_3;
          tti_pl_sa.lgtrataopcionalpadrao   := tp.lgtrataopcionalpadrao;
          tti_pl_sa.cd_plano_ans            := tp.cd_plano_ans;
          tti_pl_sa.in_utiliza_dt_base_cpt  := tp.in_utiliza_dt_base_cpt;
          tti_pl_sa.idi_plano_ans           := tp.idi_plano_ans;
          tti_pl_sa.des_observacao          := tp.des_observacao;
          tti_pl_sa.nom_audit               := tp.nom_audit;
          tti_pl_sa.log_descons_unif_pessoa := 0; --????
          -- tti_pl_sa.progress_recid          := tp.progress_recid;

          select gp.ti_pl_sa_seq.nextval
            into tti_pl_sa.progress_recid
            from dual;

          insert into gp.ti_pl_sa values tti_pl_sa;

          p_commit;

        end if;
        if tp.lgusapadraocobertura = 1 then

          begin
            select 'S'
              into vaoexistepadraocob
              from gp.pad_cob pc
             where pc.cd_padrao_cobertura = tp.cd_padrao_cobertura;
          exception
            when no_data_found then
              vaoexistepadraocob := 'N';
          end;

          if vaoexistepadraocob = 'N' then

            insert into gp.pad_cob
            values
              (tp.cd_padrao_cobertura, --u##cd_padrao_cobertura,
               tp.cd_padrao_cobertura, --cd_padrao_cobertura,
               upper(tp.cdcontrato || '-' || tp.noidentif_plano), --u##ds_padrao_cobertura,
               tp.cdcontrato || '-' || tp.noidentif_plano, --ds_padrao_cobertura,
               'MIGRACAO', --cd_userid,
               trunc(sysdate), --dt_atualizacao,
               ' ', --ds_observacao##1,
               ' ', --ds_observacao##2,
               ' ', --ds_observacao##3,
               ' ', --char_1,
               ' ', --char_2,
               ' ', --char_3,
               ' ', --char_4,
               ' ', --char_5,
               0, --log_1,
               0, --log_2,
               0, --log_3,
               0, --log_4,
               0, --log_5,
               0, --dec_1,
               0, --dec_2,
               0, --dec_3,
               0, --dec_4,
               0, --dec_5,
               null, --date_1,
               null, --date_2,
               null, --date_3,
               null, --date_4,
               null, --date_5,
               tp.idi_registro, --int_1,
               0, --int_2,
               0, --int_3,
               0, --int_4,
               0, --int_5,
               ' ', --u_char_1,
               ' ', --u_char_2,
               ' ', --u_char_3,
               null, --u_date_1,
               null, --u_date_2,
               null, --u_date_3,
               0, --u_dec_1,
               0, --u_dec_2,
               0, --u_dec_3,
               0, --u_int_1,
               0, --u_int_2,
               0, --u_int_3,
               0, --u_log_1,
               0, --u_log_2,
               0, --u_log_3,
               ' ', --des_observacao,
               gp.pad_cob_seq.nextval); --progress_recid)

          end if;

        end if;

      end loop;

      --vinicius
      -- criação da tabela gp.padr_cobert_plano_ans
      begin
        for x in (select distinct mp.cd_modalidade,
                                  mp.cd_plano,
                                  mp.cd_tipo_plano,
                                  0 nr_propost,
                                  mp.cd_padrao_cobertura,
                                  mp.cd_padrao_cobertura u##cd_padrao_cobertura,
                                  r.idi_registro,
                                  ' ' cod_livre_1,
                                  ' ' cod_livre_2,
                                  ' ' cod_livre_3,
                                  ' ' cod_livre_4,
                                  ' ' cod_livre_5,
                                  '' dat_livre_1,
                                  '' dat_livre_2,
                                  '' dat_livre_3,
                                  '' dat_livre_4,
                                  '' dat_livre_5,
                                  0 val_livre_1,
                                  0 val_livre_2,
                                  0 val_livre_3,
                                  0 val_livre_4,
                                  0 val_livre_5,
                                  0 log_livre_1,
                                  0 log_livre_2,
                                  0 log_livre_3,
                                  0 log_livre_4,
                                  0 log_livre_5,
                                  0 num_livre_1,
                                  0 num_livre_2,
                                  0 num_livre_3,
                                  0 num_livre_4,
                                  0 num_livre_5,
                                  ' ' cod_livre_usuar_1,
                                  ' ' cod_livre_usuar_2,
                                  ' ' cod_livre_usuar_3,
                                  '' dat_livre_usuar_1,
                                  '' dat_livre_usuar_2,
                                  '' dat_livre_usuar_3,
                                  0 val_livre_usuar_1,
                                  0 val_livre_usuar_2,
                                  0 val_livre_usuar_3,
                                  0 num_livre_usuar_1,
                                  0 num_livre_usuar_2,
                                  0 num_livre_usuar_3,
                                  0 log_livre_usuar_1,
                                  0 log_livre_usuar_2,
                                  0 log_livre_usuar_3,
                                  '' dat_ult_atualiz,
                                  '' hra_ult_atualiz,
                                  'MIGRACAO' cod_usuar_ult_atualiz,
                                  null progress_recid
                    from t_v_plano_padrao   mp,
                         contrato_padrao    cp,
                         gp.reg_plano_saude r
                   where cp.cdcontrato = mp.cdcontrato
                     and (to_char(r.cdn_plano_ans) = mp.cdproduto or
                         r.cod_plano_operadora = mp.cdproduto)
                     and r.in_tipo_regulamentacao = case
                           when cp.aonova_legislacao = 'S' then
                            1
                           when cp.aoadaptado = 'S' then
                            3
                           when cp.aonova_legislacao = 'N' and
                                cp.aoadaptado = 'N' then
                            2
                         end) loop

          begin
            select 'S'
              into vaoexistepadr
              from gp.padr_cobert_plano_ans pdc
             where pdc.cd_modalidade = x.cd_modalidade
               and pdc.cd_plano = x.cd_plano
               and pdc.cd_tipo_plano = x.cd_tipo_plano
               and pdc.u##cd_padrao_cobertura = x.u##cd_padrao_cobertura;
          exception
            when no_data_found then

              select gp.padr_cobert_plano_ans_seq.nextval
                into x.progress_recid
                from dual;

              insert into gp.padr_cobert_plano_ans values x;

              p_commit;

          end;

        end loop;

        --commit;
      end;

    end if;

    --commit;

  end p_migra_tipo_plano;

  /*
  * procedure : p_migra_modulo_cobertura
  * objetivo  : migrar entidade modulo cobertura -
  */
  procedure p_migra_modulo_cobertura is

    vlgobrigproc     number;
    vaomoduloexterno number;
    --vlimite          varchar2(10);
    -- carregar registros --
    cursor cur_mod is
      SELECT C.*, M.CDMODULO, M.DSMODULO
        FROM MIGRACAO_MODULO_PADRAO M, CATEGORIA C
       WHERE C.CDCATEGORIA = M.CDCATEGSERV;

  begin
    vlgobrigproc := 0;

    for rmc in cur_mod loop
      begin
        select 'S'
          into vaomigrado
          from gp.mod_cob m
         where m.cd_modulo = rmc.cdmodulo;
      exception
        when no_data_found then
          vaomigrado := 'N';
      end;
      --verificando se os serviços de módulos de coberturas diferentes e
      -- que serão agrupados, possuem quantitativos diferentes
      if vaomigrado = 'N' then
        -- validação se módulo possui procedimentos/insumos para campo lgobrigaprocedimentos
        begin
          select 1
            into vlgobrigproc
            from servico_da_categoria s
           where rmc.cdcategoria = s.cdcategserv
             and rownum = 1;
        exception
          when no_data_found then
            vlgobrigproc := 0;
        end;

        begin
          select decode(count(*), 0, 0, 1)
            into vaomoduloexterno
            from rem_produto
           where cdproduto = rmc.cdcategoria;
        exception
          when no_data_found then
            vaomoduloexterno := 0;
        end;

        insert into gp.mod_cob
          (cd_modulo,
           u##ds_modulo,
           ds_modulo,
           ds_observacao##1,
           ds_observacao##2,
           ds_observacao##3,
           lg_produto_externo,
           lgobrigaprocedimentos,
           in_identifica_modulo,
           in_despesa,
           lg_envia_sip_ans,
           in_tipo_exame_ans,
           in_tipo_internacao_ans,
           in_tipo_terapia_ans,
           intiposaudementalans,
           inctrlcarenciaproced,
           inctrlcarenciainsumo,
           in_tipo_despesa_ans,
           intipoexamefaixaans,
           intipointerfaixaans,
           char_20,
           cd_userid,
           progress_recid)
        values
          (rmc.cdmodulo,
           upper(substr(rmc.nocategoria, 1, 40)),
           substr(rmc.nocategoria, 1, 40),
           rmc.cdcategoria || '-' || rmc.nocategoria, --ds_observacao##1
           ' ', --ds_observacao##2
           ' ', --ds_observacao##3
           vaomoduloexterno, --decode(rmc.tpcategoria, 'P', 1, 'A', 1, 0),
           vlgobrigproc,
           'N',
           0,
           0,
           0,
           0,
           0,
           0,
           1,
           0,
           0,
           0,
           0,
           'Categ: ' || rmc.cdcategoria || ' tpcateg: ' || rmc.tpcategoria,
           cuser_migracao,
           gp.mod_cob_seq.nextval);

        p_commit;

      end if;
    end loop;

    --  p_migra_tipo_plano;

    --commit;

  end p_migra_modulo_cobertura;

  procedure p_migra_mensagem_carteira(pcontrato   varchar2,
                                      ptpplano    varchar2,
                                      pcdmensagem number) is
    vmensagem1 varchar2(120);
    vmensagem2 varchar2(120);
    vmensagem3 varchar2(120);
    vmensagem4 varchar2(120);

    cursor c_mensagem_padrao is
      select *
        from mensagem_contrato_padrao
       where (cdcontrato = pcontrato or pcontrato is null)
         and (tpplano = ptpplano or ptpplano is null);
  begin
    for cmens in c_mensagem_padrao loop
      if (length(nvl(vmensagem1, ' ')) + length(cmens.txmensagem)) < 120 then
        vmensagem1 := vmensagem1 || cmens.txmensagem;
      elsif (length(nvl(vmensagem2, ' ')) + length(cmens.txmensagem)) < 120 then
        vmensagem2 := vmensagem2 || cmens.txmensagem;
      elsif (length(nvl(vmensagem3, ' ')) + length(cmens.txmensagem)) < 120 then
        vmensagem3 := vmensagem3 || cmens.txmensagem;
      else
        vmensagem4 := substr(vmensagem4 || cmens.txmensagem, 1, 119);
      end if;
    end loop;

    if 1 = 2 and vmensagem1 is not null then
      insert into gp.menscart
        (cd_mensagem,
         ds_mensagem##1,
         ds_mensagem##2,
         ds_mensagem##3,
         ds_mensagem##4,
         cd_userid,
         dt_atualizacao,
         char_1,
         char_2,
         char_3,
         char_4,
         char_5,
         dec_1,
         dec_2,
         dec_3,
         dec_4,
         dec_5,
         /*date_1, --  date
         date_2, --  date
         date_3, --  date
         date_4, --  date
         date_5, --  date*/
         int_1,
         int_2,
         int_3,
         int_4,
         int_5,
         u_char_1,
         u_char_2,
         u_char_3,
         /*u_date_1, --  date
         u_date_2, --  date
         u_date_3, --  date*/
         u_dec_1,
         u_dec_2,
         u_dec_3,
         u_int_1,
         u_int_2,
         u_int_3,
         progress_recid)
      values
        (pcdmensagem, --  number
         vmensagem1, --ds_mensagem##1,
         vmensagem2, --ds_mensagem##2,
         vmensagem3, --ds_mensagem##3,
         vmensagem4, --ds_mensagem##4,
         'MIGRACAO', --cd_userid,
         sysdate, -- dt_atualizacao
         ' ', --char_1,
         ' ', --char_2,
         ' ', --char_3,
         ' ', --char_4,
         ' ', --char_5,
         0, --dec_1,
         0, --dec_2,
         0, --dec_3,
         0, --dec_4,
         0, --dec_5,
         /*date_1,
         date_2,
         date_3,
         date_4,
         date_5,*/
         0, --int_1,
         0, --int_2,
         0, --int_3,
         0, --int_4,
         0, --int_5,
         ' ', --u_char_1,
         ' ', --u_char_2,
         ' ', --u_char_3,
         /* u_date_1,
         u_date_2,
         u_date_3,*/
         0, --u_dec_1,
         0, --u_dec_2,
         0, --u_dec_3,
         0, --u_int_1,
         0, --u_int_2,
         0, --u_int_3,
         gp.menscart_seq.nextval);
    end if;
  end;

  /*
  * procedure : p_migra_pla_mod
  * objetivo  : migrar tipo de plano x módulo
  *             migrar tipo de plano x padrao de cobertura x módulo
                migrar tipo de plano x módulo x procedimento
                migrar tipo de plano x módulo x insumo
  */

  procedure p_migra_pla_mod is

    vqt_padroes       number;
    vqt_cob_padroes   number;
    vqt_opc_padroes   number;
    vqt_dias_carencia number;
    vao_obrigatorio   varchar2(1);
    vao_existe_modulo varchar2(1);
    vexistetabela     varchar2(1);
    vao_existe_partinsu varchar2(1);
    vao_existe_pl_mo_am varchar2(1);
    --vaomigrou_mod_mens     varchar2(1);
    vcd_modulo_mensalidade number := 0;

    --procedure que insere modulo de mensalidade nos padroes de cobertura
    procedure p_ftpadcob_mensalidade is

      cursor c_padroes is
        select cd_modalidade,
               cd_plano,
               cd_tipo_plano,
               t.cd_padrao_cobertura u##cd_padrao_cobertura,
               t.cd_padrao_cobertura cd_padrao_cobertura,
               pcd_modulo_menslidade cd_modulo,
               0 pc_acrescimo_inscr,
               0 pc_desconto_inscr,
               0 pc_acresc_taxa,
               0 pc_desconto_taxa,
               'migracao' cd_userid,
               trunc(sysdate) dt_atualizacao,
               ' ' ds_observacao##1,
               ' ' ds_observacao##2,
               ' ' ds_observacao##3,
               ' ' char_1,
               ' ' char_2,
               ' ' char_3,
               ' ' char_4,
               ' ' char_5,
               0 dec_3,
               0 dec_4,
               0 dec_5,
               '' date_1,
               '' date_2,
               '' date_3,
               '' date_4,
               '' date_5,
               0 dec_1,
               0 dec_2,
               0 int_3,
               0 int_4,
               0 int_5,
               0 int_1,
               0 int_2,
               ' ' u_char_3,
               '' u_date_1,
               '' u_date_2,
               0 log_1,
               0 log_2,
               0 log_3,
               0 log_4,
               0 log_5,
               ' ' u_char_1,
               ' ' u_char_2,
               0 u_log_1,
               0 u_log_2,
               0 u_log_3,
               '' u_date_3,
               0 u_dec_1,
               0 u_dec_2,
               0 u_dec_3,
               0 u_int_1,
               0 u_int_2,
               0 u_int_3,
               ' ' des_observacao,
               gp.ftpadcob_seq.nextval progress_recid
          from temp_depara_agrupado t;

    begin

      for c in c_padroes loop
        begin
          insert into gp.ftpadcob values c;
        exception
          when dup_val_on_index then
            null;
        end;

      end loop;

    end p_ftpadcob_mensalidade;

  begin

    --Insere a tabela de preços padrão que será utilizada
    --no insert da tabela tabpremo logo após a inclusão do módulo na estrutura
    begin
      vexistetabela := 'N';

      begin
        select 'S'
          into vexistetabela
          from gp.tabprepl tl
         where tl.u##cd_tab_preco = pcdtabpreco;
      exception
        when no_data_found then
          vexistetabela := 'N';
      end;

      if vexistetabela = 'N' then
        insert into gp.tabprepl
          (u##cd_tab_preco,
           cd_tab_preco,
           u##ds_tab_preco,
           ds_tab_preco,
           dt_inicio,
           dt_fim,
           mo_codigo,
           lg_situacao,
           dt_atualizacao,
           cd_userid,
           lg_taxa_manut,
           progress_recid)
        values
          (pcdtabpreco,
           pcdtabpreco,
           'TABELA DE PREÇO ' || pcdtabpreco,
           'TABELA DE PREÇO ' || pcdtabpreco,
           '01/01/1900',
           '31/12/9999',
           '0',
           '1',
           sysdate,
           'MIGRACAO',
           '0',
           gp.tabprepl_seq.nextval);
      end if;
    end;
    -- Fim da inclusão da tabela de preços padrão

    --Identifica o módulo padrão de mensalidade (Categoria = ' ')
    begin
      select cdvalor_externo
        into vcd_modulo_mensalidade
        from mig_tab_conversao tc, mig_tab_conversao_exp ce
       where notabela = 'MIGRACAO_MODULO'
         and tc.nrseq = ce.nrseq_tab_conversao
         and ce.cdvalor_interno = ' ';
    exception
        when others then
            RAISE_APPLICATION_ERROR(-20001,
                                    'Deve existir um registro na tabela MIGRACAO_MODULO com CDVALOR_INTERNO em BRANCO, ' ||
                                    'e CD_VALOR_EXTERNO com o código do MÓDULO que representará a MENSALIDADE. ' ||
                                     SQLERRM);
    end;

    -- O início do processo é um loop das estruturas distintas que foram criadas no TOTVS (modalidade - plano - tipo de plano)
    for planos_totvs in (select distinct pp.cd_modalidade,
                                         pp.cd_plano,
                                         pp.cd_tipo_plano
                           from temp_depara_agrupado pp
                          order by 1, 2, 3) loop

      -- Conta quantos padroes de cobertura existem para esta estrutura
      select count(*)
        into vqt_padroes
        from temp_depara_agrupado ta
       where ta.cd_modalidade = planos_totvs.cd_modalidade
         and ta.cd_plano      = planos_totvs.cd_plano
         and ta.cd_tipo_plano = planos_totvs.cd_tipo_plano;

      -- Leitura de todas as categorias/Módulos distintos da estrutura partindo dos contratos que representam os padroes de cobertura
      for categ_cob in (select distinct pp.cd_modalidade,
                                        pp.cd_plano,
                                        pp.cd_tipo_plano,
                                        rmo.cdvalor_externo cd_modulo
                          from temp_depara_agrupado pp,
                               categoria_de_servico cs,
                               (select cdvalor_externo, cdvalor_interno
                                  from mig_tab_conversao     tc,
                                       mig_tab_conversao_exp ce
                                 where notabela = 'MIGRACAO_MODULO'
                                   and tc.nrseq = ce.nrseq_tab_conversao) rmo
                         where pp.cdcontrato_cobertura = cs.cdcontrato --join das tabelas
                           and rmo.cdvalor_interno = cs.cdcategserv
                           and pp.cd_modalidade = planos_totvs.cd_modalidade --modalidade
                           and pp.cd_plano = planos_totvs.cd_plano --plano
                           and pp.cd_tipo_plano = planos_totvs.cd_tipo_plano --tipo
                        union
                        --traz a categoria ' ' (mensalidade) para a estrutura
                        select distinct pp.cd_modalidade,
                                        pp.cd_plano,
                                        pp.cd_tipo_plano,
                                        rmo.cdvalor_externo cd_modulo
                          from temp_depara_agrupado pp,
                               (select cdvalor_externo, cdvalor_interno
                                  from mig_tab_conversao     tc,
                                       mig_tab_conversao_exp ce
                                 where notabela = 'MIGRACAO_MODULO'
                                   and tc.nrseq = ce.nrseq_tab_conversao) rmo
                         where rmo.cdvalor_interno = ' ' -- brancos indica módulo de mensalidade básica
                           and pp.cd_modalidade = planos_totvs.cd_modalidade --modalidade
                           and pp.cd_plano = planos_totvs.cd_plano --plano
                           and pp.cd_tipo_plano = planos_totvs.cd_tipo_plano) --tipo

       loop

        -- Conta quantas vezes a categoria aparece como "Básica" para a estrutura, independente do padrao de cobertura.
        -- Se este total bater com o total de padrões de cobertura existente na estrutura a categoria será "Obrigatória"
        begin
          select count(tda.cdcontrato_cobertura)
            into vqt_cob_padroes
            from categoria_de_servico cds,
                 temp_depara_agrupado tda,
                 (select cdvalor_externo, cdvalor_interno
                    from mig_tab_conversao tc, mig_tab_conversao_exp ce
                   where notabela = 'MIGRACAO_MODULO'
                     and tc.nrseq = ce.nrseq_tab_conversao) rm
           where cds.cdcontrato = tda.cdcontrato_cobertura
             and rm.cdvalor_interno = cds.cdcategserv
             and cds.cdaplicacao = 'B'
             and tda.cd_modalidade = categ_cob.cd_modalidade
             and tda.cd_plano = categ_cob.cd_plano
             and tda.cd_tipo_plano = categ_cob.cd_tipo_plano
             and rm.cdvalor_externo = categ_cob.cd_modulo;
        exception
          when no_data_found then
            vqt_cob_padroes := 0;
        end;

        if vqt_cob_padroes = vqt_padroes then
          vao_obrigatorio := '1';
        else
          vao_obrigatorio := '0';
          --Testa se é o módulo de mensalidade para torna-lo obrigatorio
          if categ_cob.cd_modulo = vcd_modulo_mensalidade then
            vao_obrigatorio := '1';
          end if;
        end if;

        -- Conta quantas vezes a categorias aparece como "opcional" para a estrutura, independente do padrao de cobertura.
        -- Se aparecer pelo menos 1 vez o módulo levará o indicador de agregado.
        begin
          select count(tda.cdcontrato_cobertura)
            into vqt_opc_padroes
            from categoria_de_servico cds,
                 temp_depara_agrupado tda,
                 (select cdvalor_externo, cdvalor_interno
                    from mig_tab_conversao tc, mig_tab_conversao_exp ce
                   where notabela = 'MIGRACAO_MODULO'
                     and tc.nrseq = ce.nrseq_tab_conversao) rm
           where cds.cdcontrato = tda.cdcontrato_cobertura
             and rm.cdvalor_interno = cds.cdcategserv
             and cds.cdaplicacao = 'O'
             and tda.cd_modalidade = categ_cob.cd_modalidade
             and tda.cd_plano = categ_cob.cd_plano
             and tda.cd_tipo_plano = categ_cob.cd_tipo_plano
             and rm.cdvalor_externo = categ_cob.cd_modulo;
        exception
          when no_data_found then
            vqt_opc_padroes := 0;
        end;

        -- buscar o maior prazo de carência da categoria
        begin
          select max(lc.qtlimite)
            into vqt_dias_carencia
            from limite_do_criterio lc,
                 temp_depara_agrupado tda,
                 (select ce.cdvalor_externo, ce.cdvalor_interno
                    from mig_tab_conversao tc, mig_tab_conversao_exp ce
                   where notabela = 'MIGRACAO_MODULO'
                     and tc.nrseq = ce.nrseq_tab_conversao) rm
           where lc.cdcontrato = tda.cdcontrato_cobertura
             and rm.cdvalor_interno = lc.cdcategserv
             and rm.cdvalor_externo = categ_cob.cd_modulo
             and tda.cd_modalidade = categ_cob.cd_modalidade
             and tda.cd_plano = categ_cob.cd_plano
             and tda.cd_tipo_plano = categ_cob.cd_tipo_plano;
        exception
          when no_data_found then
            vqt_dias_carencia := 0;
        end;

        -- Verifica se o módulo já existe na pla_mod
        -- Isso ocorre em função de existirem várias categorias apontando para o mesmo módulo
        begin
          select 'S'
            into vao_existe_modulo
            from pla_mod pm
           where pm.cd_modalidade = categ_cob.cd_modalidade
             and pm.cd_plano = categ_cob.cd_plano
             and pm.cd_tipo_plano = categ_cob.cd_tipo_plano
             and pm.cd_modulo = categ_cob.cd_modulo;
        exception
          when no_data_found then
            vao_existe_modulo := 'N';
        end;

        if vao_existe_modulo = 'N' then
          --nao achou na pla_mod
          -- Gravação dos Módulos na tabela PLA_MOB
          insert into gp.pla_mod
            (cd_modalidade,
             cd_plano,
             cd_tipo_plano,
             cd_modulo,
             lg_obrigatorio,
             lg_principal,
             dt_atualizacao,
             cd_userid,
             lg_modulo_agregado,
             lg_grava_automatico,
             inresponsavelautorizacao,
             qt_caren_eletiva,
             qt_caren_urgencia,
             in_cobra_participacao,
             lg_controle_carencia,
             progress_recid)
          values
            (categ_cob.cd_modalidade,
             categ_cob.cd_plano,
             categ_cob.cd_tipo_plano,
             categ_cob.cd_modulo, --cd_modulo
             vao_obrigatorio, --lg_obrigatorio
             '1', --pm.lg_principal
             sysdate, --dt_atualizacao
             'MIGRACAO', --cd_userid
             case when vqt_opc_padroes = 0 then 0 else 1 end, --lg_modulo_agregado
             case when vao_obrigatorio = 1 then 1 else 0 end, --lg_grava_automatico
             'N', --inresponsavelautorizacao
             nvl(vqt_dias_carencia,0), --qt_caren_urgencia
             0, --qt_caren_urgencia
             '1', --in_cobra_participacao
             '1', --lg_controle_carencia
             gp.pla_mod_seq.nextval);

          --Insere a tabela preço módulo
          --Mesmo utilizando as novas regras de mensalidade o sistema valida se existem os preços dos módulos,
          --mesmo que zerados
          insert into gp.tabpremo
            (cd_modalidade,
             cd_plano,
             cd_tipo_plano,
             cd_modulo,
             u##cd_tab_preco,
             cd_tab_preco,
             qt_custo_modulo,
             ds_observacao##1,
             lg_situacao,
             qt_taxa_manut,
             dt_atualizacao,
             cd_userid,
             progress_recid)
          values
            (categ_cob.cd_modalidade,
             categ_cob.cd_plano,
             categ_cob.cd_tipo_plano,
             categ_cob.cd_modulo, --cd_modulo
             upper(pcdtabpreco),
             pcdtabpreco,
             0,
             ' ', --ds_observacao,
             '1', --lg_situacao,
             '0', --qt_taxa_manut,
             sysdate,
             'migracao',
             gp.tabpremo_seq.nextval);
        end if; --insert na pla_mod quando nao existe ainda

        --Se o módulo não é obrigatório (não está em todos os padrões de cobertura), verifica quais
        --os planos possuem a categoria para inserir
        if vao_obrigatorio = '0' then --não é módulo obrigatório

          -- Leitura dos padrões da estrutura que possuem esta categoria partindo dos contratos que
          --representam os padroes de cobertura
          for categ_do_padrao in (select pp.cd_modalidade,
                                         pp.cd_plano,
                                         pp.cd_tipo_plano,
                                         pp.cd_padrao_cobertura,
                                         rm.cdvalor_externo cd_modulo
                                    from temp_depara_agrupado pp,
                                         categoria_de_servico cs,
                                         (select cdvalor_externo,
                                                 cdvalor_interno
                                            from mig_tab_conversao     tc,
                                                 mig_tab_conversao_exp ce
                                           where notabela = 'MIGRACAO_MODULO'
                                             and tc.nrseq =
                                                 ce.nrseq_tab_conversao) rm
                                   where pp.cdcontrato_cobertura =
                                         cs.cdcontrato --join categ serv
                                     and rm.cdvalor_interno = cs.cdcategserv --join rem tab conv ext
                                     and pp.cd_modalidade =
                                         categ_cob.cd_modalidade --modalidade
                                     and pp.cd_plano = categ_cob.cd_plano --plano
                                     and pp.cd_tipo_plano =
                                         categ_cob.cd_tipo_plano --tipo
                                     and rm.cdvalor_externo =
                                         categ_cob.cd_modulo --módulo
                                     and cs.cdaplicacao = 'B') --categoria do loop de categorias distintas
           loop

            -- Verifica se o módulo já existe na FTPADCOB
            -- Isso ocorre em função de existirem várias categorias apontando para o mesmo módulo
            begin
              select 'S'
                into vao_existe_modulo
                from gp.ftpadcob f
               where f.cd_modalidade          = categ_do_padrao.cd_modalidade
                 and f.cd_plano               = categ_do_padrao.cd_plano
                 and f.cd_tipo_plano          = categ_do_padrao.cd_tipo_plano
                 and f.u##cd_padrao_cobertura = categ_do_padrao.cd_padrao_cobertura
                 and f.cd_modulo              = categ_do_padrao.cd_modulo;
            exception
              when no_data_found then
                vao_existe_modulo := 'N';
            end;

            -- Gravação dos Módulos na tabela FTPADCOB
            if vao_existe_modulo = 'N' then
              insert into gp.ftpadcob
              values
                (categ_do_padrao.cd_modalidade, --cd_modalidade,
                 categ_do_padrao.cd_plano, --cd_plano,
                 categ_do_padrao.cd_tipo_plano, --cd_tipo_plano,
                 categ_do_padrao.cd_padrao_cobertura, --u##cd_padrao_cobertura,
                 categ_do_padrao.cd_padrao_cobertura, --cd_padrao_cobertura,
                 categ_do_padrao.cd_modulo, --cd_modulo,
                 0, --pc_acrescimo_inscr,
                 0, --pc_desconto_inscr,
                 0, --pc_acresc_taxa,
                 0, --pc_desconto_taxa,
                 'MIGRACAO', --cd_userid,
                 trunc(sysdate), --dt_atualizacao,
                 ' ', --ds_observacao##1,
                 ' ', --ds_observacao##2,
                 ' ', --ds_observacao##3,
                 ' ', --char_1,
                 ' ', --char_2,
                 ' ', --char_3,
                 ' ', --char_4,
                 ' ', --char_5,
                 0, --dec_3,
                 0, --dec_4,
                 0, --dec_5,
                 null, --date_1,
                 null, --date_2,
                 null, --date_3,
                 null, --date_4,
                 null, --date_5,
                 0, --dec_1,
                 0, --dec_2,
                 0, --int_3,
                 0, --int_4,
                 0, --int_5,
                 0, --int_1,
                 0, --int_2,
                 ' ', --u_char_3,
                 null, --u_date_1,
                 null, --u_date_2,
                 0, --log_1,
                 0, --log_2,
                 0, --log_3,
                 0, --log_4,
                 0, --log_5,
                 ' ', --u_char_1,
                 ' ', --u_char_2,
                 0, --u_log_1,
                 0, --u_log_2,
                 0, --u_log_3,
                 null, --u_date_3,
                 0, --u_dec_1,
                 0, --u_dec_2,
                 0, --u_dec_3,
                 0, --u_int_1,
                 0, --u_int_2,
                 0, --u_int_3,
                 ' ', --des_observacao,
                 gp.ftpadcob_seq.nextval); --progress_recid
            end if;

          end loop; --categ_do_padrao

        end if;

        -- Leitura dos procedimentos das coberturas
        for proced_cob in (select distinct pp.cd_modalidade cd_modalidade,
                                           pp.cd_plano cd_plano,
                                           pp.cd_tipo_plano cd_tipo_plano,
                                           rmo.cdvalor_externo cd_modulo,
                                           nvl(nvl(rpr.cdvalor_externo,sc.cdservico),
                                               nvl(rpa.cdvalor_externo,asd.cdservico)) cd_amb,
                                           pcdtabpreco cd_tab_preco,
                                           '0' lg_aut_empresa,
                                           decode(s.aoexige_autorizacao,
                                                  'S',
                                                  '1',
                                                  '0') lg_aut_unimed,
                                           decode(s.aopericiavel,
                                                  'S',
                                                  '1',
                                                  '0') log_1,
                                           case
                                             when (PCLASSES_INSUMOS) like
                                                  '%''' || s.cdclasse ||
                                                  '''%' then
                                              'INSUMO' --servicos cuja classe está no parâmetro de classes de insumos
                                             else
                                              'PROCEDIMENTO'
                                           end tp_servico,
                                           rcs.cdvalor_externo cd_tipo_insumo
                             from temp_depara_agrupado pp,
                                  categoria_de_servico cs,
                                  servico_da_categoria sc,
                                  agrupamento_servico_detalhe asd,
                                  servico s,
                                  (select cdvalor_externo, cdvalor_interno
                                     from mig_tab_conversao     tc,
                                          mig_tab_conversao_exp ce
                                    where notabela = 'MIGRACAO_MODULO'
                                      and tc.nrseq = ce.nrseq_tab_conversao) rmo,
                                  (select cdvalor_externo, cdvalor_interno
                                     from mig_tab_conversao     tc,
                                          mig_tab_conversao_exp ce
                                    where notabela = 'MIGRACAO_PROCEDIMENTOS'
                                      and tc.nrseq = ce.nrseq_tab_conversao) rpr,
                                  (select cdvalor_externo, cdvalor_interno
                                     from mig_tab_conversao     tc,
                                          mig_tab_conversao_exp ce
                                    where notabela = 'MIGRACAO_PROCEDIMENTOS'
                                      and tc.nrseq = ce.nrseq_tab_conversao) rpa,
                                  (select cdvalor_externo, cdvalor_interno
                                     from mig_tab_conversao     tc,
                                          mig_tab_conversao_exp ce
                                    where notabela =
                                          'MIGRACAO_GRUPO_PROCEDIMENTO'
                                      and tc.nrseq = ce.nrseq_tab_conversao) rcs -- tabela para conversão de classes de serviços
                            where pp.cdcontrato_cobertura = cs.cdcontrato --join tebela categoria de servico
                              and sc.cdcontrato = cs.cdcontrato --join tabela servico da categoria
                              and sc.cdcategserv = cs.cdcategserv --join tabela servico da categoria
                              and sc.cdagrupamento = asd.cdagrupamento(+) --join tabela agrupamento de servico detalhe
                              and rpr.cdvalor_interno(+) = sc.cdservico --join tabela de/para servico da tabela serv da categ
                              and rpa.cdvalor_interno(+) = asd.cdservico --join tabela de/para servico da tabela de agrupamento serv detalhe
                              and rmo.cdvalor_interno(+) = cs.cdcategserv --join tabela de/para categ x módulo
                              and s.cdservico =
                                  nvl(sc.cdservico, asd.cdservico) --join tabela de servico com o servico da categoria ou do agrupamento
                              and rcs.cdvalor_interno(+) = s.cdclasse --join tabela de/para classe de servico
                              and pp.cd_modalidade = categ_cob.cd_modalidade --modalidade do loop
                              and pp.cd_plano = categ_cob.cd_plano --plano do loop
                              and pp.cd_tipo_plano = categ_cob.cd_tipo_plano --tipo do loop
                              and rmo.cdvalor_externo = categ_cob.cd_modulo) --categoria do loop
         loop
          begin
            --Gravar o item do módulo no tipo de plano (insumo ou procedimento)
            if proced_cob.tp_servico = 'INSUMO' then
               if pmigra_insumos_unicoo = 'S' then
                    begin
                      select 'S'
                        into vao_existe_partinsu
                        from gp.partinsu pi
                       where pi.cd_modalidade = proced_cob.cd_modalidade
                         and pi.cd_plano = proced_cob.cd_plano
                         and pi.cd_tipo_plano = proced_cob.cd_tipo_plano
                         and pi.cd_modulo = proced_cob.cd_modulo
                         and pi.cd_tipo_insumo = proced_cob.cd_tipo_insumo
                         and pi.cd_insumo = proced_cob.cd_amb;
                    exception
                      when no_data_found then
                        vao_existe_partinsu := 'N';
                    end;

                    if vao_existe_partinsu = 'N' then
                        insert into gp.partinsu
                          (cd_modalidade,
                           cd_plano,
                           cd_tipo_plano,
                           cd_modulo,
                           cd_tipo_insumo,
                           cd_insumo,
                           cd_tab_preco,
                           qt_caren_eletiva,
                           qt_caren_urgencia,
                           dt_atualizacao,
                           cd_userid,
                           progress_recid)
                        values
                          (proced_cob.cd_modalidade,
                           proced_cob.cd_plano,
                           proced_cob.cd_tipo_plano,
                           proced_cob.cd_modulo,
                           proced_cob.cd_tipo_insumo,
                           proced_cob.cd_amb,
                           proced_cob.cd_tab_preco,
                           0, --qt_caren_eletiva,
                           0, --qt_caren_urgencia,
                           '31/12/9999', --pti.dt_atualizacao,
                           'migracao',
                           gp.partinsu_seq.nextval);
                    end if;
               end if;
            else

              begin
                select 'S'
                  into vao_existe_pl_mo_am
                  from gp.pl_mo_am p
                 where p.cd_modalidade = proced_cob.cd_modalidade
                   and p.cd_plano = proced_cob.cd_plano
                   and p.cd_tipo_plano = proced_cob.cd_tipo_plano
                   and p.cd_modulo = proced_cob.cd_modulo
                   and p.cd_amb = proced_cob.cd_amb;
              exception
                when no_data_found then
                  vao_existe_pl_mo_am := 'N';
              end;

              if vao_existe_pl_mo_am = 'N' then
                  insert into gp.pl_mo_am
                    (cd_modalidade,
                     cd_plano,
                     cd_tipo_plano,
                     cd_modulo,
                     cd_amb,
                     cd_tab_preco,
                     lg_aut_empresa,
                     lg_aut_unimed,
                     log_1,
                     nr_dias_validade,
                     qt_procedimento,
                     dt_atualizacao,
                     cd_userid,
                     cd_tipo_prestador,
                     cd_tipo_cobertura,
                     progress_recid,
                     u##cd_tab_preco,
                     dt_limite)
                  values
                    (proced_cob.cd_modalidade,
                     proced_cob.cd_plano,
                     proced_cob.cd_tipo_plano,
                     proced_cob.cd_modulo,
                     proced_cob.cd_amb,
                     proced_cob.cd_tab_preco,
                     0, --pam.lg_aut_empresa,
                     proced_cob.lg_aut_unimed,
                     proced_cob.log_1,
                     0, --pam.nr_dias_validade,
                     0, --pam.qt_procedimento,
                     '31/12/9999', --dt_atualizacao,
                     'migracao',
                     0,
                     0,
                     gp.pl_mo_am_seq.nextval,
                     proced_cob.cd_tab_preco,
                     '31/12/9999');
              end if;
            end if; --INSUMO ou PROCEDIMENTO
          end;
        end loop; --proced_cob
      end loop; --categ_cob
    end loop; --planos_totvs

    /**
     * Se PMIGRA_INSUMOS_UNICOO = 'S', então PARTINSU já foi criada acima, com base nos serviços associados
     * às categorias de serviço do UNICOO nos planos de migração de cobertura.
     * Se PMIGRA_INSUMOS_UNICOO = 'N', então PARTINSU será criada a seguir, em um produto cartesiano entre
     * os TIPOS DE PLANOS e o DEPARA dos MÓDULOS x TIPOS DE INSUMOS x INSUMOS. Ou seja, em todos os Tipos de Planos
     * em que o Módulo estiver associado, os Tipos de Insumos e insumos serão associados na PARTINSU. Se no DEPARA o
     * CD_INSUMO estiver zerado, então será criado zerado na PARTINSU, que significa TODOS
     */
    if pmigra_insumos_unicoo = 'N' then

        for plano_insumo in (select distinct pm.cd_modalidade cd_modalidade,
                                             pm.cd_plano cd_plano,
                                             pm.cd_tipo_plano cd_tipo_plano,
                                             pm.cd_modulo cd_modulo,
                                             dp.cd_tipo_insumo cd_tipo_insumo,
                                             pcdtabpreco cd_tab_preco,
                                             dp.cd_insumo cd_insumo
                                  from pla_mod pm, depara_modulo_tipo_insumo dp
                                 where pm.cd_modulo = dp.cd_modulo) loop
              begin
                select 'S'
                  into vao_existe_partinsu
                  from gp.partinsu pi
                 where pi.cd_modalidade = plano_insumo.cd_modalidade
                   and pi.cd_plano = plano_insumo.cd_plano
                   and pi.cd_tipo_plano = plano_insumo.cd_tipo_plano
                   and pi.cd_modulo = plano_insumo.cd_modulo
                   and pi.cd_tipo_insumo = plano_insumo.cd_tipo_insumo
                   and pi.cd_insumo = plano_insumo.cd_insumo;
              exception
                when no_data_found then
                  vao_existe_partinsu := 'N';
              end;

              if vao_existe_partinsu = 'N' then
                  insert into gp.partinsu
                    (cd_modalidade,
                     cd_plano,
                     cd_tipo_plano,
                     cd_modulo,
                     cd_tipo_insumo,
                     cd_insumo,
                     cd_tab_preco,
                     qt_caren_eletiva,
                     qt_caren_urgencia,
                     dt_atualizacao,
                     cd_userid,
                     progress_recid)
                  values
                    (plano_insumo.cd_modalidade,
                     plano_insumo.cd_plano,
                     plano_insumo.cd_tipo_plano,
                     plano_insumo.cd_modulo,
                     plano_insumo.cd_tipo_insumo,
                     plano_insumo.cd_insumo,
                     plano_insumo.cd_tab_preco,
                     0, --qt_caren_eletiva,
                     0, --qt_caren_urgencia,
                     '31/12/9999', --pti.dt_atualizacao,
                     'migracao',
                     gp.partinsu_seq.nextval);
              end if;
        end loop;
    end if;

    --insere modulo de mensalidade nos padroes de cobertura
    p_ftpadcob_mensalidade;

  end p_migra_pla_mod;

  /*
  +-----------------------------------------------------------------+
  |                                                                 |
  |  Procedure: p_migra_trans_mod_proced                            |
  |                                                                 |
  |      Migracao da Tabela Transação x Módulo x Procedimento       |
  |      ====================================================       |
  |                                                                 |
  |  Pré-Requisito: As transações (TRANREVI) já devem estar criadas;|
  |                 DEPARA_MODULO_DA_TRANSACAO deve estar          |
  |                 preenchido.                                     |
  |                                                                 |
  +-----------------------------------------------------------------+
  */
  Procedure p_migra_trans_mod_proced is
  begin

    --------------------------------------------------------------------------------------------
    --   Popular os procedimentos dos modulos nas suas transacoes (TRMODAMB), conforme DEPARA --
    --------------------------------------------------------------------------------------------
    for x in (select distinct t.cd_transacao cd_transacao,
                              p.cd_modulo    cd_modulo,
                              p.cd_amb       cd_amb
                from pl_mo_am p,
                     servico s,
                     depara_modulo_da_transacao t,
                     (select cdvalor_externo, cdvalor_interno
                        from mig_tab_conversao tc, mig_tab_conversao_exp ce
                       where notabela = 'MIGRACAO_PROCEDIMENTOS'
                         and tc.nrseq = ce.nrseq_tab_conversao) rpr
               where rpr.cdvalor_interno(+) = s.cdservico -- Join de/para do serviço do Unicoo quando houver
                 and p.cd_amb = nvl(rpr.cdvalor_externo, s.cdservico) -- Join Servico do Unicoo/depara x Procedimento da pl_mo_am
                 and p.cd_amb between '00000001' and '99999999' -- Levar o intervalo de códigos de serviços válidos
             -- filtro somente se aplica para consulta/exames SADT   and (s.qtauxiliares is null or s.qtauxiliares = 0) -- Somente itens que não precisam de auxiliar
             -- filtro somente se aplica para consulta/exames SADT   and (s.cdport_anest is null or s.cdport_anest in (0, 1)) -- Somente itens que não tem porte anestésico ou porte 1
                 and p.cd_modulo = t.cd_modulo
               order by 1, 2, 3) loop
      p_insert_trans_mod_proced(x.cd_transacao, x.cd_modulo, x.cd_amb);
    end loop;

    ----------------------------------------------------------------------------
    --   Popular os insumos dos modulos nas suas transacoes, conforme DEPARA --
    ----------------------------------------------------------------------------
    for x in (select distinct t.cd_transacao   cd_transacao,
                              i.cd_modulo      cd_modulo,
                              i.cd_tipo_insumo cd_tipo_insumo,
                              0                cd_insumo
                from partinsu i,
                     depara_modulo_da_transacao t
               where i.cd_modulo = t.cd_modulo
               order by 1, 2, 3) loop
      p_insert_trmodtpi(x.cd_transacao, x.cd_modulo, x.cd_tipo_insumo, x.cd_insumo);

      --POPULAR TRATIPIN COM VALORES DEFAULT PARA AJUSTE MANUAL POSTERIOR
      begin
        insert into gp.tratipin(cd_transacao,
                                cd_tipo_insumo,
                                dt_atualizacao,
                                cd_userid,
                                lg_preco_padrao,
                                progress_recid)
                         values(x.cd_transacao,
                                x.cd_tipo_insumo,
                                sysdate,
                                'MIGRACAO',
                                1, -- LG_PRECO_PADRAO
                                gp.tratipin_seq.nextval);
      exception
        when others then null;
      end;

    end loop; --loop das transacoes de Consulta em Consultorio

    /*
    -------------------------------------------------------------------------
    --   Popular o item de consulta nas transações 1 e 51                  --
    -------------------------------------------------------------------------
    for x in (select distinct m.cd_transacao cd_transacao,
                              p.cd_modulo    cd_modulo,
                              p.cd_amb       cd_amb
                from pl_mo_am p,
                     (select 1 cd_transacao
                        from dual
                      union
                      select 51 cd_transacao
                        from dual) m
               where p.cd_amb = '10101012'
               order by 1, 2, 3) loop
      p_insert_trans_mod_proced(x.cd_transacao, x.cd_modulo, x.cd_amb);
    end loop; --loop das transacoes de Consulta em Consultorio

    -------------------------------------------------------------------------
    --   Popular os itens de sp/sadt nas transações 2 e 52                 --
    -------------------------------------------------------------------------
    for x in (select distinct m.cd_transacao cd_transacao,
                              p.cd_modulo    cd_modulo,
                              p.cd_amb       cd_amb
                from pl_mo_am p,
                     servico s,
                     (select 2 cd_transacao
                        from dual
                      union
                      select 52 cd_transacao
                        from dual) m,
                     (select cdvalor_externo, cdvalor_interno
                        from mig_tab_conversao tc, mig_tab_conversao_exp ce
                       where notabela = 'MIGRACAO_PROCEDIMENTOS'
                         and tc.nrseq = ce.nrseq_tab_conversao) rpr
               where rpr.cdvalor_interno(+) = s.cdservico -- Join de/para do serviço do Unicoo quando houver
                 and p.cd_amb = nvl(rpr.cdvalor_externo, s.cdservico) -- Join Servico do Unicoo/depara x Procedimento da pl_mo_am
                 and p.cd_amb between '00000001' and '99999999' -- Levar o intervalo de códigos de serviços válidos
                 and (s.qtauxiliares is null or s.qtauxiliares = 0) -- Somente itens que não precisam de auxiliar
                 and (s.cdport_anest is null or s.cdport_anest in (0, 1)) -- Somente itens que não tem porte anestésico ou porte 1
               order by 1, 2, 3) loop
      p_insert_trans_mod_proced(x.cd_transacao, x.cd_modulo, x.cd_amb);
    end loop; --loop das transacoes de Consulta em Consultorio

    -------------------------------------------------------------------------
    --   Popular os itens de internacao nas transações 3 e 53              --
    -------------------------------------------------------------------------
    for x in (select distinct m.cd_transacao cd_transacao,
                              p.cd_modulo    cd_modulo,
                              p.cd_amb       cd_amb
                from pl_mo_am p,
                     (select 3 cd_transacao
                        from dual
                      union
                      select 53 cd_transacao
                        from dual) m
               where p.cd_amb <> '10101012'
               order by 1, 2, 3) loop
      p_insert_trans_mod_proced(x.cd_transacao, x.cd_modulo, x.cd_amb);
    end loop; --loop das transacoes de Consulta em Consultorio
    */
  end p_migra_trans_mod_proced;

  procedure p_insert_trans_mod_proced(pcd_transacao    number,
                                      pcd_modulo       number,
                                      pcd_procedimento number) is
    vnr_seq number;
  begin
    --Pegar o próximo número da sequence
    select gp.trmodamb_seq.nextval into vnr_seq from dual;

    insert into trmodamb
      (cd_transacao,
       cd_modulo,
       cd_esp_amb,
       cd_grupo_proc_amb,
       cd_procedimento,
       dv_procedimento,
       lg_imprime_descricao,
       dt_limite,
       dt_atualizacao,
       cd_userid,
       num_proced_complet,
       progress_recid)
    values
      (pcd_transacao,
       pcd_modulo,
       substr(pcd_procedimento, 1, 2),
       substr(pcd_procedimento, 3, 2),
       substr(pcd_procedimento, 5, 3),
       substr(pcd_procedimento, 8, 1),
       1,
       '31/12/9999',
       sysdate,
       'migracao',
       0,
       vnr_seq);
  end p_insert_trans_mod_proced;

  procedure p_insert_trmodtpi(pcd_transacao    number,
                              pcd_modulo       number,
                              pcd_tipo_insumo  number,
                              pcd_insumo       number) is
    vnr_seq number;
  begin
    --Pegar o próximo número da sequence
    select gp.trmodtpi_seq.nextval into vnr_seq from dual;

      insert into gp.trmodtpi
       (CD_TRANSACAO,
        CD_MODULO,
        CD_TIPO_INSUMO,
        LG_IMPRIME_DESCRICAO,
        DT_ATUALIZACAO,
        CD_USERID,
        CD_INSUMO,
        PROGRESS_RECID)
      values
        (pcd_transacao,
         pcd_modulo,
         pcd_tipo_insumo,
         1,
         sysdate,
         'migracao',
         pcd_insumo,
         vnr_seq);

  end p_insert_trmodtpi;

  procedure p_migra_ramo_atividade is
  begin
    delete from ramos r where r.u##cd_ramo = 'P';
    insert into ramos
      (U##CD_RAMO,
       CD_RAMO,
       U##DS_RAMO_REDUZ,
       DS_RAMO_REDUZ,
       DS_RAMO##1,
       DT_ATUALIZACAO,
       CD_USERID,
       PROGRESS_RECID)
      select 'P', --U##CD_RAMO,
             'P', --CD_RAMO,
             'PADRAO', --U##DS_RAMO_REDUZ,
             'PADRAO', --DS_RAMO_REDUZ,
             'PADRAO', --DA_RAMO##1,
             SYSDATE, --DT_ATUALIZACAO,
             'migracao', --CD_USERID,
             gp.ramos_seq.nextval --PROGRESS_RECID
        from dual;

    delete from ramosgru rg where rg.u##cd_ramo = 'P' and rg.cd_ramo_grupo = '1';
    insert into ramosgru
      (U##CD_RAMO,
       CD_RAMO,
       CD_RAMO_GRUPO,
       U##DS_RAMO_GRUPO_REDUZ,
       DS_RAMO_GRUPO_REDUZ,
       DT_ATUALIZACAO,
       CD_USERID,
       PROGRESS_RECID)
      select 'P', --U##CD_RAMO
             'P', --CD_RAMO
             '1', --CD_RAMO_GRUPO
             'GRUPO PADRAO', --U##DS_RAMO_GRUPO_REDUZ
             'GRUPO PADRAO', --DS_RAMO_GRUPO_REDUZ
             SYSDATE, --DT_ATUALIZACAO
             'migracao', --CD_USERID
             gp.ramosgru_seq.nextval --PROGRESS_RECID
        from dual;

    delete from ramsubgr sg where sg.u##cd_ramo = 'P' and sg.cd_ramo_grupo = '1' and sg.cd_sub_grupo = '1';
    insert into ramsubgr
      (U##CD_RAMO,
       CD_RAMO,
       CD_RAMO_GRUPO,
       CD_SUB_GRUPO,
       U##DS_SUB_GRUPO_REDUZ,
       DS_SUB_GRUPO_REDUZ,
       DT_ATUALIZACAO,
       CD_USERID,
       PROGRESS_RECID)
      select 'P', --U##CD_RAMO,
             'P', --CD_RAMO,
             '1', --CD_RAMO_GRUPO,
             '1', --CD_SUB_GRUPO,
             'SUBGRUPO PADRAO', --U##DS_SUB_GRUPO_REDUZ,
             'SUBGRUPO PADRAO', --DS_SUB_GRUPO_REDUZ,
             SYSDATE, --DT_ATUALIZACAO,
             'migracao', --CD_USERID,
             gp.ramsubgr_seq.nextval --PROGRESS_RECID
        from dual;

    for ramo in (select 'P' U##CD_RAMO,
                        'P' CD_RAMO,
                        '1' CD_RAMO_GRUPO,
                        '1' CD_SUB_GRUPO,
                        '0' CD_ATIVIDADE,
                        '0' DV_ATIVIDADE,
                        upper(ra.noramoativ) U##DS_ATIVIDADE_REDUZ,
                        ra.noramoativ DS_ATIVIDADE_REDUZ,
                        '0' CD_GRAU_RISCO,
                        sysdate DT_ATUALIZACAO,
                        'migracao' CD_USERID,
                        ra.cdramoativ CD_RAMO_ATIVIDADE,
                        gp.ramoativ_seq.nextval PROGRESS_RECID
                   from ramo_atividade ra
                  where ra.cdramoativ not in ('I', 'L', 'U')) loop
      begin
        begin
          select 'S'
            into vaomigrado
            from ramoativ r
           where r.cd_ramo = 'P'
             and r.cd_ramo_grupo = 1
             and r.cd_sub_grupo = 1
             and r.cd_atividade = 0
             and r.cd_ramo_atividade = ramo.cd_ramo_atividade;
        exception
          when no_data_found then
            vaomigrado := 'N';
        end;
        if vaomigrado = 'N' then
          insert into ramoativ
            (U##CD_RAMO,
             CD_RAMO,
             CD_RAMO_GRUPO,
             CD_SUB_GRUPO,
             CD_ATIVIDADE,
             DV_ATIVIDADE,
             U##DS_ATIVIDADE_REDUZ,
             DS_ATIVIDADE_REDUZ,
             CD_GRAU_RISCO,
             DT_ATUALIZACAO,
             CD_USERID,
             CD_RAMO_ATIVIDADE,
             PROGRESS_RECID)
          values
            (ramo.U##CD_RAMO,
             ramo.CD_RAMO,
             ramo.CD_RAMO_GRUPO,
             ramo.CD_SUB_GRUPO,
             ramo.CD_ATIVIDADE,
             ramo.DV_ATIVIDADE,
             ramo.U##DS_ATIVIDADE_REDUZ,
             ramo.DS_ATIVIDADE_REDUZ,
             ramo.CD_GRAU_RISCO,
             ramo.DT_ATUALIZACAO,
             ramo.CD_USERID,
             ramo.CD_RAMO_ATIVIDADE,
             ramo.PROGRESS_RECID);
        end if;
      end;
    end loop;
  end p_migra_ramo_atividade;

  /**
   * ALEX 22/02/17
   * ATENÇÃO PARA CRIAÇÃO DAS FAIXAS CONFORME TEMP_FAIXA_ETARIA_ANS.
   */
  procedure p_migra_pl_gr_pa is
/*
    cursor c_faixas is
      select distinct
             tp.cd_modalidade,
             tp.cd_plano,
             tp.cd_tipo_plano,
             g.cd_grau_parentesco,
             t.nrfaixa_etaria nr_faixa_etaria,
             t.nr_idade_minima,
             t.nr_idade_maxima nr_idade_maxima,
             1 qt_fator_multiplicador,
             trunc(sysdate) dt_atualizacao,
             'MIGRACAO' cd_userid,
             0 qt_fat_mult_manut,
             0 log_1,
             0 dec_1,
             1 qt_fat_mult_inscr,
             1 lg_inclusao,
             ' ' char_1,
             ' ' char_2,
             ' ' char_3,
             ' ' char_4,
             ' ' char_5,
             null date_1,
             null date_2,
             null date_3,
             null date_4,
             null date_5,
             0 int_1,
             0 dec_2,
             0 dec_3,
             0 dec_4,
             0 dec_5,
             ' ' u_char_1,
             0 int_2,
             0 int_3,
             0 int_4,
             0 int_5,
             null u_date_3,
             0 log_2,
             0 log_3,
             0 log_4,
             0 log_5,
             0 u_int_2,
             ' ' u_char_2,
             ' ' u_char_3,
             null u_date_1,
             null u_date_2,
             0 u_dec_1,
             0 u_dec_2,
             0 u_dec_3,
             0 u_int_1,
             0 u_int_3,
             0 u_log_1,
             0 u_log_2,
             0 u_log_3,
             m.in_tipo_pessoa
        from temp_faixa_etaria_ans t,
             temp_grau_paren tgp,
             gp.ti_pl_sa tp,
             gp.gra_par g,
             gp.modalid m
       where m.cd_modalidade = tp.cd_modalidade
         and tgp.tpfaixa_etaria = t.tpfaixa_etaria
         and tgp.cdvalores_externo = g.cd_grau_parentesco
-- union para adicionar o grau FILHO ESPECIAL
union
      select distinct
             tp.cd_modalidade,
             tp.cd_plano,
             tp.cd_tipo_plano,
             g.cd_grau_parentesco,
             1 nr_faixa_etaria,
             0 , -- idade minima
             9999 nr_idade_maxima,
             1 qt_fator_multiplicador,
             trunc(sysdate) dt_atualizacao,
             'MIGRACAO' cd_userid,
             0 qt_fat_mult_manut,
             0 log_1,
             0 dec_1,
             1 qt_fat_mult_inscr,
             1 lg_inclusao,
             ' ' char_1,
             ' ' char_2,
             ' ' char_3,
             ' ' char_4,
             ' ' char_5,
             null date_1,
             null date_2,
             null date_3,
             null date_4,
             null date_5,
             0 int_1,
             0 dec_2,
             0 dec_3,
             0 dec_4,
             0 dec_5,
             ' ' u_char_1,
             0 int_2,
             0 int_3,
             0 int_4,
             0 int_5,
             null u_date_3,
             0 log_2,
             0 log_3,
             0 log_4,
             0 log_5,
             0 u_int_2,
             ' ' u_char_2,
             ' ' u_char_3,
             null u_date_1,
             null u_date_2,
             0 u_dec_1,
             0 u_dec_2,
             0 u_dec_3,
             0 u_int_1,
             0 u_int_3,
             0 u_log_1,
             0 u_log_2,
             0 u_log_3,
             m.in_tipo_pessoa
        from gp.ti_pl_sa tp,
             gp.gra_par g,
             gp.modalid m
       where m.cd_modalidade = tp.cd_modalidade
         and g.cd_grau_parentesco = pCDGRAU_PARENTESCO_ESPECIAL;
*/

   cursor c_faixas is
      select distinct
             tp.cd_modalidade,
             tp.cd_plano,
             tp.cd_tipo_plano,
             g.cd_grau_parentesco,
             t.nrfaixa_etaria nr_faixa_etaria,
             t.nr_idade_minima,
             --t.nr_idade_maxima nr_idade_maxima,
             --nvl(li.nridade_limite,9999) nr_idade_maxima,

             nvl((select (max(li.nridade_limite) - 1)
                   from limite_de_idade li
                  where li.cdcontrato = tda.cdcontrato
                    and li.cdusuacateg = tgp.cdvalor_interno),
                 t.nr_idade_maxima) nr_idade_maxima,

             1 qt_fator_multiplicador,
             trunc(sysdate) dt_atualizacao,
             'MIGRACAO' cd_userid,
             0 qt_fat_mult_manut,
             0 log_1,
             0 dec_1,
             1 qt_fat_mult_inscr,
             1 lg_inclusao,
             ' ' char_1,
             ' ' char_2,
             ' ' char_3,
             ' ' char_4,
             ' ' char_5,
             null date_1,
             null date_2,
             null date_3,
             null date_4,
             null date_5,
             0 int_1,
             0 dec_2,
             0 dec_3,
             0 dec_4,
             0 dec_5,
             ' ' u_char_1,
             0 int_2,
             0 int_3,
             0 int_4,
             0 int_5,
             null u_date_3,
             0 log_2,
             0 log_3,
             0 log_4,
             0 log_5,
             0 u_int_2,
             ' ' u_char_2,
             ' ' u_char_3,
             null u_date_1,
             null u_date_2,
             0 u_dec_1,
             0 u_dec_2,
             0 u_dec_3,
             0 u_int_1,
             0 u_int_3,
             0 u_log_1,
             0 u_log_2,
             0 u_log_3,
             m.in_tipo_pessoa
        from temp_faixa_etaria_ans t,
             temp_grau_paren tgp,
             gp.ti_pl_sa tp,
             gp.gra_par g,
             gp.modalid m,
             temp_depara_agrupado tda
       where m.cd_modalidade = tp.cd_modalidade
         and tgp.tpfaixa_etaria = t.tpfaixa_etaria
         and tgp.cdvalores_externo = g.cd_grau_parentesco
         and tda.cd_modalidade = tp.cd_modalidade
         and tda.cd_plano = tp.cd_plano
         and tda.cd_tipo_plano = tp.cd_tipo_plano
-- union para adicionar o grau FILHO ESPECIAL
union
      select distinct
             tp.cd_modalidade,
             tp.cd_plano,
             tp.cd_tipo_plano,
             g.cd_grau_parentesco,
             1 nr_faixa_etaria,
             0 , -- idade minima
             9999 nr_idade_maxima,
             1 qt_fator_multiplicador,
             trunc(sysdate) dt_atualizacao,
             'MIGRACAO' cd_userid,
             0 qt_fat_mult_manut,
             0 log_1,
             0 dec_1,
             1 qt_fat_mult_inscr,
             1 lg_inclusao,
             ' ' char_1,
             ' ' char_2,
             ' ' char_3,
             ' ' char_4,
             ' ' char_5,
             null date_1,
             null date_2,
             null date_3,
             null date_4,
             null date_5,
             0 int_1,
             0 dec_2,
             0 dec_3,
             0 dec_4,
             0 dec_5,
             ' ' u_char_1,
             0 int_2,
             0 int_3,
             0 int_4,
             0 int_5,
             null u_date_3,
             0 log_2,
             0 log_3,
             0 log_4,
             0 log_5,
             0 u_int_2,
             ' ' u_char_2,
             ' ' u_char_3,
             null u_date_1,
             null u_date_2,
             0 u_dec_1,
             0 u_dec_2,
             0 u_dec_3,
             0 u_int_1,
             0 u_int_3,
             0 u_log_1,
             0 u_log_2,
             0 u_log_3,
             m.in_tipo_pessoa
        from gp.ti_pl_sa tp,
             gp.gra_par g,
             gp.modalid m
       where m.cd_modalidade = tp.cd_modalidade
         and g.cd_grau_parentesco = pCDGRAU_PARENTESCO_ESPECIAL;

  begin

    for faixas in c_faixas loop

      --ESTAMOS LEVANDO TODAS AS FAIXAS - ANTONIO 16/11/2016
      --      if (faixas.ds_grau_parentesco like 'FILH%' and
      --         faixas.nr_idade_minima > 20 and faixas.in_tipo_pessoa = 'J') then

      --        null;

      --      else

--if faixas.nr_idade_maxima <= faixas.nr_idade_minima then
--     DBMS_OUTPUT.PUT_LINE( 'FAIXA INVALIDA!: ' || faixas.cd_grau_parentesco);
--end if;

        begin
          insert into gp.pl_gr_pa
          values
            (faixas.cd_modalidade,
             faixas.cd_plano,
             faixas.cd_tipo_plano,
             faixas.cd_grau_parentesco,
             faixas.nr_faixa_etaria,
             faixas.nr_idade_minima,
             faixas.nr_idade_maxima,
             faixas.qt_fator_multiplicador,
             faixas.dt_atualizacao,
             faixas.cd_userid,
             faixas.qt_fat_mult_manut,
             faixas.log_1,
             faixas.dec_1,
             faixas.qt_fat_mult_inscr,
             faixas.lg_inclusao,
             faixas.char_1,
             faixas.char_2,
             faixas.char_3,
             faixas.char_4,
             faixas.char_5,
             faixas.date_1,
             faixas.date_2,
             faixas.date_3,
             faixas.date_4,
             faixas.date_5,
             faixas.int_1,
             faixas.dec_2,
             faixas.dec_3,
             faixas.dec_4,
             faixas.dec_5,
             faixas.u_char_1,
             faixas.int_2,
             faixas.int_3,
             faixas.int_4,
             faixas.int_5,
             faixas.u_date_3,
             faixas.log_2,
             faixas.log_3,
             faixas.log_4,
             faixas.log_5,
             faixas.u_int_2,
             faixas.u_char_2,
             faixas.u_char_3,
             faixas.u_date_1,
             faixas.u_date_2,
             faixas.u_dec_1,
             faixas.u_dec_2,
             faixas.u_dec_3,
             faixas.u_int_1,
             faixas.u_int_3,
             faixas.u_log_1,
             faixas.u_log_2,
             faixas.u_log_3,
             gp.pl_gr_pa_seq.nextval
             );
        exception
          when dup_val_on_index then
            null;
        end;

      p_commit;

    end loop;

  end p_migra_pl_gr_pa;

  procedure p_migra_qtdmoeda is
    vvloperacional      number;
    vvlhonorario        number;
    vutilizahonorario   number;
    vutilizaoperacional number;
    vnrtab              number;
    vtabpreco           varchar2(10);
    tabela_invalida exception;

    cursor c_tab_refer is
      select nvl(conversao.cdvalor_externo, tr.cdtabela_refer) cd_tab_preco_proc, /*adicionado o de-para*/
             tr.cdtabela_refer || '-' || tr.notabela_refer ds_tab_preco_proc,
             tr.notabela_refer ds_entidade_emitente,
             trv.dtvalidade_inicial dt_inicio_validade,
             '31/12/9999' dt_fim_validade,
             30 pc_prim_assit,
             20 pc_outros_assit,
             decode(tr.tptabela_refer, 'O', 1, 'P', 0) in_tipo_tabela,
             tr.cdtabela_refer,
             trv.nrsequencial_tabela
        from tabela_referencia tr,
             (select re.cdvalor_externo, re.cdvalor_interno
                from mig_tab_conversao_exp re, mig_tab_conversao r
               where re.nrseq_tab_conversao = r.nrseq
                 and r.notabela = 'MIGRACAO_TABELA_PRECO') conversao,
             (select tv.*
                from tabela_referencia_validade tv,
                     (select cdtabela_refer,
                             max(dtvalidade_inicial) dtvalidade
                        from tabela_referencia_validade
                       group by cdtabela_refer) t
               where tv.cdtabela_refer = t.cdtabela_refer
                 and tv.dtvalidade_inicial = t.dtvalidade) trv
       where tr.cdtabela_refer = trv.cdtabela_refer
         and conversao.cdvalor_interno(+) = tr.cdtabela_refer;

    cursor c_proc_refer(ptabela varchar2, pnrsequencia number) is
      select nvl(conversao.cdvalor_externo, st.cdtabela_refer) cd_tab_preco_proc,
             substr(nvl(rpr.cdvalor_externo, s.cdservico), 1, 2) cd_esp_amb,
             substr(nvl(rpr.cdvalor_externo, s.cdservico), 3, 2) cd_grupo_proc_amb,
             substr(nvl(rpr.cdvalor_externo, s.cdservico), 5, 3) cd_procedimento,
             substr(nvl(rpr.cdvalor_externo, s.cdservico), 8, 1) dv_procedimento,
             decode(nvl(st.vlcusto_honmed, 0), 0, 0, 1) lg_utiliza_honorarios,
             --nvl(st.vlcusto_honmed, 0) * nvl(un.vlmoeda, 1) qt_moeda_honorarios,
             nvl(st.vlcusto_honmed, 0) qt_moeda_honorarios,
             decode(nvl(st.vlcusto_oper, 0), 0, 0, 1) lg_utiliza_operacional,
             --nvl(st.vlcusto_oper, 0) * nvl(uno.vlmoeda, 1) qt_moeda_operacional,
             nvl(st.vlcusto_oper, 0) qt_moeda_operacional,
             decode(nvl(st.qtmetr_filme, 0), 0, 0, 1) lg_utiliza_filme,
             --nvl(st.qtmetr_filme, 0) * unf.vlmoeda qt_moeda_filme,
             nvl(st.qtmetr_filme, 0) qt_moeda_filme,
             decode(nvl(st.vlcusto_total, 0), 0, 0, 1) aoutilizatotal,
             nvl(st.vlcusto_total, 0) vltotal,
             nvl(s.qtauxiliares, 0) qt_auxiliares,
             to_number(nvl(trim(s.cdport_anest), '0')) cd_porte_anestesico,
             decode(nvl(s.qtauxiliares, 0), 0, 0, 1) lg_utiliza_auxiliares,
             decode(s.cdport_anest, null, 0, 1) lg_utiliza_anestesico,
             nvl(s.dtfinal_validade, '31/12/9999') dtfinal_validade
        from servico_tab_refer st,
             servico s,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_PROCEDIMENTOS'
                 and tc.nrseq = ce.nrseq_tab_conversao) rpr,
             (select un1.cdunidade_valor, un1.vlem_moeda_oficial vlmoeda
                from unidade_de_valor un1,
                     (select u.cdunidade_valor,
                             max(u.dtvalidade_inicial) dtvalidade
                        from unidade_de_valor u
                       group by u.cdunidade_valor) un2
               where un1.cdunidade_valor = un2.cdunidade_valor
                 and un1.dtvalidade_inicial = un2.dtvalidade) un,
             (select un1.cdunidade_valor, un1.vlem_moeda_oficial vlmoeda
                from unidade_de_valor un1,
                     (select u.cdunidade_valor,
                             max(u.dtvalidade_inicial) dtvalidade
                        from unidade_de_valor u
                       group by u.cdunidade_valor) un2
               where un1.cdunidade_valor = un2.cdunidade_valor
                 and un1.dtvalidade_inicial = un2.dtvalidade) uno,
             (select un1.cdunidade_valor, un1.vlem_moeda_oficial vlmoeda
                from unidade_de_valor un1,
                     (select u.cdunidade_valor,
                             max(u.dtvalidade_inicial) dtvalidade
                        from unidade_de_valor u
                       group by u.cdunidade_valor) un2
               where un1.cdunidade_valor = un2.cdunidade_valor
                 and un1.dtvalidade_inicial = un2.dtvalidade) unf,
             (select re.cdvalor_externo, re.cdvalor_interno
                from mig_tab_conversao_exp re, mig_tab_conversao r
               where re.nrseq_tab_conversao = r.nrseq
                 and r.notabela = 'MIGRACAO_TABELA_PRECO') conversao,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO'
                 and tc.nrseq = ce.nrseq_tab_conversao) rcs
       where st.cdservico = s.cdservico
         and (PCLASSES_INSUMOS) not like
             '%''' || nvl(rcs.cdvalor_externo, s.cdclasse) || '''%'
            --         and nvl(rcs.cdvalor_externo, s.cdclasse) not in
            --             (pclsmater, pclsmedic, pcltaxa, pclasdia) --f_insumo(s.cdclasse) = 0
         and s.cdclasse = rcs.cdvalor_interno(+)
         and length(nvl(rpr.cdvalor_externo, s.cdservico)) in (2, 4, 8)
         and trim(s.cdservico) = rpr.cdvalor_interno(+)
         and st.cdunidade_valor = un.cdunidade_valor
         and st.cdunidade_valor_co = uno.cdunidade_valor
         and st.cdunidade_valor_filme = unf.cdunidade_valor(+)
         and st.cdtabela_refer = conversao.cdvalor_interno(+)
         and st.cdtabela_refer = ptabela
         and st.nrsequencial_tabela = pnrsequencia;

    cursor c_insu_refer(ptabela varchar2, pnrsequencia number) is
      select nvl(conversao.cdvalor_externo, st.cdtabela_refer) cd_tab_preco_proc,
             nvl(rcs.cdvalor_externo, s.cdclasse) cd_tipo_insumo,
             nvl(rpr.cdvalor_externo, s.cdservico) cd_insumo,
             decode(nvl(st.vlcusto_total, 0),
                    0,
                    nvl(st.vlcusto_oper, 0) + nvl(st.vlcusto_honmed, 0),
                    st.vlcusto_total) * nvl(un.vlmoeda, 1) qt_moeda_insumo,
             decode(s.aovalor_informado, 'S', 1, 'N', '0') lg_manual,
             nvl(s.dtfinal_validade, '31/12/9999') dtfinal_validade
        from servico_tab_refer st,
             servico s,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_PROCEDIMENTOS'
                 and tc.nrseq = ce.nrseq_tab_conversao) rpr,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO'
                 and tc.nrseq = ce.nrseq_tab_conversao) rcs,
             (select un1.cdunidade_valor, un1.vlem_moeda_oficial vlmoeda
                from unidade_de_valor un1,
                     (select u.cdunidade_valor,
                             max(u.dtvalidade_inicial) dtvalidade
                        from unidade_de_valor u
                       group by u.cdunidade_valor) un2
               where un1.cdunidade_valor = un2.cdunidade_valor
                 and un1.dtvalidade_inicial = un2.dtvalidade) un,
             (select re.cdvalor_externo, re.cdvalor_interno
                from mig_tab_conversao_exp re, mig_tab_conversao r
               where re.nrseq_tab_conversao = r.nrseq
                 and r.notabela = 'MIGRACAO_TABELA_PRECO') conversao
       where st.cdservico = s.cdservico
         and (PCLASSES_INSUMOS) like
             '%''' || nvl(rcs.cdvalor_externo, s.cdclasse) || '''%'
            --         and nvl(rcs.cdvalor_externo, s.cdclasse) in
            --             (pclsmater, pclsmedic, pcltaxa, pclasdia) --f_insumo(s.cdclasse) = 1
         and s.cdclasse = rcs.cdvalor_interno(+)
         and trim(s.cdservico) = rpr.cdvalor_interno(+)
         and st.cdunidade_valor = un.cdunidade_valor
         and st.cdtabela_refer = conversao.cdvalor_interno(+)
         and st.cdtabela_refer = ptabela
         and st.nrsequencial_tabela = pnrsequencia;

  begin
    for rtabrefer in c_tab_refer loop
      begin
                if length(rtabrefer.cd_tab_preco_proc) > 5 then
                  raise tabela_invalida;
                end if;
        begin
          vnrtab := to_number(substr(rtabrefer.cd_tab_preco_proc,
                                     (length(rtabrefer.cd_tab_preco_proc) - 1),
                                     2));
        exception
          when others then
            raise tabela_invalida;
        end;
        begin
          select 'S'
            into vaomigrado
            from gp.tabprepr t
           where t.u##cd_tab_preco_proc = rtabrefer.cd_tab_preco_proc;
        exception
          when no_data_found then
            vaomigrado := 'N';
        end;

        if vaomigrado = 'N' then
          insert into gp.tabprepr
            (cd_tab_preco_proc,
             u##cd_tab_preco_proc,
             u##ds_tab_preco_proc,
             ds_tab_preco_proc,
             ds_entidade_emitente,
             dt_inicio_validade,
             dt_fim_validade,
             pc_prim_assit,
             pc_outros_assit,
             in_tipo_tabela,
             cd_userid,
             dt_atualizacao,
             progress_recid)
          values
            (rtabrefer.cd_tab_preco_proc,
             upper(rtabrefer.cd_tab_preco_proc),
             upper(rtabrefer.ds_tab_preco_proc),
             rtabrefer.ds_tab_preco_proc,
             rtabrefer.ds_entidade_emitente,
             rtabrefer.dt_inicio_validade,
             rtabrefer.dt_fim_validade,
             rtabrefer.pc_prim_assit,
             rtabrefer.pc_outros_assit,
             rtabrefer.in_tipo_tabela,
             cuser_migracao,
             sysdate,
             gp.tabprepr_seq.nextval);

          vqtregistro1 := vqtregistro1 + 1;

          countofrecords := countofrecords + 1;

          if (countofrecords >= 1000) then
            --commit;
            countofrecords := 0;
          end if;
        end if;

        vtabpreco := rtabrefer.cdtabela_refer;

        for rprocrefer in c_proc_refer(vtabpreco,
                                       rtabrefer.nrsequencial_tabela) loop
          vvloperacional      := 0;
          vvlhonorario        := 0;
          vutilizahonorario   := 0;
          vutilizaoperacional := 0;

          begin
            select 'S'
              into vaomigrado
              from gp.taprampr t
             where t.u##cd_tab_preco_proc = rprocrefer.cd_tab_preco_proc
               and t.cd_esp_amb = to_number(rprocrefer.cd_esp_amb)
               and t.cd_grupo_proc_amb =
                   nvl(to_number(rprocrefer.cd_grupo_proc_amb), 0)
               and t.cd_procedimento =
                   nvl(to_number(rprocrefer.cd_procedimento), 0)
               and t.dv_procedimento =
                   nvl(to_number(rprocrefer.dv_procedimento), 0);
          exception
            when no_data_found then
              vaomigrado := 'N';
          end;

          if vaomigrado = 'N' then
            if rprocrefer.qt_moeda_honorarios = 0 and
               rprocrefer.qt_moeda_operacional = 0 then
              vvlhonorario        := rprocrefer.vltotal;
              vutilizahonorario   := rprocrefer.aoutilizatotal;
              vvloperacional      := 0;
              vutilizaoperacional := 0;
            else
              vvlhonorario        := rprocrefer.qt_moeda_honorarios;
              vutilizahonorario   := rprocrefer.lg_utiliza_honorarios;
              vvloperacional      := rprocrefer.qt_moeda_operacional;
              vutilizaoperacional := rprocrefer.lg_utiliza_operacional;
            end if;

            insert into gp.taprampr
              (cd_tab_preco_proc,
               u##cd_tab_preco_proc,
               cd_esp_amb,
               cd_grupo_proc_amb,
               cd_procedimento,
               dv_procedimento,
               lg_utiliza_honorarios,
               qt_moeda_honorarios,
               lg_utiliza_operacional,
               qt_moeda_operacional,
               lg_utiliza_filme,
               qt_moeda_filme,
               qt_auxiliares,
               cd_porte_anestesico,
               cdporteanestesicocob,
               lg_utiliza_auxiliares,
               lg_utiliza_anestesico,
               dt_atualizacao,
               cd_userid,
               dt_limite,
               progress_recid)
            values
              (rprocrefer.cd_tab_preco_proc,
               upper(rprocrefer.cd_tab_preco_proc),
               to_number(rprocrefer.cd_esp_amb),
               nvl(to_number(rprocrefer.cd_grupo_proc_amb), 0),
               nvl(to_number(rprocrefer.cd_procedimento), 0),
               nvl(to_number(rprocrefer.dv_procedimento), 0),
               vutilizahonorario,
               nvl(vvlhonorario, 0),
               vutilizaoperacional,
               nvl(vvloperacional, 0),
               rprocrefer.lg_utiliza_filme,
               nvl(rprocrefer.qt_moeda_filme, 0),
               nvl(rprocrefer.qt_auxiliares, 0),
               rprocrefer.cd_porte_anestesico,
               rprocrefer.cd_porte_anestesico,
               rprocrefer.lg_utiliza_auxiliares,
               decode(rprocrefer.cd_porte_anestesico, 0, 0, 1),
               sysdate,
               cuser_migracao,
               rprocrefer.dtfinal_validade,
               gp.taprampr_seq.nextval);

            countofrecords := countofrecords + 1;
            if (countofrecords >= 1000) then
              --commit;
              countofrecords := 0;
            end if;
          end if;
        end loop;

        for rinsurefer in c_insu_refer(vtabpreco,
                                       rtabrefer.nrsequencial_tabela) loop

          begin
            select 'S'
              into vaomigrado
              from gp.prepadin t
             where t.u##cd_tab_preco_proc =
                   upper(rinsurefer.cd_tab_preco_proc)
               and t.cd_tipo_insumo = to_number(rinsurefer.cd_tipo_insumo)
               and t.cd_insumo = to_number(rinsurefer.cd_insumo);
          exception
            when no_data_found then
              vaomigrado := 'N';
          end;

          if vaomigrado = 'N' then

            insert into gp.prepadin
              (cd_tab_preco_proc,
               u##cd_tab_preco_proc,
               cd_tipo_insumo,
               cd_insumo,
               dt_limite,
               qt_moeda_insumo,
               lg_manual,
               log_1,
               cd_userid,
               dt_atualizacao,
               progress_recid)
            values
              (rinsurefer.cd_tab_preco_proc,
               upper(rinsurefer.cd_tab_preco_proc),
               rinsurefer.cd_tipo_insumo,
               rinsurefer.cd_insumo,
               rinsurefer.dtfinal_validade,
               nvl(rinsurefer.qt_moeda_insumo, 0),
               rinsurefer.lg_manual,
               rinsurefer.lg_manual,
               cuser_migracao,
               sysdate,
               gp.prepadin_seq.nextval);

            countofrecords := countofrecords + 1;
            if (countofrecords >= 1000) then
              --commit;
              countofrecords := 0;
            end if;
          end if;
        end loop;
      exception
        when tabela_invalida then
            RAISE_APPLICATION_ERROR(-20001,
                                    'Formato de codigo de tabela inválido. Deve ser no padrão XXX99, sem barra. Verifique DEPARA MIGRACAO_TABELA_PRECO. ' ||
                                     SQLERRM);

        when others then
          null;
      end;
    end loop;
  end p_migra_qtdmoeda;

  /* 16/02/2018 - ALEX - VERSAO DESCONTINUADA.
  * procedure : p_migra_pl_mo_am
  * objetivo  : cobertura dos planos procedimentos
  */
  /*procedure p_migra_pl_mo_am is
    vautempresa varchar2(1);
    vnrdias     number;
    vqtlimite   number;

    --cursor
    cursor cpl_mod_am(pcd_modalidade t_v_plano_padrao.cd_modalidade%type,
                      pcd_plano      t_v_plano_padrao.cd_plano%type,
                      pcd_tipo_plano t_v_plano_padrao.cd_tipo_plano%type,
                      pcd_modulo     number) is
      select rem.cd_modalidade cd_modalidade,
             rem.cd_plano cd_plano,
             rem.cd_tipo_plano cd_tipo_plano,
             rmo.cdvalor_externo cd_modulo,
             nvl(rpr.cdvalor_externo, s.cdservico) cd_amb,
             pcdtabpreco cd_tab_preco,
             '0' lg_aut_empresa,
             decode(s.aoexige_autorizacao, 'S', '1', '0') lg_aut_unimed,
             decode(s.aopericiavel, 'S', '1', '0') log_1, \*decode(s.aointerc_exige_autoriz, 'S', '1', '0')*\
             \*decode(ls.tpcriterio,
             'LI05',
             0,
             'LI06',
             0,
             'LI08',
             0,
             (ls.qtmes * 30)) nr_dias_validade,*\
             nvl(s.qtdias_prazo_retorno, 0) nr_dias_validade,
             1 qt_procedimento,
             sc.aoexclusao,
             sysdate dt_atualizacao,
             rownum progress_recid,
             rem.cdcontrato cdcontrato
        from t_v_plano_padrao rem,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_MODULO'
                 and tc.nrseq = ce.nrseq_tab_conversao
                 and ce.cdvalor_interno <> pcategsus) rmo,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_PROCEDIMENTOS'
                 and tc.nrseq = ce.nrseq_tab_conversao) rpr,
             contrato_padrao cp,
             categoria_de_servico cs,
             servico_da_categoria sc,
             servico s,
             limite_do_servico ls,
             agrupamento_servico ag,
             agrupamento_servico_detalhe agd,
             gp.ambproce amb,
             gp.precproc prc
       where cp.cdcontrato = rem.cdcontrato
         and cp.cdcontrato = cs.cdcontrato
         and cs.cdcategserv = rmo.cdvalor_interno
         and cs.cdcontrato = sc.cdcontrato
         and cs.cdcategserv = sc.cdcategserv
         and sc.cdagrupamento = ag.cdagrupamento(+)
         and ag.cdagrupamento = agd.cdagrupamento(+)
         and amb.cdprocedimentocompleto = s.cdservico
         and s.cdservico not between 'A' and 'Z'
         and prc.u##cd_tab_preco = pcdtabpreco
         and ag.aosituacao(+) = 'A'
         and agd.aoexceto(+) = 'N'
         and nvl(sc.cdservico, agd.cdservico) = s.cdservico
         and s.cdservico = rpr.cdvalor_interno(+)
         and sc.nrserv_categ = ls.nrserv_categ
         and (ls.tpplano = rem.tpplano or rem.tpplano = '*' or
             ls.tpplano = '*')
         and ls.cdusucateg = '*'
            --and ls.cdsitcadastro = '*'
            --and f_insumo(s.cdclasse) = 0 -- não deve considerar os insumos
         and rem.cd_modalidade = pcd_modalidade
         and rem.cd_plano = pcd_plano
         and rem.cd_tipo_plano = pcd_tipo_plano
         and rmo.cdvalor_externo = to_char(pcd_modulo)
         and nvl(sc.aoexclusao, 'N') = 'N' \*
order by lpad(nvl(rpr.cdvalor_externo, s.cdservico), 8, '0')*\
      ;

    cursor cpl_mod_am_excluido(pcd_modalidade t_v_plano_padrao.cd_modalidade%type,
                               pcd_plano      t_v_plano_padrao.cd_plano%type,
                               pcd_tipo_plano t_v_plano_padrao.cd_tipo_plano%type,
                               pcd_modulo     number) is
      select rem.cd_modalidade cd_modalidade,
             rem.cd_plano cd_plano,
             rem.cd_tipo_plano cd_tipo_plano,
             rmo.cdvalor_externo cd_modulo,
             nvl(rpr.cdvalor_externo, s.cdservico) cd_amb,
             'PCDTABPRECO' cd_tab_preco,
             '0' lg_aut_empresa,
             decode(s.aoexige_autorizacao, 'S', '1', '0') lg_aut_unimed,
             decode(s.aopericiavel, 'S', '1', '0') log_1,
             0 nr_dias_validade,
             0 qt_procedimento,
             sc.aoexclusao,
             sysdate dt_atualizacao,
             rownum progress_recid,
             cp.cdcontrato
        from t_v_plano_padrao rem,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_MODULO'
                 and tc.nrseq = ce.nrseq_tab_conversao
                 and ce.cdvalor_interno <> pcategsus) rmo,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_PROCEDIMENTOS'
                 and tc.nrseq = ce.nrseq_tab_conversao) rpr,
             contrato_padrao cp,
             categoria_de_servico cs,
             servico_da_categoria sc,
             servico s,
             agrupamento_servico ag,
             agrupamento_servico_detalhe agd
       where cp.cdcontrato = rem.cdcontrato
         and cp.cdcontrato = cs.cdcontrato
         and cs.cdcategserv = rmo.cdvalor_interno
         and cs.cdcontrato = sc.cdcontrato
         and cs.cdcategserv = sc.cdcategserv
         and sc.cdagrupamento = ag.cdagrupamento(+)
         and ag.cdagrupamento = agd.cdagrupamento(+)
         and ag.aosituacao(+) = 'A'
         and agd.aoexceto(+) = 'N'
         and nvl(sc.cdservico, agd.cdservico) = s.cdservico
         and s.cdservico = rpr.cdvalor_interno(+)
            --and f_insumo(s.cdclasse) = 0 -- não deve considerar os insumos
         and rem.cd_modalidade = pcd_modalidade
         and rem.cd_plano = pcd_plano
         and rem.cd_tipo_plano = pcd_tipo_plano
         and rmo.cdvalor_externo = to_char(pcd_modulo)
         and sc.aoexclusao = 'S'; \*
                                                                                                                                                                                                                                             order by lpad(nvl(rpr.cdvalor_externo, s.cdservico), 8, '0');*\

    cursor c_servico(pcdservico varchar2) is
      select nvl(rpr.cdvalor_externo, s.cdservico) cd_amb
        from servico s,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_PROCEDIMENTOS'
                 and tc.nrseq = ce.nrseq_tab_conversao) rpr
       where s.cdservico like pcdservico || '%'
         and length(s.cdservico) = 8
         and s.cdservico = rpr.cdvalor_interno(+);
    --     and f_insumo(s.cdclasse) = 0;

    cursor c_agrupa_exame_internacao is
      select distinct inter.cd_modalidade,
                      inter.cd_plano,
                      inter.cd_tipo_plano,
                      inter.cd_modulo,
                      exam.cd_amb,
                      exam.u##cd_tab_preco,
                      exam.cd_tab_preco,
                      exam.cd_ind_observacao,
                      exam.lg_aut_empresa,
                      exam.log_1,
                      exam.qt_procedimento,
                      exam.dec_1,
                      exam.dt_atualizacao,
                      exam.cd_userid,
                      exam.cd_tipo_prestador,
                      exam.cd_tipo_cobertura,
                      exam.lg_aut_unimed,
                      exam.char_1,
                      exam.char_2,
                      exam.char_3##1,
                      exam.char_3##2,
                      exam.date_1,
                      exam.date_2,
                      exam.date_3,
                      exam.int_2,
                      exam.int_3,
                      exam.log_2,
                      exam.log_3,
                      exam.dec_2,
                      exam.dec_3,
                      exam.u_char_1,
                      exam.u_char_2,
                      exam.u_char_3,
                      exam.u_date_1,
                      exam.u_date_2,
                      exam.u_date_3,
                      exam.u_int_1,
                      exam.u_int_2,
                      exam.u_int_3,
                      exam.u_dec_1,
                      exam.u_dec_2,
                      exam.u_dec_3,
                      exam.u_log_1,
                      exam.u_log_2,
                      exam.u_log_3,
                      exam.nr_dias_validade,
                      exam.char_4,
                      exam.char_5,
                      exam.date_4,
                      exam.date_5,
                      exam.dec_4,
                      exam.dec_5,
                      exam.int_4,
                      exam.int_5,
                      exam.log_4,
                      exam.log_5,
                      exam.dt_limite,
                      null progress_recid
        from gp.pl_mo_am                 inter,
             pl_mo_am                    exam,
             tm_depara_modulo_internacao t
       where inter.cd_modalidade = exam.cd_modalidade
         and inter.cd_plano = exam.cd_plano
         and inter.cd_tipo_plano = exam.cd_tipo_plano
         and inter.cd_modulo = t.cd_modulo_internacao
         and exam.cd_modulo = t.cd_modulo_exames;

    procedure p_insere_pl_mo_am(pam in out cpl_mod_am%rowtype) is
    begin
      begin
        select 'S'
          into vaomigrado
          from gp.pl_mo_am p
         where p.cd_modalidade = pam.cd_modalidade
           and p.cd_plano = pam.cd_plano
           and p.cd_tipo_plano = pam.cd_tipo_plano
           and p.cd_modulo = pam.cd_modulo
           and p.cd_amb = pam.cd_amb;
      exception
        when no_data_found then
          vaomigrado := 'N';
      end;

      begin
        select '1'
          into vautempresa
          from servico_pre_autoriz_contr_pes s, contrato_da_pessoa c
         where s.nrcontrato = c.nrcontrato
           and s.nrregistro = c.nrregistro
           and c.cdcontrato_padrao = pam.cdcontrato
           and s.cdservico = pam.cd_amb
           and rownum = 1;
      exception
        when no_data_found then
          vautempresa := '0';
      end;

      if vaomigrado = 'N' then

        insert into gp.pl_mo_am
          (cd_modalidade,
           cd_plano,
           cd_tipo_plano,
           cd_modulo,
           cd_amb,
           cd_tab_preco,
           lg_aut_empresa,
           lg_aut_unimed,
           log_1,
           nr_dias_validade,
           qt_procedimento,
           dt_atualizacao,
           cd_userid,
           cd_tipo_prestador,
           cd_tipo_cobertura,
           progress_recid,
           u##cd_tab_preco,
           dt_limite)
        values
          (pam.cd_modalidade,
           pam.cd_plano,
           pam.cd_tipo_plano,
           pam.cd_modulo,
           pam.cd_amb,
           pam.cd_tab_preco,
           vautempresa, --pam.lg_aut_empresa,
           pam.lg_aut_unimed,
           pam.log_1,
           pam.nr_dias_validade,
           pam.qt_procedimento,
           pam.dt_atualizacao,
           cuser_migracao,
           0,
           0,
           gp.pl_mo_am_seq.nextval,
           pam.cd_tab_preco,
           '31/12/9999');

        --commit;

        countofrecords := countofrecords + 1;
        if (countofrecords >= 10) then
          --commit;
          countofrecords := 0;
        end if;
      end if;
    end p_insere_pl_mo_am;

    procedure p_valida_pl_mo_am(pam in out cpl_mod_am%rowtype) is
    begin
      vqtlimite := 0;
      vnrdias   := 0;

      if pam.aoexclusao = 'S' then
        begin
          -- exclui o serviço e seus procedimentos caso seja um grupo ou especialidade exceção
          delete from gp.pl_mo_am pl
           where pl.cd_modalidade = pam.cd_modalidade
             and pl.cd_plano = pam.cd_plano
             and pl.cd_tipo_plano = pam.cd_tipo_plano
             and pl.cd_modulo = pam.cd_modulo
             and pl.cd_amb like pam.cd_amb || '%';
        exception
          when others then
            raise_application_error(-20201,
                                    'Erro na exclusão de cobertura do procedimento ' ||
                                    pam.cd_amb || ' : ' || sqlerrm);
        end;
      elsif pam.aoexclusao = 'N' then
        p_insere_pl_mo_am(pam);
      end if;

    end p_valida_pl_mo_am;

  begin
    -- lista todos os módulos encontrados
    for pm in (select pm.cd_modalidade,
                      pm.cd_plano,
                      pm.cd_tipo_plano,
                      pm.cd_modulo
                 from gp.pla_mod pm
                where pm.cd_userid = cuser_migracao
               \* order by pm.cd_modalidade,
               pm.cd_plano,
               pm.cd_tipo_plano,
               pm.cd_modulo*\
               ) loop

      -- a partir deles, seleciona os serviços

      begin
        for pam in cpl_mod_am(pm.cd_modalidade,
                              pm.cd_plano,
                              pm.cd_tipo_plano,
                              to_char(pm.cd_modulo)) loop
          if length(pam.cd_amb) = 8 then
            p_valida_pl_mo_am(pam);
          elsif length(pam.cd_amb) < 8 then
            for rservico in c_servico(pam.cd_amb) loop
              pam.cd_amb := rservico.cd_amb;
              p_valida_pl_mo_am(pam);
            end loop;
          end if;
        end loop;
      exception
        when others then

          raise_application_error(-20102,
                                  'Erro Modalidade' || pm.cd_modalidade ||
                                  ' Plano ' || pm.cd_plano ||
                                  ' Tipo Plano ' || pm.cd_tipo_plano ||
                                  ' MOdulo ' || to_char(pm.cd_modulo));

      end;

      for pam in cpl_mod_am_excluido(pm.cd_modalidade,
                                     pm.cd_plano,
                                     pm.cd_tipo_plano,
                                     pm.cd_modulo) loop
        p_valida_pl_mo_am(pam);
      end loop;

    end loop;

    for caei in c_agrupa_exame_internacao loop

      begin
        select 'S'
          into vaomigrado
          from gp.pl_mo_am pma
         where pma.cd_modalidade = caei.cd_modalidade
           and pma.cd_plano = caei.cd_plano
           and pma.cd_tipo_plano = caei.cd_tipo_plano
           and pma.cd_modulo = caei.cd_modulo
           and pma.cd_amb = caei.cd_amb;
      exception
        when no_data_found then

          select gp.pl_mo_am_seq.nextval
            into caei.progress_recid
            from dual;

          insert into gp.pl_mo_am values caei;

          p_commit;

      end;
    end loop;

    --commit;
  end p_migra_pl_mo_am;*/

  /* 2011-06-22: thales
  * procedure : pr_mg025_partinsu
  * objetivo  : cobertura dos planos insumos
  */
  procedure p_migra_partinsu is

    --cursor
    cursor cpartinsu(pcd_modalidade t_v_plano_padrao.cd_modalidade%type,
                     pcd_plano      t_v_plano_padrao.cd_plano%type,
                     pcd_tipo_plano t_v_plano_padrao.cd_tipo_plano%type,
                     pcd_modulo     varchar2) is
      select distinct rem.cd_modalidade cd_modalidade,
                      rem.cd_plano cd_plano,
                      rem.cd_tipo_plano cd_tipo_plano,
                      nvl(rmo.cdvalor_externo, cs.cdcategserv) cd_modulo,
                      rcs.cdvalor_externo cd_tipo_insumo,
                      nvl(rpr.cdvalor_externo, s.cdservico) cd_insumo,
                      sc.aoexclusao,
                      pcdtabpreco cd_tab_preco,
                      0 qt_caren_eletiva,
                      0 qt_caren_urgencia,
                      sysdate dt_atualizacao,
                      rownum progress_recid
        from t_v_plano_padrao rem,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_MODULO'
                 and tc.nrseq = ce.nrseq_tab_conversao
                 and ce.cdvalor_interno <> PCATEGSUS) rmo,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_PROCEDIMENTOS'
                 and tc.nrseq = ce.nrseq_tab_conversao) rpr, -- tabela para conversão de serviços
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO'
                 and tc.nrseq = ce.nrseq_tab_conversao) rcs, -- tabela para conversão de classes de serviços
             contrato_padrao cp,
             categoria_de_servico cs,
             servico_da_categoria sc,
             servico s,
             limite_do_servico ls,
             agrupamento_servico ag,
             agrupamento_servico_detalhe agd,
             gp.insumos ins
       where cp.cdcontrato = rem.cdcontrato
         and cp.cdcontrato = cs.cdcontrato
         and cs.cdcategserv = rmo.cdvalor_interno
         and s.cdservico = ins.cd_insumo
         and cs.cdcontrato = sc.cdcontrato
         and cs.cdcategserv = sc.cdcategserv
         and sc.nrserv_categ = ls.nrserv_categ
         and (ls.tpplano = rem.tpplano or rem.tpplano = '*' or
             ls.tpplano = '*')
         and ls.cdusucateg = '*'
            --and ls.cdsitcadastro = '*'
         and sc.cdagrupamento = ag.cdagrupamento(+)
         and ag.cdagrupamento = agd.cdagrupamento(+)
         and ag.aosituacao(+) = 'A'
         and agd.aoexceto(+) = 'N'
         and s.cdservico not between 'A' and 'Z'
         and nvl(sc.cdservico, agd.cdservico) = s.cdservico
         and s.cdservico = rpr.cdvalor_interno(+)
         and s.cdclasse = rcs.cdvalor_interno
         and f_insumo(s.cdclasse) = 'S' -- deve considerar os insumos
         and nvl(sc.aoexclusao, 'N') = 'N'
         and rem.cd_modalidade = pcd_modalidade
         and rem.cd_plano = pcd_plano
         and rem.cd_tipo_plano = pcd_tipo_plano
         and rmo.cdvalor_externo = to_char(pcd_modulo)
       order by lpad(nvl(rpr.cdvalor_externo, s.cdservico), 8, '0');

    cursor cpartinsu_excluido(pcd_modalidade t_v_plano_padrao.cd_modalidade%type,
                              pcd_plano      t_v_plano_padrao.cd_plano%type,
                              pcd_tipo_plano t_v_plano_padrao.cd_tipo_plano%type,
                              pcd_modulo     varchar2) is
      select distinct rem.cd_modalidade cd_modalidade,
                      rem.cd_plano cd_plano,
                      rem.cd_tipo_plano cd_tipo_plano,
                      rmo.cdvalor_externo cd_modulo,
                      rcs.cdvalor_externo cd_tipo_insumo,
                      nvl(rpr.cdvalor_externo, s.cdservico) cd_insumo,
                      sc.aoexclusao,
                      'PCDTABPRECO' cd_tab_preco,
                      0 qt_caren_eletiva, -- verificar
                      0 qt_caren_urgencia,
                      sysdate dt_atualizacao,
                      rownum progress_recid
        from t_v_plano_padrao rem,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_MODULO'
                 and tc.nrseq = ce.nrseq_tab_conversao
                 and ce.cdvalor_interno <> PCATEGSUS) rmo,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_PROCEDIMENTOS'
                 and tc.nrseq = ce.nrseq_tab_conversao) rpr, -- tabela para conversão de serviços
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO'
                 and tc.nrseq = ce.nrseq_tab_conversao) rcs, -- tabela para conversão de classes de serviços
             contrato_padrao cp,
             categoria_de_servico cs,
             servico_da_categoria sc,
             servico s,
             agrupamento_servico ag,
             agrupamento_servico_detalhe agd
       where cp.cdcontrato = rem.cdcontrato
         and cp.cdcontrato = cs.cdcontrato
         and cs.cdcategserv = rmo.cdvalor_interno
         and cs.cdcontrato = sc.cdcontrato
         and cs.cdcategserv = sc.cdcategserv
         and sc.cdagrupamento = ag.cdagrupamento(+)
         and ag.cdagrupamento = agd.cdagrupamento(+)
         and ag.aosituacao(+) = 'A'
         and agd.aoexceto(+) = 'N'
         and nvl(sc.cdservico, agd.cdservico) = s.cdservico
         and s.cdservico = rpr.cdvalor_interno(+)
         and s.cdclasse = rcs.cdvalor_interno
         and f_insumo(s.cdclasse) = 1 -- deve considerar os insumos
         and sc.aoexclusao = 'S'
         and rem.cd_modalidade = pcd_modalidade
         and rem.cd_plano = pcd_plano
         and rem.cd_tipo_plano = pcd_tipo_plano
         and rmo.cdvalor_externo = pcd_modulo
       order by lpad(nvl(rpr.cdvalor_externo, s.cdservico), 8, '0');

    cursor c_agrupa_inter_exam is
      select distinct inter.cd_modalidade,
                      inter.cd_plano,
                      inter.cd_tipo_plano,
                      inter.cd_modulo,
                      exam.cd_tipo_insumo,
                      exam.cd_insumo,
                      exam.cd_tab_preco,
                      exam.cd_userid,
                      exam.dt_atualizacao,
                      exam.ds_observacao##1,
                      exam.ds_observacao##2,
                      exam.ds_observacao##3,
                      exam.int_1,
                      exam.int_2,
                      exam.int_3,
                      exam.char_1,
                      exam.char_2,
                      exam.char_3,
                      exam.log_1,
                      exam.log_2,
                      exam.log_3,
                      exam.dec_1,
                      exam.dec_2,
                      exam.dec_3,
                      exam.date_1,
                      exam.date_2,
                      exam.date_3,
                      exam.u_char_1,
                      exam.u_char_2,
                      exam.u_char_3,
                      exam.u_int_1,
                      exam.u_int_2,
                      exam.u_int_3,
                      exam.u_log_1,
                      exam.u_log_2,
                      exam.u_log_3,
                      exam.u_dec_1,
                      exam.u_dec_2,
                      exam.u_dec_3,
                      exam.u_date_1,
                      exam.u_date_2,
                      exam.u_date_3,
                      exam.char_4,
                      exam.char_5,
                      exam.date_4,
                      exam.date_5,
                      exam.dec_4,
                      exam.dec_5,
                      exam.int_4,
                      exam.int_5,
                      exam.log_4,
                      exam.log_5,
                      exam.dt_limite,
                      exam.qt_caren_eletiva,
                      exam.qt_caren_urgencia,
                      exam.des_observacao,
                      null progress_recid
        from gp.partinsu                 inter,
             gp.partinsu                 exam,
             tm_depara_modulo_internacao t
       where inter.cd_modalidade = exam.cd_modalidade
         and inter.cd_plano = exam.cd_plano
         and inter.cd_tipo_plano = exam.cd_tipo_plano
         and inter.cd_modulo = t.cd_modulo_internacao
         and exam.cd_modulo = t.cd_modulo_exames;

    procedure p_insere_partinsu is
    begin
      for x in (select cd_modalidade, cd_plano, cd_tipo_plano, cd_modulo
                  from gp.pla_mod) loop
        begin
          for pti in cpartinsu(x.cd_modalidade,
                               x.cd_plano,
                               x.cd_tipo_plano,
                               x.cd_modulo) loop
            begin
              select 'S'
                into vaomigrado
                from gp.partinsu p
               where p.cd_modalidade = pti.cd_modalidade
                 and p.cd_plano = pti.cd_plano
                 and p.cd_tipo_plano = pti.cd_tipo_plano
                 and p.cd_modulo = pti.cd_modulo
                 and p.cd_tipo_insumo = pti.cd_tipo_insumo
                 and p.cd_insumo = pti.cd_insumo;
            exception
              when no_data_found then
                vaomigrado := 'N';
            end;

            if vaomigrado = 'N' then
              insert into gp.partinsu
                (cd_modalidade,
                 cd_plano,
                 cd_tipo_plano,
                 cd_modulo,
                 cd_tipo_insumo,
                 cd_insumo,
                 cd_tab_preco,
                 qt_caren_eletiva,
                 qt_caren_urgencia,
                 dt_atualizacao,
                 cd_userid,
                 progress_recid)
              values
                (pti.cd_modalidade,
                 pti.cd_plano,
                 pti.cd_tipo_plano,
                 pti.cd_modulo,
                 pti.cd_tipo_insumo,
                 pti.cd_insumo,
                 pti.cd_tab_preco,
                 pti.qt_caren_eletiva,
                 pti.qt_caren_urgencia,
                 pti.dt_atualizacao,
                 cuser_migracao,
                 gp.partinsu_seq.nextval);

              vqtregistro1 := vqtregistro1 + 1;

              countofrecords := countofrecords + 1;
              if (countofrecords >= 1000) then
                --commit;
                countofrecords := 0;
              end if;
            end if;
          end loop;
        exception
          when others then
            null;
        end;
      end loop;
      --commit;
    end p_insere_partinsu;

    procedure p_valida_partinsu(pti in out cpartinsu%rowtype) is
    begin
      if pti.aoexclusao = 'S' then
        begin
          -- exclui o serviço e seus procedimentos caso seja um grupo ou especialidade seja exceção
          delete from gp.partinsu pa
           where pa.cd_modalidade = pti.cd_modalidade
             and pa.cd_plano = pti.cd_plano
             and pa.cd_tipo_plano = pti.cd_tipo_plano
             and pa.cd_modulo = pti.cd_modulo
                --and pa.cd_tipo_insumo = pti.cd_tipo_insumo
             and pa.cd_insumo = pti.cd_insumo;
        end;

      elsif pti.aoexclusao = 'N' then
        p_insere_partinsu;
      end if;

    end p_valida_partinsu;
  begin

    -- lista todos os módulos encontrados
    for pm in (select pm.cd_modalidade,
                      pm.cd_plano,
                      pm.cd_tipo_plano,
                      pm.cd_modulo
                 from gp.pla_mod pm
                where pm.cd_userid = cuser_migracao
                order by pm.cd_modalidade,
                         pm.cd_plano,
                         pm.cd_tipo_plano,
                         pm.cd_modulo) loop
      begin
        for pti in cpartinsu(pm.cd_modalidade,
                             pm.cd_plano,
                             pm.cd_tipo_plano,
                             pm.cd_modulo) loop

          p_valida_partinsu(pti);
        end loop;
      exception
        when others then
          null;
      end;

      begin

        for pti in cpartinsu_excluido(pm.cd_modalidade,
                                      pm.cd_plano,
                                      pm.cd_tipo_plano,
                                      pm.cd_modulo) loop

          p_valida_partinsu(pti);
        end loop;
      exception
        when others then
          null;
      end;
    end loop;

    for caie in c_agrupa_inter_exam loop

      begin
        select 'S'
          into vaomigrado
          from gp.partinsu p
         where p.cd_modalidade = caie.cd_modalidade
           and p.cd_plano = caie.cd_plano
           and p.cd_tipo_plano = caie.cd_tipo_plano
           and p.cd_tipo_insumo = caie.cd_tipo_insumo
           and p.cd_insumo = caie.cd_insumo;
      exception
        when no_data_found then

          select gp.partinsu_seq.nextval
            into caie.progress_recid
            from dual;

          insert into gp.partinsu values caie;

          p_commit;

      end;

    --commit;

    end loop;

  end p_migra_partinsu;

  /*
  * procedure : p_busca_cobranca_carteira
  * objetivo  :  buscar o valor da cobranca da segunda via da carteira
  */

  /*
  * procedure : p_migra_forpagtx
  * objetivo  :  forma de pagto x taxa inscr.
  */
  procedure p_migra_forpagtx is
    vcdtabprecoproc varchar2(12) := pcdtabcobr;
    vlcobranca_2via number := 0;
    vcdplano        varchar2(8) := '';
    vtpusu_contrato varchar2(2) := '';
  begin

    for pc in (select rem.cd_modalidade,
                      rem.cd_plano,
                      rem.cd_tipo_plano,
                      decode(cp.tpcontrato, 'PM', '1', 'SP', '2') cd_forma_pagamento
                 from temp_depara_agrupado rem, contrato_padrao cp
                where rem.cdcontrato = cp.cdcontrato
               union
               select distinct rem.cd_modalidade,
                               rem.cd_plano,
                               rem.cd_tipo_plano,
                               decode(ru.tprepasse, 'P', '1', '2') cd_forma_pagamento
                 from temp_depara_agrupado  rem,
                      contrato_padrao       cp,
                      temp_depara_detalhado td,
                      usuario               u,
                      repasse_do_usuario    ru
                where rem.cdcontrato = cp.cdcontrato
                  and rem.cdcontrato = td.cdcontrato_agr
                  and ru.nrsequencial_usuario = u.nrsequencial_usuario
                  and u.cdcontrato = td.cdcontrato) loop

      begin

        select min(ta.cdcontrato)
          into vcdplano
          from temp_depara_agrupado ta
         where ta.cd_modalidade = pc.cd_modalidade
           and ta.cd_plano = pc.cd_plano
           and ta.cd_tipo_plano = pc.cd_tipo_plano;

        select min(cp.tpusu_contrato)
          into vtpusu_contrato
          from temp_depara_agrupado ta, contrato_padrao cp
         where cp.cdcontrato = ta.cdcontrato
           and ta.cd_modalidade = pc.cd_modalidade
           and ta.cd_plano = pc.cd_plano
           and ta.cd_tipo_plano = pc.cd_tipo_plano;

        vlcobranca_2via := f_busca_cobranca_carteira(sysdate,
                                                     vcdplano,
                                                     case
                                                       when pc.cd_forma_pagamento = 1 then
                                                        'PM'
                                                       else
                                                        'SP'
                                                     end,
                                                     vtpusu_contrato);

        select 'S'
          into vaomigrado
          from gp.for_pag f
         where f.cd_modalidade = pc.cd_modalidade
           and f.cd_plano = pc.cd_plano
           and f.cd_tipo_plano = pc.cd_tipo_plano
           and f.cd_forma_pagto = pc.cd_forma_pagamento;

      exception
        when no_data_found then
          vaomigrado := 'N';

          if vaomigrado = 'N' then
            begin
              select t.cd_tab_preco_proc
                into vcdtabprecoproc
                from gp.tabprepr t
               where t.in_tipo_tabela = 1
                 and rownum = 1;

              insert into gp.for_pag
                (cd_modalidade,
                 cd_plano,
                 cd_tipo_plano,
                 cd_forma_pagto,
                 tp_vencimento##1, -- valor default 1
                 dd_faturamento##1,
                 tp_vencimento##2,
                 dd_faturamento##2,
                 tp_vencimento##3,
                 dd_faturamento##3,
                 tp_vencimento##4,
                 dd_faturamento##4,
                 tp_vencimento##5,
                 dd_faturamento##5,
                 tp_vencimento##6,
                 dd_faturamento##6,
                 tp_vencimento##7,
                 dd_faturamento##7,
                 tp_vencimento##8,
                 dd_faturamento##8,
                 tp_vencimento##9,
                 dd_faturamento##9,
                 tp_vencimento##10,
                 dd_faturamento##10,
                 tp_vencimento##11,
                 dd_faturamento##11,
                 tp_vencimento##12,
                 dd_faturamento##12,
                 tp_vencimento##13,
                 dd_faturamento##13,
                 tp_vencimento##14,
                 dd_faturamento##14,
                 tp_vencimento##15,
                 dd_faturamento##15,
                 tp_vencimento##16,
                 dd_faturamento##16,
                 tp_vencimento##17,
                 dd_faturamento##17,
                 tp_vencimento##18,
                 dd_faturamento##18,
                 tp_vencimento##19,
                 dd_faturamento##19,
                 tp_vencimento##20,
                 dd_faturamento##20,
                 tp_vencimento##21,
                 dd_faturamento##21,
                 tp_vencimento##22,
                 dd_faturamento##22,
                 tp_vencimento##23,
                 dd_faturamento##23,
                 tp_vencimento##24,
                 dd_faturamento##24,
                 tp_vencimento##25,
                 dd_faturamento##25,
                 tp_vencimento##26,
                 dd_faturamento##26,
                 tp_vencimento##27,
                 dd_faturamento##27,
                 tp_vencimento##28,
                 dd_faturamento##28,
                 tp_vencimento##29,
                 dd_faturamento##29,
                 tp_vencimento##30,
                 dd_faturamento##30,
                 tp_vencimento##31,
                 dd_faturamento##31,
                 cd_classe_mens, --valor default 1
                 lgalterataxainscdigitacao, -- valor default 0
                 lgalterafatordigitacao, --valor default 0
                 lg_cobra_via_cart, --valor default 1
                 cd_tab_preco, --valor default pcdtabpreco
                 cd_tab_preco_proc, --buscar a primeira tabela do quatidade de moeda ativa e for cbhpm
                 pc_acres_ch, -- valor default 0
                 pc_acres_ch_insu, -- valor default 0
                 pc_taxa_adminis, -- valor default 0
                 pc_taxa_adminis_insu, -- valor default 0
                 pc_acrescimo_inscr, -- valor default 0
                 pc_acrescimo, -- valor default 0
                 pc_desconto_inscr, -- valor default 0
                 pc_desconto, -- valor default 0
                 lgtratainadimplenciarc, --valor default 1
                 nr_dias_inadimplencia, -- valor default 60
                 in_verif_titulo_inadim, --valor default 2
                 qtverifperiodoinadim, --valor default 12
                 umverifperiodoinadim, --valor default mm
                 in_tipo_titulo_inadim, --valor default 4
                 lgacumulardiasinadim, -- valor default 1
                 in_forma_acumulo_dias, --valor default a definir
                 log_1, --valor default a definir
                 log_2,
                 log_3, --Parcelamento Reajuste Retroativo
                 progress_recid,
                 cd_moeda,
                 qt_moeda_nova_via) -- valor default 1
              values
                (pc.cd_modalidade, --cd_modalidade,
                 pc.cd_plano, --cd_plano,
                 pc.cd_tipo_plano, --cd_tipo_plano,
                 pc.cd_forma_pagamento, --cd_forma_pagto,
                 1, --tp_vencimento##1,
                 1, --dd_faturamento##1,
                 1, --tp_vencimento##2,
                 2, --dd_faturamento##2,
                 1, -- tp_vencimento##3,
                 3, --dd_faturamento##3,
                 1, --tp_vencimento##4,
                 4, --dd_faturamento##4,
                 1, --tp_vencimento##5,
                 5, --dd_faturamento##5,
                 1, --tp_vencimento##6,
                 6, --dd_faturamento##6,
                 1, --tp_vencimento##7
                 7, --dd_faturamento##7,
                 1, --tp_vencimento##8,
                 8, --dd_faturamento##8,
                 1, --tp_vencimento##9,
                 9, --dd_faturamento##9,
                 1, --tp_vencimento##10,
                 10, --dd_faturamento##10,
                 1, --tp_vencimento##11,
                 11, --dd_faturamento##11,
                 1, --tp_vencimento##12,
                 12, --dd_faturamento##12,
                 1, --tp_vencimento##13,
                 13, --dd_faturamento##13,
                 1, --tp_vencimento##14,
                 14, --dd_faturamento##14,
                 1, --tp_vencimento##15,
                 15, --dd_faturamento##15,
                 1, --tp_vencimento##16,
                 16, --dd_faturamento##16,
                 1, --tp_vencimento##17,
                 17, --dd_faturamento##17,
                 1, --tp_vencimento##18,
                 18, --dd_faturamento##18,
                 1, --tp_vencimento##19,
                 19, --dd_faturamento##19,
                 1, --tp_vencimento##20,
                 20, --dd_faturamento##20,
                 1, --tp_vencimento##21,
                 21, --dd_faturamento##21,
                 1, --tp_vencimento##22,
                 22, --dd_faturamento##22,
                 1, --tp_vencimento##23,
                 23, --dd_faturamento##23,
                 1, --tp_vencimento##24,
                 24, --dd_faturamento##24,
                 1, --tp_vencimento##25,
                 25, --dd_faturamento##25,
                 1, --tp_vencimento##26,
                 26, --dd_faturamento##26,
                 1, --tp_vencimento##27,
                 27, --dd_faturamento##27,
                 1, --tp_vencimento##28,
                 28, --dd_faturamento##28,
                 1, --tp_vencimento##29,
                 29, --dd_faturamento##29,
                 1, --tp_vencimento##30,
                 30, --dd_faturamento##30,
                 1, --tp_vencimento##31,
                 31, --dd_faturamento##31,
                 1, --cd_classe_mens,
                 0, --lgalterataxainscdigitacao,
                 0, --lgalterafatordigitacao,
                 1, --lg_cobra_via_cart,
                 pcdtabpreco, --cd_tab_preco,
                 vcdtabprecoproc, --cd_tab_preco_proc, --buscar a primeira tabela do quatidade de moeda ativa e for cbhpm
                 0, --pc_acres_ch,
                 0, --pc_acres_ch_insu,
                 0, --pc_taxa_adminis,
                 0, --pc_taxa_adminis_insu,
                 0, --pc_acrescimo_inscr,
                 0, --pc_acrescimo,
                 0, --pc_desconto_inscr,
                 0, --pc_desconto,
                 1, --lgtratainadimplenciarc,
                 60, --nr_dias_inadimplencia,
                 2, --in_verif_titulo_inadim,
                 12, --qtverifperiodoinadim,
                 'MM', -- umverifperiodoinadim,
                 4, --in_tipo_titulo_inadim,
                 1, --lgacumulardiasinadim,
                 02, --in_forma_acumulo_dias,
                 0, --log_1,
                 1, --log_2,
                 1, --Parcelamento Reajuste Retroativo
                 gp.for_pag_seq.nextval,
                 0,
                 vlcobranca_2via);

              vqtregistro1 := vqtregistro1 + 1;

              countofrecords := countofrecords + 1;
              if (countofrecords >= 1000) then
                --commit;
                countofrecords := 0;
              end if;
            exception
              when no_data_found then
                null;
            end;
          end if;
      end;

      --tratamento convenio - TEMP_CONVENIO_CONTRATO criada em 21/03/18 atendendo a demanda dos usuários chave
      for x in (select distinct tcc.cd_convenio
                         from temp_convenio_contrato tcc
                        where tcc.cd_modalidade = pc.cd_modalidade
                          and tcc.cd_plano = pc.cd_plano
                          and tcc.cd_tipo_plano = pc.cd_tipo_plano) loop
          begin
            select 'S'
              into vaomigrado
              from gp.contippl c
             where c.cd_convenio = x.cd_convenio
               and c.cd_modalidade = pc.cd_modalidade
               and c.cd_plano = pc.cd_plano
               and c.cd_tipo_plano = pc.cd_tipo_plano
               and c.cd_forma_pagto = pc.cd_forma_pagamento
               and c.nr_sequencia = 1;
          exception
            when no_data_found then
              vaomigrado := 'N';
          end;

          if vaomigrado = 'N' then
            insert into gp.contippl
              (cd_convenio,
               cd_modalidade,
               cd_plano,
               cd_tipo_plano,
               cd_forma_pagto,
               nr_sequencia,
               qt_fator_taxa_inscr,
               qt_fator_mensalidade,
               nr_minimo_pessoas,
               nr_maximo_pessoas,
               cd_userid,
               progress_recid)
            values
              (x.cd_convenio, --cd_convenio,
               pc.cd_modalidade, --cd_modalidade,
               pc.cd_plano, --cd_plano,
               pc.cd_tipo_plano, --cd_tipo_plano,
               pc.cd_forma_pagamento, --cd_forma_pagto,
               1, --nr_sequencia,
               1, --qt_fator_taxa_inscr,
               1, --qt_fator_mensalidade,
               0, --nr_minimo_pessoas,
               99999, --nr_maximo_pessoas,
               'MIGRACAO', --cd_userid,
               gp.contippl_seq.nextval --progress_recid
               );

            countofrecords := countofrecords + 1;
            if (countofrecords >= 1000) then
              --commit;
              countofrecords := 0;
            end if;
          end if;
      end loop;

      --CASO O DEPARA TEMP_CONVENIO_CONTRATO ESTEJA VAZIO, TRATAMENTO DEFAULT
      begin
        select 'S'
          into vaomigrado
          from gp.contippl c
         where c.cd_modalidade = pc.cd_modalidade
           and c.cd_plano = pc.cd_plano
           and c.cd_tipo_plano = pc.cd_tipo_plano
           and c.cd_forma_pagto = pc.cd_forma_pagamento
           and c.nr_sequencia = 1
           and rownum = 1;
      exception
        when no_data_found then
          vaomigrado := 'N';
      end;

      if vaomigrado = 'N' then
        insert into gp.contippl
          (cd_convenio,
           cd_modalidade,
           cd_plano,
           cd_tipo_plano,
           cd_forma_pagto,
           nr_sequencia,
           qt_fator_taxa_inscr,
           qt_fator_mensalidade,
           nr_minimo_pessoas,
           nr_maximo_pessoas,
           cd_userid,
           progress_recid)
        values
          (PCDCONVENIOPADRAO, --cd_convenio,
           pc.cd_modalidade, --cd_modalidade,
           pc.cd_plano, --cd_plano,
           pc.cd_tipo_plano, --cd_tipo_plano,
           pc.cd_forma_pagamento, --cd_forma_pagto,
           1, --nr_sequencia,
           1, --qt_fator_taxa_inscr,
           1, --qt_fator_mensalidade,
           0, --nr_minimo_pessoas,
           99999, --nr_maximo_pessoas,
           'MIGRACAO', --cd_userid,
           gp.contippl_seq.nextval --progress_recid
           );

        countofrecords := countofrecords + 1;
        if (countofrecords >= 1000) then
          --commit;
          countofrecords := 0;
        end if;
      end if;

      -- FIM TRATAMENTO CONVENIO

      begin
        select 'S'
          into vaomigrado
          from gp.forpagtx f
         where f.cd_modalidade = pc.cd_modalidade
           and f.cd_plano = pc.cd_plano
           and f.cd_tipo_plano = pc.cd_tipo_plano
           and f.cd_forma_pagto = pc.cd_forma_pagamento
           and f.nr_sequencial = '1';
      exception
        when no_data_found then
          vaomigrado := 'N';
      end;

      if vaomigrado = 'N' then
        insert into gp.forpagtx
          (cd_modalidade,
           cd_plano,
           cd_tipo_plano,
           cd_forma_pagto,
           nr_sequencial,
           nr_inicial,
           nr_final,
           pc_taxa_inscricao,
           qt_fator_usuarios,
           dt_atualizacao,
           cd_userid,
           progress_recid)
        values
          (pc.cd_modalidade,
           pc.cd_plano,
           pc.cd_tipo_plano,
           pc.cd_forma_pagamento,
           '1',
           '1',
           '999',
           '100',
           '1',
           sysdate,
           cuser_migracao,
           gp.forpagtx_seq.nextval);

        countofrecords := countofrecords + 1;
        if (countofrecords >= 1000) then
          --commit;
          countofrecords := 0;
        end if;

      end if;

    end loop;

  end p_migra_forpagtx;

  /*
  * procedure : p_migra_quantitativo_permitido
  * objetivo  : quantitativo (quantidades permitidas)
  */
  procedure p_migra_quantitativo_permitido is

    vconversaoindper           number;
    vconversaocontrresp        number;
    vindperiodo                varchar2(6);
    vcontrresponsavel          varchar2(6);
    vcont                      number := 0;
    vcdmodulo                  number := 0;
    vaux                       number := 0;
    vcodagrupamento            number(4);
    vcdespecialidadeproc       number;
    vcdgrupoproc               number;
    vcdprocedimento            number;
    vdgproc                    number;
    vtipoinsumo                number;
    vcdinsumo                  number;
    vtpproc_insu               varchar2(1);
    vexisteproperus            varchar2(1);
    vnivel                     varchar2(1);
    vcdespgrupo                number;
    vcdtotalizador             number;
    vqtlimite                  number;
    vnrmeses                   number;
    vperiodotot                varchar2(1);
    vcontroletot               number;
    vnivelatualizacao          varchar2(1);
    vtptotalizador             varchar2(1);
    vcdtotalizadorprocedimento number;
    vcdtotalizadorsuperior     number;
    vnrsequencialservico       number := 0;
    vnrsequencialtot           number;
    vexisteplanoigual          varchar2(1);
    vexistecontratodiferente   varchar2(1);
    vnrsequencialproperus      number;

    procedure p_converte_tipo_limite(ptpcriterio varchar2) is
    begin
      -- converte o tipo de limite pelo indicador de periodo e controle no gps
      select nvl(substr(rip.cdvalor_externo, 1, 12), '0')
        into vindperiodo
        from mig_tab_conversao_exp rip
       where rip.nrseq_tab_conversao = vconversaoindper
         and rip.cdvalor_interno = ptpcriterio;

      select nvl(rcq.cdvalor_externo, '0')
        into vcontrresponsavel
        from mig_tab_conversao_exp rcq
       where rcq.nrseq_tab_conversao = vconversaocontrresp
         and rcq.cdvalor_interno = ptpcriterio;
    end;

    procedure p_define_procedimento(pcdprocedimento varchar2,
                                    pcdgrupotipo    varchar2,
                                    pcdclasse       varchar2) is
      vcd varchar2(8);
    begin
      vcdespecialidadeproc := 0;
      vcdgrupoproc         := 0;
      vcdprocedimento      := 0;
      vdgproc              := 0;
      vtipoinsumo          := 0;
      vcdinsumo            := 0;
      vtpproc_insu         := 0;
      vexisteproperus      := 0;
      vcd                  := '';

      if f_insumo(pcdclasse) = 'S' then
        -- insumo
        vcdespecialidadeproc := 0;
        vcdgrupoproc         := 0;
        vcdprocedimento      := 0;
        vdgproc              := 0;
        vtipoinsumo          := to_number(pcdgrupotipo);
        vcdinsumo            := to_number(nvl(pcdprocedimento, '0'));
        vtpproc_insu         := '0';
      else
        if length(pcdprocedimento) in (3, 6) then
          vcd := pcdprocedimento || '0';
        elsif length(pcdprocedimento) = 5 then
          vcd := pcdprocedimento || '00';
        else
          vcd := pcdprocedimento;
        end if;

        -- procedimento
        vcdespecialidadeproc := to_number(substr(vcd, 1, 2));
        vcdgrupoproc         := to_number(nvl(substr(vcd, 3, 2), '0'));
        vcdprocedimento      := to_number(nvl(substr(vcd, 5, 3), '0'));
        vdgproc              := to_number(nvl(substr(vcd, 8, 1), '0'));
        vtipoinsumo          := 0;
        vcdinsumo            := 0;
        vtpproc_insu         := '1';
      end if;
    end p_define_procedimento;

    procedure p_atualiza_totalizador is
    begin
      if vtptotalizador = 'N' then
        vtptotalizador := 'I';
      elsif vtptotalizador = 'P' then
        vtptotalizador := 'S';
      end if;

      update temp_migracao_grupo_limite tg
         set tg.tptotalizador = vtptotalizador
       where tg.cdtotalizador = vcdtotalizador;

      /*if vtptotalizador = 'S' then
        update .gpproperus pr
           set pr.cd_tot_superior = vcdtotalizador, pr.cd_tot_procper = 0
         where pr.cd_tot_procper = vcdtotalizador;
      end if;*/
    end;

    procedure p_grava_totpropr(pti in cproperus_plano%rowtype) is

      vexiste varchar2(1);
    begin
      begin
        select 'S', t.cd_tot_procper
          into vexiste, vcodagrupamento
          from gp.totpropr t
         where u_int_1 = pti.cdagrupamento --t.ds_tot_procper like pti.cdagrupamento || '-%'
           and t.lg_controle = vtpproc_insu;
      exception
        when no_data_found then
          vexiste         := 'N';
          vcodagrupamento := 0;
      end;

      if vexiste = 'N' then
        begin
          select nvl(max(cd_tot_procper) + 1, 1)
            into vcodagrupamento
            from gp.totpropr;
        exception
          when no_data_found then
            vcodagrupamento := 1;
        end;
        begin
          insert into gp.totpropr
            (cd_tot_procper,
             ds_tot_procper,
             in_periodo,
             qt_permitida,
             nr_meses,
             dt_atualizacao,
             cd_userid,
             lg_controle,
             hr_atualizacao,
             progress_recid,
             u_int_1)
          values
            (vcodagrupamento,
             pti.cdagrupamento || ' - ' || pti.noagrupamento,
             vindperiodo,
             pti.qt_permitida,
             pti.nr_meses,
             sysdate,
             cuser_migracao,
             vtpproc_insu, --
             to_char(sysdate, 'HH24:MI:SS'),
             gp.totpropr_seq.nextval,
             pti.cdagrupamento);

          --vqtregistro2 := vqtregistro2 + 1;

          /*   exception
                    when others then
                      p_insere_falha(203,
                                     'Agrupamento;' || pti.cdagrupamento ||
                                     ';não cadastrado');
          */
        end;

      end if;
    end p_grava_totpropr;

    procedure p_insere_properus(pti          cproperus_plano%rowtype,
                                pcdplano     number,
                                pcdtipoplano number) is

      vcdcountagrup number;

    begin
      p_define_procedimento(pti.cd_procedimento,
                            pti.grupo_proc_tp_insu,
                            pti.cdclasse);

      vcdmodulo := to_number(pti.cd_modulo);

      select count(*)
        into vcdcountagrup
        from agrupamento_servico_detalhe asd, servico s
       where asd.cdservico = s.cdservico
         and asd.cdagrupamento = pti.cdagrupamento
         and asd.cdservico <> pti.cdservico
         and length(nvl(translate(upper(s.cdservico),
                                  'ABCDEFGHIJKLMNOPQRSTUVXZ',
                                  0),
                        0)) = 8
         and pti.tpservico = case
               when s.cdclasse in (2, 3, 4, 5) then
                'INSUMO'
               else
                'PROCEDIMENTO'
             end;

      if vcdcountagrup > 0 then
        --definindo agrupador
        p_grava_totpropr(pti);

      else

        vcodagrupamento := 0;

      end if;

      if (vnivel = 'P') or (vcdtotalizador <> 0) then
        vexisteproperus := 'N';
      elsif vnivel = 'C' then
        -- verifica se existe registro equivalente para o plano já gravado na tabela
        begin
          --gp.properus.incontroleresponsavel
          select 'S'
            into vexisteproperus
            from gp.properus pr
           where cd_modalidade = pti.cd_modalidade
             and cd_plano = pcdplano
             and cd_tipo_plano = pcdtipoplano
             and nr_ter_adesao = '0'
             and cd_usuario = '0'
             and cd_modulo = vcdmodulo
             and u##cd_cid = ' '
             and cd_esp_amb = vcdespecialidadeproc
             and cd_grupo_proc_amb = vcdgrupoproc
             and cd_procedimento = vcdprocedimento
             and dv_procedimento = vdgproc
             and cd_tipo_insumo = vtipoinsumo
             and cd_insumo = vcdinsumo
             and dt_inicio_vigencia = to_date('01011990', 'DD/MM/YYYY')
             and dt_fim_vigencia = to_date('31129999', 'DD/MM/YYYY')
             and qt_permitida = pti.qt_permitida
             and in_periodo = vindperiodo
             and nr_meses = pti.nr_meses
             and incontroleresponsavel = vcontrresponsavel
             and cd_tot_procper = 0
             and cd_tot_superior = 0
             and rownum = 1;
        exception
          when no_data_found then
            vexisteproperus := 'N';
        end;
      end if;

      if vexisteproperus = 'N' then
        vcont := vcont + 1;
        begin
          select count(*)
            into vaux
            from gp.properus pr
           where pr.cd_modalidade = pti.cd_modalidade
             and pr.cd_plano = pti.cd_plano
             and pr.cd_tipo_plano = pti.cd_tipo_plano
             and pr.nr_ter_adesao = pti.nr_ter_adesao
             and pr.cd_modulo = vcdmodulo
             and pr.cd_esp_amb = vcdespecialidadeproc
             and pr.cd_grupo_proc_amb = vcdgrupoproc
             and pr.cd_procedimento = vcdprocedimento
             and pr.dv_procedimento = vdgproc
             and pr.cd_tipo_insumo = vtipoinsumo
             and pr.cd_insumo = vcdinsumo
             and rownum = 1;
          if vaux = 0 then
            insert into gp.properus
              (cd_modalidade,
               cd_plano,
               cd_tipo_plano,
               nr_ter_adesao,
               cd_usuario,
               cd_modulo,
               cd_esp_amb,
               cd_grupo_proc_amb,
               cd_procedimento,
               dv_procedimento,
               cd_tipo_insumo,
               cd_insumo,
               u##cd_cid,
               cd_cid,
               ds_properus,
               dt_inicio_vigencia,
               dt_fim_vigencia,
               cd_tot_superior,
               cd_tot_procper,
               qt_permitida,
               in_periodo,
               nr_meses,
               lg_controle,
               incontroleresponsavel,
               nr_seq_properus,
               cd_contratante,
               cd_grau_parentesco,
               dt_atualizacao,
               hr_atualizacao,
               cd_userid,
               progress_recid)
            values
              (pti.cd_modalidade,
               decode(vnivel, 'P', pti.cd_plano, '0'),
               decode(vnivel, 'P', pti.cd_tipo_plano, '0'),
               pti.nr_ter_adesao,
               pti.cd_usuario,
               vcdmodulo, --pti.cd_modulo,
               vcdespecialidadeproc,
               vcdgrupoproc,
               vcdprocedimento,
               vdgproc,
               vtipoinsumo,
               vcdinsumo,
               ' ',
               ' ',
               pti.ds_properus,
               to_date('01011990', 'DD/MM/YYYY'),
               to_date('31129999', 'DD/MM/YYYY'),
               0, --decode(vtptotalizador, 'S', vcdtotalizador, 0),
               vcodagrupamento, --deve receber sequencial da totpropr
               pti.qt_permitida,
               vindperiodo,
               pti.nr_meses,
               vtpproc_insu,
               vcontrresponsavel,
               vcont,
               '0',
               '0',
               sysdate,
               to_char(sysdate, 'HH24:MI:SS'),
               cuser_migracao,
               gp.properus_seq.nextval);
            --commit;
          end if;
          /*        exception
                    when others then
                      p_insere_falha(202,
                                     'Especialidade;' || vcdespecialidadeproc || ';' ||
                                     sqlerrm);
          */
        end;
        vqtregistro1 := vqtregistro1 + 1;

        countofrecords := countofrecords + 1;
        if (countofrecords >= 500) then
          --commit;
          countofrecords := 0;
        end if;
      end if;

    end p_insere_properus;

    procedure p_atualiza_properus(pti      in out cproperus_plano%rowtype,
                                  pcdplano number,
                                  ptpplano number) is
    begin
      p_define_procedimento(pti.cd_procedimento,
                            pti.grupo_proc_tp_insu,
                            pti.cdclasse);
      vexisteproperus          := 'N';
      vnivelatualizacao        := '';
      vexisteplanoigual        := '';
      vexistecontratodiferente := '';
      vnrsequencialproperus    := 0;

      if f_insumo(pti.cd_modulo) = 'S' then
        vcdmodulo := 0;
      else
        begin
          vcdmodulo := to_number(pti.cd_modulo);
          /*exception
                    when others then
                      p_insere_falha(202,
                                     'Módulo;' || pti.cd_modulo ||
                                     '; não numérico, verifique de-para.');
          */
        end;
      end if;

      if (vnivel = 'C') and (vtptotalizador is not null) then
        if vtptotalizador = 'P' then
          vcdtotalizadorprocedimento := vcdtotalizador;
          vcdtotalizadorsuperior     := 0;
        elsif vtptotalizador = 'S' then
          vcdtotalizadorprocedimento := 0;
          vcdtotalizadorsuperior     := vcdtotalizador;
        elsif vtptotalizador in ('N', 'I') then
          vcdtotalizadorprocedimento := 0;
          vcdtotalizadorsuperior     := 0;
        end if;

        for rproperus in (select cd_plano,
                                 nr_ter_adesao,
                                 cdtotalizador,
                                 qt_permitida,
                                 nr_meses,
                                 in_periodo,
                                 incontroleresponsavel,
                                 progress_recid
                            from (select pr.cd_plano,
                                         pr.nr_ter_adesao,
                                         decode(vtptotalizador,
                                                'P',
                                                pr.cd_tot_procper,
                                                'S',
                                                pr.cd_tot_superior,
                                                0) cdtotalizador,
                                         pr.qt_permitida,
                                         pr.nr_meses,
                                         pr.in_periodo,
                                         pr.incontroleresponsavel,
                                         pr.progress_recid
                                    from gp.properus pr
                                   where pr.cd_modalidade = pti.cd_modalidade
                                     and ((pr.cd_plano = pcdplano and
                                         pr.cd_tipo_plano = ptpplano and
                                         pr.nr_ter_adesao = 0) or
                                         (pr.cd_plano = 0 and
                                         pr.cd_tipo_plano = 0 and
                                         pr.nr_ter_adesao =
                                         pti.nr_ter_adesao))
                                     and pr.cd_modulo = vcdmodulo
                                     and pr.cd_esp_amb = vcdespecialidadeproc
                                     and pr.cd_grupo_proc_amb = vcdgrupoproc
                                     and pr.cd_procedimento = vcdprocedimento
                                     and pr.dv_procedimento = vdgproc
                                     and pr.cd_tipo_insumo = vtipoinsumo
                                     and pr.cd_insumo = vcdinsumo
                                     and pr.cd_tot_procper =
                                         vcdtotalizadorprocedimento
                                     and pr.cd_tot_superior =
                                         vcdtotalizadorsuperior
                                   order by pr.nr_ter_adesao)) loop

          if rproperus.cd_plano <> 0 then
            vexisteplanoigual := 'N';
            if (rproperus.qt_permitida = pti.qt_permitida) and
               (rproperus.nr_meses = pti.nr_meses) and
               (rproperus.in_periodo = vindperiodo) and
               (rproperus.incontroleresponsavel = vcontrresponsavel) then
              vexisteplanoigual := 'S';
            end if;
          elsif rproperus.nr_ter_adesao <> 0 then
            vexistecontratodiferente := 'N';
            if (rproperus.qt_permitida <> pti.qt_permitida) or
               (rproperus.nr_meses = pti.nr_meses) or
               (rproperus.in_periodo = vindperiodo) or
               (rproperus.incontroleresponsavel = vcontrresponsavel) then
              vcdtotalizador           := rproperus.cdtotalizador;
              vexisteproperus          := 'S';
              vqtlimite                := rproperus.qt_permitida;
              vnrmeses                 := rproperus.nr_meses;
              vperiodotot              := rproperus.in_periodo;
              vcontroletot             := rproperus.incontroleresponsavel;
              vexistecontratodiferente := 'S';
              vnrsequencialproperus    := rproperus.progress_recid;
            end if;
          end if;
        end loop;
      end if;

      if (vnivel = 'P') or
         ((vnivel = 'C') and (vexistecontratodiferente = 'S') and
         ((vexisteplanoigual = 'N') or (vexisteplanoigual is null))) then
        update gp.properus pr
           set pr.qt_permitida          = pti.qt_permitida,
               pr.nr_meses              = pti.nr_meses,
               pr.in_periodo            = vindperiodo,
               pr.incontroleresponsavel = vcontrresponsavel
         where pr.cd_modalidade = pti.cd_modalidade
           and pr.cd_plano = pti.cd_plano
           and pr.cd_tipo_plano = pti.cd_tipo_plano
           and pr.nr_ter_adesao = pti.nr_ter_adesao
           and pr.cd_modulo = vcdmodulo
           and pr.cd_esp_amb = vcdespecialidadeproc
           and pr.cd_grupo_proc_amb = vcdgrupoproc
           and pr.cd_procedimento = vcdprocedimento
           and pr.dv_procedimento = vdgproc
           and pr.cd_tipo_insumo = vtipoinsumo
           and pr.cd_insumo = vcdinsumo
           and rownum = 1;
      elsif (vnivel = 'C') and (vexistecontratodiferente is null) and
            ((vexisteplanoigual = 'N') or (vexisteplanoigual is null)) then
        vcont := vcont + 1;
        begin
          select count(*)
            into vaux
            from gp.properus pr
           where pr.cd_modalidade = pti.cd_modalidade
             and pr.cd_plano = pti.cd_plano
             and pr.cd_tipo_plano = pti.cd_tipo_plano
             and pr.nr_ter_adesao = pti.nr_ter_adesao
             and pr.cd_modulo = vcdmodulo
             and pr.cd_esp_amb = vcdespecialidadeproc
             and pr.cd_grupo_proc_amb = vcdgrupoproc
             and pr.cd_procedimento = vcdprocedimento
             and pr.dv_procedimento = vdgproc
             and pr.cd_tipo_insumo = vtipoinsumo
             and pr.cd_insumo = vcdinsumo
             and rownum = 1;
          if vaux = 0 then
            insert into gp.properus
              (cd_modalidade,
               cd_plano,
               cd_tipo_plano,
               nr_ter_adesao,
               cd_usuario,
               cd_modulo,
               cd_esp_amb,
               cd_grupo_proc_amb,
               cd_procedimento,
               dv_procedimento,
               cd_tipo_insumo,
               cd_insumo,
               u##cd_cid,
               cd_cid,
               ds_properus,
               dt_inicio_vigencia,
               dt_fim_vigencia,
               cd_tot_superior,
               cd_tot_procper,
               qt_permitida,
               in_periodo,
               nr_meses,
               lg_controle,
               incontroleresponsavel,
               nr_seq_properus,
               cd_contratante,
               cd_grau_parentesco,
               dt_atualizacao,
               hr_atualizacao,
               cd_userid,
               progress_recid)
            values
              (pti.cd_modalidade,
               decode(vnivel, 'P', pti.cd_plano, '0'),
               decode(vnivel, 'P', pti.cd_tipo_plano, '0'),
               pti.nr_ter_adesao,
               pti.cd_usuario,
               vcdmodulo, --pti.cd_modulo,
               vcdespecialidadeproc,
               vcdgrupoproc,
               vcdprocedimento,
               vdgproc,
               vtipoinsumo,
               vcdinsumo,
               ' ',
               ' ',
               pti.ds_properus,
               to_date('01011990', 'DD/MM/YYYY'),
               to_date('31129999', 'DD/MM/YYYY'),
               decode(vtptotalizador, 'S', vcdtotalizador, 0),
               decode(vtptotalizador, 'P', vcdtotalizador, 0),
               pti.qt_permitida,
               vindperiodo,
               pti.nr_meses,
               vtpproc_insu,
               vcontrresponsavel,
               vcont,
               '0',
               '0',
               sysdate,
               to_char(sysdate, 'HH24:MI:SS'),
               cuser_migracao,
               gp.properus_seq.nextval);
          end if;
          /* exception
                    when others then
                      p_insere_falha(202,
                                     'Módulo;' || vcdespecialidadeproc || ';' ||
                                     sqlerrm);
          */
        end;
        vqtregistro1 := vqtregistro1 + 1;

      elsif (vnivel = 'C') and (vexistecontratodiferente is not null) and
            (vexisteplanoigual = 'S') then
        delete from gp.properus
         where progress_recid = vnrsequencialproperus;
      end if;

      countofrecords := countofrecords + 1;
      if (countofrecords >= 500) then
        --commit;
        countofrecords := 0;
      end if;

    end p_atualiza_properus;

    procedure p_exclui_properus(pti in out cproperus_plano%rowtype) is
    begin
      p_define_procedimento(pti.cd_procedimento,
                            pti.grupo_proc_tp_insu,
                            pti.cdclasse);

      begin
        -- exclui o serviço e seus procedimentos caso seja um grupo ou especialidade seja exceção
        delete from gp.properus pr
         where pr.cd_modalidade = pti.cd_modalidade
           and pr.cd_plano = pti.cd_plano
           and pr.cd_tipo_plano = pti.cd_tipo_plano
           and pr.nr_ter_adesao = pti.nr_ter_adesao
           and pr.cd_usuario = pti.cd_usuario
           and pr.cd_modulo = pti.cd_modulo
           and pr.cd_esp_amb = vcdespecialidadeproc
           and pr.cd_grupo_proc_amb = vcdgrupoproc
           and pr.cd_procedimento = vcdprocedimento
           and pr.cd_tipo_insumo = vtipoinsumo
           and pr.cd_insumo = vcdinsumo;

        if vnrsequencialtot <> 0 then
          insert into temp_migracao_grupo_serv
            (nrsequencial_tot,
             cd_procedimento,
             cdservico,
             grupo_proc_tp_insu,
             cdclasse,
             qt_permitida,
             nr_meses,
             in_periodo,
             incontroleresponsavel,
             tpservico)
          values
            (vnrsequencialtot,
             pti.cd_procedimento,
             pti.cdservico,
             pti.grupo_proc_tp_insu,
             pti.cdclasse,
             0,
             0,
             ' ',
             0,
             'D');
        end if;

        countofrecords := countofrecords + 1;
        if (countofrecords >= 5000) then
          --commit;
          countofrecords := 0;
        end if;
      end;
    end p_exclui_properus;

    procedure p_valida_procedimento(pti      in out cproperus_plano%rowtype,
                                    pcdplano number,
                                    ptpplano number) is
    begin
      vcdtotalizador   := 0;
      vqtlimite        := 0;
      vnrmeses         := 0;
      vperiodotot      := '';
      vcontroletot     := 0;
      vnrsequencialtot := 0;

      begin
        select tg.cdtotalizador,
               tg.qtlimite,
               tg.nr_meses,
               tg.in_periodo,
               tg.incontroleresponsavel,
               tg.tptotalizador,
               tq.nrsequencial
          into vcdtotalizador,
               vqtlimite,
               vnrmeses,
               vperiodotot,
               vcontroletot,
               vtptotalizador,
               vnrsequencialtot
          from temp_migracao_grupo_limite tg, temp_migracao_grupo_quant tq
         where tg.cdtotalizador = tq.cdtotalizador
           and tq.cd_modalidade = pti.cd_modalidade
           and tq.cd_plano = pti.cd_plano
           and tq.cd_tipo_plano = pti.cd_tipo_plano
           and tq.nr_ter_adesao = pti.nr_ter_adesao
           and tq.cd_modulo = pti.cd_modulo
           and pti.cd_procedimento like tg.cdservico || '%'
           and rownum = 1;
      exception
        when no_data_found then
          vcdtotalizador   := 0;
          vqtlimite        := 0;
          vnrmeses         := 0;
          vperiodotot      := '';
          vcontroletot     := 0;
          vtptotalizador   := ' ';
          vnrsequencialtot := 0;
      end;

      if vtptotalizador in ('N', 'P') then
        p_atualiza_totalizador;
      end if;

      if vcdtotalizador = 0 then
        p_insere_properus(pti, pcdplano, ptpplano);
      else
        insert into temp_migracao_grupo_serv
          (nrsequencial_tot,
           cd_procedimento,
           cdservico,
           grupo_proc_tp_insu,
           cdclasse,
           qt_permitida,
           nr_meses,
           in_periodo,
           incontroleresponsavel,
           tpservico)
        values
          (vnrsequencialtot,
           pti.cd_procedimento,
           pti.cdservico,
           pti.grupo_proc_tp_insu,
           pti.cdclasse,
           pti.qt_permitida,
           pti.nr_meses,
           vindperiodo,
           vcontrresponsavel,
           'E');

        p_atualiza_properus(pti, pcdplano, ptpplano);
      end if;
    end p_valida_procedimento;

    procedure p_valida_grupo(pti      in out cproperus_plano%rowtype,
                             pcdplano number,
                             ptpplano number) is
    begin
      vcdespgrupo := pti.cd_procedimento;

      begin
        select cdtotalizador, tptotalizador
          into vcdtotalizador, vtptotalizador
          from temp_migracao_grupo_limite tg
         where tg.cdservico = pti.cd_procedimento
           and tg.qtlimite = pti.qt_permitida
           and tg.nr_meses = pti.nr_meses
           and tg.in_periodo = vindperiodo
           and tg.incontroleresponsavel = vcontrresponsavel
           and tg.aoindividual = pti.aolimite_individual
           and rownum = 1;
      exception
        when no_data_found then
          vcdtotalizador := 0;
          vtptotalizador := '';
      end;

      p_grava_totpropr(pti);

      if (vnivel = 'P') or ((vnivel = 'C') and (vtptotalizador is null)) then
        if vcdtotalizador = 0 then
          if pti.aolimite_individual = 'S' then
            vtptotalizador := 'N';
          else
            vtptotalizador := 'P';
          end if;

          begin
            select nvl(max(tp.cd_tot_procper), 0) + 1
              into vcdtotalizador
              from gp.totpropr tp;
          exception
            when no_data_found then
              vcdtotalizador := 1;
          end;

          if vcdtotalizador <> 0 then

            insert into temp_migracao_grupo_limite
              (cdtotalizador,
               cdservico,
               qtlimite,
               aoindividual,
               nr_meses,
               in_periodo,
               incontroleresponsavel,
               tptotalizador)
            values
              (vcdtotalizador,
               vcdespgrupo,
               pti.qt_permitida,
               pti.aolimite_individual,
               pti.nr_meses,
               vindperiodo,
               vcontrresponsavel,
               vtptotalizador);
          end if;
        end if;

        -- inicia loop dos serviços do grupo
        for rservico in c_servico(pti.cd_procedimento) loop
          pti.cd_procedimento    := rservico.cd_procedimento;
          pti.grupo_proc_tp_insu := rservico.grupo_proc_tp_insu;
          pti.cdservico          := rservico.cdservico;
          pti.cdclasse           := rservico.cdclasse;

          p_insere_properus(pti, pcdplano, ptpplano);
        end loop;
      elsif (vnivel = 'C') and (vtptotalizador is not null) then
        for rservico in (select ts.cd_procedimento,
                                ts.cdservico,
                                ts.grupo_proc_tp_insu,
                                ts.cdclasse
                           from temp_migracao_grupo_quant tq,
                                temp_migracao_grupo_serv  ts
                          where tq.nrsequencial = ts.nrsequencial_tot
                            and tq.cdtotalizador = vcdtotalizador
                            and tq.cd_modalidade = pti.cd_modalidade
                            and tq.cd_plano = pcdplano
                            and tq.cd_tipo_plano = ptpplano
                            and tq.nr_ter_adesao = 0
                            and tq.cd_modulo = pti.cd_modulo
                            and (ts.qt_permitida <> pti.qt_permitida or
                                ts.nr_meses <> pti.nr_meses or
                                ts.in_periodo <> vindperiodo or
                                ts.incontroleresponsavel <>
                                vcontrresponsavel or ts.tpservico = 'D')
                            and rownum = 1) loop

          pti.cd_procedimento    := rservico.cd_procedimento;
          pti.grupo_proc_tp_insu := rservico.grupo_proc_tp_insu;
          pti.cdservico          := rservico.cdservico;
          pti.cdclasse           := rservico.cdclasse;

          p_insere_properus(pti, pcdplano, ptpplano);
        end loop;
      end if;

      vnrsequencialservico := vnrsequencialservico + 1;
      insert into temp_migracao_grupo_quant
        (cdtotalizador,
         cd_modalidade,
         cd_plano,
         cd_tipo_plano,
         nr_ter_adesao,
         cd_modulo,
         nrsequencial)
      values
        (vcdtotalizador,
         pti.cd_modalidade,
         pti.cd_plano,
         pti.cd_tipo_plano,
         pti.nr_ter_adesao,
         pti.cd_modulo,
         vnrsequencialservico);
    end p_valida_grupo;

    procedure p_valida_exclusao(pti in out cproperus_plano%rowtype) is
    begin
      begin
        select tq.nrsequencial
          into vnrsequencialtot
          from temp_migracao_grupo_limite tg, temp_migracao_grupo_quant tq
         where tg.cdtotalizador = tq.cdtotalizador
           and pti.cd_procedimento like tg.cdservico || '%'
           and tq.cd_modalidade = pti.cd_modalidade
           and tq.cd_plano = pti.cd_plano
           and tq.cd_tipo_plano = pti.cd_tipo_plano
           and tq.nr_ter_adesao = pti.nr_ter_adesao
           and tq.cd_modulo = pti.cd_modulo
           and rownum = 1;
      exception
        when no_data_found then
          vnrsequencialtot := 0;
      end;

      if (length(pti.cd_procedimento) = 8) or
         (f_insumo(pti.cdclasse) = 'S') then
        p_exclui_properus(pti);
      else
        for rservico in c_servico(pti.cd_procedimento) loop
          pti.cd_procedimento    := rservico.cd_procedimento;
          pti.grupo_proc_tp_insu := rservico.grupo_proc_tp_insu;
          pti.cdservico          := rservico.cdservico;
          pti.cdclasse           := rservico.cdclasse;

          p_exclui_properus(pti);
        end loop;
      end if;
    end;

    --inicio p_migra_quantitativo_permitido
  begin
    -- busca os códigos das tabelas de conversão usados no quantitativo
    select nrseq
      into vconversaoindper --gp.totpropr.in_periodo gp.properus.in_periodo
      from mig_tab_conversao r
     where r.notabela = 'MIGRACAO_INDICADOR_PERIODO';

    select nrseq
      into vconversaocontrresp --gp.properus.incontroleresponsavel
      from mig_tab_conversao r
     where r.notabela = 'MIGRACAO_ID_CONTROLE_QTDE';

    -- inicia migração do quantitativo cadastrado nos planos (contrato_padrao)
    vnivel := 'P';

    for pti in cproperus_plano loop
      vcdespgrupo       := '';
      vcdtotalizador    := 0;
      vindperiodo       := '';
      vcontrresponsavel := '';

      p_converte_tipo_limite(pti.tpcriterio);

      p_valida_procedimento(pti, 0, 0);

    end loop;

  end p_migra_quantitativo_permitido;

  procedure p_migra_quantitativo_utilizado is

    cursor cur_usuario_servico(pcdcontrato contrato_padrao.cdcontrato%type,
                               pinrperiodo  number) is
      select *
        from (select distinct u.cdareaacao,
                              u.nrregistro,
                              u.nrcontrato,
                              u.nrfamilia,
                              u.tpusuario,
                              u.nrsequencial_usuario,
                              us.cd_modalidade,
                              rem.cd_plano cd_plano,
                              rem.cd_tipo_plano cd_tipo_plano,
                              us.nr_ter_adesao,
                              us.cd_usuario,
                              us.dt_inclusao_plano,
                              s.cdservico,
                              nvl(rpr.cdvalor_externo, s.cdservico) cd_procedimento,
                              s.cdclasse,
                              rcs.cdvalor_externo grupo_proc_tp_insu,
                              esg.qtservico,
                              esg.dtdigitacao dtservico,
                              'A' tpmov
                from import_bnfciar tu,
                     usuario u,
                     gp.usuario us,
                     t_v_plano_padrao rem,
                     servico s,
                     (select cdvalor_externo, cdvalor_interno
                        from mig_tab_conversao tc, mig_tab_conversao_exp ce
                       where notabela = 'MIGRACAO_PROCEDIMENTOS'
                         and tc.nrseq = ce.nrseq_tab_conversao) rpr,
                     (select cdvalor_externo, cdvalor_interno
                        from mig_tab_conversao tc, mig_tab_conversao_exp ce
                       where notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO'
                         and tc.nrseq = ce.nrseq_tab_conversao) rcs,
                     emissao_guia eg,
                     emissao_servico_guia esg
               where u.cdcontrato = pcdcontrato /*between vcdcontrato_ini and vcdcontrato_fim*/
                 and u.nrcontrato = eg.nrcontrato
                 and u.nrfamilia = eg.nrfamilia
                 and u.tpusuario = eg.tpusuario
                 and eg.cdserie_guia = esg.cdserie_guia
                 and eg.nrguia = esg.nrguia
                 and esg.cdservico = s.cdservico
                 and tu.cd_carteira_antiga = us.cd_carteira_antiga
                 and tu.num_seqcial_bnfciar = u.nrsequencial_usuario
                 and u.cdcontrato = rem.cdcontrato
                 and u.tpplano = rem.tpplano
                 and s.cdservico = rpr.cdvalor_interno(+)
                 and s.cdclasse = rcs.cdvalor_interno
                 and esg.dtcancelamento is null
                 and esg.qtservico <> 0
                 and trunc(eg.dtdigitacao) = to_date(pinrperiodo, 'YYYYMM') /*between to_date(vnrperiodo_ini, 'YYYYMM') and last_day(to_date(vnrperiodo_fim, 'YYYYMM'))*/
              union all
              select distinct u.cdareaacao,
                              u.nrregistro,
                              u.nrcontrato,
                              u.nrfamilia,
                              u.tpusuario,
                              u.nrsequencial_usuario,
                              us.cd_modalidade,
                              rem.cd_plano cd_plano,
                              rem.cd_tipo_plano cd_tipo_plano,
                              us.nr_ter_adesao,
                              us.cd_usuario,
                              us.dt_inclusao_plano,
                              s.cdservico,
                              nvl(rpr.cdvalor_externo, s.cdservico) cd_procedimento,
                              s.cdclasse,
                              rcs.cdvalor_externo grupo_proc_tp_insu,
                              sg.qtservico,
                              sg.dtrealizacao dtservico,
                              'R' tpmov
                from import_bnfciar tu,
                     usuario u,
                     gp.usuario us,
                     t_v_plano_padrao rem,
                     servico s,
                     (select cdvalor_externo, cdvalor_interno
                        from mig_tab_conversao tc, mig_tab_conversao_exp ce
                       where notabela = 'MIGRACAO_PROCEDIMENTOS'
                         and tc.nrseq = ce.nrseq_tab_conversao) rpr,
                     (select cdvalor_externo, cdvalor_interno
                        from mig_tab_conversao tc, mig_tab_conversao_exp ce
                       where notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO'
                         and tc.nrseq = ce.nrseq_tab_conversao) rcs,
                     guia_de_servico gs,
                     servico_da_guia sg
               where u.cdcontrato = pcdcontrato /* between vcdcontrato_ini and
                                                                                                                                                                                                                                                                               vcdcontrato_fim*/
                 and u.nrcontrato = gs.nrcontrato
                 and u.nrfamilia = gs.nrfamilia
                 and u.tpusuario = gs.tpusuario
                 and gs.cdserie_guia = sg.cdserie_guia
                 and gs.nrguia = sg.nrguia
                 and sg.cdservico = s.cdservico
                 and tu.cd_carteira_antiga = us.cd_carteira_antiga
                 and u.nrsequencial_usuario = tu.num_seqcial_bnfciar
                 and u.cdcontrato = rem.cdcontrato
                 and u.tpplano = rem.tpplano
                 and s.cdservico = rpr.cdvalor_interno(+)
                 and s.cdclasse = rcs.cdvalor_interno
                 and sg.cdsituacao_serv <> '90'
                 and sg.qtservico <> 0
                 and trunc(sg.dtrealizacao) = to_date(pinrperiodo, 'YYYYMM') /* between
to_date(vnrperiodo_ini, 'YYYYMM') and
last_day(to_date(vnrperiodo_fim, 'YYYYMM'))*/
              )
       order by dtservico;

    rusuarioservico cur_usuario_servico%rowtype;

    cursor cur_properus(pcd_modalidade       number,
                        pcd_plano            number,
                        pcd_tipo_plano       number,
                        pnr_ter_adesao       number,
                        pcdespecialidadeproc number,
                        pcdgrupoproc         number,
                        pcdprocedimento      number,
                        pdgproc              number,
                        ptipoinsumo          number,
                        pcdinsumo            number) is
      select *
        from (select pr.nr_seq_properus,
                     pr.cd_esp_amb,
                     pr.cd_grupo_proc_amb,
                     pr.cd_procedimento,
                     pr.dv_procedimento,
                     pr.cd_tipo_insumo,
                     pr.cd_insumo,
                     pr.incontroleresponsavel,
                     pr.in_periodo,
                     pr.nr_meses,
                     pr.cd_modulo,
                     pr.cd_tot_procper,
                     pr.cd_tot_superior,
                     decode(pr.nr_ter_adesao,
                            0,
                            decode(pr.cd_tipo_insumo,
                                   0,
                                   decode(pr.cd_grupo_proc_amb,
                                          0,
                                          decode(pr.cd_procedimento,
                                                 0,
                                                 6,
                                                 decode(pr.cd_procedimento,
                                                        0,
                                                        5,
                                                        4)),
                                          decode(pr.cd_procedimento, 0, 5, 4)),
                                   2),
                            decode(pr.cd_tipo_insumo,
                                   0,
                                   decode(pr.cd_grupo_proc_amb,
                                          0,
                                          decode(pr.cd_procedimento,
                                                 0,
                                                 3,
                                                 decode(pr.cd_procedimento,
                                                        0,
                                                        2,
                                                        1)),
                                          decode(pr.cd_procedimento, 0, 2, 1)),
                                   1)) nivel
                from gp.properus pr
               where pr.cd_modalidade = pcd_modalidade
                 and (pr.cd_plano = pcd_plano or pr.cd_plano = '0')
                 and (pr.cd_tipo_plano = pcd_tipo_plano or
                     pr.cd_tipo_plano = '0')
                 and (pr.nr_ter_adesao = pnr_ter_adesao or
                     pr.nr_ter_adesao = '0')
                 and pr.cd_usuario = '0'
                 and pr.u##cd_cid = ' '
                 and pr.cd_esp_amb = pcdespecialidadeproc
                 and (pr.cd_grupo_proc_amb = pcdgrupoproc or
                     pr.cd_grupo_proc_amb = '0')
                 and (pr.cd_procedimento = pcdprocedimento or
                     pr.cd_procedimento = '0')
                 and (pr.dv_procedimento = pdgproc or
                     pr.dv_procedimento = '0')
                 and pr.cd_tipo_insumo = ptipoinsumo
                 and (pr.cd_insumo = pcdinsumo or pr.cd_insumo = '0')
                 and rownum = 1)
       order by nivel;

    cursor cur_contrato(pcdcontrato_ini contrato_padrao.cdcontrato%type,
                        pcdcontrato_fim contrato_padrao.cdcontrato%type) is
      select distinct m.cdcontrato cdcontrato
        from usuario m
       where m.cdcontrato between pcdcontrato_ini and pcdcontrato_fim
       group by m.cdcontrato;

    rproperus cur_properus%rowtype;

    vcdespecialidadeproc number;
    vcdgrupoproc         number;
    vcdprocedimento      number;
    vdgproc              number;
    vtipoinsumo          number;
    vcdinsumo            number;
    vtpproc_insu         varchar2(1);

    vexisteuso varchar2(1);

    vcdbeneficiario gp.usuario.cd_usuario%type;

    vdtperiodoinicio date;
    vdtperiodofim    date;
    vdtbase          date;

    vnrsequencial    number;
    vdtiniciousuario date;

    vdtautorizacaoatual     date;
    vdtprimautorizacaoatual date;
    vdtrealizacaoatual      date;
    vdtprimrealizacaoatual  date;
    vdtproposta             date;

    vqtautorizada number;
    vqtrealizada  number;

    vnivelproperus number;

    vcdtotalizador number;
    vtptotalizador varchar2(1);
    vqtgravacao    number;

    vnrmeses     number;
    vperiodotot  varchar2(1);
    vcontroletot number;

    --countofrecords number := 0;

    vcdservico varchar2(8);

    procedure p_valida_periodo_mes is
    begin
      -- verifica se final do período coencide com outro período cadastrado
      -- se sim o final será substituído por um dia antes do inicio do novo período
      begin
        select dt_inicio_periodo - 1
          into vdtperiodofim
          from gp.usopropr2
         where cd_unimed = rusuarioservico.cdareaacao
           and cd_modalidade = rusuarioservico.cd_modalidade
           and nr_ter_adesao = rusuarioservico.nr_ter_adesao
           and cd_usuario = vcdbeneficiario
           and cd_tot_procper = vcdtotalizador
           and cd_modulo = rproperus.cd_modulo
           and u##cd_cid = ' '
           and cd_esp_amb = rproperus.cd_esp_amb
           and cd_grupo_proc_amb = rproperus.cd_grupo_proc_amb
           and cd_procedimento = rproperus.cd_procedimento
           and dv_procedimento = rproperus.dv_procedimento
           and cd_tipo_insumo = rproperus.cd_tipo_insumo
           and cd_insumo = rproperus.cd_insumo
           and trunc(vdtperiodofim) between dt_inicio_periodo and
               dt_fim_periodo;
      exception
        when no_data_found then
          null;
      end;

      if vdtperiodofim < vdtperiodoinicio then
        vdtperiodofim := vdtperiodoinicio;
      end if;
    end p_valida_periodo_mes;

    procedure p_grava_usopropr2(rusuarioservico cur_usuario_servico%rowtype) is
    begin
      vcdespecialidadeproc := 0;
      vcdgrupoproc         := 0;
      vcdprocedimento      := 0;
      vdgproc              := 0;
      vtipoinsumo          := 0;
      vcdinsumo            := 0;
      vtpproc_insu         := 0;
      vcdservico           := '';

      if f_insumo(rusuarioservico.cdclasse) = 1 then
        -- insumo
        vcdespecialidadeproc := 0;
        vcdgrupoproc         := 0;
        vcdprocedimento      := 0;
        vdgproc              := 0;
        vtipoinsumo          := to_number(rusuarioservico.grupo_proc_tp_insu);
        vcdinsumo            := to_number(nvl(rusuarioservico.cd_procedimento,
                                              '0'));
        vtpproc_insu         := '0';
      else
        if length(rusuarioservico.cd_procedimento) in (3, 6) then
          vcdservico := rusuarioservico.cd_procedimento || '0';
        elsif length(rusuarioservico.cd_procedimento) = 5 then
          vcdservico := rusuarioservico.cd_procedimento || '00';
        else
          vcdservico := rusuarioservico.cd_procedimento;
        end if;

        -- procedimento
        vcdespecialidadeproc := to_number(substr(vcdservico, 1, 2));
        vcdgrupoproc         := to_number(nvl(substr(vcdservico, 3, 2), '0'));
        vcdprocedimento      := to_number(nvl(substr(vcdservico, 5, 3), '0'));
        vdgproc              := to_number(nvl(substr(vcdservico, 8, 1), '0'));
        vtipoinsumo          := 0;
        vcdinsumo            := 0;
        vtpproc_insu         := '1';
      end if;

      vnivelproperus := 0;

      -- verifica se existe tabela de parametrização
      -- se encontrar pega o sequencial do properus, e o grupo, procedimento e insumo, pois são valores que podem variar de acordo com a abrangencia na tabela properus
      for rproperus in cur_properus(rusuarioservico.cd_modalidade,
                                    rusuarioservico.cd_plano,
                                    rusuarioservico.cd_tipo_plano,
                                    rusuarioservico.nr_ter_adesao,
                                    vcdespecialidadeproc,
                                    vcdgrupoproc,
                                    vcdprocedimento,
                                    vdgproc,
                                    vtipoinsumo,
                                    vcdinsumo) loop

        /* verifica se registro do properus está no nivel de abrangencia mais especifico
           os niveis são definidos da seguinte maneira (quanto menor, mais especifico)

           procedimento:
           1 - quantitativo possui termo, especialidade, grupo e procedimento preenchidos, plano e tipo de plano são zerados
           2 - quantitativo possui termo, especialidade e grupo preenchidos, plano, tipo de plano e procedimento são zerados
           3 - quantitativo possui termo e especialidade preenchidos, plano, tipo de plano, grupo e procedimento são zerados
           4 - quantitativo possui plano, tipo de plano, especialidade, grupo e procedimento preenchidos, termo está zerado
           5 - quantitativo possui plano, tipo de plano, especialidade e grupo preenchidos, termo e procedimento são zerados
           6 - quantitativo possui plano, tipo de plano e especialidade preenchidos, termo, procedimento e grupo são zerados

           insumo:
           1 - quantitativo possui termo, tipo e insumo preenchidos, plano e tipo de plano são zerados
           2 - quantitativo possui plano, tipo de plano, tipo e insumo preenchidos, termo está zerado
        */
        if vnivelproperus = 0 then
          vnivelproperus := rproperus.nivel;
        end if;

        if rproperus.nivel = vnivelproperus then
          vexisteuso  := 'N';
          vdtproposta := '';

          -- verifica se existe uso pelo titular ou pelo contrato
          -- se existir será atualizada a linha do quantitativo, caso contrário será inserida
          if rproperus.incontroleresponsavel = '1' then
            vcdbeneficiario  := rusuarioservico.cd_usuario;
            vdtiniciousuario := rusuarioservico.dt_inclusao_plano;
          else
            if rproperus.incontroleresponsavel in ('2', '3') then
              if rusuarioservico.tpusuario = '00' then
                vcdbeneficiario  := rusuarioservico.cd_usuario;
                vdtiniciousuario := rusuarioservico.dt_inclusao_plano;
              else
                begin
                  select us.cd_usuario, u.dtinicio
                    into vcdbeneficiario, vdtiniciousuario
                    from usuario u, gp.usuario us
                   where u.nrcontrato = rusuarioservico.nrcontrato
                     and u.nrfamilia = rusuarioservico.nrfamilia
                     and u.tpusuario = '00'
                     and us.cd_carteira_antiga =
                         u.nrcontrato || lpad(u.nrfamilia, 6, '0') || '00' ||
                         u.nrdigitoct;
                exception
                  when no_data_found then
                    begin
                      select cd_usuario, dtinicio
                        into vcdbeneficiario, vdtiniciousuario
                        from (select us.cd_usuario, u.dtinicio
                                from usuario u, gp.usuario us
                               where u.nrcontrato =
                                     rusuarioservico.nrcontrato
                                 and u.nrfamilia = rusuarioservico.nrfamilia
                                 and us.cd_carteira_antiga =
                                     u.nrcontrato ||
                                     lpad(u.nrfamilia, 6, '0') ||
                                     u.tpusuario || u.nrdigitoct
                               order by tpusuario)
                       where rownum = 1;
                    exception
                      when no_data_found then
                        vcdbeneficiario  := rusuarioservico.cd_usuario;
                        vdtiniciousuario := rusuarioservico.dt_inclusao_plano;
                    end;
                end;
              end if;
            elsif rproperus.incontroleresponsavel = '4' then
              vcdbeneficiario := '0';
              select cdp.dtiniciocontrato, cdp.dtiniciocontrato
                into vdtproposta, vdtiniciousuario
                from contrato_da_pessoa cdp
               where nrregistro = rusuarioservico.nrregistro
                 and nrcontrato = rusuarioservico.nrcontrato;
            end if;
          end if;

          if rproperus.cd_tot_procper <> 0 then
            vcdtotalizador := rproperus.cd_tot_procper;
            vtptotalizador := 'P';
            vqtgravacao    := 1;
          elsif rproperus.cd_tot_superior <> 0 then
            vcdtotalizador := rproperus.cd_tot_superior;
            vtptotalizador := 'S';
            vqtgravacao    := 2;
          else
            vcdtotalizador := 0;
            vtptotalizador := 'N';
            vqtgravacao    := 1;
          end if;

          -- inicia processo de gravação
          -- se totalizador for superior, serão realizadas duas gravações
          for vcont in 1 .. vqtgravacao loop
            if (vtptotalizador = 'P') or
               ((vtptotalizador = 'S') and (vcont = 2)) then

              begin
                select tg.nr_meses, tg.in_periodo, tg.incontroleresponsavel
                  into vnrmeses, vperiodotot, vcontroletot
                  from temp_migracao_grupo_limite tg
                 where tg.cdtotalizador = vcdtotalizador;
              exception
                when no_data_found then
                  vnrmeses     := 0;
                  vperiodotot  := ' ';
                  vcontroletot := 0;
              end;

              if (vnrmeses <> rproperus.nr_meses) or
                 (vperiodotot <> rproperus.in_periodo) or
                 (vcontroletot <> rproperus.incontroleresponsavel) then
                rproperus.nr_meses              := vnrmeses;
                rproperus.in_periodo            := vperiodotot;
                rproperus.incontroleresponsavel := vcontroletot;
              end if;

              rproperus.cd_esp_amb        := 0;
              rproperus.cd_grupo_proc_amb := 0;
              rproperus.cd_procedimento   := 0;
              rproperus.dv_procedimento   := 0;
              rproperus.cd_tipo_insumo    := 0;
              rproperus.cd_insumo         := 0;
            end if;

            begin
              select 'S',
                     progress_recid,
                     dt_autorizacao,
                     dt_prim_autorizacao,
                     dt_realizada,
                     dt_prim_realizacao,
                     dt_inicio_periodo,
                     dt_fim_periodo
                into vexisteuso,
                     vnrsequencial,
                     vdtautorizacaoatual,
                     vdtprimautorizacaoatual,
                     vdtrealizacaoatual,
                     vdtprimrealizacaoatual,
                     vdtperiodoinicio,
                     vdtperiodofim
                from gp.usopropr2
               where cd_unimed = rusuarioservico.cdareaacao
                 and cd_modalidade = rusuarioservico.cd_modalidade
                 and nr_ter_adesao = rusuarioservico.nr_ter_adesao
                 and cd_usuario = vcdbeneficiario
                 and cd_tot_procper = vcdtotalizador
                 and cd_modulo = rproperus.cd_modulo
                 and u##cd_cid = ' '
                 and cd_esp_amb = rproperus.cd_esp_amb
                 and cd_grupo_proc_amb = rproperus.cd_grupo_proc_amb
                 and cd_procedimento = rproperus.cd_procedimento
                 and dv_procedimento = rproperus.dv_procedimento
                 and cd_tipo_insumo = rproperus.cd_tipo_insumo
                 and cd_insumo = rproperus.cd_insumo
                 and trunc(rusuarioservico.dtservico) between
                     dt_inicio_periodo and dt_fim_periodo;
            exception
              when no_data_found then
                vexisteuso              := 'N';
                vnrsequencial           := '';
                vdtautorizacaoatual     := '';
                vdtprimautorizacaoatual := '';
                vdtrealizacaoatual      := '';
                vdtprimrealizacaoatual  := '';
                vdtperiodoinicio        := '';
                vdtperiodofim           := '';

              when others then
                raise_application_error(-20102,
                                        'Erro na busca do quantitativo. ' ||
                                        sqlerrm);
            end;

            if vexisteuso = 'S' then
              vqtautorizada := '0';
              vqtrealizada  := rusuarioservico.qtservico;

              if rusuarioservico.tpmov = 'A' then
                if rusuarioservico.dtservico > vdtautorizacaoatual then
                  vdtautorizacaoatual := rusuarioservico.dtservico;
                end if;

                if rusuarioservico.dtservico < vdtprimautorizacaoatual then
                  vdtprimautorizacaoatual := rusuarioservico.dtservico;
                end if;

                vqtautorizada := rusuarioservico.qtservico;
                vqtrealizada  := '0';
              elsif rusuarioservico.tpmov = 'R' then
                if rusuarioservico.dtservico > vdtrealizacaoatual then
                  vdtrealizacaoatual := rusuarioservico.dtservico;
                end if;

                if rusuarioservico.dtservico < vdtprimrealizacaoatual then
                  vdtprimrealizacaoatual := rusuarioservico.dtservico;
                end if;

                vqtautorizada := '0';
                vqtrealizada  := rusuarioservico.qtservico;
              end if;

              begin
                update gp.usopropr2
                   set qt_autorizada       = qt_autorizada + vqtautorizada,
                       dt_autorizacao      = vdtautorizacaoatual,
                       dt_prim_autorizacao = vdtprimautorizacaoatual,
                       qt_realizadas       = qt_realizadas + vqtrealizada,
                       dt_realizada        = vdtrealizacaoatual,
                       dt_prim_realizacao  = vdtprimrealizacaoatual,
                       dt_atualizacao      = sysdate,
                       hr_atualizacao      = to_char(sysdate, 'HH24:MI:SS')
                 where progress_recid = vnrsequencial;
              exception
                when others then
                  raise_application_error(-20102,
                                          'Erro na atualização do quantitativo. ' ||
                                          sqlerrm);
              end;
            elsif vexisteuso = 'N' then
              vdtperiodoinicio := '';
              vdtperiodofim    := '';
              vdtbase          := rusuarioservico.dtservico;

              -- definindo periodo através do indicador de periodo
              if rproperus.in_periodo = 'I' then
                -- civil - do primeiro ao ultimo dia do ano
                vdtperiodoinicio := to_date('0101' ||
                                            to_char(vdtbase, 'YYYY'),
                                            'DDMMYYYY');
                vdtperiodofim    := to_date('3112' ||
                                            to_char(vdtbase, 'YYYY'),
                                            'DDMMYYYY');
              elsif rproperus.in_periodo = 'C' then
                -- contratual/beneficiario - um ano conforme a data de aniversario da inclusao do plano do beneficiario
                begin
                  vdtperiodoinicio := to_date(to_char(vdtiniciousuario,
                                                      'DDMM') ||
                                              to_char(vdtbase, 'YYYY'),
                                              'DDMMYYYY');
                exception
                  when others then
                    vdtperiodoinicio := to_date(to_char(vdtiniciousuario - 1,
                                                        'DDMM') ||
                                                to_char(vdtbase, 'YYYY'),
                                                'DDMMYYYY');
                end;

                if vdtbase < vdtperiodoinicio then
                  begin
                    vdtperiodoinicio := vdtperiodoinicio - 365;
                  exception
                    when others then
                      vdtperiodoinicio := vdtperiodoinicio - 366;
                  end;
                end if;
                vdtperiodofim := vdtperiodoinicio + 365;
              elsif rproperus.in_periodo = 'M' then
                -- meses - será considerado o numero de meses da properus a partir da data de realização
                vdtperiodoinicio := vdtbase;
                if rproperus.nr_meses = 0 then
                  vdtperiodofim := vdtperiodoinicio;
                else
                  vdtperiodofim := add_months(vdtbase, rproperus.nr_meses) - 1;
                end if;

                p_valida_periodo_mes;
              elsif rproperus.in_periodo = 'P' then
                -- contratual/contrato - um ano conforme data de aniversario do contrato
                begin
                  if vdtproposta is null then
                    select cdp.dtiniciocontrato
                      into vdtproposta
                      from contrato_da_pessoa cdp
                     where nrregistro = rusuarioservico.nrregistro
                       and nrcontrato = rusuarioservico.nrcontrato;
                  end if;

                  vdtperiodoinicio := to_date(to_char(vdtproposta, 'DDMM') ||
                                              to_char(vdtbase, 'YYYY'),
                                              'DDMMYYYY');
                exception
                  when others then
                    vdtperiodoinicio := to_date(to_char(vdtproposta - 1,
                                                        'DDMM') ||
                                                to_char(vdtbase, 'YYYY'),
                                                'DDMMYYYY');
                end;

                if vdtbase < vdtperiodoinicio then
                  begin
                    vdtperiodoinicio := vdtperiodoinicio - 365;
                  exception
                    when others then
                      vdtperiodoinicio := vdtperiodoinicio - 366;
                  end;
                end if;
                vdtperiodofim := vdtperiodoinicio + 365;
              elsif rproperus.in_periodo = 'R' then
                -- meses civil - sera considerado o numero de meses da properus a partir do primeiro
                -- dia do mes da data de realizacao
                vdtperiodoinicio := to_date('01' ||
                                            to_char(vdtbase, 'MMYYYY'),
                                            'DDMMYYYY');

                if rproperus.nr_meses = 0 then
                  vdtperiodofim := add_months(vdtperiodoinicio, 1) - 1;
                else
                  vdtperiodofim := add_months(vdtperiodoinicio,
                                              rproperus.nr_meses) - 1;
                end if;

                p_valida_periodo_mes;
              end if;

              begin
                select gp.usopropr2_seq.nextval
                  into vnrsequencial
                  from dual;

                insert into gp.usopropr2
                  (cd_unimed,
                   cd_modalidade,
                   nr_ter_adesao,
                   cd_usuario,
                   cd_tot_procper,
                   cd_esp_amb,
                   cd_grupo_proc_amb,
                   cd_procedimento,
                   dv_procedimento,
                   qt_autorizada,
                   dt_autorizacao,
                   qt_realizadas,
                   dt_realizada,
                   lg_controle,
                   cd_tipo_insumo,
                   cd_insumo,
                   dt_prim_autorizacao,
                   dt_prim_realizacao,
                   cd_modulo,
                   dt_inicio_periodo,
                   dt_fim_periodo,
                   nr_seq_properus,
                   dec_1,
                   dt_atualizacao,
                   hr_atualizacao,
                   cd_userid,
                   qtiacumulafaixaparticipat,
                   qtiacumulafaixaparticiprc,
                   u##cd_cid,
                   cd_cid,
                   progress_recid)
                values
                  (rusuarioservico.cdareaacao,
                   rusuarioservico.cd_modalidade,
                   rusuarioservico.nr_ter_adesao,
                   vcdbeneficiario,
                   vcdtotalizador,
                   rproperus.cd_esp_amb,
                   rproperus.cd_grupo_proc_amb,
                   rproperus.cd_procedimento,
                   rproperus.dv_procedimento,
                   decode(rusuarioservico.tpmov,
                          'A',
                          rusuarioservico.qtservico,
                          'R',
                          '0'),
                   decode(rusuarioservico.tpmov,
                          'A',
                          rusuarioservico.dtservico,
                          'R',
                          null),
                   decode(rusuarioservico.tpmov,
                          'R',
                          rusuarioservico.qtservico,
                          'A',
                          '0'),
                   decode(rusuarioservico.tpmov,
                          'R',
                          rusuarioservico.dtservico,
                          'A',
                          null),
                   vtpproc_insu,
                   rproperus.cd_tipo_insumo,
                   rproperus.cd_insumo,
                   decode(rusuarioservico.tpmov,
                          'A',
                          rusuarioservico.dtservico,
                          'R',
                          null),
                   decode(rusuarioservico.tpmov,
                          'R',
                          rusuarioservico.dtservico,
                          'A',
                          null),
                   rproperus.cd_modulo,
                   trunc(vdtperiodoinicio),
                   trunc(vdtperiodofim),
                   rproperus.nr_seq_properus,
                   vnrsequencial,
                   sysdate,
                   to_char(sysdate, 'HH24:MI:SS'),
                   cuser_migracao,
                   null,
                   null,
                   ' ',
                   ' ',
                   vnrsequencial);

                vqtregistro1 := vqtregistro1 + 1;
              exception
                when others then
                  raise_application_error(-20102,
                                          'Erro na inclusão do quantitativo. ' ||
                                          sqlerrm);
              end;
            end if;

            p_commit;
          end loop;
        end if;
      end loop;
    end;

  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;
    dbms_output.put_line('(to_date(vnrperiodo_ini, YYYY/MM): ' || (to_date(vnrperiodo_ini, 'YYYY/MM')));
    dbms_output.put_line('(to_date(vnrperiodo_fim, YYYY/MM): ' || (to_date(vnrperiodo_fim, 'YYYY/MM')));
    dbms_output.put_line('to_date(01/01/1990, DD/MM/YYYY): ' || to_date('01/01/1990', 'DD/MM/YYYY'));
    dbms_output.put_line('to_date(31/12/9999, DD/MM/YYYY): ' || to_date('31/12/9999', 'DD/MM/YYYY'));

    if (to_date(vnrperiodo_ini, 'YYYY/MM') not between
       to_date('01/01/1990', 'DD/MM/YYYY') and to_date('31/12/9999', 'DD/MM/YYYY')) or
       (to_date(vnrperiodo_fim, 'YYYY/MM') not between
       to_date('01/01/1990', 'DD/MM/YYYY') and to_date('31/12/9999', 'DD/MM/YYYY')) then
      raise_application_error(-20102,
                              'Período inválido : Período deve estar entre 01/01/1990 e 31/12/9999.');
    end if;
    vnrperiodo := vnrperiodo_ini;

    dbms_output.put_line('vnrperiodo: ' || vnrperiodo);

    dbms_output.put_line('vcdcontrato_ini: ' || vcdcontrato_ini);
    dbms_output.put_line('vcdcontrato_fim: ' || vcdcontrato_fim);

    for rcontrato in cur_contrato(vcdcontrato_ini, vcdcontrato_fim) loop
      --hugo
      while vnrperiodo <= vnrperiodo_fim loop
        for rusuarioservico in cur_usuario_servico(rcontrato.cdcontrato,
                                                   vnrperiodo) loop
          p_grava_usopropr2(rusuarioservico);
        end loop;
        vnrperiodo := vnrperiodo + 1;
        --commit;
      end loop;
    end loop;

    -- arredonda as quantidades decimais
    for ruso in (select up.progress_recid,
                        decode(up.qt_autorizada,
                               trunc(up.qt_autorizada),
                               up.qt_autorizada,
                               trunc(up.qt_autorizada) + 1) qt_autorizada,
                        decode(up.qt_realizadas,
                               trunc(up.qt_realizadas),
                               up.qt_realizadas,
                               trunc(up.qt_realizadas) + 1) qt_realizadas
                   from gp.usopropr2 up
                  where (up.qt_autorizada - trunc(up.qt_autorizada)) <> 0
                     or (up.qt_realizadas - trunc(up.qt_realizadas)) <> 0) loop
      update gp.usopropr2
         set qt_autorizada = ruso.qt_autorizada,
             qt_realizadas = ruso.qt_realizadas
       where progress_recid = ruso.progress_recid;
    end loop;

  end p_migra_quantitativo_utilizado;

  /*
  * procedure : p_migra_fxparpro
  * objetivo  : participação escalonada
  */
  procedure p_migra_fxparpro is

    --cursor
    cursor cfxparpro(pcd_plano           t_v_plano_padrao.cd_plano%type,
                     pcd_tipo_plano      t_v_plano_padrao.cd_tipo_plano%type,
                     pnrmodalidade       t_v_plano_padrao.cd_modalidade%type,
                     pcd_fator_moderador varchar2,
                     pnrproposta         gp.propost.nr_proposta%type) is
      select rem.cd_modalidade cd_modalidade,
             pnrproposta nr_proposta,
             rmo.cdvalor_externo cd_modulo,
             nvl(cdp.dtfimcontrato, '01012100') dt_limite,
             rcs.cdvalor_externo tp_insumo, --se insumo
             substr(nvl(rpr.cdvalor_externo, s.cdservico), 3, 2) gr_proced, /*procedimento ) cd_gr_proc_tp_insumo*/
             nvl(rpr.cdvalor_externo, s.cdservico) cd_insumo, --insumo
             substr(nvl(rpr.cdvalor_externo, s.cdservico), 5, 3) cd_proced, /*procedimento ) cd_proced_insumo*/
             nvl(lfm.qtmin_servico, 0) qt_faixa_inicial,
             lfm.qtmax_servico qt_faixa_final,
             decode(cfm.cdtipo_valor, 'P', 1, 0) lg_percentual_cob_ele,
             decode(cfm.cdtipo_valor, 'P', lfm.vlfator_moderador, 0) pc_part_cob_ele,
             prealgps cd_moeda_part_cob_ele,
             decode(cfm.cdtipo_valor, 'V', lfm.vlfator_moderador, 0) qt_part_cob_ele,
             decode(cfm.cdtipo_valor, 'P', 1, 0) lg_percentual_cob_urg,
             decode(cfm.cdtipo_valor, 'P', lfm.vlfator_moderador, 0) pc_part_cob_urg,
             prealgps cd_moeda_part_cob_urg,
             decode(cfm.cdtipo_valor, 'V', lfm.vlfator_moderador, 0) qt_part_cob_urg,
             rownum progress_recid,
             s.cdclasse
        from t_v_plano_padrao rem,
             categoria_de_servico_contr_pes cs,
             servico_da_categoria_contr_pes sc,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO'
                 and tc.nrseq = ce.nrseq_tab_conversao) rcs,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_PROCEDIMENTOS'
                 and tc.nrseq = ce.nrseq_tab_conversao) rpr,
             (select cdvalor_externo, cdvalor_interno
                from mig_tab_conversao tc, mig_tab_conversao_exp ce
               where notabela = 'MIGRACAO_MODULO'
                 and tc.nrseq = ce.nrseq_tab_conversao
                 and ce.cdvalor_interno <> pcategsus) rmo,
             servico s,
             criterio_fator_moderador cfm,
             limite_fator_moderador lfm,
             contrato_da_pessoa cdp,
             agrupamento_servico ag,
             agrupamento_servico_detalhe agd
       where rem.cdcontrato = cs.cdcontrato --cdp.cdcontrato_padrao
         and cdp.nrcontrato = cs.nrcontrato
         and cdp.nrregistro = cs.nrregistro
         and cs.cdcategserv = rmo.cdvalor_interno
         and cs.nrregistro = sc.nrregistro
         and cs.nrcontrato = sc.nrcontrato
         and cs.cdcategserv = sc.cdcategserv
         and cdp.cdfator_moderador = pcd_fator_moderador
         and cdp.cdfator_moderador = cfm.cdfator_moderador
         and (rem.tpplano = cfm.tpplano or cfm.tpplano = '*')
         and cfm.cdfator_moderador = lfm.cdfator_moderador
         and cfm.nrfator_moderador = lfm.nrfator_moderador
         and sc.cdagrupamento = ag.cdagrupamento(+)
         and ag.cdagrupamento = agd.cdagrupamento(+)
         and ag.aosituacao(+) = 'A'
         and agd.aoexceto(+) = 'N'
         and nvl(sc.cdservico, agd.cdservico) = lfm.cdservico
         and lfm.cdservico = s.cdservico
         and s.cdclasse = rcs.cdvalor_interno
         and s.cdservico = rpr.cdvalor_interno(+)
         and rem.cd_plano = pcd_plano
         and rem.cd_tipo_plano = pcd_tipo_plano
         and rem.cd_modalidade = pnrmodalidade
         and rem.cd_modalidade = pnrmodalidade
         and sc.aoexclusao = 'N'
         and (length(nvl(rpr.cdvalor_externo, s.cdservico)) = 8 or
             f_insumo(s.cdclasse) = 1);
  begin
    -- lista todos as propostas encontrados
    for prop in (select p.cd_plano,
                        p.cd_tipo_plano,
                        p.cd_modalidade,
                        cdp.cdfator_moderador,
                        p.nr_proposta
                   from import_propost     t,
                        gp.propost         p,
                        contrato_da_pessoa cdp
                  where p.nr_contrato_antigo = t.nr_contrato_antigo --t.u##nr_contrato_antigo
                    and cdp.nrregistro = t.num_livre_2
                    and cdp.nrcontrato = t.num_livre_3
                    and cdp.cdfator_moderador <> 'SEMFAT'
                  group by p.cd_plano,
                           p.cd_tipo_plano,
                           p.cd_modalidade,
                           cdp.cdfator_moderador,
                           p.nr_proposta) loop
      -- a partir deles, seleciona os serviços
      for pti in cfxparpro(prop.cd_plano,
                           prop.cd_tipo_plano,
                           prop.cd_modalidade,
                           prop.cdfator_moderador,
                           prop.nr_proposta) loop

        begin
          select 'S'
            into vaomigrado
            from gp.fxparpro f
           where cd_modalidade = pti.cd_modalidade
             and nr_proposta = pti.nr_proposta
             and cd_modulo = pti.cd_modulo
             and u##in_tipo_movto =
                 decode(f_insumo(pti.cdclasse), '1', 'I', 'P')
             and cd_gr_proc_tp_insumo =
                 decode(f_insumo(pti.cdclasse),
                        '1',
                        pti.tp_insumo,
                        pti.gr_proced)
             and cd_proced_insumo =
                 decode(f_insumo(pti.cdclasse),
                        '1',
                        pti.cd_insumo,
                        pti.cd_proced)
             and dt_limite = pti.dt_limite
             and qt_faixa_inicial = pti.qt_faixa_inicial
             and qt_faixa_final = pti.qt_faixa_final;
        exception
          when no_data_found then
            vaomigrado := 'N';
        end;

        if vaomigrado = 'N' then

          insert into gp.fxparpro
            (cd_modalidade,
             nr_proposta,
             cd_modulo,
             dt_limite,
             in_tipo_movto,
             u##in_tipo_movto,
             cd_gr_proc_tp_insumo,
             cd_proced_insumo,
             qt_faixa_inicial,
             qt_faixa_final,
             lg_percentual_cob_ele,
             pc_part_cob_ele,
             cd_moeda_part_cob_ele,
             qt_part_cob_ele,
             lg_percentual_cob_urg,
             pc_part_cob_urg,
             qt_part_cob_urg,
             cd_moeda_part_cob_urg,
             dt_atualizacao,
             cd_userid,
             progress_recid)
          values
            (pti.cd_modalidade,
             pti.nr_proposta,
             pti.cd_modulo,
             pti.dt_limite,
             decode(f_insumo(pti.cdclasse), '1', 'I', 'P'),
             decode(f_insumo(pti.cdclasse), '1', 'I', 'P'),
             decode(f_insumo(pti.cdclasse),
                    '1',
                    pti.tp_insumo,
                    pti.gr_proced),
             decode(f_insumo(pti.cdclasse),
                    '1',
                    pti.cd_insumo,
                    pti.cd_proced),
             pti.qt_faixa_inicial,
             pti.qt_faixa_final,
             pti.lg_percentual_cob_ele,
             pti.pc_part_cob_ele,
             pti.cd_moeda_part_cob_ele,
             pti.qt_part_cob_ele,
             pti.lg_percentual_cob_urg,
             pti.pc_part_cob_urg,
             pti.qt_part_cob_urg,
             pti.cd_moeda_part_cob_urg,
             sysdate,
             cuser_migracao,
             gp.fxparpro_seq.nextval);

          p_commit;

        end if;

      end loop;
    end loop;

  end p_migra_fxparpro;

  /* ALEX BOEIRA - 30/01/2018 - ESSA PROCEDURE FICOU OBSOLETA QUANDO FOI CRIADO O CONCEITO DE REDE DE ATENDIMENTO
                                EM SEPARADO. UTILIZAR A NOVA VERSÃO, CONFORME ROTEIRO DE MIGRAÇÃO.
  * procedure : p_migra_abrangencia
  * objetivo  : abrangência
  */
  /*procedure p_migra_abrangencia is
    vaomigrado varchar2(1);

    cursor c_rede_atend is
      select a.norede,
             m.tpplano,
             m.cd_modalidade,
             m.cd_plano,
             m.cd_tipo_plano,
             c.*
        from rede_atendimento          a,
             rede_atendimento_contrato c,
             \*migracao_plano*\
             t_v_plano_padrao m
       where a.nrrede = c.nrrede
         and c.cdcontrato = m.cdcontrato
       order by a.nrrede;

  begin
    for credat in (select nrrede,
                          decode(norede,
                                 null,
                                 'REDE ' || nrrede || ' SEM DESCRICAO',
                                 norede) norede
                     from rede_atendimento) loop
      vaomigrado := 'N';
      \*
      * abrangência plano
      *\
      -- nao valida mais se está migrado porque o loop agora é da própria tabela rede de atendimento
      \*
      begin
        select 'S'
          into vaomigrado
          from gp.abraplan
         where cd_abrangencia_plano = credat.nrrede
           and ds_abrangencia_plano = credat.norede;
      exception
        when no_data_found then
          vaomigrado := 'N';
      end;*\
      if vaomigrado = 'N' then
        insert into gp.abraplan
          (cd_abrangencia_plano,
           u##ds_abrangencia_plano, --  varchar2(80)
           ds_abrangencia_plano, --  varchar2(80)
           in_tipo_regra, --  varchar2(12)
           cd_userid, --  varchar2(24)
           dt_atualizacao,
           char_1,
           char_2,
           char_3,
           char_4,
           char_5,
           int_1,
           int_2,
           int_3,
           int_4,
           int_5,
           dec_1,
           dec_2,
           dec_3,
           dec_4,
           dec_5,
           \*date_1  ,
           date_2  ,
           date_3  ,
           date_4  ,
           date_5  ,  *\
           u_char_1,
           u_char_2,
           u_char_3,
           \*u_date_1  ,
           u_date_2  ,
           u_date_3  ,  *\
           u_dec_1,
           u_dec_2,
           u_dec_3,
           u_int_1,
           u_int_2,
           u_int_3,
           progress_recid)
        values
          (credat.nrrede, --cd_abrangencia_plano,
           upper(credat.norede), --u##ds_abrangencia_plano,
           credat.norede, --ds_abrangencia_plano,
           ' ', --in_tipo_regra, -
           'MIGRACAO', --cd_userid,
           sysdate, -- dt_atualizacao
           ' ', --char_1,
           ' ', --char_2,
           ' ', --char_3,
           ' ', --char_4,
           ' ', --char_5,
           0, --int_1,
           0, --int_2,
           0, --int_3,
           0, --int_4,
           0, --int_5,
           0, --dec_1,
           0, --dec_2,
           0, --dec_3,
           0, --dec_4,
           0, --dec_5,
           \*date_1  ,
           date_2  ,
           date_3  ,
           date_4  ,
           date_5  ,*\
           ' ', --u_char_1,
           ' ', --u_char_2,
           ' ', --u_char_3,
           \*u_date_1  ,
           u_date_2  ,
           u_date_3  , *\
           0, --u_dec_1,
           0, --u_dec_2,
           0, --u_dec_3,
           0, --u_int_1,
           0, --u_int_2,
           0, --u_int_3,
           gp.abraplan_seq.nextval);
      end if;
      \*
      * abrangência x tipo plano
      *\
      for ctpplano in (select distinct t.cd_modalidade,
                                       t.cd_plano,
                                       t.cd_tipo_plano,
                                       r.nrrede,
                                       r.dtinicio_vigencia,
                                       r.dtfim_vigencia
                         from rede_atendimento_plano r,
                              temp_depara_agrupado   t
                        where t.cdcontrato = r.cdcontrato
                          and r.dtfim_vigencia is null
                          and r.nrrede = credat.nrrede
                        order by 1, 2, 3, 4, 5) loop
        begin
          select 'S'
            into vaomigrado
            from gp.tpplabra
           where cd_modalidade = ctpplano.cd_modalidade
             and cd_plano = ctpplano.cd_plano
             and cd_tipo_plano = ctpplano.cd_tipo_plano
             and cd_abrangencia_plano = ctpplano.nrrede;
        exception
          when no_data_found then
            vaomigrado := 'N';
        end;
        if vaomigrado = 'N' then
          insert into gp.tpplabra
            (cd_modalidade,
             cd_plano, -- number
             cd_tipo_plano,
             cd_abrangencia_plano, -- number
             dt_inicio,
             dt_fim, -- date
             cd_userid, --  varchar2(24)
             dt_atualizacao, -- date
             char_1, -- varchar2(500)
             char_2, -- varchar2(500)
             char_3, -- varchar2(500)
             char_4, -- varchar2(500)
             char_5, -- varchar2(500)
             \*date_1  ,
             date_2  ,
             date_3  ,
             date_4  ,
             date_5  , *\
             dec_1,
             dec_2,
             dec_3,
             dec_4,
             dec_5,
             int_1,
             int_2,
             int_3,
             int_4,
             int_5,
             u_char_1,
             u_char_2,
             u_char_3,
             \*u_date_1  ,
             u_date_2  ,
             u_date_3  , *\
             u_dec_1,
             u_dec_2,
             u_dec_3,
             u_int_1,
             u_int_2,
             u_int_3,
             progress_recid)
          values
            (ctpplano.cd_modalidade,
             ctpplano.cd_plano,
             ctpplano.cd_tipo_plano,
             ctpplano.nrrede, --cd_abrangencia_plano,
             ctpplano.dtinicio_vigencia, --dt_inicio,
             ctpplano.dtfim_vigencia, --dt_fim,
             'MIGRACAO', --cd_userid,
             sysdate, --dt_atualizacao,
             ' ', --char_1,
             ' ', --char_2,
             ' ', --char_3,
             ' ', --char_4,
             ' ', --char_5,
             \*date_1  ,
             date_2  ,
             date_3  ,
             date_4  ,
             date_5  , *\
             0, --dec_1,
             0, --dec_2,
             0, --dec_3,
             0, --dec_4,
             0, --dec_5,
             0, --int_1,
             0, --int_2,
             0, --int_3,
             0, --int_4,
             0, --int_5,
             ' ', --u_char_1,
             ' ', --u_char_2,
             ' ', --u_char_3,
             \*u_date_1  ,
             u_date_2  ,
             u_date_3  , *\
             0, --u_dec_1,
             0, --u_dec_2,
             0, --u_dec_3,
             0, --u_int_1,
             0, --u_int_2,
             0, --u_int_3,
             gp.tpplabra_seq.nextval);
        end if;
      end loop;

      \*
      * abrangência x layout
      *\
      for clay in (select r.cdrede_ptu, r.cdrede_referencia
                     from tipo_plano_ptu      t,
                          tipo_de_plano       tp,
                          tipo_plano_contrato pc,
                          rede_referencia     r
                    where r.cdrede_referencia = pc.cdrede_referencia
                      and pc.tpplano = tp.tpplano
                      and pc.tpplano_ptu = tp.tpplano_ptu
                      and t.tpplano_ptu = tp.tpplano_ptu
                    group by r.cdrede_ptu, r.cdrede_referencia) loop
        begin
          select 'S'
            into vaomigrado
            from gp.assabran
           where cd_abrangencia_plano = credat.nrrede
             and cd_abrangencia_layout = clay.cdrede_referencia
             and in_tipo_assoc = clay.cdrede_ptu;

        exception
          when no_data_found then
            vaomigrado := 'N';
        end;
        if vaomigrado = 'N' then
          insert into gp.assabran
            (cd_abrangencia_plano, -- number
             cd_abrangencia_layout,
             in_tipo_assoc, --  varchar2(12)
             cd_userid, --  varchar2(24)
             dt_atualizacao, -- date
             char_1, -- varchar2(500)
             char_2, -- varchar2(500)
             char_3, -- varchar2(500)
             char_4, -- varchar2(500)
             char_5, -- varchar2(500)
             \*date_1  ,
             date_2  ,
             date_3  ,
             date_4  ,
             date_5  , *\
             dec_1,
             dec_2,
             dec_3,
             dec_4,
             dec_5,
             int_1,
             int_2,
             int_3,
             int_4,
             int_5,
             u_char_1,
             u_char_2,
             u_char_3,
             \*u_date_1  ,
             u_date_2  ,
             u_date_3  , *\
             u_dec_1,
             u_dec_2,
             u_dec_3,
             u_int_1,
             u_int_2,
             u_int_3,
             progress_recid)
          values
            (credat.nrrede, --cd_abrangencia_plano
             clay.cdrede_referencia, --cd_abrangencia_layout
             clay.cdrede_ptu, --in_tipo_assoc,
             'MIGRACAO', --cd_userid  ,
             sysdate, --dt_atualizacao
             ' ', --char_1,
             ' ', --char_2,
             ' ', --char_3,
             ' ', --char_4,
             ' ', --char_5,
             \*date_1  ,
             date_2  ,
             date_3  ,
             date_4  ,
             date_5  , *\
             0, --dec_1,
             0, --dec_2,
             0, --dec_3,
             0, --vdec_4,
             0, --dec_5,
             0, --int_1,
             0, --int_2,
             0, --int_3,
             0, --int_4,
             0, --int_5,
             ' ', --u_char_1,
             ' ', --u_char_2,
             ' ', --u_char_3,
             \*u_date_1  ,
             u_date_2  ,
             u_date_3  , *\
             0, --u_dec_1,
             0, --u_dec_2,
             0, --u_dec_3,
             0, --u_int_1,
             0, --u_int_2,
             0, --u_int_3,
             gp.assabran_seq.nextval);
        end if;
      end loop;
      \*
      * abrangência x prestador
      *\
      for cpres in (select p.cdprestador,
                           r.*,
                           mtv.cdvalor_externo,
                           decode(mtv.cdvalor_externo,
                                  '03',
                                  nvl(a.cdareaacao, pnrunimed),
                                  pnrunimed) cdunidade
                      from rede_atendimento_detalhe r,
                           prestador p,
                           (select cdvalor_externo, cdvalor_interno
                              from mig_tab_conversao     tc,
                                   mig_tab_conversao_exp ce
                             where notabela = 'MIGRACAO_TIPO_VINCULO'
                               and tc.nrseq = ce.nrseq_tab_conversao) mtv,
                           area_de_acao a
                     where p.nrregistro_prest(+) = r.nrregistro_prest
                       and r.nrrede = credat.nrrede
                       and p.tpprestador = mtv.cdvalor_interno(+)
                       and p.nrregistro_prest = a.nrregistro_pessoa(+)) loop

        begin
          insert into gp.abraunid
            (cd_unidade_destino,
             cd_abrangencia_plano,
             cdunidadeprestadorexec,
             cd_prestador_exec,
             cd_userid, --  varchar2(24)
             dt_atualizacao,
             char_1,
             char_2,
             char_3,
             char_4,
             char_5,
             int_1,
             int_2,
             int_3,
             int_4,
             int_5,
             dec_1,
             dec_2,
             dec_3,
             dec_4,
             dec_5,
             \*date_1  ,
             date_2  ,
             date_3  ,
             date_4  ,
             date_5  , *\
             u_char_1,
             u_char_2,
             u_char_3,
             \*u_date_1  ,
             u_date_2  ,
             u_date_3  , *\
             u_dec_1,
             u_dec_2,
             u_dec_3,
             u_int_1,
             u_int_2,
             u_int_3,
             in_tipo_prestador,
             progress_recid)
          values
            (cpres.cdunidade, --cd_unidade_destino,
             credat.nrrede, -- cd_abrangencia_plano,
             cpres.cdunidade, --cdunidadeprestadorexec,
             cpres.cdprestador, -- cd_prestador_exec,
             'MIGRACAO', --cd_userid,
             sysdate, --dt_atualizacao,
             ' ', --char_1,
             ' ', --char_2,
             ' ', --char_3,
             ' ', --char_4,
             ' ', --char_5,
             0, --int_1,
             0, --int_2,
             0, --int_3,
             0, --int_4,
             0, --int_5,
             0, --dec_1,
             0, --dec_2,
             0, --dec_3,
             0, --dec_4,
             0, --dec_5,
             \*date_1  ,
             date_2  ,
             date_3  ,
             date_4  ,
             date_5  , *\
             ' ', --u_char_1,
             ' ', --u_char_2,
             ' ', --u_char_3,
             \*u_date_1  ,
             u_date_2  ,
             u_date_3  , *\
             0, --u_dec_1,
             0, --u_dec_2,
             0, --u_dec_3,
             0, --u_int_1,
             0, --u_int_2,
             0, --u_int_3,
             nvl(cpres.cdvalor_externo, cpres.tpprestador), -- in_tipo_prestador,
             gp.abraunid_seq.nextval);
        exception
          when others then
            null;
        end;
      end loop;
    end loop;
    --commit;
  end p_migra_abrangencia;*/

-- CARREGAR TABELAS DE ABRANGÊNCIA (ABRAPLAN, ASSABRAN, ABRAUNID) COM BASE NA REDE DE REFERÊNCIA DO UNICOO
-- OBS: NAO CARREGA TPPLABRA E PROPABRA, POIS A RELACAO DO BENEFICIARIO COM SUA ABRANGENCIA
--      EH ATRAVES DO SEU REG_PLANO_SAUDE.COD_LIVRE_3 (ABRANGENCIA DO PLANO ANS)
procedure p_migra_rede_refer_abrangencia is

  cursor crr is
    select * from producao.rede_referencia@unicoo_homologa rr;

  /*cursor ctpc is
    select distinct td.cd_modalidade,
                    td.cd_plano,
                    td.cd_tipo_plano,
                    tp.cdrede_referencia
      from unicoogps.temp_depara_detalhado t,
           unicoogps.temp_depara_agrupado td,
           producao.tipo_plano_contrato@unicoo_homologa tp
    where t.cdcontrato_agr = td.cdcontrato
    and   tp.cdcontrato = t.cdcontrato_agr
    order by 1,2,3,4;
*/
  cursor crrp is
    select rrp.cdrede_referencia,
           rrp.dtoperacao,
           rrp.dtexclusao,
           p.cd_unidade,
           p.cd_prestador
      from producao.rede_referencia_prest@unicoo_homologa rrp,
           gp.preserv p
     where p.id_pessoa = rrp.nrregistro_prest;

begin

  for v in crr loop

    insert into gp.abraplan
      (cd_abrangencia_plano,
       u##ds_abrangencia_plano, --  varchar2(80)
       ds_abrangencia_plano, --  varchar2(80)
       in_tipo_regra, --  varchar2(12) descontinuado
       cd_userid, --  varchar2(24)
       dt_atualizacao,
       progress_recid)
    values
      (v.cdrede_referencia, --cd_abrangencia_plano,
       upper(v.norede_referencia), --u##ds_abrangencia_plano,
       v.norede_referencia, --ds_abrangencia_plano,
       ' ', --in_tipo_regra, - descontinuado
       'MIGRACAO', --cd_userid,
       sysdate, -- dt_atualizacao
       gp.abraplan_seq.nextval);

    insert into gp.assabran
          (cd_abrangencia_plano , -- number
           cd_abrangencia_layout,
           in_tipo_assoc, --  varchar2(12)
           cd_userid, --  varchar2(24)
           dt_atualizacao, -- date
           char_1, -- varchar2(500) NOME REDE REFERENCIA
           int_1,  -- CODIGO REDE PTU
           int_3,  -- TIPO REDE REFERENCIA
           int_4,  -- CODIGO SEGMENTACAO PLANO
           int_2,  -- CODIGO DA MENSAGEM PARA CARTAO MAGNETICO
           progress_recid)
        values
          (v.cdrede_referencia, --cd_abrangencia_plano
           case
             when substr(v.cdrede_ptu,1,2)='NA' then
                  1
             when substr(v.cdrede_ptu,1,2)='RA' then
                  2
             when substr(v.cdrede_ptu,1,2)='ES' then
                  3
             when substr(v.cdrede_ptu,1,2)='RB' then
                  4
             when substr(v.cdrede_ptu,1,2)='MU' then
                  5
           end,--cd_abrangencia_layout
           'A', --in_tipo_assoc,
           'MIGRACAO', --cd_userid  ,
           sysdate, --dt_atualizacao
           v.norede_referencia, --char_1
           case
             when v.cdrede_ptu in ('NA001','NA002','NA003') then substr(v.cdrede_ptu,4,2)
             else substr(v.cdrede_ptu,3,2)
           end, --int_1,
           case
            when instr(v.norede_referencia,'BASICO') <> 0 then
                 1
            when instr(v.norede_referencia,'BASICA') <> 0 then
                 1
            when instr(v.norede_referencia,'ESPECIAL') <> 0 then
                 2
            when instr(v.norede_referencia,'MASTER') <> 0 then
                 3
            else
                 1
            end, --int_3,
           /* o UNICOO nao possui essa informacao, portanto tera que ser ajustado manualmente apos a carga.
           case
             when v.norede_referencia = 'AMB-BASICO' then
                  7
             when v.norede_referencia = 'AMB-ENF-BASICO' then
                  1
             when v.norede_referencia in ('APT-BASICO','ENF-BASICO') then
                  12
             when v.norede_referencia in ('AMB-HOSP-OBST-ENFERMARIA','AMB-HOSP-OBST-QUARTO') then
                  12
             else
                  0
           end, --int_4 SEGMENTACAO DO PRODUTO*/
           0, --int_4 SEGMENTACAO DO PRODUTO
           0, -- int_2 - CODIGO DA MENSAGEM (MENSCART). 0 indica 'sem mensagem'
           gp.assabran_seq.nextval);
  end loop;

  /* VERIFICADO QUE TPPLABRA DEVE FICAR VAZIO, POIS O RELACIONAMENTO FICARA NA REG_PLANO_SAUDE
  for v in ctpc loop
        --chave unica: CD_MODALIDADE, CD_PLANO, CD_TIPO_PLANO, DT_INICIO
        insert into gp.tpplabra
          (cd_modalidade,
           cd_plano, -- number
           cd_tipo_plano,
           cd_abrangencia_plano, -- number
           dt_inicio,
           dt_fim, -- date
           cd_userid, --  varchar2(24)
           dt_atualizacao, -- date
           progress_recid)
        values
          (v.cd_modalidade,
           v.cd_plano,
           v.cd_tipo_plano,
           v.cdrede_referencia, --cd_abrangencia_plano,
           '01/01/1900', --dt_inicio,
           null, --dt_fim,
           'MIGRACAO', --cd_userid,
           sysdate, --dt_atualizacao,
           gp.tpplabra_seq.nextval);
    end loop;
  */

  for v in crrp loop
    insert into gp.abraunid(cd_unidade_destino,
                            cd_abrangencia_plano,
                            cdunidadeprestadorexec,
                            cd_prestador_exec,
                            in_tipo_prestador, -- 0 Executante; 1 Principal; 2 Ambos;
                            char_1, -- tipo regra 'N' normal; 'E' excecao;
                            cd_userid,
                            dt_atualizacao,
                            progress_recid)
         values (PNRUNIMED,
                 v.cdrede_referencia,
                 v.cd_unidade,
                 v.cd_prestador,
                 2, -- tipo prestador: Ambos
                 'N', -- tipo regra NORMAL
                 'MIGRACAO',
                 sysdate,
                 gp.abraunid_seq.nextval);
  end loop;
end p_migra_rede_refer_abrangencia;

-- CARREGAR AS TABELAS REDE_ATENDIM e REDE_ATENDIM_PRESTDOR;
procedure p_migra_rede_atendimento is
  cd_unidade_aux number;
  cd_prestador_aux number;
  in_movimento_aux number;

  cursor c_rede is
    select ra.nrrede, ra.norede
      from producao.rede_atendimento@unicoo_homologa ra
     order by 1;

  cursor c_rede_det is
    select
      rad.nrrede,
      rad.aopermite,
      mp.cdgrupo_gp,
      rad.nrregistro_prest
    from
      producao.rede_atendimento_detalhe@unicoo_homologa rad,
      unicoogps.migracao_grupo_prestador mp
    where rad.tpprestador = mp.tpprestador
    group by rad.nrrede,
             rad.aopermite,
             mp.cdgrupo_gp,
             rad.nrregistro_prest
  union
    select
      rad.nrrede,
      rad.aopermite,
      mp.cd_grupo_prestador,
      rad.nrregistro_prest
    from
      producao.rede_atendimento_detalhe@unicoo_homologa rad,
      gp.preserv mp
    where rad.nrregistro_prest = mp.id_pessoa
    group by rad.nrrede,
             rad.aopermite,
             mp.cd_grupo_prestador,
             rad.nrregistro_prest;

begin

  for v in c_rede loop

    insert into gp.rede_atendim(CDN_REDE,
                                DES_REDE,
                                COD_LIVRE_1,
                                COD_LIVRE_2,
                                COD_LIVRE_3,
                                COD_LIVRE_4,
                                COD_LIVRE_5,
                                COD_LIVRE_6,
                                COD_LIVRE_7,
                                COD_LIVRE_8,
                                COD_LIVRE_9,
                                COD_LIVRE_10,
                                NUM_LIVRE_1,
                                NUM_LIVRE_2,
                                NUM_LIVRE_3,
                                NUM_LIVRE_4,
                                NUM_LIVRE_5,
                                NUM_LIVRE_6,
                                NUM_LIVRE_7,
                                NUM_LIVRE_8,
                                NUM_LIVRE_9,
                                NUM_LIVRE_10,
                                VAL_LIVRE_1,
                                VAL_LIVRE_2,
                                VAL_LIVRE_3,
                                VAL_LIVRE_4,
                                VAL_LIVRE_5,
                                VAL_LIVRE_6,
                                VAL_LIVRE_7,
                                VAL_LIVRE_8,
                                VAL_LIVRE_9,
                                VAL_LIVRE_10,
                                LOG_LIVRE_1,
                                LOG_LIVRE_2,
                                LOG_LIVRE_3,
                                LOG_LIVRE_4,
                                LOG_LIVRE_5,
                                LOG_LIVRE_6,
                                LOG_LIVRE_7,
                                LOG_LIVRE_8,
                                LOG_LIVRE_9,
                                LOG_LIVRE_10,
                                DAT_LIVRE_1,
                                DAT_LIVRE_2,
                                DAT_LIVRE_3,
                                DAT_LIVRE_4,
                                DAT_LIVRE_5,
                                DAT_LIVRE_6,
                                DAT_LIVRE_7,
                                DAT_LIVRE_8,
                                DAT_LIVRE_9,
                                DAT_LIVRE_10,
                                DAT_ULT_ATUALIZ,
                                HRA_ULT_ATUALIZ,
                                COD_USUAR_ULT_ATUALIZ,
                                PROGRESS_RECID)
            values(v.nrrede, --CDN_REDE
                    v.norede, --DES_REDE
                     ' ', --COD_LIVRE_1
                     ' ', --COD_LIVRE_2
                     ' ', --COD_LIVRE_3
                     ' ', --COD_LIVRE_4
                     ' ', --COD_LIVRE_5
                     ' ', --COD_LIVRE_6
                     ' ', --COD_LIVRE_7
                     ' ', --COD_LIVRE_8
                     ' ', --COD_LIVRE_9
                     ' ', --COD_LIVRE_10
                    0, --NUM_LIVRE_1
                    0, --NUM_LIVRE_2
                    0, --NUM_LIVRE_3
                    0, --NUM_LIVRE_4
                    0, --NUM_LIVRE_5
                    0, --NUM_LIVRE_6
                    0, --NUM_LIVRE_7
                    0, --NUM_LIVRE_8
                    0, --NUM_LIVRE_8
                    0, --NUM_LIVRE_10
                    0, --VAL_LIVRE_1
                    0, --VAL_LIVRE_2
                    0, --VAL_LIVRE_3
                    0, --VAL_LIVRE_4
                    0, --VAL_LIVRE_5
                    0, --VAL_LIVRE_6
                    0, --VAL_LIVRE_7
                    0, --VAL_LIVRE_8
                    0, --VAL_LIVRE_9
                    0, --VAL_LIVRE_10
                    0, --LOG_LIVRE_1
                    0, --LOG_LIVRE_2
                    0, --LOG_LIVRE_3
                    0, --LOG_LIVRE_4
                    0, --LOG_LIVRE_5
                    0, --LOG_LIVRE_6
                    0, --LOG_LIVRE_7
                    0, --LOG_LIVRE_8
                    0, --LOG_LIVRE_9
                    0, --LOG_LIVRE_10
                    NULL, --DAT_LIVRE_1
                    NULL, --DAT_LIVRE_2
                    NULL, --DAT_LIVRE_3
                    NULL, --DAT_LIVRE_4
                    NULL, --DAT_LIVRE_5
                    NULL, --DAT_LIVRE_6
                    NULL, --DAT_LIVRE_7
                    NULL, --DAT_LIVRE_8
                    NULL, --DAT_LIVRE_9
                    NULL, --DAT_LIVRE_10
                    SYSDATE, --DAT_ULT_ATUALIZ,
                    NULL, --HRA_ULT_ATUALIZ,
                    'MIGRACAO', --COD_USUAR_ULT_ATUALIZ,
                    gp.rede_atendim_seq.nextval);
  end loop;

  for v in c_rede_det loop

    -- area de ação --
    begin
      select p.cd_unidade, p.cd_prestador into cd_unidade_aux, cd_prestador_aux
        from gp.preserv p
      where p.id_pessoa = v.nrregistro_prest;
    exception
      when others then
           cd_unidade_aux := 23;
           cd_prestador_aux := 0;
    end;

    -- permite movimento ---
    if v.aopermite = 'S' then
       in_movimento_aux :=1;
    else
       in_movimento_aux :=0;
    end if;

    insert into gp.rede_atendim_prestdor rp
                (CDN_REDE,
                 CD_UNIDADE_PRES,
                 CD_PRESTADOR,
                 CD_TIPO_PRESTADOR,
                 COD_LIVRE_1,
                 COD_LIVRE_2,
                 COD_LIVRE_3,
                 COD_LIVRE_4,
                 COD_LIVRE_5,
                 COD_LIVRE_6,
                 COD_LIVRE_7,
                 COD_LIVRE_8,
                 COD_LIVRE_9,
                 COD_LIVRE_10,
                 NUM_LIVRE_1,
                 NUM_LIVRE_2,
                 NUM_LIVRE_3,
                 NUM_LIVRE_4,
                 NUM_LIVRE_5,
                 NUM_LIVRE_6,
                 NUM_LIVRE_7,
                 NUM_LIVRE_8,
                 NUM_LIVRE_9,
                 NUM_LIVRE_10,
                 VAL_LIVRE_1,
                 VAL_LIVRE_2,
                 VAL_LIVRE_3,
                 VAL_LIVRE_4,
                 VAL_LIVRE_5,
                 VAL_LIVRE_6,
                 VAL_LIVRE_7,
                 VAL_LIVRE_8,
                 VAL_LIVRE_9,
                 VAL_LIVRE_10,
                 LOG_LIVRE_1,
                 LOG_LIVRE_2,
                 LOG_LIVRE_3,
                 LOG_LIVRE_4,
                 LOG_LIVRE_5,
                 LOG_LIVRE_6,
                 LOG_LIVRE_7,
                 LOG_LIVRE_8,
                 LOG_LIVRE_9,
                 LOG_LIVRE_10,
                 DAT_LIVRE_1,
                 DAT_LIVRE_2,
                 DAT_LIVRE_3,
                 DAT_LIVRE_4,
                 DAT_LIVRE_5,
                 DAT_LIVRE_6,
                 DAT_LIVRE_7,
                 DAT_LIVRE_8,
                 DAT_LIVRE_9,
                 DAT_LIVRE_10,
                 DAT_ULT_ATUALIZ,
                 HRA_ULT_ATUALIZ,
                 COD_USUAR_ULT_ATUALIZ,
                 LOG_PERMITE_ATENDIM,
                 U##COD_GRP_PRESTDOR,
                 COD_GRP_PRESTDOR,
                 PROGRESS_RECID
                 )
            values
                 (v.nrrede,--CDN_REDE
                  cd_unidade_aux,--CD_UNIDADE_PRES
                  cd_prestador_aux, --CD_PRESTADOR
                  2,--CD_TIPO_PRESTADOR     0-Executante; 1-principal; 2-Ambos
                  ' ',--COD_LIVRE_1
                  ' ',--COD_LIVRE_2
                  ' ',--COD_LIVRE_3
                  ' ',--COD_LIVRE_4
                  ' ',--COD_LIVRE_5
                  ' ',--COD_LIVRE_6
                  ' ',--COD_LIVRE_7
                  ' ',--COD_LIVRE_8
                  ' ',--COD_LIVRE_9
                  ' ',--COD_LIVRE_10
                  0,--NUM_LIVRE_1
                  0,--NUM_LIVRE_2
                  0,--NUM_LIVRE_3
                  0,--NUM_LIVRE_4
                  0,--NUM_LIVRE_5
                  0,--NUM_LIVRE_6
                  0,--NUM_LIVRE_7
                  0,--NUM_LIVRE_8
                  0,--NUM_LIVRE_9
                  0,--NUM_LIVRE_10
                  0,--VAL_LIVRE_1
                  0,--VAL_LIVRE_2
                  0,--VAL_LIVRE_3
                  0,--VAL_LIVRE_4
                  0,--VAL_LIVRE_5
                  0,--VAL_LIVRE_6
                  0,--VAL_LIVRE_7
                  0,--VAL_LIVRE_8
                  0,--VAL_LIVRE_9
                  0,--VAL_LIVRE_10
                  0,--LOG_LIVRE_1
                  0,--LOG_LIVRE_2
                  0,--LOG_LIVRE_3
                  0,--LOG_LIVRE_4
                  0,--LOG_LIVRE_5
                  0,--LOG_LIVRE_6
                  0,--LOG_LIVRE_7
                  0,--LOG_LIVRE_8
                  0,--LOG_LIVRE_9
                  0,--LOG_LIVRE_10
                  NULL,--DAT_LIVRE_1
                  NULL,--DAT_LIVRE_2
                  NULL,--DAT_LIVRE_3
                  NULL,--DAT_LIVRE_4
                  NULL,--DAT_LIVRE_5
                  NULL,--DAT_LIVRE_6
                  NULL,--DAT_LIVRE_7
                  NULL,--DAT_LIVRE_8
                  NULL,--DAT_LIVRE_9
                  NULL,--DAT_LIVRE_10
                  sysdate,--DAT_ULT_ATUALIZ
                  NULL,--HRA_ULT_ATUALIZ
                  'MIGRACAO',--COD_USUAR_ULT_ATUALIZ
                  in_movimento_aux,--LOG_PERMITE_ATENDIM
                  upper(v.cdgrupo_gp),--U##COD_GRP_PRESTDOR
                  v.cdgrupo_gp,--COD_GRP_PRESTDOR
                  gp.rede_atendim_prestdor_seq.nextval  -- PROGRESS_RECID
                  );
  end loop;

end p_migra_rede_atendimento;

-- ASSOCIAR REDE_ATENDIM A:
--     PROPOST.CHAR_5 (REDE DO CONTRATO);
--     USUARIO.CHAR_27 (REDE DO BENEFICIARIO);
--     TI_PL_SA.CHAR_4 (REDE DO TIPO DE PLANO);
procedure p_relaciona_rede_atendimento is
  cursor c_rede_cont is
    select h.nrrede, i.cd_modalidade, i.num_livre_10
      from producao.rede_atendimento_contrato@unicoo_homologa h,
           import_propost                                     i
     where h.nrregistro = i.num_livre_2
       and h.cdcontrato = i.cod_livre_3
     group by h.nrrede, i.cd_modalidade, i.num_livre_10;

  cursor c_rede_plano is
    select distinct mp.cd_modalidade,
                    mp.cd_plano,
                    mp.cd_tipo_plano,
                    rap.nrrede
      from unicoogps.t_v_plano_padrao                      mp,
           producao.rede_atendimento_plano@unicoo_homologa rap
     where rap.cdcontrato = mp.cdcontrato;

begin

  for v in c_rede_cont loop

    update gp.propost g
       set g.char_5 = v.nrrede
     where g.cd_modalidade = v.cd_modalidade
       and g.nr_proposta   = v.num_livre_10;

    update gp.usuario u
       set u.char_27 = v.nrrede
     where u.cd_modalidade = v.cd_modalidade
       and u.nr_proposta   = v.num_livre_10;

  end loop;

  for v in c_rede_plano loop

    update gp.ti_pl_sa ts
       set ts.char_4 = to_char(v.nrrede)
     where ts.cd_modalidade = v.cd_modalidade
       and ts.cd_plano = v.cd_plano
       and ts.cd_tipo_plano = v.cd_tipo_plano;

  end loop;

  --caso algum contrato ou beneficiario tenha ficado sem rede referencia, buscar do seu tipo de plano
  for x in (select p.cd_modalidade, p.nr_proposta, t.char_4
              from ti_pl_sa t, propost p
             where p.cd_modalidade = t.cd_modalidade
               and p.cd_plano      = t.cd_plano
               and p.cd_tipo_plano = t.cd_tipo_plano
               and t.char_4 is not null
               and t.char_4 <> ' '
               and(p.char_5 is null or p.char_5 = ' ')) loop

      update gp.propost g
         set g.char_5 = x.char_4
       where g.cd_modalidade = x.cd_modalidade
         and g.nr_proposta   = x.nr_proposta;

      update gp.usuario u
         set u.char_27 = x.char_4
       where u.cd_modalidade = x.cd_modalidade
         and u.nr_proposta   = x.nr_proposta;

  end loop;

end p_relaciona_rede_atendimento;

  /*
  * procedure : p_migra_estado
  * objetivo  : migrar entidade estado
  */
  procedure p_migra_estado is

    cursor cur_est is
      select es.* from estado es order by es.cdestado;

  begin
    for rest in cur_est loop
      vaomigrado := 'N';

      begin
        select 'S'
          into vaomigrado
          from gp.dzestado
         where u##nm_pais = 'BRASIL'
           and u##en_uf = 'rest.cdestado';
      exception
        when no_data_found then
          vaomigrado := 'N';
      end;

      if vaomigrado = 'N' then
        insert into gp.dzestado
          (u##nm_pais,
           nm_pais,
           u##en_uf,
           en_uf,
           u##nm_estado,
           nm_estado,
           cd_pais_ans,
           cd_userid,
           progress_recid)
        values
          ('BRASIL',
           'BRASIL',
           upper(rest.cdestado),
           rest.cdestado,
           upper(rest.noestado),
           rest.noestado,
           32,
           'MIGRACAO',
           gp.dzestado_seq.nextval);

      end if;

    end loop;
  end p_migra_estado;

  procedure p_migra_especialidade is

    tcbo_esp  cbo_esp%rowtype;
    vaoexiste char;

    cursor c_especiliade is
      select nvl((select ed.cd_especialidade_totvs
                   from depara_especialidade ed
                   where ed.cdespecialidade_unicoo(+) = e.cdespecialidade),
                 to_number(cdespecialidade)) cd_especialid,
             upper(noespecialidade) u##ds_especialid,
             noespecialidade ds_especialid,
             ' ' ds_espec_compl,
             ' ' ds_observacao##1,
             ' ' ds_observacao##2,
             ' ' ds_observacao##3,
             '01/01/1900' dt_atualizacao,
             'MIGRACAO' cd_userid,
             0 lg_med_pres,
             0 in_especialidade_ans,
             ' ' des_observacao,
             gp.esp_med_seq.nextval progress_recid,
             PCDCONVTAB u##cd_tbconvcd,
             PCDCONVTAB cd_tbconvcd,
             e.cdespecialidade cd_espec_interno,
             e.cdptu cd_espec_externo,
             'A' in_tipo_assoc,
             0 progress_recid_ass
        from especialidade e, especialidade_ptu eptu
       where e.cdptu = eptu.cdespecialidade_ptu(+);
  begin

--DBMS_OUTPUT.ENABLE(9999999999999999999999999999999999);

    begin
      for ce in c_especiliade loop
        vaoexiste := 'N';
        begin
          select 'S'
            into vaoexiste
            from gp.esp_med emed
           where emed.cd_especialid = ce.cd_especialid;
        exception
          when no_data_found then
            vaoexiste := 'N';
        end;

--DBMS_OUTPUT.PUT_LINE('P1. CD_ESPECIALID: ' || ce.cd_especialid || ' / ' || vaoexiste);

        if vaoexiste = 'N' then
          begin
            insert into gp.esp_med
              (cd_especialid,
               u##ds_especialid,
               ds_especialid,
               ds_espec_compl,
               ds_observacao##1,
               ds_observacao##2,
               ds_observacao##3,
               dt_atualizacao,
               cd_userid,
               lg_med_pres,
               in_especialidade_ans,
               des_observacao,
               progress_recid)
            values
              (ce.cd_especialid,
               ce.u##ds_especialid,
               ce.ds_especialid,
               ce.ds_espec_compl,
               ce.ds_observacao##1,
               ce.ds_observacao##2,
               ce.ds_observacao##3,
               ce.dt_atualizacao,
               ce.cd_userid,
               ce.lg_med_pres,
               ce.in_especialidade_ans,
               ce.des_observacao,
               ce.progress_recid);
          exception
            when dup_val_on_index then
              null;
          end;

--DBMS_OUTPUT.PUT_LINE('P2 INSERT. CD_ESPECIALID: ' || ce.cd_especialid || ' / ' || vaoexiste);

          p_commit;

        end if;

        --verifica se ja existe o de-para para exportacao
        begin
          vaoexiste := 'N';
          select 'S'
            into vaoexiste
            from gp.assespec a
           where a.u##cd_tbconvcd = ce.u##cd_tbconvcd --parametro PCDCONVTAB
             and a.cd_espec_externo = ce.cd_espec_externo --unimed
             and a.in_tipo_assoc = 'A'; --ambos
        exception
          --se ja existir com A, a prox espec só podera ser exportacao
          when no_data_found then
            vaoexiste := 'N';
        end;

--DBMS_OUTPUT.PUT_LINE('P3 (ASSESPEC). CD_ESPECIALID: ' || ce.cd_especialid || ' / ' || vaoexiste);

        select gp.assespec_seq.nextval
          into ce.progress_recid_ass
          from dual;

        begin
          insert into gp.assespec
            (u##cd_tbconvcd,
             cd_tbconvcd,
             cd_espec_interno,
             cd_espec_externo,
             in_tipo_assoc,
             progress_recid)
          values
            (ce.u##cd_tbconvcd,
             ce.cd_tbconvcd,
             ce.cd_especialid, -- codigo da especialidade no TOTVS
             ce.cd_espec_externo,
             decode(vaoexiste, 'S', 'E', 'A'),
             ce.progress_recid_ass);
        exception
          when dup_val_on_index then
            null;
        end;

--DBMS_OUTPUT.PUT_LINE('P4 (INSERT ASSESPEC). CD_ESPECIALID: ' || ce.cd_especialid || ' / ' || vaoexiste);

      end loop;
    exception
      when dup_val_on_index then
        null;

      when value_error then
        raise_application_error(-20102,
                                'Verifique de/para especialidade ' ||
                                sqlerrm);
    end;

    for c_cbo_esp in (select distinct nvl(d.cd_especialidade_totvs,
                                          e.cdespecialidade) cd_esp,
                                      c.cdcbo_atual cdcbo,
                                      c.nocbo
                        from especialidade                e,
                             producao.cbo@unicoo_homologa c,
                             depara_especialidade         d
                       where e.cdcbo = c.cdcbo
                         and d.cdespecialidade_unicoo(+) = e.cdespecialidade) loop

      tcbo_esp.u##cd_cbo_s    := c_cbo_esp.cdcbo;
      tcbo_esp.cd_cbo_s       := c_cbo_esp.cdcbo;
      tcbo_esp.ds_cbo_s       := c_cbo_esp.nocbo;
      tcbo_esp.cd_especialid  := c_cbo_esp.cd_esp;
      tcbo_esp.cd_userid      := 'migracao';
      tcbo_esp.dt_atualizacao := '01/01/1900';
      tcbo_esp.char_1         := ' ';
      tcbo_esp.char_2         := ' ';
      tcbo_esp.char_3         := ' ';
      tcbo_esp.char_4         := ' ';
      tcbo_esp.char_5         := ' ';
      tcbo_esp.dec_1          := 0;
      tcbo_esp.dec_2          := 0;
      tcbo_esp.dec_3          := 0;
      tcbo_esp.dec_4          := 0;
      tcbo_esp.dec_5          := 0;
      tcbo_esp.date_1         := '';
      tcbo_esp.date_2         := '';
      tcbo_esp.date_3         := '';
      tcbo_esp.date_4         := '';
      tcbo_esp.date_5         := '';
      tcbo_esp.int_1          := 0;
      tcbo_esp.int_2          := 0;
      tcbo_esp.int_3          := 0;
      tcbo_esp.int_4          := 0;
      tcbo_esp.int_5          := 0;
      tcbo_esp.log_1          := 0;
      tcbo_esp.log_2          := 0;
      tcbo_esp.log_3          := 0;
      tcbo_esp.log_4          := 0;
      tcbo_esp.log_5          := 0;
      tcbo_esp.u_char_1       := ' ';
      tcbo_esp.u_char_2       := ' ';
      tcbo_esp.u_char_3       := ' ';
      tcbo_esp.u_date_1       := '';
      tcbo_esp.u_date_2       := '';
      tcbo_esp.u_date_3       := '';
      tcbo_esp.u_int_1        := 0;
      tcbo_esp.u_int_2        := 0;
      tcbo_esp.u_int_3        := 0;
      tcbo_esp.u_log_1        := 0;
      tcbo_esp.u_log_2        := 0;
      tcbo_esp.u_log_3        := 0;
      tcbo_esp.u_dec_1        := 0;
      tcbo_esp.u_dec_2        := 0;
      tcbo_esp.u_dec_3        := 0;
      tcbo_esp.dt_limite      := '31/12/9999';

      select gp.cbo_esp_seq.nextval into tcbo_esp.progress_recid from dual;

      begin
        insert into gp.cbo_esp values tcbo_esp;
      exception
        when dup_val_on_index then
          null;
      end;

    end loop;

    commit;
  end p_migra_especialidade;

  procedure p_migra_reajuste(pnrcontrato_antigo in number) is

    --  wreajuste   import_histor_reaj%rowtype;
    --wtab        varchar2(20);
    vaomigra char;
  begin
    for c in (select *
                from v_export_reajuste
               where (nr_contrato_antigo = pnrcontrato_antigo or
                     pnrcontrato_antigo is null)) loop

      vaomigra := 'S';

      if vaomigra = 'S' then
        begin
          insert into gp.histabpreco
            (cd_modalidade,
             nr_proposta,
             cd_tab_preco,
             pc_reajuste,
             aa_reajuste,
             mm_reajuste,
             nr_oficio_reajuste,
             cd_userid,
             dt_atualizacao,
             char_1,
             char_2,
             char_3,
             char_4,
             char_5,
             dec_1,
             dec_2,
             dec_3,
             dec_4,
             dec_5,
             date_1,
             date_2,
             date_3,
             date_4,
             date_5,
             int_1,
             int_2,
             int_3,
             int_4,
             int_5,
             log_1,
             log_2,
             log_3,
             log_4,
             log_5,
             u_char_1,
             u_char_2,
             u_char_3,
             u_date_1,
             u_date_2,
             u_date_3,
             u_int_1,
             u_int_2,
             u_int_3,
             u_log_1,
             u_log_2,
             u_log_3,
             u_dec_1,
             u_dec_2,
             u_dec_3,
             int_6,
             int_7,
             int_8,
             int_9,
             int_10,
             DES_OBS_REAJUS,
             progress_recid)
          values
            (c.cd_modalidade,
             c.nr_proposta,
             c.cd_tab_preco,
             c.pc_reajuste,
             c.aa_reajuste,
             c.mm_reajuste,
             c.nr_oficio_reajuste,
             c.cd_userid,
             c.dt_atualizacao,
             c.char_1,
             c.char_2,
             c.char_3,
             c.char_4,
             c.char_5,
             c.dec_1,
             c.dec_2,
             c.dec_3,
             c.dec_4,
             c.dec_5,
             c.date_1,
             c.date_2,
             c.date_3,
             c.date_4,
             c.date_5,
             c.int_1,
             c.int_2,
             c.int_3,
             c.int_4,
             c.int_5,
             c.log_1,
             c.log_2,
             c.log_3,
             c.log_4,
             c.log_5,
             c.u_char_1,
             c.u_char_2,
             c.u_char_3,
             c.u_date_1,
             c.u_date_2,
             c.u_date_3,
             c.u_int_1,
             c.u_int_2,
             c.u_int_3,
             c.u_log_1,
             c.u_log_2,
             c.u_log_3,
             c.u_dec_1,
             c.u_dec_2,
             c.u_dec_3,
             c.int_6,
             c.int_7,
             c.int_8,
             c.int_9,
             c.int_10,
             c.txmotivo_reajuste,
             gp.histabpreco_seq.nextval);
        exception
          when dup_val_on_index then
            null;
        end;

        p_commit;

      end if;
      --commit;
    end loop;
  end p_migra_reajuste;

  procedure p_valida_servicos is

    cursor c_servicos is
      select *
        from (select s.cdservico,
                     s.noservico,
                     s.cdclasse,
                     c.noclasse nomeclasse,
                     length(cdservico) digitos,
                     case
                       when c.cdclasse in
                            (f_parametro('CLASDIA'),
                             f_parametro('CLSMATER'),
                             f_parametro('CLSMEDIC'),
                             f_parametro('CLTAXA')) then
                        'INSUMO'
                       else
                        'PROCEDIMENTO'
                     end tipo_servico
                from servico s, classe_de_servico c
               where c.cdclasse = s.cdclasse
                 and (length(cdservico) <> 8 or
                     s.cdservico between 'A' and 'Z')
                 and s.noservico not like '%GRUPO%') a;

  begin

    for cservico in c_servicos loop

      if cservico.cdservico not between 'A' and 'Z' and
         cservico.tipo_servico = 'INSUMO' then
        null;

      else

        insert into temp_servico_depara
        values
          (cservico.cdservico,
           cservico.noservico,
           cservico.cdclasse,
           cservico.nomeclasse,
           cservico.tipo_servico);

      end if;

    end loop;

    --commit;

  end p_valida_servicos;

/*
CLTAXA   --2
CLASDIA  --3
CLSMATER --4
CLSMEDIC --5
*/
  procedure p_migra_grupo_procedimento is
    tpinsumotiss number := 0;
    tpinsumo     number := 0;

  begin

    for a in (select to_number(nvl(conversao.cdclasse_depara, cs.cdclasse)) cdclasse_depara,
                     cs.noclasse,
                     upper('TAB PTU: ' || cs.tptabela_ptu) ds_obs,
                     cs.cdclasse
                from classe_de_servico cs,
                     (select re.cdvalor_externo cdclasse_depara,
                             re.cdvalor_interno
                        from mig_tab_conversao_exp re, mig_tab_conversao r
                       where re.nrseq_tab_conversao = r.nrseq
                         and r.notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO') conversao
               where conversao.cdvalor_interno(+) = cs.cdclasse
                 and pck_unicoogps.f_insumo(cs.cdclasse) = 'N') loop

      begin
        insert into gp.gru_pro
          (cd_grupo_proc,
           nm_grupo_proc,
           u##nm_grupo_proc,
           lg_cooperado,
           ds_observacao##1,
           u_char_1,
           cd_userid,
           progress_recid)
        values
          (a.cdclasse_depara,
           a.noclasse,
           upper(a.noclasse),
           '1',
           a.ds_obs,
           a.cdclasse,
           'migracao',
           gp.gru_pro_seq.nextval);

      exception
        when dup_val_on_index then
          null;
      end;

    end loop;

    insert into gp.tipoinsu
      (cd_tipo_insumo,
       ds_tipo_insumo_reduz,
       u##ds_tipo_insumo,
       ds_tipo_insumo,
       int_1,
       int_2,
       u_char_1,
       cd_userid,
       progress_recid)
      select conversao.cdclasse_depara,
             substr(cs.noclasse, 1, 10),
             upper(cs.noclasse),
             cs.noclasse,
             tpinsumotiss,
             tpinsumo,
             cs.cdclasse,
             'migracao',
             gp.tipoinsu_seq.nextval
        from classe_de_servico cs,
             (select re.cdvalor_externo cdclasse_depara, re.cdvalor_interno
                from mig_tab_conversao_exp re, mig_tab_conversao r
               where re.nrseq_tab_conversao = r.nrseq
                 and r.notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO') conversao
       where conversao.cdvalor_interno(+) = cs.cdclasse
         and pck_unicoogps.f_insumo(cs.cdclasse) = 'S';

  end p_migra_grupo_procedimento;

  procedure p_migra_procedimentos is
    --tpinsumo   number := 0;
    tpregistro varchar2(20);
    tambproce  gp.ambproce%rowtype;
    tinsumos   gp.insumos%rowtype;

    PCD_TABELA_TISS tm_parametro.cdparametro%type := F_TM_PARAMETRO('CD_TABELA_TISS');

    -- cadastro de procedimentos --
    cursor cur_serv is
      select nvl(conversao.cdvalor_externo, cdservico) cdservico_depara,
             (nvl(conversao_classe.cdvalor_externo, cdclasse)) cdclasse_depara,
             sv.*
        from servico sv,
             (select re.cdvalor_externo, re.cdvalor_interno
                from mig_tab_conversao_exp re, mig_tab_conversao r
               where re.nrseq_tab_conversao = r.nrseq
                 and r.notabela = 'MIGRACAO_PROCEDIMENTOS') conversao,
             (select re.cdvalor_externo, re.cdvalor_interno
                from mig_tab_conversao_exp re, mig_tab_conversao r
               where re.nrseq_tab_conversao = r.nrseq
                 and r.notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO') conversao_classe
       where sv.cdservico = conversao.cdvalor_interno(+)
         and sv.cdclasse = conversao_classe.cdvalor_interno(+)
         and length(sv.cdservico) = 8;

  begin

 --DBMS_OUTPUT.ENABLE(1000000);

--DBMS_OUTPUT.PUT_LINE( 'Inicio' );

    --inserir os antigos grupos da amb
    insert into gp.ambespec
      (cd_esp_amb,
       u##ds_esp_amb,
       ds_esp_amb,
       lg_padrao,
       ds_observacao##1,
       char_1,
       u_char_1,
       cd_userid,
       progress_recid)
      select a1, a2, a3, a4, a5, a6, a7, a8, gp.ambespec_seq.nextval
        from (select distinct substr(nvl(a.cdservico_depara, s.cdservico),
                                     1,
                                     2) a1,
                              'Grupo AMB ' ||
                              substr(nvl(a.cdservico_depara, s.cdservico),
                                     1,
                                     2) a2,
                              'Grupo AMB ' ||
                              substr(nvl(a.cdservico_depara, s.cdservico),
                                     1,
                                     2) a3,
                              1 a4,
                              ' ' a5, --observacoes
                              'Grupo AMB ' ||
                              substr(nvl(a.cdservico_depara, s.cdservico),
                                     1,
                                     2) a6,
                              'Nivel ' a7,
                              cuser_migracao a8
                from servico s,
                     (select re.cdvalor_externo cdservico_depara,
                             re.cdvalor_interno
                        from mig_tab_conversao_exp re, mig_tab_conversao r
                       where re.nrseq_tab_conversao = r.nrseq
                         and r.notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO') a
               where s.cdclasse not in
                     (pclsmater, pclsmedic, pcltaxa, pclasdia)
                 and a.cdvalor_interno(+) = s.cdservico
                 and length(cdservico) = 8);

--DBMS_OUTPUT.PUT_LINE( 'criou AMBESPEC' );

    --inserir os antigos sub grupos da amb
    insert into gp.ambespgr
      (cd_esp_amb,
       cd_grupo_proc_amb,
       u##ds_grupo_proc_amb,
       ds_grupo_proc_amb,
       lg_padrao,
       ds_observacao##1,
       char_1,
       cd_userid,
       progress_recid)
      select a1, a2, a3, a4, a5, a6, a7, a8, gp.ambespgr_seq.nextval
        from (select distinct substr(nvl(a.cdservico_depara, s.cdservico),
                                     1,
                                     2) a1,
                              substr(nvl(a.cdservico_depara, s.cdservico),
                                     3,
                                     2) a2,
                              'SubGrupo AMB ' ||
                              substr(nvl(a.cdservico_depara, s.cdservico),
                                     1,
                                     4) a3,
                              'SubGrupo AMB ' ||
                              substr(nvl(a.cdservico_depara, s.cdservico),
                                     1,
                                     4) a4,
                              1 a5,
                              ' ' a6,
                              'SubGrupo AMB ' ||
                               substr(nvl(a.cdservico_depara, s.cdservico),
                                     1,
                                     4) a7,
                              cuser_migracao a8
                from servico s,
                     (select re.cdvalor_externo cdservico_depara,
                             re.cdvalor_interno
                        from mig_tab_conversao_exp re, mig_tab_conversao r
                       where re.nrseq_tab_conversao = r.nrseq
                         and r.notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO') a
               where s.cdclasse not in
                     (pclsmater, pclsmedic, pcltaxa, pclasdia)
                 and a.cdvalor_interno(+) = s.cdservico
                 and length(cdservico) = 8);

--DBMS_OUTPUT.PUT_LINE( 'criou AMBESPGR' );

    p_migra_grupo_procedimento;

--DBMS_OUTPUT.PUT_LINE( 'depois de p_migra_grupo_procedimento' );

--DBMS_OUTPUT.PUT_LINE( 'vai começar o loop principal' );

    for rsv in cur_serv loop
      begin

        -- cadastro de procedimentos
        if (rsv.cdclasse is null or
           rsv.cdclasse not in (pclsmater, pclsmedic, pcltaxa, pclasdia)) then

          -- tipo de registro
          tpregistro := 'Procedimentos';

----DBMS_OUTPUT.PUT_LINE( 'Procedimento' );

----DBMS_OUTPUT.PUT_LINE(rsv.cdservico_depara);

          if (length(trim(rsv.cdservico_depara)) = 8) then

            -- cadastro de procedimentos
            begin
              select 'S'
                into vaomigrado
                from gp.ambproce a
               where a.cd_esp_amb =
                     to_number(substr(rsv.cdservico_depara, 1, 2))
                 and a.cd_grupo_proc_amb =
                     to_number(substr(rsv.cdservico_depara, 3, 2))
                 and a.cd_procedimento =
                     to_number(substr(rsv.cdservico_depara, 5, 3))
                 and a.dv_procedimento = substr(rsv.cdservico_depara, 8, 1);
            exception
              when no_data_found then
                vaomigrado := 'N';
              when others then
                vaomigrado := 'S';
            end;

            if vaomigrado = 'N' then

              tambproce.cd_esp_amb               := substr(rsv.cdservico_depara,
                                                           1,
                                                           2);
              tambproce.cd_grupo_proc_amb        := substr(rsv.cdservico_depara,
                                                           3,
                                                           2);
              tambproce.cd_procedimento          := substr(rsv.cdservico_depara,
                                                           5,
                                                           3);
              tambproce.dv_procedimento          := substr(rsv.cdservico_depara,
                                                           8,
                                                           1);
              tambproce.des_procedimento         := rsv.noservico;
              tambproce.ds_procedimento##1       := upper(substr(rsv.noservico,
                                                                 1,
                                                                 60));
              tambproce.ds_procedimento##2       := nvl(substr(rsv.noservico,
                                                               61,
                                                               40),
                                                        ' ');
              tambproce.u##ds_procedimento_reduz := substr(rsv.noservico,
                                                           1,
                                                           40);
              tambproce.ds_procedimento_reduz    := substr(rsv.noservico,
                                                           1,
                                                           40);
              tambproce.lg_padrao                := 1;
              tambproce.cd_grupo_proc            := rsv.cdclasse_depara;
              tambproce.lg_autoriza              := 1;
              tambproce.dd_baixa_min             := 0;
              tambproce.dd_baixa_max             := 0;
              tambproce.in_diagnose_sexo := case
                                              when rsv.cdsexo = 'M' then
                                               'M'
                                              when rsv.cdsexo = 'F' then
                                               'F'
                                              else
                                               'A'
                                            end;
              tambproce.nr_idade_minima          := nvl(rsv.nridade_inicio,
                                                        0);
              tambproce.nr_idade_maxima          := nvl(rsv.nridade_fim,
                                                        999);
              tambproce.ds_observacao##1         := nvl(substr(rsv.txobservacao,
                                                               1,
                                                               76),
                                                        ' ');
              tambproce.ds_observacao##2         := nvl(substr(rsv.txobservacao,
                                                               77,
                                                               23),
                                                        ' ');
              tambproce.ds_observacao##3         := ' ';
              tambproce.lg_compl_honor           := 0;
              tambproce.char_1                   := ' ';
              tambproce.in_tipo_parto            := 0;
              tambproce.dt_atualizacao           := trunc(sysdate);
              tambproce.cd_userid                := 'migracao';
              tambproce.lg_dispensa_aut          := 0;
              tambproce.lg_trabalho_med          := 0;
              tambproce.lg_insumo                := 0;
              tambproce.cd_via_acesso            := 1;
              tambproce.lg_controle_validade     := 1;
              tambproce.char_2                   := ' ';
              tambproce.char_3                   := ' ';
              tambproce.char_4                   := ' ';
              tambproce.char_5                   := ' ';
              tambproce.date_1                   := '';
              tambproce.date_2                   := '';
              tambproce.date_3                   := '';
              tambproce.date_4                   := '';
              tambproce.date_5                   := '';
              tambproce.dec_1                    := 0;
              tambproce.dec_2                    := 0;
              tambproce.dec_3                    := 0;
              tambproce.dec_4                    := 0;
              tambproce.dec_5                    := 0;
              tambproce.u_int_2                  := 0;
              tambproce.cd_subgrupo_esp_amb      := substr(rsv.cdservico_depara,
                                                           3,
                                                           2);
              begin
                select tb.cdn_tab_gest
                  into tambproce.int_3
                  from gp.tip_tab tb
                 where tb.cdn_tabela =
                       nvl(rsv.cdtabela_tiss, PCD_TABELA_TISS)
                   and tb.u##cod_versao =
                       (select max(tb2.u##cod_versao)
                          from gp.tip_tab tb2
                         where tb2.cdn_tabela = tb.cdn_tabela);
              exception
                when no_data_found then
                  select tb.cdn_tab_gest
                    into tambproce.int_3
                    from gp.tip_tab tb
                   where tb.cdn_tabela = PCD_TABELA_TISS
                     and tb.u##cod_versao =
                         (select max(tb2.u##cod_versao)
                            from gp.tip_tab tb2
                           where tb2.cdn_tabela = tb.cdn_tabela);
              end;

              tambproce.int_4                 := 0;
              tambproce.int_5                 := 0;
              tambproce.log_2                 := 0;
              tambproce.log_3                 := 0;
              tambproce.log_4                 := 1;
              tambproce.log_5                 := 0;
              tambproce.u_char_1              := 'cdclasse: ' ||
                                                  rsv.cdclasse ||
                                                  ' cdservico: ' ||
                                                  rsv.cdservico;
              tambproce.u_char_2              := ' ';
              tambproce.u_char_3              := ' ';
              tambproce.u_date_1              := '';
              tambproce.u_date_2              := '';
              tambproce.u_date_3              := '';
              tambproce.u_dec_1               := 0;
              tambproce.u_dec_2               := 0;
              tambproce.u_dec_3               := 0;
              tambproce.u_int_1               := 0;
              tambproce.u_int_3               := 0;
              tambproce.u_log_1               := 0;
              tambproce.u_log_2               := 0;
              tambproce.u_log_3               := 0;
              tambproce.qt_max_proc_normal    := 0;
              tambproce.qt_max_utilizacao     := 0;
              tambproce.cd_grupo_esp_amb      := substr(rsv.cdservico_depara,
                                                        1,
                                                        2);
              tambproce.qt_max_proc_internado := 0;
              tambproce.qtmaxprocintercambio  := 0;
              tambproce.qt_max_proc_web       := 0;
              tambproce.tp_procedimento       := 'N';
              tambproce.num_livre_6           := 0; -- tipo de atendimento
              tambproce.num_livre_7           := 0;
              tambproce.num_livre_8           := 0;
              tambproce.num_livre_9           := 0;
              tambproce.num_livre_10          := 0;
              tambproce.log_livre_6           := 0;
              tambproce.log_livre_7           := 0;
              tambproce.log_livre_8           := 0;
              tambproce.log_livre_9           := 0;
              tambproce.log_livre_10          := 0;
              tambproce.log_11                := 0;
              tambproce.log_12                := 0;
              if (rsv.aobaixo_risco = 'S') then
                tambproce.log_12 := 1;
              end if;

              tambproce.log_13  := 0;
              tambproce.log_14  := 0;
              tambproce.log_15  := 0;
              tambproce.log_16  := 0;
              tambproce.log_17  := 0;
              tambproce.log_18  := 0;
              tambproce.log_19  := 0;
              tambproce.log_20  := 0;
              tambproce.dec_11  := 0;
              tambproce.dec_12  := 0;
              tambproce.dec_13  := 0;
              tambproce.dec_14  := 0;
              tambproce.dec_15  := 0;
              tambproce.dec_17  := 0;
              tambproce.dec_18  := 0;
              tambproce.dec_19  := 0;
              tambproce.dec_20  := 0;
              tambproce.date_11 := '';
              tambproce.date_12 := '';
              tambproce.date_13 := '';
              tambproce.date_14 := '';
              tambproce.date_15 := '';
              tambproce.date_16 := '';
              tambproce.date_17 := '';
              tambproce.date_18 := '';
              tambproce.date_19 := '';
              tambproce.date_20 := '';
              tambproce.char_11 := ' ';
              tambproce.char_12 := ' ';
              tambproce.char_13 := ' ';
              tambproce.char_14 := ' ';
              tambproce.char_15 := ' ';
              tambproce.char_16 := ' ';
              tambproce.char_17 := ' ';
              tambproce.char_18 := ' ';
              tambproce.char_19 := ' ';
              tambproce.char_20 := ' ';
              tambproce.int_11  := 1;
              tambproce.int_12  := 0;

              begin
                select tb.cdn_tab_gest
                  into tambproce.int_3
                  from gp.tip_tab tb
                 where tb.cdn_tabela =
                       nvl(rsv.cdtabela_tiss, PCD_TABELA_TISS)
                   and tb.u##cod_versao =
                       (select max(tb2.u##cod_versao)
                          from gp.tip_tab tb2
                         where tb2.cdn_tabela = tb.cdn_tabela);
              exception
                when no_data_found then
                  select tb.cdn_tab_gest
                    into tambproce.int_3
                    from gp.tip_tab tb
                   where tb.cdn_tabela = PCD_TABELA_TISS
                     and tb.u##cod_versao =
                         (select max(tb2.u##cod_versao)
                            from gp.tip_tab tb2
                           where tb2.cdn_tabela = tb.cdn_tabela);
              end;
              tambproce.int_14                 := 0; --quantidade maxima de procedimentos de baixo risco. Somente é preenchido quando o indicador de procedimento de baixo risco estiver ligado - log_12
              tambproce.int_15                 := nvl(rsv.qtpermitida,'0'); --quantidade maxima de procedimentos
              tambproce.int_16                 := nvl(rsv.qtmaxima_servico_por_guia,
                                                      999); --quantidade de procedimentos a serem solicitados a quantidade de dias
              tambproce.int_17                 := nvl(rsv.qtdias_prazo_retorno,
                                                      999); --quantidade de dias para realizacao de procedimentos
              tambproce.int_18                 := nvl(rsv.qtmaxima_diaria,
                                                      999); --quantidade de procedimentos a serem realizados duarante a quantidade de dias
              tambproce.int_19                 := nvl(rsv.qtmaxima_servico_requisitado,
                                                      999); --quantidade maxima de procedimentos por guia de solicitacao
              tambproce.int_20                 := 0;
              tambproce.des_observacao         := ' ';
              tambproce.cdprocedimentocompleto := rsv.cdservico_depara;
              tambproce.dat_inic_vigenc        := nvl(rsv.dtinicio_validade,
                                                      '01/01/1900');
              tambproce.dat_fim_vigenc         := nvl(rsv.dtfinal_validade,
                                                      '31/12/9999');
              select gp.ambproce_seq.nextval
                into tambproce.progress_recid
                from dual;

----DBMS_OUTPUT.PUT_LINE('antes de insert ambproce');

              insert into gp.ambproce values tambproce;
----DBMS_OUTPUT.PUT_LINE('depois de insert ambproce');
            end if;
          end if;
        else
          -- cadastro de insumos
          -- tipo de registro
          tpregistro := 'Insumos';

----DBMS_OUTPUT.PUT_LINE( 'Insumo' );

----DBMS_OUTPUT.PUT_LINE( rsv.cdclasse_depara || ' - ' || rsv.cdservico_depara );

          begin
            select 'S'
              into vaomigrado
              from gp.insumos i
             where i.cd_tipo_insumo = to_number(rsv.cdclasse_depara)
               and i.cd_insumo = to_number(rsv.cdservico_depara);

          exception
            when no_data_found then
              vaomigrado := 'N';
            when others then
              vaomigrado := 'S';
          end;

          begin
            select 'S'
              into vnaotem
              from producao.matmed_intercambio@unicoo_homologa umi
              where umi.cdproduto=rsv.cdservico_depara;
          exception
            when no_data_found then
              vnaotem := 'N';
            when others then
              vnaotem := 'S';
          end;

          if vaomigrado = 'N' then

            tinsumos.cd_tipo_insumo     := rsv.cdclasse_depara;
            tinsumos.cd_insumo          := rsv.cdservico_depara;
           -- tinsumos.um_insumo          := 'UN';
           if vnaotem = 'N' then
              tinsumos.um_insumo        :='UN';
           else
           select umi.un_fracao into tinsumos.um_insumo
               from producao.matmed_intercambio@unicoo_homologa umi
               where umi.cdproduto=rsv.cdservico_depara;
           end if;

/*            tinsumos.um_insumo          := (select umi.un_fracao from producao.matmed_intercambio@unicoo_homologa umi where umi.cdproduto=rsv.cdservico_depara
                                            union
                                            select um.un_fracao from producao.matmed_intercambio@unicoo_homologa um where um.cdanterior_produto=rsv.cdservico_depara);*/
            tinsumos.ds_insumo_reduz    := substr(rsv.noservico, 1, 20);
            tinsumos.u##ds_insumo       := upper(substr(rsv.noservico,
                                                        1,
                                                        60));
            tinsumos.ds_insumo          := substr(rsv.noservico, 1, 60);
            tinsumos.log_1              := 0;
            tinsumos.ds_observacao      := rsv.txobservacao;
            tinsumos.dt_atualizacao     := trunc(sysdate);
            tinsumos.cd_userid          := 'migracao';
            tinsumos.u##cd_brasindice   := ' ';
            tinsumos.cd_brasindice      := ' ';
            tinsumos.cd_anvisa_inf      := ' ';
            tinsumos.char_3             := ' ';
            tinsumos.char_4             := ' ';
--            tinsumos.char_5             := ' ';
            if vnaotem = 'N' then
               tinsumos.char_5          :=' ';
            else
            select umi.nolaboratorio into tinsumos.char_5
               from producao.matmed_intercambio@unicoo_homologa umi
               where umi.cdproduto=rsv.cdservico_depara;
            end if;
            tinsumos.lg_opme := case
                                  when rsv.cdclasse = f_parametro('CLASSOPM') then
                                   1
                                  else
                                   0
                                end;
            tinsumos.nr_fator_conversao := 1;
            tinsumos.dec_2              := 0;
            tinsumos.dec_3              := 0;
            tinsumos.dec_4              := 0;
            tinsumos.dec_5              := 0;
            tinsumos.date_1             := '';
            tinsumos.date_2             := '';
            tinsumos.date_3             := '';
            tinsumos.date_4             := '';
            tinsumos.date_5             := '';

            begin
              select tb.cdn_tab_gest
                into tinsumos.int_1
                from gp.tip_tab tb, depara_tabela_tiss dtt
               where dtt.cd_tabela_tiss = tb.cdn_tabela
                 and dtt.cd_tipo_insumo = rsv.cdclasse_depara
                 and tb.u##cod_versao =
                     (select max(u##cod_versao)
                        from gp.tip_tab tb2
                       where tb2.cdn_tabela = tb.cdn_tabela);
            exception
              when no_data_found then tinsumos.int_1 := 0;
            end;

            tinsumos.int_2                 := rsv.cdservico_depara;
            tinsumos.int_3                 := 0;
            tinsumos.int_4                 := 0;
            tinsumos.int_5                 := 0;
            tinsumos.u_char_1              := 'cdclasse: ' || rsv.cdclasse ||
                                              ' cdservico: ' || rsv.cdservico;
            tinsumos.u_char_2              := ' ';
            tinsumos.u_char_3              := ' ';
            tinsumos.u_date_1              := '';
            tinsumos.u_date_2              := '';
            tinsumos.u_date_3              := '';
            tinsumos.log_2                 := 0;
            tinsumos.log_3                 := 0;
            tinsumos.log_4                 := 0;
            tinsumos.u_int_1               := 0;
            tinsumos.u_int_2               := 0;
            tinsumos.u_int_3               := 0;
            tinsumos.u_log_1               := 0;
            tinsumos.u_log_2               := 0;
            tinsumos.u_log_3               := 0;
            tinsumos.u_dec_1               := 0;
            tinsumos.u_dec_2               := 0;
            tinsumos.u_dec_3               := 0;
            tinsumos.char_1                := substr(rsv.noservico, 1, 60);
            tinsumos.dec_1                 := 0;
            tinsumos.nm_fornecedor         := ' ';
            if vnaotem = 'N' then
               tinsumos.cd_anvisa          :=0;
            else
            select umi.cdreg_anvisa into tinsumos.cd_anvisa
                from producao.matmed_intercambio@unicoo_homologa umi
                where umi.cdproduto=rsv.cdservico_depara;
            end if;
            tinsumos.cd_anvisa             := 0;
            tinsumos.log_6                 := 0;
            tinsumos.u##cd_brasindice_tiss := ' ';
            tinsumos.cd_brasindice_tiss    := ' ';
            tinsumos.ds_sigla_um           := ' ';
            tinsumos.u##cd_insumo_origem   := upper(rsv.cdservico_depara);
            tinsumos.cd_insumo_origem      := rsv.cdservico_depara;
--            tinsumos.char_10               := 0;
            if vnaotem = 'N' then
               tinsumos.char_10            :=' ';
            else
            select umi.nrcnpj into tinsumos.char_10
               from producao.matmed_intercambio@unicoo_homologa umi
               where umi.cdproduto=rsv.cdservico_depara;
            end if;
            tinsumos.char_11               := ' ';
            tinsumos.char_12               := ' ';
            tinsumos.char_13               := ' ';
            tinsumos.char_14               := ' ';
            tinsumos.char_15               := ' ';
            tinsumos.cd_simpro             := ' ';
            tinsumos.cd_principio_ativo    := 0;
            tinsumos.cdn_fabrican          := 0;
            tinsumos.nom_imptdor           := ' ';
            tinsumos.nom_origem            := 'NACIONAL';
            tinsumos.dat_anvisa            := '31/12/9999';
            tinsumos.nom_situacao          := 'ATIVO';
            tinsumos.nom_motivo            := ' ';
            tinsumos.val_fabrican          := 0;
            tinsumos.val_max_consm         := 0;
            tinsumos.dat_inic_obrig        := ''; --
            tinsumos.cdn_classe            := 0;
            tinsumos.cdn_grupo             := 0;
            tinsumos.val_perc_icms         := 0;
            tinsumos.cdn_forma_farma       := 0;
            tinsumos.log_gener             := 0;
            tinsumos.cdn_especialid        := 0;
            tinsumos.log_16                := 0;
            tinsumos.log_17                := 0;
            tinsumos.log_18                := 0;
            tinsumos.log_19                := 0;
            tinsumos.log_20                := 0;
            tinsumos.log_21                := 1;
            tinsumos.log_22                := 0;
            tinsumos.log_23                := 0;
            tinsumos.log_24                := 0;
            tinsumos.log_25                := 0;
            tinsumos.int_16                := 0;
            tinsumos.int_17                := 0;
            tinsumos.int_18                := 0;
            tinsumos.int_19                := 0;
            tinsumos.int_20                := 0;
            tinsumos.int_21                := 0;
            tinsumos.int_22                := 0;
            tinsumos.int_23                := 0;
            tinsumos.int_24                := 0;
            tinsumos.int_25                := 0;
            tinsumos.dec_16                := 0;
            tinsumos.dec_17                := 0;
            tinsumos.dec_18                := 0;
            tinsumos.dec_19                := 0;
            tinsumos.dec_20                := 0;
            tinsumos.dec_21                := 0;
            tinsumos.dec_22                := 0;
            tinsumos.dec_23                := 0;
            tinsumos.dec_24                := 0;
            tinsumos.dec_25                := 0;
            tinsumos.char_16               := ' ';
            tinsumos.char_17               := ' ';
            tinsumos.char_18               := ' ';
            tinsumos.char_19               := ' ';
            tinsumos.char_20               := ' ';
            tinsumos.char_21               := ' ';
            tinsumos.char_22               := ' ';
            tinsumos.char_23               := ' ';
            tinsumos.char_24               := ' ';
            tinsumos.char_25               := ' ';
            tinsumos.date_16               := '';
            tinsumos.date_17               := '';
            tinsumos.date_18               := '';
            tinsumos.date_19               := '';
            tinsumos.date_20               := '';
            tinsumos.date_21               := '';
            tinsumos.date_22               := '';
            tinsumos.date_23               := '';
            tinsumos.date_24               := '';
            tinsumos.date_25               := '';
            tinsumos.dat_inic_vigenc       := nvl(rsv.dtinicio_validade,
                                                  '01/01/1900');
            tinsumos.dat_fim_vigenc        := nvl(rsv.dtfinal_validade,
                                                  '31/12/9999');
            tinsumos.desrefermaterfabrican := ' ';
            tinsumos.cod_autoriz_funcionan := ' ';
            select gp.insumos_seq.nextval
              into tinsumos.progress_recid
              from dual;

----DBMS_OUTPUT.PUT_LINE( 'antes de insert Insumos' );

            begin
              insert into gp.insumos values tinsumos;
            end;

----DBMS_OUTPUT.PUT_LINE( 'depois de insert Insumos' );

          end if;
        end if;

----DBMS_OUTPUT.PUT_LINE( 'countofrecords:' || countofrecords );

        countofrecords := countofrecords + 1;

----DBMS_OUTPUT.PUT_LINE( 'countofrecords:' || countofrecords );

        if (countofrecords >= 1000) then

--DBMS_OUTPUT.PUT_LINE( 'COMMIT!!!!!');

          commit;
          countofrecords := 0;
        end if;
      end;

    --commit;

    end loop;

    commit;

--DBMS_OUTPUT.PUT_LINE( 'fim de p_migra_procedimentos');

  end p_migra_procedimentos;

  --centralizar ajustes a serem realizados para Propostas e Beneficiarios apos
  --concluir cargas PROGRESS
  procedure p_pos_carga_proposta_e_benef is
  begin
    P_ATUALIZAR_HISTABPRECO;
    P_CONDICAO_SAUDE;
    p_migra_carteira;
    p_associa_agrupador_contrato ('N', --AOSIMULAR
                                  null, --NRREGISTRO: null para todos
                                  null  --NRCONTRATO: null para todos
                                  );
    P_GERA_DEB_PROD;
    P_MIGRA_MENSAGEM_PRODMED;
    P_MIGRA_OCORR_TERMO_BENEF;
    p_relaciona_rede_atendimento;
    commit;
  end p_pos_carga_proposta_e_benef;

  --Migração das Carteiras - Usuario_identificacao
  procedure p_migra_carteira is
    vcd_modalidade number;
    vcd_plano      number;
    vcd_tipo_plano number;
    vnr_proposta   number;
    vcd_usuario    number;
    vsmigra        varchar2(1);
    aojaexiste     varchar2(1);

  begin
    --CD_UNIMED, CD_CARTEIRA_INTEIRA, NR_CARTEIRA, PROGRESS_RECID
/*    delete from car_ide c
     where exists
     (select 1
              from gp.usuario u, import_bnfciar ib, usuario_identificacao ui
             where ib.cd_carteira_antiga = u.cd_carteira_antiga
               and ui.nrsequencial_usuario = ib.num_seqcial_bnfciar
               and u.cd_unimed = c.cd_unimed
               and ib.cd_carteira_antiga = c.cd_carteira_antiga);
    begin
      update car_ide c
         set c.nr_carteira      = 1,
             c.cd_sit_carteira  = 90,
             c.nr_impressao     = 1,
             c.ds_observacao##1 = 'GERACAO AUTOMATICA. USUARIO EXCLUIDO MIGRADO SEM CARTEIRA NO UNICOO.';
    exception
      when others then null;
    end;
*/
    for usu_ident in (select substr(ui.cdusuario, 1, 3) cdunimed,
                             substr(ui.cdusuario, 4, 12) cdusuario,
                             ui.nrdigitoct,
                             ui.nrsequencial_usuario,
                             ui.nrvia_cartao,
                             nvl(cec.dtpedido, --Data de Emissão do controle_emiss_cart
                                 nvl((select max(dtvalidade) + 1 --Quando a carteira não foi emitida no Unicoo,
                                       from usuario_identificacao uii --ou seja, veio migrada dos Siameds, a emissao
                                      where uii.cdusuario = ui.cdusuario --será o dia seguinte da validade da via
                                        and uii.nrvia_cartao <
                                            ui.nrvia_cartao --anterior
                                        and uii.dtvalidade < ui.dtvalidade),
                                     u.dtinicio)) dtemissao, --Qdo via 1 de cart migrada, emiss será incl do usu
                             ui.dtvalidade,
                             ui.dtcancelamento,
                             ui.cdstatus_cartao,
                             tc.txdescricao,
                             decode(ui.cdstatus_cartao,
                                    '00',
                                    '01', --Via Ativa
                                    '90') status_totvs --Cancelada
                        from usuario_identificacao ui,
                             usuarios_emiss_cart   uec,
                             controle_emiss_cart   cec,
                             usuario               u,
                             tabela_de_codigo      tc
                       where uec.nrsequencial_usuario(+) =
                             ui.nrsequencial_usuario
                         and uec.nrvia_cartao(+) = ui.nrvia_cartao
                         and cec.nremissao(+) = uec.nremissao
                         and u.nrsequencial_usuario =
                             ui.nrsequencial_usuario
                         and tc.cdvalor(+) = nvl(ui.cdstatus_cartao, 99) --qdo o status estiver nulo
                         and tc.cdidentificador(+) = 'CDSTATUS_CARTAO'
                         and (cec.cdsituacao_emissao <> 'C' or
                              cec.cdsituacao_emissao is null)
                         and (cec.aoatualizdados = '1' or
                              cec.aoatualizdados is null)

                      --                          and ui.cdusuario='023022500045700'
                       order by ui.cdusuario, ui.nrvia_cartao) loop

      --Localiza a estrutura da tabela no de/para de planos
      begin
        select ta.cd_modalidade, ta.cd_plano, ta.cd_tipo_plano
          into vcd_modalidade, vcd_plano, vcd_tipo_plano
          from usuario               us,
               temp_depara_detalhado td,
               temp_depara_agrupado  ta
         where us.nrsequencial_usuario = usu_ident.nrsequencial_usuario --join com o usuario do loop
           and us.cdcontrato = td.cdcontrato --join plano detalhado
           and td.cdcontrato_agr = ta.cdcontrato --join plano agrupado
           and rownum = 1;
      exception
        when no_data_found then
          null;
      end;

      --Localizar o código da proposta e do beneficiario
      vsmigra := 'S';
      begin
        select u.nr_proposta, u.cd_usuario
          into vnr_proposta, vcd_usuario
          from import_bnfciar ib, gp.usuario u
         where ib.num_seqcial_bnfciar = usu_ident.nrsequencial_usuario
           and u.cd_carteira_antiga = ib.cd_carteira_antiga
           and u.cd_modalidade = vcd_modalidade
           and (ib.cod_livre_2 <> 'A' or ib.cod_livre_2 is null)
           and rownum = 1;
      exception
        when no_data_found then
          vsmigra := 'N';
      end;

--CD_UNIMED, CD_MODALIDADE, NR_TER_ADESAO, CD_USUARIO, NR_CARTEIRA          CAR_IDE##CAR_IDE1
--CD_UNIMED, CD_MODALIDADE, NR_TER_ADESAO, CD_USUARIO, NR_CARTEIRA DESC     CAR_IDE##CAR_IDE6

      if vsmigra = 'S' then
        begin
          --se ja existir historico da CAR_IDE identico, nao alterar.
          --caso contrario, apagar toda a CAR_IDE desse beneficiario para recriar.
          select 'S' into aojaexiste
            from gp.car_ide c
           where c.cd_unimed = usu_ident.cdunimed
             and c.cd_modalidade = vcd_modalidade
             and c.nr_ter_adesao = vnr_proposta
             and c.cd_usuario = vcd_usuario
             and c.nr_carteira = usu_ident.nrvia_cartao
             and c.dt_validade = usu_ident.dtvalidade
             and c.dt_emissao = usu_ident.dtemissao
             and c.cd_sit_carteira = usu_ident.status_totvs
             and c.dt_cancelamento = usu_ident.dtcancelamento
             and c.cd_carteira_antiga = usu_ident.cdusuario || usu_ident.nrdigitoct;

        exception
          when no_data_found then
            aojaexiste := 'N';

            delete from car_ide c
             where c.cd_unimed = usu_ident.cdunimed
               and c.cd_modalidade = vcd_modalidade
               and c.nr_ter_adesao = vnr_proposta
               and c.cd_usuario = vcd_usuario
               and c.nr_carteira =usu_ident.nrvia_cartao;

            begin
              insert into car_ide
                (cd_unimed,
                 cd_modalidade,
                 nr_ter_adesao,
                 cd_usuario,
                 nr_carteira,
                 dv_carteira,
                 dt_validade,
                 dt_emissao,
                 lg_devolucao,
                 cd_sit_carteira,
                 ds_observacao##1,
                 ds_observacao##2,
                 ds_observacao##3,
                 des_observacao,
                 dt_atualizacao,
                 cd_userid,
                 cd_carteira_antiga,
                 nr_impressao,
                 dt_cancelamento,
                 cd_carteira_inteira,
                 char_1,
                 char_2,
                 char_3##1,
                 char_3##2,
                 char_4,
                 char_5,
                 progress_recid)
              values
                (usu_ident.cdunimed,
                 vcd_modalidade,
                 vnr_proposta,
                 vcd_usuario,
                 usu_ident.nrvia_cartao,
                 usu_ident.nrdigitoct,
                 usu_ident.dtvalidade,
                 usu_ident.dtemissao,
                 0, --lg_devolucao
                 usu_ident.status_totvs,
                 usu_ident.txdescricao, --ds_observacao##1
                 ' ', --ds_observacao##2
                 ' ', --ds_observacao##3
                 ' ', --des_observacao
                 sysdate,
                 'migracao',
                 usu_ident.cdusuario || usu_ident.nrdigitoct, --cd_carteira_antiga
                 1, --nr_impressao
                 usu_ident.dtcancelamento,
                 usu_ident.cdusuario || usu_ident.nrdigitoct, --cd_carteira_inteira
                 ' ', --char_1
                 ' ', --char_2
                 ' ', --char_3##1
                 ' ', --char_3##1
                 ' ', --char_4
                 ' ', --char_5
                 gp.car_ide_seq.nextval);
            exception
              when others then null;
            end;
        end;
      end if;
    end loop;
  end p_migra_carteira;

  --Migração das Mensagens de Advertencia do Contrato, família e usuário
procedure p_migra_mensagem_prodmed is
    vtx_advertencia long;
    vnrregistro     number := 0;
    vnrcontrato     varchar2(4) := '    ';
    vnrfamilia      number := 0;
    vtpusuario      number := 0;
    vnr_seq         number := 0;
    vdt_inicio      date;
    vtx_titulo      varchar2(50);

  begin
    delete from gp.itemplan;
    delete from gp.desplaus;
    --resetar_sequence('gp.itemplan_seq','gp.itemplan','progress_recid');
    --resetar_sequence('gp.desplaus_seq','gp.desplaus','progress_recid');
    for mensadv in (select m.nrregistro,
                           m.nrcontrato,
                           f.nrfamilia,
                           u.tpusuario,
                           u.nrsequencial_usuario,
                           m.dtvalidade_ini,
                           nvl(m.dtvalidade_fim, '31/12/9999') dtvalidade_fim,
                           m.txmensagem
                      from mensagem_usuario_prodmed m, familia f, usuario u
                     where f.nrregistro(+) = m.nrregistro
                       and f.nrcontrato(+) = m.nrcontrato
                       and f.nrfamilia(+) = m.nrfamilia
                       and u.nrregistro(+) = m.nrregistro
                       and u.nrcontrato(+) = m.nrcontrato
                       and u.nrfamilia(+) = m.nrfamilia
                       and (u.tpusuario = m.tpusuario or m.tpusuario is null)
                       and m.aoexcluido = 'N'
                     order by m.nrregistro,
                              m.nrcontrato,
                              m.nrfamilia,
                              m.tpusuario,
                              m.dtvalidade_ini) loop

      --Zera o seq quando é um novo contrato ou família ou usuário
      if (mensadv.nrregistro = vnrregistro and
         mensadv.nrcontrato = vnrcontrato and
         mensadv.nrfamilia = vnrfamilia and mensadv.tpusuario = vtpusuario) or --o mesmo usuario
         (mensadv.nrregistro = vnrregistro and
         mensadv.nrcontrato = vnrcontrato and
         mensadv.nrfamilia = vnrfamilia and mensadv.tpusuario is null and
         vtpusuario is null) or --ou a mesma familia
         (mensadv.nrregistro = vnrregistro and
         mensadv.nrcontrato = vnrcontrato and mensadv.nrfamilia is null and
         vnrfamilia is null and mensadv.tpusuario is null and
         vtpusuario is null) then
        --ou o mesmo contrato
        vnr_seq := vnr_seq + 1;
      else
        vnr_seq     := 1;
        vnrregistro := mensadv.nrregistro;
        vnrcontrato := mensadv.nrcontrato;
        vnrfamilia  := mensadv.nrfamilia;
        vtpusuario  := mensadv.tpusuario;
      end if;

      vtx_advertencia := mensadv.txmensagem;

      --Tenta criar o titulo da mensagem. Se nao encontrar um texto específico utilizará os 50 primeiro caracteres
      if upper(mensadv.txmensagem) like '%' || '[NIP]' || '%' then
         vtx_titulo   := '[NIP]';
      else
         if upper(mensadv.txmensagem) like '%' || 'TUTELA JUDICIAL' || '%' then
            vtx_titulo   := 'TUTELA JUDICIAL';
         else
            if upper(mensadv.txmensagem) like '%' || 'LIMINAR JUDICIAL' || '%' then
               vtx_titulo   := 'LIMINAR JUDICIAL';
            else
               if upper(mensadv.txmensagem) like '%' || 'TUTELA ANTECIPADA' || '%' then
                  vtx_titulo   := 'TUTELA ANTECIPADA';
               else
                  if upper(mensadv.txmensagem) like '%' || 'SENTENÇA' || '%' then
                     vtx_titulo   := 'SENTENÇA';
                  else
                     if upper(mensadv.txmensagem) like '%' || 'ANTECIPAÇÃO DOS EFEITOS DA TUTELA' || '%' then
                        vtx_titulo   := 'ANTECIPAÇÃO DOS EFEITOS DA TUTELA';
                     else
                        if upper(mensadv.txmensagem) like '%' || 'CITAÇÃO' || '%' then
                           vtx_titulo   := 'CITAÇÃO';
                        else
                           if mensadv.nrfamilia is null then
                              vtx_titulo   := 'ADVERTENCIA PROPOSTA';
                           else
                              vtx_titulo   := 'ADVERTENCIA USUARIO';
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;

      --Inserir a advertencia no contrato/proposta
      if mensadv.nrfamilia is null then

        --Se a data de inicio da mensagem estiver em branco
        --ira procurar a data de inicio do contrato
        if mensadv.dtvalidade_ini is null then
          begin
            select min(cp.dtiniciocontrato)
              into vdt_inicio
              from contrato_da_pessoa cp
             where cp.nrregistro = mensadv.nrregistro
               and cp.nrcontrato = mensadv.nrcontrato;
          exception
            when no_data_found then
              vdt_inicio := '01/01/2017';
          end;
        else
          vdt_inicio := mensadv.dtvalidade_ini;
        end if;

        --Identificar a modalidade e o contrato/proposta
        for prop_contr in (select cd_modalidade, num_livre_10
                             from import_propost ip
                            where ip.num_livre_2 = mensadv.nrregistro
                              and lpad(ip.num_livre_3,4,'0') = mensadv.nrcontrato) loop
          insert into itemplan
            (cd_modalidade,
             nr_ter_adesao,
             char_1, -- TITULO DA MENSAGEM
             char_2, -- modulo -> CADASTRO, ATENDIMENTO ou AMBOS
             date_5,
             dt_atualizacao,
             cd_userid,
             cdd_seq,
             descricao,
             dat_valid_inicial,
             dat_valid_final,
             progress_recid)
          values
            (prop_contr.cd_modalidade, --cd_modalidade
             prop_contr.num_livre_10, --nr_ter_adesao
             vtx_titulo, -- substr(mensadv.txmensagem,1,50), --char_1 - titulo da mensagem
             'AMBOS', --char_2 - modulo (CADASTRO,ATENDIMENTO ou AMBOS)
             sysdate, --date_5 obsoleto
             sysdate, --dt_atualizacao
             'migracao', --cd_userid
             vnr_seq, --cdd_seq
             vtx_advertencia, --descricao
             vdt_inicio, --dat_valid_inicial
             mensadv.dtvalidade_fim, --dat_valid_final
             gp.itemplan_seq.nextval); --progress_recid

        end loop; --loop das propostas - familia is null
      else
        --Se a data de inicio da mensagem estiver em branco
        --ira procurar a data de inicio do contrato
        if mensadv.dtvalidade_ini is null then
          begin
            select u.dtinicio
              into vdt_inicio
              from usuario u
             where u.nrsequencial_usuario = mensadv.nrsequencial_usuario;
          exception
            when no_data_found then
              vdt_inicio := '01/01/2017';
          end;
        else
          vdt_inicio := mensadv.dtvalidade_ini;
        end if;

        --Inserir a advertencia do usuario ou dos usuarios da familia
        for prop_usu in (select u.cd_modalidade, u.nr_proposta, u.cd_usuario
                           from import_bnfciar ip, gp.usuario u
                          where ip.cd_carteira_antiga = u.cd_carteira_antiga
                            and ip.num_seqcial_bnfciar = mensadv.nrsequencial_usuario) loop
          insert into desplaus
            (cd_modalidade,
             nr_ter_adesao,
             cd_usuario,
             char_1, --titulo da mensagem
             char_2, --modulo (CADASTRO,ATENDIMENTO ou AMBOS)
             date_5,
             dt_atualizacao,
             cd_userid,
             cdd_seq,
             descricao,
             dat_valid_inicial,
             dat_valid_final,
             progress_recid)
          values
            (prop_usu.cd_modalidade, --cd_modalidade
             prop_usu.nr_proposta, --nr_ter_adesao
             prop_usu.cd_usuario,
             vtx_titulo, --substr(mensadv.txmensagem,1,50), --char_1 - titulo da mensagem
             'AMBOS', --char_2 - modulo (CADASTRO,ATENDIMENTO ou AMBOS)
             sysdate, --date_5 obsoleto
             sysdate, --dt_atualizacao
             'migracao', --cd_userid
             vnr_seq, --cdd_seq
             nvl(vtx_advertencia,' '), --descricao
             vdt_inicio, --dat_valid_inicial
             mensadv.dtvalidade_fim, --dat_valid_final
             gp.desplaus_seq.nextval); --progress_recid

        end loop; --loop das propostas - familia is null

      end if; --if familia is null
    end loop; --loop principal - mensadv
  end p_migra_mensagem_prodmed;

  procedure P_MIGRA_OCORR_TERMO_BENEF is
    vdspasta_contratos varchar2(100);
    vdspasta_beneficiarios varchar2(100);
  begin
    begin
      select vlparametro into vdspasta_contratos from parametro p where p.cdparametro = 'NODIROCO';
    exception
      when others then
        raise_application_error(-20001,
                                'Parametro NODIROCO (diretorio ocorrencias contratos do Unicoo) nao encontrado. ' || sqlerrm);
    end;

    begin
      select vlparametro into vdspasta_beneficiarios from parametro p where p.cdparametro = 'NODIRUSU';
    exception
      when others then
        raise_application_error(-20001,
                                'Parametro NODIRUSU (diretorio ocorrencias beneficiarios do Unicoo) nao encontrado. ' || sqlerrm);
    end;

    if vdspasta_contratos is not null
    then
      if  substr(vdspasta_contratos,length(vdspasta_contratos),1) <> '/'
      and substr(vdspasta_contratos,length(vdspasta_contratos),1) <> '\'
      then
        vdspasta_contratos := vdspasta_contratos || '/';
      end if;
    else
      vdspasta_contratos := null;
    end if;

    if vdspasta_beneficiarios is not null
    then
      if  substr(vdspasta_beneficiarios,length(vdspasta_beneficiarios),1) <> '/'
      and substr(vdspasta_beneficiarios,length(vdspasta_beneficiarios),1) <> '\'
      then
        vdspasta_beneficiarios := vdspasta_beneficiarios || '/';
      end if;
    else
      vdspasta_beneficiarios := null;
    end if;

    /*
      for x in (select ab.progress_recid recid_ab, a.progress_recid recid_a, d.progress_recid recid_d
              from gp.anexo_bnfciar ab, gp.anexo a, gp.desplaus d
             where a.cdd_anexo = ab.cdd_anexo
               and d.cd_modalidade = ab.cdn_modalid
               and d.nr_ter_adesao = ab.num_propost
               and d.cd_usuario = ab.cdn_usuar
               and d.cdd_seq = ab.num_livre_1) loop

               delete from gp.anexo_bnfciar ab where ab.progress_recid = x.recid_ab;
               delete from gp.anexo a where a.progress_recid = x.recid_a;
               delete from gp.desplaus d where d.progress_recid = x.recid_d;
  end loop;

  for x in (
            --eliminar anexos de propostas com seus itemplan--89021
            select ap.progress_recid recid_ap, a.progress_recid recid_a, i.progress_recid recid_i
              from gp.anexo_propost ap, gp.anexo a, gp.itemplan i
             where a.cdd_anexo = ap.cdd_anexo
               and i.cd_modalidade = ap.cdn_modalid
               and i.nr_ter_adesao = ap.num_propost
               and i.cdd_seq = ap.num_livre_1) loop

               delete from gp.anexo_propost ap where ap.progress_recid = x.recid_ap;
               delete from gp.anexo a where a.progress_recid = x.recid_a;
               delete from gp.itemplan i where i.progress_recid = x.recid_i;
  end loop;*/

    p_migra_ocorrencias_termo(vdspasta_contratos);
    p_migra_ocorrencias_benef(vdspasta_beneficiarios);
  end P_MIGRA_OCORR_TERMO_BENEF;

  --Migração das Ocorrências dos Beneficiarios do Unicoo.
  --  Carregar DESPLAUS com HISTORICO_COMPL_USUARIO.
  --  Se tiver anexo, criar também ANEXO e ANEXO_BNFCIAR, mas sem fazer upload do arquivo.
  --  Na sequencia sera executado um processo Progress para fazer upload do Anexo, e gravar na tabela ANEXO.
  --  Obs: no Unicoo o anexo fica em pasta de rede; no TOTVS eh parametrizavel para ficar em pasta de rede
  --       ou em campo BLOB da tabela ANEXO (Manutenção Associativa Processo x Anexo).
  procedure p_migra_ocorrencias_benef(pdspasta_anexos varchar) is
    vtx_advertencia long;
    vnr_seq         number := 0;

  begin
    for ocorrencia in (select b.cd_carteira_antiga,
                              b.cd_modalidade,
                              b.nr_ter_adesao,
                              b.cd_usuario,
                              m.dtocorrencia dtvalidade_ini,
                              m.dtocorrencia dtvalidade_fim, --nvl(m.dtvalidade_fim, '31/12/9999') dtvalidade_fim,
                              m.txocorrencia,
                              m.nodocumento,
                              m.nooperador,
                              m.dtocorrencia,
                              m.nrsequencial_historico,
                              m.nrsequencial_usuario,
                              m.aoliminar
                      from HISTORICO_COMPL_USUARIO m, usuario u, gp.usuario b, import_bnfciar ib
                     where u.nrsequencial_usuario = m.nrsequencial_usuario
                       and ib.cd_carteira_antiga = b.cd_carteira_antiga
                       and ib.num_seqcial_bnfciar = m.nrsequencial_usuario
                       and not exists(
                           select 1 from desplaus d
                            where d.cd_modalidade = b.cd_modalidade
                              and d.nr_ter_adesao = b.nr_ter_adesao
                              and d.cd_usuario    = b.cd_usuario
                              and d.char_3 = m.nrsequencial_historico || '-' ||
                                             m.nrsequencial_usuario   || '-' ||
                                             m.aoliminar)
                       ) loop

          --buscar proxima sequencia
          begin
            select max(d.cdd_seq) + 1 into vnr_seq
            from desplaus d
            where d.cd_modalidade = ocorrencia.cd_modalidade
              and d.nr_ter_adesao = ocorrencia.nr_ter_adesao
              and d.cd_usuario    = ocorrencia.cd_usuario;
          exception
            when others then vnr_seq := 1;
          end;
          if vnr_seq is null then
             vnr_seq := 1;
          end if;

          vtx_advertencia := ocorrencia.txocorrencia;

          insert into desplaus
            (cd_modalidade,
             nr_ter_adesao,
             cd_usuario,
             char_1, --titulo da mensagem
             char_2, --modulo (CADASTRO,ATENDIMENTO ou AMBOS)
             char_3, -- indicador de que foi migrado a partir de HISTORICO_COMPL_USUARIO
             date_5,
             dt_atualizacao,
             cd_userid,
             cdd_seq,
             descricao,
             dat_valid_inicial,
             dat_valid_final,
             progress_recid)
          values
            (ocorrencia.cd_modalidade, --cd_modalidade
             ocorrencia.nr_ter_adesao, --nr_ter_adesao
             ocorrencia.cd_usuario,
             'HISTORICO DE OCORRENCIA',--substr(ocorrencia.txocorrencia,1,50), --char_1 - titulo da mensagem
             'CADASTRO', --'decode(nvl(ocorrencia.nodocumento, ' '),' ','CADASTRO','AMBOS'), --char_2 - modulo (CADASTRO,ATENDIMENTO ou AMBOS)
             ocorrencia.nrsequencial_historico || '-' ||
             ocorrencia.nrsequencial_usuario   || '-' ||
             ocorrencia.aoliminar, -- indicador de que foi migrado a partir de HISTORICO_COMPL_USUARIO
             sysdate, --date_5 obsoleto
             ocorrencia.dtocorrencia, --dt_atualizacao
             ocorrencia.nooperador, --cd_userid
             vnr_seq, --cdd_seq
             nvl(vtx_advertencia,' '), --descricao
             ocorrencia.dtvalidade_ini, --dat_valid_inicial
             ocorrencia.dtvalidade_fim, --dat_valid_final
             gp.desplaus_seq.nextval); --progress_recid

          if nvl(ocorrencia.nodocumento, ' ') <> ' ' then
            --CRIA ANEXO SEM O UPLOAD DO ARQUIVO. SERA AJUSTADO EM PROCESSO PROGRESS POSTERIOR (SE USAR BLOB).
            --SE O TRATAMENTO FOR POR PASTA DE REDE, JA GRAVA COD_LIVRE_2 COM O CAMINHO COMPLETO.
            insert into gp.anexo(nom_anexo,
                              cdd_anexo,
                              dat_ult_atualiz,
                              blb_anexo,
                              cdn_tip_anexo,
                              cod_livre_2,--caminho completo do anexo, quando gravado em pasta de rede
                              cod_livre_1,
                              cod_livre_3,
                              cod_livre_4,
                              cod_livre_5,
                              num_livre_1,
                              num_livre_2, --1-beneficiario; 2-contrato
                              num_livre_3, --1-blob; 2-arquivo na pasta
                              num_livre_4,
                              num_livre_5,
                              val_livre_1,
                              val_livre_2,
                              val_livre_3,
                              val_livre_4,
                              val_livre_5,
                              progress_recid)
                      values (ocorrencia.nodocumento,
                              gp.seq_anexo.nextval,
                              trunc(ocorrencia.dtocorrencia),
                              UTL_RAW.cast_to_raw(' '), -- quando gravava NULL causava erro na tela do CONTRATO e BENEFICIARIO. CONTEUDO CORRETO SERA CARREGADO EM PROCESSO PROGRESS POSTERIOR
                              PTIPO_ANEXO_BENEF,
                              decode(pdspasta_anexos,null,ocorrencia.nodocumento, --cod_livre_2
                                     pdspasta_anexos || ocorrencia.nodocumento),
                              ' ',
                              ' ',
                              ' ',
                              ' ',
                              0,
                              1, --NUM_LIVRE_2: 1-beneficiario; 2-contrato
                              2, --NUM_LIVRE_3: 1-blob; 2-arquivo na pasta
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              gp.anexo_seq.nextval);

            insert into gp.anexo_bnfciar(cdn_modalid,
                                         num_propost,
                                         cdn_usuar,
                                         des_dir_arq, --aparentemente não é usado pelo produto
                                         num_livre_1, --join com desplaus.cdd_seq
                                         cdd_anexo,   --join com anexo.cdd_anexo
                                         u##nom_anexo,--aparentemente não é usado pelo produto
                                         nom_anexo,   --aparentemente não é usado pelo produto
                                         dat_ult_atualiz,
                                         hra_ult_atualiz,
                                         cod_usuar_ult_atualiz,
                                         progress_recid)
            values(ocorrencia.cd_modalidade,
                   ocorrencia.nr_ter_adesao,
                   ocorrencia.cd_usuario,
                   null, -- des_dir_arq
                   vnr_seq, -- join com desplaus.cdd_seq
                   gp.seq_anexo.currval,
                   upper(ocorrencia.nodocumento),
                   ocorrencia.nodocumento,
                   trunc(ocorrencia.dtocorrencia),
                   to_char(ocorrencia.dtocorrencia, 'HH24:MI:SS'),
                   ocorrencia.nooperador,
                   gp.anexo_bnfciar_seq.nextval);
          end if;
    end loop;
  end p_migra_ocorrencias_benef;

  --Migração das Ocorrências dos Termos de Adesao do Unicoo.
  --  Carregar ITEMPLAN com HISTORICO_CONTR_PESSOA.
  --  Se tiver anexo, criar também ANEXO e ANEXO_PROPOST, mas sem fazer upload do arquivo.
  --  Na sequencia sera executado um processo Progress para fazer upload do Anexo, e gravar na tabela ANEXO.
  --  Obs: no Unicoo o anexo fica em pasta de rede; no TOTVS eh parametrizavel para ficar em pasta de rede
  --       ou em campo BLOB da tabela ANEXO (Manutenção Associativa Processo x Anexo).
  procedure p_migra_ocorrencias_termo(pdspasta_anexos varchar) is
    vtx_advertencia long;
    vnr_seq         number := 0;

  begin
    for ocorrencia in (select ip.cd_modalidade,
                              ip.num_livre_10 nr_ter_adesao, --nr_proposta
                              m.dtocorrencia dtvalidade_ini,
                              m.dtocorrencia dtvalidade_fim, --nvl(m.dtvalidade_fim, '31/12/9999') dtvalidade_fim,
                              m.txocorrencia,
                              m.nodocumento,
                              m.nooperador,
                              m.dtocorrencia,
                              m.nrsequencial_historico,
                              m.nrregistro,
                              m.nrcontrato
                      from HISTORICO_CONTR_PESSOA m, import_propost ip
                     where ip.num_livre_2 = m.nrregistro
                       and lpad(ip.num_livre_3,4,'0') = m.nrcontrato
                       and not exists(
                           select 1 from itemplan i
                            where i.cd_modalidade = ip.cd_modalidade
                              and i.nr_ter_adesao = ip.num_livre_10
                              and i.char_3 = m.nrsequencial_historico || '-' ||
                                             m.nrregistro             || '-' ||
                                             m.nrcontrato)) loop

          --buscar proxima sequencia
          begin
            select max(i.cdd_seq) + 1 into vnr_seq
            from itemplan i
            where i.cd_modalidade = ocorrencia.cd_modalidade
              and i.nr_ter_adesao = ocorrencia.nr_ter_adesao;
          exception
            when others then vnr_seq := 1;
          end;
          if vnr_seq is null then
             vnr_seq := 1;
          end if;

          vtx_advertencia := ocorrencia.txocorrencia;

          insert into itemplan
            (cd_modalidade,
             nr_ter_adesao,
             char_1, --titulo da mensagem
             char_2, --modulo (CADASTRO,ATENDIMENTO ou AMBOS)
             char_3, -- indicador de que foi migrado a partir de HISTORICO_COMPL_USUARIO
             date_5,
             dt_atualizacao,
             cd_userid,
             cdd_seq,
             descricao,
             dat_valid_inicial,
             dat_valid_final,
             progress_recid)
          values
            (ocorrencia.cd_modalidade, --cd_modalidade
             ocorrencia.nr_ter_adesao, --nr_ter_adesao
             'HISTORICO DE OCORRENCIA', --substr(ocorrencia.txocorrencia,1,50), --char_1 - titulo da mensagem
             'CADASTRO', --decode(nvl(ocorrencia.nodocumento, ' '),' ','CADASTRO','AMBOS'), --char_2 - modulo (CADASTRO,ATENDIMENTO ou AMBOS)
             ocorrencia.nrsequencial_historico || '-' ||
             ocorrencia.nrregistro             || '-' ||
             ocorrencia.nrcontrato, -- indicador de que foi migrado a partir de HISTORICO_CONTR_PESSOA
             sysdate, --date_5 obsoleto
             ocorrencia.dtocorrencia, --dt_atualizacao
             ocorrencia.nooperador, --cd_userid
             vnr_seq, --cdd_seq
             vtx_advertencia, --descricao
             ocorrencia.dtvalidade_ini, --dat_valid_inicial
             ocorrencia.dtvalidade_fim, --dat_valid_final
             gp.itemplan_seq.nextval); --progress_recid

          if nvl(ocorrencia.nodocumento, ' ') <> ' ' then
            --CRIA ANEXO SEM O UPLOAD DO ARQUIVO. SERA AJUSTADO EM PROCESSO PROGRESS POSTERIOR (SE USAR BLOB).
            --SE O TRATAMENTO FOR POR PASTA DE REDE, JA GRAVA COD_LIVRE_2 COM O CAMINHO COMPLETO.
            insert into anexo(nom_anexo,
                              cdd_anexo,
                              dat_ult_atualiz,
                              blb_anexo,
                              cdn_tip_anexo,
                              cod_livre_2, -- caminho completo do anexo quando tratado em pasta de rede
                              num_livre_2, --1-beneficiario; 2-contrato
                              num_livre_3, --1-blob; 2-arquivo na pasta
                              progress_recid)
                      values (ocorrencia.nodocumento,
                              gp.seq_anexo.nextval,
                              trunc(ocorrencia.dtocorrencia),
                              UTL_RAW.cast_to_raw(' '), -- quando gravava NULL causava erro na tela do CONTRATO e BENEFICIARIO. CONTEUDO CORRETO SERA CARREGADO EM PROCESSO PROGRESS POSTERIOR
                              PTIPO_ANEXO_CONTRATO,
                              decode(pdspasta_anexos,null,ocorrencia.nodocumento,
                                     pdspasta_anexos || ocorrencia.nodocumento),
                              2, --NUM_LIVRE_2: 1-beneficiario; 2-contrato
                              2, --NUM_LIVRE_3: 1-blob; 2-arquivo na pasta
                              gp.anexo_seq.nextval);

            insert into gp.anexo_propost(cdn_modalid,
                                         num_propost,
                                         num_livre_1, --join com itemplan.cdd_seq
                                         cdd_anexo,   --join com anexo.cdd_anexo
                                         progress_recid)
            values(ocorrencia.cd_modalidade,
                   ocorrencia.nr_ter_adesao,
                   vnr_seq, -- join com desplaus.cdd_seq
                   gp.seq_anexo.currval,
                   gp.anexo_propost_seq.nextval);
          end if;
    end loop;
  end p_migra_ocorrencias_termo;

  --Migração das Tabelas de Fator Moderador como Agrupadores e a
  --Associativa das mesmas com os contratos
  --O codigo de Fator Moderador do Unicoo sera criado como Agrupador no TOTVS, respeitando DEPARA

  --Detalhes de ASSOC_PROPOST_AGRUP:
  --  num_livre_5 --NRREGISTRO DO CONTRATO ORIGINAL DO UNICOO
  --  cod_livre_5 --NRCONTRATO DO CONTRATO ORIGINAL DO UNICOO
  --  num_livre_6 --NRFAMILIA (PREENCHIDO QUANDO MIGRA SEM LOTACAO
  --  num_livre_3 --MODALIDADE ANTERIOR QUANDO OCORRE REPROCESSAMENTO DA BASE E AJUSTE DE RELACIONAMENTOS(assoc_regras_partic_contratos)
  --  num_livre_4 --PROPOSTA ANTERIOR QUANDO OCORRE REPROCESSAMENTO DA BASE E AJUSTE DE RELACIONAMENTOS(assoc_regras_partic_contratos)

  --Detalhes de REGRA_BNFCIAR_FATURAM:
  --  num_livre_5 --NRREGISTRO DO CONTRATO ORIGINAL DO UNICOO
  --  cod_livre_5 --NRCONTRATO DO CONTRATO ORIGINAL DO UNICOO
  --  num_livre_6 --NRFAMILIA (PREENCHIDO QUANDO MIGRA SEM LOTACAO
  --  num_livre_3 --MODALIDADE ANTERIOR QUANDO OCORRE REPROCESSAMENTO DA BASE E AJUSTE DE RELACIONAMENTOS(assoc_regras_partic_contratos)
  --  num_livre_4 --PROPOSTA ANTERIOR QUANDO OCORRE REPROCESSAMENTO DA BASE E AJUSTE DE RELACIONAMENTOS(assoc_regras_partic_contratos)
/*procedure p_migra_fator_moderador is
  vnseq                       number := 0;
  vnseq_apa                   number := 0;
  vnr_proposta                number := 0;
  vnrperiodo_proximo_reajuste number := 0;
  aojaexiste                  varchar2(1);

  --ATIVAR O INDICADOR ABAIXO QUANDO DESEJAR SIMULAR OS RESULTADOS SEM ALTERAR OS DADOS
  aosimular varchar2(1) := 'S'; --S/N

begin
  dbms_output.enable(null);

  --Inserindo os Agrupadores e a primeira regra de cada
  for fm in (select f.cdfator_moderador,
                    f.nofator_moderador,
                    nvl(dp.cdvalor_externo,f.cdfator_moderador) cdvalor_externo,--dp.cdvalor_externo,
                    -- ocorreu erro pois foram encontradas datas com ano menor que 1900.
                    -- alterado para garantir data minima 01/01/1900 - Alex Boeira e Marcelo Carvalho 19/01/2017
                    (case
                      when nvl((select min(dtinicio_vigencia)
                                 from contrato_coparticipacao cc
                                where cc.cdfator_moderador =
                                      f.cdfator_moderador),
                               '01/01/1900') < '01/01/1900' then
                       '01/01/1900'
                      else
                       to_char(nvl((select min(dtinicio_vigencia)
                                     from contrato_coparticipacao cc
                                    where cc.cdfator_moderador =
                                          f.cdfator_moderador),
                                   '01/01/1900'))
                    end) dat_inic_vigenc,

                    nvl((select max(nvl(cc.dtfinal_vigencia, '31/12/9999'))
                          from contrato_coparticipacao cc
                         where cc.cdfator_moderador = f.cdfator_moderador),
                        '31/12/9999') dat_fim_vigenc
               from fator_moderador f,
                    (select re.cdvalor_interno, re.cdvalor_externo
                       from mig_tab_conversao_exp re, mig_tab_conversao r
                      where re.nrseq_tab_conversao = r.nrseq
                        and r.notabela = 'MIGRACAO_FATOR_MODERADOR') dp
              where f.cdfator_moderador <> 'SEMFAT'
                and dp.cdvalor_interno = f.cdfator_moderador
              order by dp.cdvalor_externo) loop

    begin
      select 'S'
        into aojaexiste
        from gp.agrup_regra_faturam apa
       where apa.cdn_agrup_regra_faturam = fm.cdvalor_externo;
    exception
      when no_data_found then
        aojaexiste := 'N';
    end;

    dbms_output.put_line('agrup_regra_faturam(AGRUPADOR,DESCRICAO,INICIO,FIM,JA_EXISTE);' ||
                         fm.cdvalor_externo || ';' || fm.nofator_moderador || ';' ||
                         fm.dat_inic_vigenc || ';' || fm.dat_fim_vigenc || ';' ||
                         aojaexiste);

    if aosimular = 'N' and aojaexiste = 'N' then
      --Inserindo os Agrupadores
      insert into gp.agrup_regra_faturam
        (cdn_agrup_regra_faturam,
         des_agrup_regra_faturam,
         dat_inic_vigenc,
         dat_fim_vigenc,
         dat_ult_atualiz,
         cod_usuar_ult_atualiz,
         progress_recid)
      values
        (fm.cdvalor_externo,
         fm.nofator_moderador,
         fm.dat_inic_vigenc,
         fm.dat_fim_vigenc,
         sysdate,
         'migracao',
         gp.agrup_regra_faturam_seq.nextval);
    end if;

    --Verificar o último código da regra (id_regra)
    select max(id_regra + 1) into vnseq from regra_faturam;

    if vnseq is null then
      vnseq := 1;
    end if;

    --NAO CONSIDERAR SE JA EXISTIR REGRA PARA O MESMO AGRUPADOR
    begin
      select 'S'
        into aojaexiste
        from gp.regra_faturam r
       where r.cdn_agrup_regra_faturam = fm.cdvalor_externo
         and rownum = 1;
    exception
      when no_data_found then
        aojaexiste := 'N';
    end;

    dbms_output.put_line('regra_faturam(ID_REGRA,COD_REGRA,NOME,INICIO,FIM,AGRUPADOR,JA_EXISTE);' ||
                         vnseq || ';' || '9' ||
                         lpad(fm.cdvalor_externo, 3, '0') || '001' || ';' ||
                         fm.nofator_moderador || ';' || fm.dat_inic_vigenc || ';' ||
                         fm.dat_fim_vigenc || ';' || fm.cdvalor_externo || ';' ||
                         aojaexiste);

    if aosimular = 'N' and aojaexiste = 'N' then
      --Inserindo a primeira regra (ex: agrupador: 5  regra: 9005001
      insert into regra_faturam
        (id_regra,
         cdn_regra,
         nom_regra,
         dat_inic,
         dat_fim,
         dat_cadastro,
         cod_usuar_ult_alter,
         dat_ult_alter,
         cod_usuar_incl,
         cdn_tip_regra,
         cdn_agrup_regra_faturam,
         ind_tip_val,
         progress_recid)
      values
        (vnseq,
         '9' || lpad(fm.cdvalor_externo, 3, '0') || '001', --cdn_regra (ex: agrupador 2 - regra: 9002001)
         fm.nofator_moderador, --nom_regra
         fm.dat_inic_vigenc, --dat_inic
         fm.dat_fim_vigenc, --dat_fim
         sysdate, --dat_cadastro
         'migracao', --cod_usuar_ult_alter
         sysdate, --dat_ult_alter
         'migracao', --cod_usuar_incl
         1, --cdn_tip_regra - 1 indica Participacao
         fm.cdvalor_externo, --cdn_agrup_regra_faturam
         'V', --ind_tip_val
         gp.regra_faturam_seq.nextval); --progress_recid
    end if;

    for ccopart in (select ccp.nrregistro,
                           ccp.nrcontrato,
                           ccp.cdcontrato,
                           ccp.cdfator_moderador,
                           ccp.dtinicio_vigencia,
                           nvl(ccp.dtfinal_vigencia, '31/12/9999') dtfinal_vigencia
                      from contrato_coparticipacao ccp
                     where ccp.cdfator_moderador = fm.cdfator_moderador
                     order by ccp.nrcontrato,
                              ccp.nrregistro,
                              ccp.cdfator_moderador) loop

      --Localizar as proposta
      for prop_contr in (select ip.num_livre_10,
                                ip.cd_modalidade,
                                ip.cd_plano,
                                ip.cd_tipo_plano,
                                nvl(ip.num_livre_4, '0') nrfamilia,
                                p.nr_insc_contratante,
                                p.nr_proposta,
                                co.in_tipo_pessoa,
                                t.dt_inicio
                           from import_propost ip,
                                propost        p,
                                contrat        co,
                                ter_ade        t
                          where ip.num_livre_2 = ccopart.nrregistro
                            and lpad(ip.num_livre_3, 4, '0') =
                                ccopart.nrcontrato
                            and (ip.cod_livre_3 = ccopart.cdcontrato or
                                ccopart.cdcontrato is null)
                            and p.cd_modalidade = ip.cd_modalidade
                            and p.nr_proposta = ip.num_livre_10
                            and co.nr_insc_contratante =
                                p.nr_insc_contratante
                            and t.cd_modalidade = p.cd_modalidade
                            and t.nr_ter_adesao = p.nr_ter_adesao
                         --                                 and ip.num_livre_4   = vnrfamilia
                         --                                 and ip.cd_modalidade = vcd_modalidade
                         ) loop

        vnr_proposta := prop_contr.num_livre_10;

        -- POPULAR ASSOC_PROPOST_AGRUP - INICIO
        select max(cdd_id + 1) into vnseq_apa from gp.assoc_propost_agrup;

        if vnseq_apa is null then
          vnseq_apa := 1;
        end if;

        begin
          select max(prc.nrperiodo_proximo_reajuste)
            into vnrperiodo_proximo_reajuste
            from preco_referencia_contrato prc
           where prc.nrregistro(+) = ccopart.nrregistro
             and prc.nrcontrato(+) = ccopart.nrcontrato;
        exception
          when others then
            vnrperiodo_proximo_reajuste := to_char(prop_contr.dt_inicio,
                                                   'YYYY') + 1 ||
                                           to_char(prop_contr.dt_inicio,
                                                   'MM');
        end;

        --NAO CONSIDERAR SE JA EXISTIR REGRA PARA O MESMO AGRUPADOR
        begin
          select 'S'
            into aojaexiste
            from gp.assoc_propost_agrup apa
           where apa.num_livre_5 = ccopart.nrregistro
             and apa.cod_livre_5 = ccopart.nrcontrato
             and nvl(apa.num_livre_6, '0') = prop_contr.nrfamilia
             and apa.cdn_agrup_regra_faturam = fm.cdvalor_externo
             and rownum = 1;
        exception
          when no_data_found then
            aojaexiste := 'N';
        end;

        dbms_output.put_line('assoc_propost_agrup(ANO_CONTROL,ANO_MES_CONTROL,ANO_MES_FIM,ANO_MES_INIC,AGRUPADOR,MODALIDADE,CDD_ID,INICIO,INS_CONTRATANTE,PROPOSTA,NRREGISTRO,NRCONTRATO,NRFAMILIA,JA_EXISTE);' ||
                             nvl(substr(vnrperiodo_proximo_reajuste, 1, 4),
                                 to_char(prop_contr.dt_inicio, 'YYYY') + 1) || ';' ||
                             nvl(vnrperiodo_proximo_reajuste,
                                 to_char(prop_contr.dt_inicio, 'YYYY') + 1 ||
                                 to_char(prop_contr.dt_inicio, 'MM')) || ';' ||
                             to_char(ccopart.dtfinal_vigencia, 'YYYY') ||
                             to_char(ccopart.dtfinal_vigencia, 'MM') || ';' ||
                             to_char(ccopart.dtinicio_vigencia, 'YYYY') ||
                             to_char(ccopart.dtinicio_vigencia, 'MM') || ';' ||
                             fm.cdvalor_externo || ';' ||
                             prop_contr.cd_modalidade || ';' || vnseq_apa || ';' ||
                             prop_contr.dt_inicio || ';' ||
                             prop_contr.nr_insc_contratante || ';' ||
                             prop_contr.nr_proposta || ';' ||
                             ccopart.nrregistro || ';' ||
                             ccopart.nrcontrato || ';' ||
                             prop_contr.nrfamilia || ';' || aojaexiste);

        if aosimular = 'N' and aojaexiste = 'N' then
          insert into GP.ASSOC_PROPOST_AGRUP
            (num_ano_control,
             num_ano_mes_control,
             num_ano_mes_fim,
             num_ano_mes_inic,
             cdn_agrup_regra_faturam,
             cd_modalidade,
             cdd_id,
             dat_controles,
             u##in_tipo_pessoa,
             in_tipo_pessoa,
             num_mes_controles,
             nr_insc_contratante,
             nr_proposta,
             num_livre_5, --NRREGISTRO DO CONTRATO ORIGINAL DO UNICOO
             cod_livre_5, --NRCONTRATO DO CONTRATO ORIGINAL DO UNICOO
             num_livre_6, --NRFAMILIA (somente estara preenchido quando migra sem LOTACAO)
             progress_recid)
          values
            (nvl(substr(vnrperiodo_proximo_reajuste, 1, 4),
                 to_char(prop_contr.dt_inicio, 'YYYY') + 1), --num_ano_control         NUMBER default 0,
             nvl(vnrperiodo_proximo_reajuste,
                 to_char(prop_contr.dt_inicio, 'YYYY') + 1 ||
                 to_char(prop_contr.dt_inicio, 'MM')), --num_ano_mes_control     NUMBER default 0,
             to_char(ccopart.dtfinal_vigencia, 'YYYY') ||
             to_char(ccopart.dtfinal_vigencia, 'MM'), --num_ano_mes_fim         NUMBER default 0,
             to_char(ccopart.dtinicio_vigencia, 'YYYY') ||
             to_char(ccopart.dtinicio_vigencia, 'MM'), --num_ano_mes_inic        NUMBER default 0,
             fm.cdvalor_externo, --cdn_agrup_regra_faturam NUMBER default 0,
             prop_contr.cd_modalidade, --cd_modalidade           NUMBER default 0,
             vnseq_apa, --cdd_id                  NUMBER default 0 not null,
             prop_contr.dt_inicio, --dat_controles DATE,
             upper(prop_contr.in_tipo_pessoa), --u##in_tipo_pessoa VARCHAR2(12),
             upper(prop_contr.in_tipo_pessoa), --in_tipo_pessoa VARCHAR2(12),
             to_char(prop_contr.dt_inicio, 'MM'), --num_mes_controles       NUMBER default 0,
             prop_contr.nr_insc_contratante, --nr_insc_contratante     NUMBER default 0,
             prop_contr.nr_proposta, --nr_proposta             NUMBER default 0,
             ccopart.nrregistro, -- num_livre_5 NRREGISTRO DO CONTRATO ORIGINAL DO UNICOO
             ccopart.nrcontrato, -- cod_livre_5 NRCONTRATO DO CONTRATO ORIGINAL DO UNICOO
             prop_contr.nrfamilia,
             gp.assoc_propost_agrup_seq.nextval); --progress_recid NUMBER
        end if;
        -- POPULAR ASSOC_PROPOST_AGRUP - FIM

        --Verificar o último código da regra (id_regra)
        select max(id_regra_benef + 1)
          into vnseq
          from regra_bnfciar_faturam;

        if vnseq is null then
          vnseq := 1;
        end if;

        --NAO CONSIDERAR SE JA EXISTIR REGRA PARA O MESMO AGRUPADOR
        begin
          select 'S'
            into aojaexiste
            from gp.regra_bnfciar_faturam rf
           where rf.num_livre_5 = ccopart.nrregistro
             and rf.cod_livre_5 = ccopart.nrcontrato
             and nvl(rf.val_livre_5, '0') = prop_contr.nrfamilia
             and rf.cdn_regra =
                 '9' || lpad(fm.cdvalor_externo, 3, '0') || '001'
             and rownum = 1;
        exception
          when no_data_found then
            aojaexiste := 'N';
        end;

        dbms_output.put_line('regra_bnfciar_faturam(ID_REGRA_BENEF,MODALIDADE,PLANO,TIPO,PROPOSTA,INICIO,FIM,REGRA,NRREGISTRO,NRCONTRATO,NRFAMILIA,JA_EXISTE);' ||
                             vnseq || ';' || prop_contr.cd_modalidade || ';' ||
                             prop_contr.cd_plano || ';' ||
                             prop_contr.cd_tipo_plano || ';' ||
                             prop_contr.num_livre_10 || ';' ||
                             ccopart.dtinicio_vigencia || ';' ||
                             ccopart.dtfinal_vigencia || ';' || '9' ||
                             lpad(fm.cdvalor_externo, 3, '0') || '001' || ';' ||
                             ccopart.nrregistro || ';' ||
                             ccopart.nrcontrato || ';' ||
                             prop_contr.nrfamilia || ';' || aojaexiste);

        if aosimular = 'N' and aojaexiste = 'N' then
          insert into regra_bnfciar_faturam rf
            (id_regra_benef,
             cdn_modalid,
             cdn_plano,
             cdn_tip_plano,
             cdn_ter_adesao,
             cdn_usuar,
             dat_inic,
             dat_fim,
             cdn_regra,
             num_livre_5, --NRREGISTRO DO CONTRATO ORIGINAL DO UNICOO
             cod_livre_5, --NRCONTRATO DO CONTRATO ORIGINAL DO UNICOO
             val_livre_5, --NRFAMILIA (somente quando migra sem LOTACAO)
             progress_recid)
          values
            (vnseq,
             prop_contr.cd_modalidade,
             0, --prop_contr.cd_plano,       --FORÇADO ZERO POIS EH ASSIM QUE A TELA TRATA
             0, --prop_contr.cd_tipo_plano,  --FORÇADO ZERO POIS EH ASSIM QUE A TELA TRATA
             prop_contr.num_livre_10, --nr_proposta
             0, -- cdn_usuar zerado. a regra se aplica ao termo
             ccopart.dtinicio_vigencia,
             ccopart.dtfinal_vigencia,
             '9' || lpad(fm.cdvalor_externo, 3, '0') || '001',
             ccopart.nrregistro, -- num_livre_5 NRREGISTRO DO CONTRATO ORIGINAL DO UNICOO
             ccopart.nrcontrato, -- cod_livre_5 NRCONTRATO DO CONTRATO ORIGINAL DO UNICOO
             prop_contr.nrfamilia, -- val_livre_5 NRFAMILIA (somente quando migra sem LOTACAO)
             gp.regra_bnfciar_faturam_seq.nextval);
        end if;
      end loop; --leitura das propostas referentes ao contrato
    end loop; --leitura dos contratos da tabela de fator moderador
  end loop; --leitura das tabelas de fator moderador

end p_migra_fator_moderador;*/

--29/08/2018 - Alex - procedure criada em substituição a p_migra_fator_moderador.
--                    Objetivo: separar a criação dos Agrupadores e Capas de Regras (parametro) da
--                              associação dos mesmos aos seus respectivos contratos (movimento), que
--                              ocorrera na procedure p_associa_agrupador_contrato.
procedure p_cria_agrupador_e_capa_regra (paosimular varchar) is
  vnseq                       number := 0;
  aojaexiste                  varchar2(1);

begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

  --Inserindo os Agrupadores e a primeira regra de cada
  for fm in (select f.cdfator_moderador,
                    f.nofator_moderador,
                    nvl(dp.cdvalor_externo,f.cdfator_moderador) cdvalor_externo,--dp.cdvalor_externo,
                    -- ocorreu erro pois foram encontradas datas com ano menor que 1900.
                    -- alterado para garantir data minima 01/01/1900 - Alex Boeira e Marcelo Carvalho 19/01/2017
                    (case
                      when nvl((select min(dtinicio_vigencia)
                                 from contrato_coparticipacao cc
                                where cc.cdfator_moderador =
                                      f.cdfator_moderador),
                               '01/01/1900') < '01/01/1900' then
                       '01/01/1900'
                      else
                       to_char(nvl((select min(dtinicio_vigencia)
                                     from contrato_coparticipacao cc
                                    where cc.cdfator_moderador =
                                          f.cdfator_moderador),
                                   '01/01/1900'))
                    end) dat_inic_vigenc,

                    nvl((select max(nvl(cc.dtfinal_vigencia, '31/12/9999'))
                          from contrato_coparticipacao cc
                         where cc.cdfator_moderador = f.cdfator_moderador),
                        '31/12/9999') dat_fim_vigenc
               from fator_moderador f,
                    (select re.cdvalor_interno, re.cdvalor_externo
                       from mig_tab_conversao_exp re, mig_tab_conversao r
                      where re.nrseq_tab_conversao = r.nrseq
                        and r.notabela = 'MIGRACAO_FATOR_MODERADOR') dp
              where f.cdfator_moderador <> 'SEMFAT'
                and dp.cdvalor_interno(+) = f.cdfator_moderador
              order by dp.cdvalor_externo) loop

    begin
      select 'S'
        into aojaexiste
        from gp.agrup_regra_faturam apa
       where apa.cdn_agrup_regra_faturam = fm.cdvalor_externo;
    exception
      when no_data_found then
        aojaexiste := 'N';
    end;

    dbms_output.put_line('agrup_regra_faturam(AGRUPADOR,DESCRICAO,INICIO,FIM,JA_EXISTE);' ||
                         fm.cdvalor_externo || ';' || fm.nofator_moderador || ';' ||
                         fm.dat_inic_vigenc || ';' || fm.dat_fim_vigenc || ';' ||
                         aojaexiste);

    if paosimular = 'N' and aojaexiste = 'N' then
      --Inserindo os Agrupadores
      insert into gp.agrup_regra_faturam
        (cdn_agrup_regra_faturam,
         des_agrup_regra_faturam,
         dat_inic_vigenc,
         dat_fim_vigenc,
         dat_ult_atualiz,
         cod_usuar_ult_atualiz,
         progress_recid)
      values
        (fm.cdvalor_externo,
         fm.nofator_moderador,
         fm.dat_inic_vigenc,
         fm.dat_fim_vigenc,
         sysdate,
         'migracao',
         gp.agrup_regra_faturam_seq.nextval);
    end if;

    --Verificar o último código da regra (id_regra)
    select max(id_regra + 1) into vnseq from regra_faturam;

    if vnseq is null then
      vnseq := 1;
    end if;

    --NAO CONSIDERAR SE JA EXISTIR REGRA PARA O MESMO AGRUPADOR
    begin
      select 'S'
        into aojaexiste
        from gp.regra_faturam r
       where r.cdn_agrup_regra_faturam = fm.cdvalor_externo
         and rownum = 1;
    exception
      when no_data_found then
        aojaexiste := 'N';
    end;

    dbms_output.put_line('regra_faturam(ID_REGRA,COD_REGRA,NOME,INICIO,FIM,AGRUPADOR,JA_EXISTE);' ||
                         vnseq || ';' || '9' ||
                         lpad(fm.cdvalor_externo, 3, '0') || '001' || ';' ||
                         fm.nofator_moderador || ';' || fm.dat_inic_vigenc || ';' ||
                         fm.dat_fim_vigenc || ';' || fm.cdvalor_externo || ';' ||
                         aojaexiste);

    if paosimular = 'N' and aojaexiste = 'N' then
      --Inserindo a primeira regra - capa (ex: agrupador: 5  regra: 9005001)
      insert into regra_faturam
        (id_regra,
         cdn_regra,
         nom_regra,
         dat_inic,
         dat_fim,
         dat_cadastro,
         cod_usuar_ult_alter,
         dat_ult_alter,
         cod_usuar_incl,
         cdn_tip_regra,
         cdn_agrup_regra_faturam,
         ind_tip_val,
         progress_recid)
      values
        (vnseq,
         '9' || lpad(fm.cdvalor_externo, 3, '0') || '001', --cdn_regra (ex: agrupador 2 - regra: 9002001)
         fm.nofator_moderador, --nom_regra
         fm.dat_inic_vigenc, --dat_inic
         fm.dat_fim_vigenc, --dat_fim
         sysdate, --dat_cadastro
         'migracao', --cod_usuar_ult_alter
         sysdate, --dat_ult_alter
         'migracao', --cod_usuar_incl
         1, --cdn_tip_regra - 1 indica Participacao
         fm.cdvalor_externo, --cdn_agrup_regra_faturam
         'V', --ind_tip_val
         gp.regra_faturam_seq.nextval); --progress_recid
    end if;
  end loop; --leitura das tabelas de fator moderador

end p_cria_agrupador_e_capa_regra;

--Essa procedure somente pode ser executada após os Termos de Adesão já terem sido criados no TOTVS.
--Irá associar os Agrupadores (Fator Moderador do Unicoo) aos seus contratos do TOTVS (ultimo e penultimo).
procedure p_associa_agrupador_contrato (paosimular varchar,
                                        pnrregistro number,
                                        pnrcontrato varchar2) is
  qtjaexiste number := 0;
  vnseq_apa  number := 0;
  vnseq                       number := 0;
  vnrperiodo_proximo_reajuste number := 0;

begin
  if PAOLOG_DBMS_OUTPUT = 'S' then
    DBMS_OUTPUT.ENABLE(null);
  else
    dbms_output.disable;
  end if;

  dbms_output.put_line('ELIMINANDO;CD_MODALIDADE;NR_PROPOSTA;');
  dbms_output.put_line('ASSOC_PROPOST_AGRUP;ANO_CONTROL;ANO_MES_CONTROL;ANO_MES_FIM;ANO_MES_INIC;AGRUPADOR;MODALIDADE;CDD_ID;INICIO;INS_CONTRATANTE;PROPOSTA;NRREGISTRO;NRCONTRATO;NRFAMILIA;JA_EXISTE');
  dbms_output.put_line('REGRA_BNFCIAR_FATURAM;ID_REGRA_BENEF;MODALIDADE;PLANO;TIPO;PROPOSTA;INICIO;FIM;REGRA;NRREGISTRO;NRCONTRATO;NRFAMILIA');

  --eliminar relacionamentos ja existentes para essa proposta
  for x in(select distinct ip.cd_modalidade     CD_MODALIDADE,
                           ip.num_livre_10      NR_PROPOSTA
                      from gp.import_propost ip,
                           contrato_coparticipacao cc
                     where cc.nrregistro = ip.num_livre_2
                       and cc.nrcontrato = lpad(ip.num_livre_3, 4, '0')
                       and cc.cdfator_moderador <> 'SEMFAT'
                       and (cc.nrregistro = pnrregistro or pnrregistro is null)
                       and (cc.nrcontrato = pnrcontrato or pnrcontrato is null)
                       ) loop

    dbms_output.put_line('ELIMINANDO;' || x.cd_modalidade || ';' || x.nr_proposta);

    if paosimular = 'N' then

        delete from gp.assoc_propost_agrup apa
              where apa.cd_modalidade = x.cd_modalidade
                and apa.nr_proposta   = x.nr_proposta;

        delete from gp.regra_bnfciar_faturam rbf
              where rbf.cdn_modalid = x.cd_modalidade
                and rbf.cdn_ter_adesao = x.nr_proposta;

    end if;

  end loop;

  for x in(select distinct ip.num_livre_2       NRREGISTRO,
                           ip.num_livre_3       NRCONTRATO,
                           ip.cd_modalidade     CD_MODALIDADE,
                           ip.num_livre_10      NR_PROPOSTA,
                           nvl(ip.num_livre_4, '0') nrfamilia,
                           cc.cdfator_moderador FATOR_MODERADOR_UNICOO,
                           nvl(dp.cdvalor_externo, cc.cdfator_moderador) cdvalor_externo, --dp.cdvalor_externo,

                           -- ocorreu erro pois foram encontradas datas com ano menor que 1900.
                           -- alterado para garantir data minima 01/01/1900 - Alex Boeira e Marcelo Carvalho 19/01/2017
                           case
                             when nvl(cc.dtinicio_vigencia,'01/01/1900') < '01/01/1900' then
                               to_date('01/01/1900','dd/mm/yyyy')
                             else
                               nvl(cc.dtinicio_vigencia,'01/01/1900')
                           end dtinicio_vigencia,
                           nvl(cc.dtfinal_vigencia,'31/12/9999') dtfinal_vigencia,
                           t.dt_inicio dt_inicio_termo,
                           c.nr_insc_contratante,
                           c.in_tipo_pessoa,
                           p.cd_plano,
                           p.cd_tipo_plano,
                           p.progress_recid RECID_PROPOST
                      from gp.import_propost ip,
                           gp.ter_ade t,
                           gp.propost p,
                           gp.contrat c,
                           contrato_coparticipacao cc,
                           (select re.cdvalor_interno, re.cdvalor_externo
                              from mig_tab_conversao_exp re, mig_tab_conversao r
                             where re.nrseq_tab_conversao = r.nrseq
                               and r.notabela = 'MIGRACAO_FATOR_MODERADOR') dp
                     where cc.nrregistro = ip.num_livre_2
                       and cc.nrcontrato = lpad(ip.num_livre_3, 4, '0')
                       and cc.cdfator_moderador <> 'SEMFAT'
                       and dp.cdvalor_interno(+) = cc.cdfator_moderador
                       and t.cd_modalidade = ip.cd_modalidade
                       and t.nr_ter_adesao = ip.num_livre_10
                       and p.cd_modalidade = t.cd_modalidade
                       and p.nr_ter_adesao = t.nr_ter_adesao
                       and c.nr_insc_contratante = p.nr_insc_contratante

                       and (cc.nrregistro = pnrregistro or pnrregistro is null)
                       and (cc.nrcontrato = pnrcontrato or pnrcontrato is null)

                     order by cd_modalidade, nr_proposta, dtinicio_vigencia desc
                    ) loop

    --criar relacionamento apenas com os dois agrupadores mais recentes (ultimo e penultimo)
    qtjaexiste := 0;
    begin
      select count(*)
        into qtjaexiste
        from gp.assoc_propost_agrup apa
       where apa.cd_modalidade = x.cd_modalidade
         and apa.nr_proposta   = x.nr_proposta;
    exception
      when no_data_found then
        qtjaexiste := 0;
    end;

    select max(cdd_id + 1) into vnseq_apa from gp.assoc_propost_agrup;
    if vnseq_apa is null then
      vnseq_apa := 1;
    end if;

    begin
      select max(prc.nrperiodo_proximo_reajuste)
        into vnrperiodo_proximo_reajuste
        from preco_referencia_contrato prc
       where prc.nrregistro(+) = x.nrregistro
         and prc.nrcontrato(+) = x.nrcontrato;
    exception
      when others then
        vnrperiodo_proximo_reajuste := to_char(x.dt_inicio_termo,'YYYY') + 1 || to_char(x.dt_inicio_termo, 'MM');
    end;

    --Verificar o último código da regra (id_regra)
    select max(id_regra_benef)
      into vnseq
      from gp.regra_bnfciar_faturam;
    if vnseq is null then
      vnseq := 0;
    end if;

    -- se encontrou 2 registros, ja possui ultimo e penultimo, e ignora os demais
    if qtjaexiste < 2 then

      dbms_output.put_line('ASSOC_PROPOST_AGRUP;' ||
                          nvl(substr(vnrperiodo_proximo_reajuste, 1, 4),
                               to_char(x.dt_inicio_termo, 'YYYY') + 1) || ';' ||
                           nvl(vnrperiodo_proximo_reajuste,
                               to_char(x.dt_inicio_termo, 'YYYY') + 1 ||
                               to_char(x.dt_inicio_termo, 'MM')) || ';' ||
                           to_char(x.dtfinal_vigencia, 'YYYY') ||
                           to_char(x.dtfinal_vigencia, 'MM') || ';' ||
                           to_char(x.dtinicio_vigencia, 'YYYY') ||
                           to_char(x.dtinicio_vigencia, 'MM') || ';' ||
                           x.cdvalor_externo || ';' ||
                           x.cd_modalidade || ';' || vnseq_apa || ';' ||
                           x.dt_inicio_termo || ';' ||
                           x.nr_insc_contratante || ';' ||
                           x.nr_proposta || ';' ||
                           x.nrregistro || ';' ||
                           x.nrcontrato || ';' ||
                           x.nrfamilia || ';' || qtjaexiste);

      if paosimular = 'N' then
        insert into GP.ASSOC_PROPOST_AGRUP
          (num_ano_control,
           num_ano_mes_control,
           num_ano_mes_fim,
           num_ano_mes_inic,
           cdn_agrup_regra_faturam,
           cd_modalidade,
           cdd_id,
           dat_controles,
           u##in_tipo_pessoa,
           in_tipo_pessoa,
           num_mes_controles,
           nr_insc_contratante,
           nr_proposta,
           num_livre_5, --NRREGISTRO DO CONTRATO ORIGINAL DO UNICOO
           cod_livre_5, --NRCONTRATO DO CONTRATO ORIGINAL DO UNICOO
           num_livre_6, --NRFAMILIA (somente estara preenchido quando migra sem LOTACAO)
           progress_recid)
        values
          (nvl(substr(vnrperiodo_proximo_reajuste, 1, 4),
               to_char(x.dt_inicio_termo, 'YYYY') + 1), --num_ano_control         NUMBER default 0,
           nvl(vnrperiodo_proximo_reajuste,
               to_char(x.dt_inicio_termo, 'YYYY') + 1 ||
               to_char(x.dt_inicio_termo, 'MM')), --num_ano_mes_control     NUMBER default 0,
           to_char(x.dtfinal_vigencia, 'YYYY') ||
           to_char(x.dtfinal_vigencia, 'MM'), --num_ano_mes_fim         NUMBER default 0,
           to_char(x.dtinicio_vigencia, 'YYYY') ||
           to_char(x.dtinicio_vigencia, 'MM'), --num_ano_mes_inic        NUMBER default 0,
           x.cdvalor_externo, --cdn_agrup_regra_faturam NUMBER default 0,
           x.cd_modalidade, --cd_modalidade           NUMBER default 0,
           vnseq_apa, --cdd_id                  NUMBER default 0 not null,
           x.dt_inicio_termo, --dat_controles DATE,
           upper(x.in_tipo_pessoa), --u##in_tipo_pessoa VARCHAR2(12),
           upper(x.in_tipo_pessoa), --in_tipo_pessoa VARCHAR2(12),
           to_char(x.dt_inicio_termo, 'MM'), --num_mes_controles       NUMBER default 0,
           x.nr_insc_contratante, --nr_insc_contratante     NUMBER default 0,
           x.nr_proposta, --nr_proposta             NUMBER default 0,
           x.nrregistro, -- num_livre_5 NRREGISTRO DO CONTRATO ORIGINAL DO UNICOO
           x.nrcontrato, -- cod_livre_5 NRCONTRATO DO CONTRATO ORIGINAL DO UNICOO
           x.nrfamilia,
           gp.assoc_propost_agrup_seq.nextval); --progress_recid NUMBER
      end if;

      --associar com a proposta todas as Regras desse Agrupador (a 1a eh gerada em P_CRIA_AGRUPADOR_E_CAPA_REGRA - CAPA -
      --mas podem haver mais, criadas manualmente pelos usuarios chave, visto que isso eh parametro)

      dbms_output.put_line('VAI LER REGRAS DO AGRUPADOR: ' || x.cdvalor_externo);

      for c_regra_agrup in (select rf.cdn_regra from gp.regra_faturam rf
                                  where rf.cdn_agrup_regra_faturam = x.cdvalor_externo) loop

        --Verificar o último código da regra (id_regra)
        select max(id_regra_benef + 1)
          into vnseq
          from gp.regra_bnfciar_faturam;
        if vnseq is null then
          vnseq := 1;
        end if;

        dbms_output.put_line('REGRA_BNFCIAR_FATURAM' || ';' || vnseq || ';' || x.cd_modalidade || ';' ||
                             x.cd_plano || ';' ||
                             x.cd_tipo_plano || ';' ||
                             x.nr_proposta || ';' ||
                             x.dtinicio_vigencia || ';' ||
                             x.dtfinal_vigencia || ';' ||
                             c_regra_agrup.cdn_regra || ';' ||
                             x.nrregistro || ';' ||
                             x.nrcontrato || ';' ||
                             x.nrfamilia);

        if paosimular = 'N' then
          insert into gp.regra_bnfciar_faturam rf
            (id_regra_benef,
             cdn_modalid,
             cdn_plano,
             cdn_tip_plano,
             cdn_ter_adesao,
             cdn_usuar,
             dat_inic,
             dat_fim,
             cdn_regra,
             num_livre_5, --NRREGISTRO DO CONTRATO ORIGINAL DO UNICOO
             cod_livre_5, --NRCONTRATO DO CONTRATO ORIGINAL DO UNICOO
             val_livre_5, --NRFAMILIA (somente quando migra sem LOTACAO)
             progress_recid)
          values
            (vnseq,
             x.cd_modalidade,
             0, --prop_contr.cd_plano,       --FORÇADO ZERO POIS EH ASSIM QUE A TELA TRATA
             0, --prop_contr.cd_tipo_plano,  --FORÇADO ZERO POIS EH ASSIM QUE A TELA TRATA
             x.nr_proposta, --nr_proposta
             0, -- cdn_usuar zerado. a regra se aplica ao termo
             x.dtinicio_vigencia,
             x.dtfinal_vigencia,
             c_regra_agrup.cdn_regra,
             x.nrregistro, -- num_livre_5 NRREGISTRO DO CONTRATO ORIGINAL DO UNICOO
             x.nrcontrato, -- cod_livre_5 NRCONTRATO DO CONTRATO ORIGINAL DO UNICOO
             x.nrfamilia, -- val_livre_5 NRFAMILIA (somente quando migra sem LOTACAO)
             gp.regra_bnfciar_faturam_seq.nextval);
        end if;
      end loop;

      -- ATUALIAR PROXIMO REAJUSTE DE PARTICIPACAO
      update gp.propost p set p.char_11 = to_char(lpad(vnrperiodo_proximo_reajuste,6,'0')) -- AA-MM-PROXIMO-REAJUSTE
             where p.progress_recid = x.recid_propost;
    end if;

  end loop;
end p_associa_agrupador_contrato;

--duplicar agrupadores e tabelas relacionadas com base no DEPARA_REPLICAR_AGRUPADOR
procedure p_replicar_agrupador (paosimular varchar) is
  vnseq number := 0;
  qtjaexiste number := 0;
  aoerro varchar(1) := 'N';
  vid_ordem number;
begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

  for depara in (select d.* from depara_replicar_agrupador d) loop

    -- se o codigo do agrupador origem nao existir, listar alerta
    select count(*)
      into qtjaexiste
      from gp.agrup_regra_faturam a
     where a.cdn_agrup_regra_faturam = depara.cd_agrupador_origem;
    if qtjaexiste = 0 then
      dbms_output.put_line('ERRO: Agrupador de origem ' || depara.cd_agrupador_origem ||
                           ' nao existe. Revise o DEPARA_REPLICAR_AGRUPADOR.');
      aoerro := 'S';
    end if;

    -- se o codigo do agrupador destino ja existir, nao sera alterado
    select count(*)
      into qtjaexiste
      from gp.agrup_regra_faturam a
     where a.cdn_agrup_regra_faturam = depara.cd_agrupador_destino;
    if qtjaexiste > 0 then
      dbms_output.put_line('ERRO: Agrupador de destino ' || depara.cd_agrupador_destino ||
                           ' ja existe. Nada sera alterado para esse codigo. Revise o DEPARA_REPLICAR_AGRUPADOR.');
    --  aoerro := 'S';
    end if;

    dbms_output.put_line('================================================================');
    dbms_output.put_line('CRIANDO AGRUPADOR ' || depara.cd_agrupador_destino || ' COM BASE NO ' || depara.cd_agrupador_origem);

    -- ler agrupadores origem - serao a base para a replicacao
    for agrup in (select *
                    from gp.agrup_regra_faturam a
                   where a.cdn_agrup_regra_faturam =
                         depara.cd_agrupador_origem) loop

      dbms_output.put_line('AGRUP_REGRA_FATURAM,cdn_agrup_regra_faturam,des_agrup_regra_faturam,dat_inic_vigenc,dat_fim_vigenc;' ||
                           depara.cd_agrupador_destino || ';' ||
                           agrup.des_agrup_regra_faturam || ';' ||
                           agrup.dat_inic_vigenc || ';' ||
                           agrup.dat_fim_vigenc);

      if paosimular = 'N' then
        -- criar novo agrupador mudando apenas o codigo
        insert into gp.agrup_regra_faturam
          (cdn_agrup_regra_faturam,
           des_agrup_regra_faturam,
           dat_inic_vigenc,
           dat_fim_vigenc,
           dat_ult_atualiz,
           cod_usuar_ult_atualiz,
           progress_recid)
        values
          (depara.cd_agrupador_destino,
           agrup.des_agrup_regra_faturam,
           agrup.dat_inic_vigenc,
           agrup.dat_fim_vigenc,
           sysdate,
           'migracao',
           gp.agrup_regra_faturam_seq.nextval);
      end if;

      -- ler as regras do agrupador original
      for regra in (select *
                      from gp.regra_faturam r
                     where r.cdn_agrup_regra_faturam =
                           agrup.cdn_agrup_regra_faturam) loop

        dbms_output.put_line('REGRA_FATURAM,cdn_regra,nom_regra,dat_inic,dat_fim,cdn_tip_regra,cdn_agrup_regra_faturam,ind_tip_val;' ||
                             substr(regra.cdn_regra, 1, 1) ||
                             lpad(depara.cd_agrupador_destino, 3, '0') ||
                             substr(regra.cdn_regra, 5, 3) || ';' ||
                             regra.nom_regra || ';' ||
                             regra.dat_inic || ';' ||
                             regra.dat_fim || ';' ||
                             regra.cdn_tip_regra || ';' ||
                             depara.cd_agrupador_destino || ';' ||
                             regra.ind_tip_val);

        if paosimular = 'N' then

          begin
            select max(id_regra + 1) into vnseq from regra_faturam;
          exception
            when others then
              vnseq := 1;
          end;
          if vnseq is null then
            vnseq := 1;
          end if;

          -- criar nova regra mudando o codigo da regra e agrupador
          insert into regra_faturam
            (id_regra,
             cdn_regra,
             nom_regra,
             dat_inic,
             dat_fim,
             dat_cadastro,
             cod_usuar_ult_alter,
             dat_ult_alter,
             cod_usuar_incl,
             cdn_tip_regra,
             cdn_agrup_regra_faturam,
             ind_tip_val,
             progress_recid)
          values
            (vnseq,
             substr(regra.cdn_regra, 1, 1) ||
             lpad(depara.cd_agrupador_destino, 3, '0') ||
             substr(regra.cdn_regra, 5, 3),
             regra.nom_regra, --nom_regra
             regra.dat_inic, --dat_inic
             regra.dat_fim, --dat_fim
             sysdate, --dat_cadastro
             'migracao', --cod_usuar_ult_alter
             sysdate, --dat_ult_alter
             'migracao', --cod_usuar_incl
             regra.cdn_tip_regra, --cdn_tip_regra - 1 indica Participacao
             depara.cd_agrupador_destino, --cdn_agrup_regra_faturam
             regra.ind_tip_val, --ind_tip_val
             gp.regra_faturam_seq.nextval); --progress_recid
        end if;

        -- ler as faixas da regra original
        for faixa in (select *
                        from gp.faixa_regra_faturam f
                       where f.cdn_regra = regra.cdn_regra) loop

          dbms_output.put_line('FAIXA_REGRA_FATURAM,cdn_regra,val_faixa_inic,val_faixa_fim,val_ele,val_urgen,val_limite;' ||
                           substr(regra.cdn_regra, 1, 1) ||
                           lpad(depara.cd_agrupador_destino, 3, '0') ||
                           substr(regra.cdn_regra, 5, 3) || ';' ||
                           faixa.val_faixa_inic || ';' ||
                           faixa.val_faixa_fim || ';' ||
                           faixa.val_ele || ';' ||
                           faixa.val_urgen || ';' ||
                           faixa.val_limite);

          if paosimular = 'N' then

            begin
              select max(idi_faixa + 1)
                into vnseq
                from gp.faixa_regra_faturam;
            exception
              when others then
                vnseq := 1;
            end;
            if vnseq is null then
              vnseq := 1;
            end if;

            -- criar faixa mudando apenas o codigo da rgra
            insert into gp.faixa_regra_faturam
              (idi_faixa,
               cdn_regra,
               val_faixa_inic,
               val_faixa_fim,
               val_ele,
               val_urgen,
               val_limite,
               dat_ult_atualiz,
               cod_usuar_ult_atualiz,
               progress_recid)
            values
              (vnseq,
               substr(regra.cdn_regra, 1, 1) ||
               lpad(depara.cd_agrupador_destino, 3, '0') ||
               substr(regra.cdn_regra, 5, 3),
               faixa.val_faixa_inic,
               faixa.val_faixa_fim,
               faixa.val_ele,
               faixa.val_urgen,
               faixa.val_limite,
               sysdate,
               'migracao',
               gp.faixa_regra_faturam_seq.nextval);
          end if;
        end loop;

        -- ler os prestadores da regra original
        for prest in (select *
                        from gp.regra_prestdor_faturam f
                       where f.cdn_regra = regra.cdn_regra) loop

          dbms_output.put_line('REGRA_PRESTDOR_FATURAM,cdn_local_atendim,cdn_clinic,cdn_unid,cdn_grp_prestdor,cdn_prestdor,' ||
                               'cdn_vinculo,cdn_especialid,dat_inic,dat_fim,tipo_atendimento,tipo_acomodacao,transacao,' ||
                               'cdn_regra;' ||
                               prest.cdn_local_atendim || ';' ||
                               prest.cdn_clinic || ';' ||
                               prest.cdn_unid || ';' ||
                               prest.cdn_grp_prestdor || ';' ||
                               prest.cdn_prestdor || ';' ||
                               prest.cdn_vinculo || ';' ||
                               prest.cdn_especialid || ';' ||
                               prest.dat_inic || ';' ||
                               prest.dat_fim || ';' ||
                               prest.num_livre_4 || ';' ||
                               prest.num_livre_3 || ';' ||
                               prest.num_livre_2 || ';' ||
                               substr(regra.cdn_regra, 1, 1) ||
                               lpad(depara.cd_agrupador_destino, 3, '0') ||
                               substr(regra.cdn_regra, 5, 3));

          if paosimular = 'N' then

            begin
              select max(id_regra_prestdor + 1)
                into vnseq
                from regra_prestdor_faturam;
            exception
              when others then
                vnseq := 1;
            end;
            if vnseq is null then
              vnseq := 1;
            end if;

            -- criar relacao com prestador trocando apenas codigo da regra
            insert into gp.regra_prestdor_faturam
              (id_regra_prestdor,
               cdn_local_atendim,
               cdn_clinic,
               cdn_unid,
               cdn_grp_prestdor,
               cdn_prestdor,
               cdn_vinculo,
               cdn_especialid,
               dat_inic,
               dat_fim,
               num_livre_4, --TIPO_ATENDIMENTO
               num_livre_3, --TIPO_ACOMODACAO
               num_livre_2, --TRANSACAO
               cdn_regra,
               progress_recid)
            values
              (vnseq,
               prest.cdn_local_atendim,
               prest.cdn_clinic,
               prest.cdn_unid,
               prest.cdn_grp_prestdor,
               prest.cdn_prestdor,
               prest.cdn_vinculo,
               prest.cdn_especialid,
               prest.dat_inic,
               prest.dat_fim,
               prest.num_livre_4,
               prest.num_livre_3,
               prest.num_livre_2,
               substr(regra.cdn_regra, 1, 1) ||
               lpad(depara.cd_agrupador_destino, 3, '0') ||
               substr(regra.cdn_regra, 5, 3),
               gp.regra_prestdor_faturam_seq.nextval);
          end if;
        end loop;

        -- ler os servicos da regra original
        for serv in (select *
                       from gp.regra_serv_faturam s
                      where s.cdn_regra = regra.cdn_regra) loop

          dbms_output.put_line('REGRA_SERV_FATURAM,grupo_proc_amb,cd_esp_amb,todos_grupo_proc_amb,cdn_regra,cdn_modulo,' ||
                               'cod_tip_serv,cdn_princp_ativ,cdn_grupo,cdn_servico,dat_inic,dat_fim;' ||
                               serv.num_livre_1 || ';' ||
                               serv.num_livre_2 || ';' ||
                               serv.log_livre_1 || ';' ||
                               substr(regra.cdn_regra, 1, 1) ||
                               lpad(depara.cd_agrupador_destino, 3, '0') ||
                               substr(regra.cdn_regra, 5, 3) || ';' ||
                               serv.cdn_modulo || ';' ||
                               upper(serv.cod_tip_serv) || ';' ||
                               serv.cdn_princp_ativ || ';' ||
                               serv.cdn_grupo || ';' ||
                               serv.cdn_servico || ';' ||
                               serv.dat_inic || ';' ||
                               serv.dat_fim);

          if paosimular = 'N' then
            begin
              select max(id_regra_serv + 1)
                into vnseq
                from gp.regra_serv_faturam;
            exception
              when others then
                vnseq := 1;
            end;
            if vnseq is null then
              vnseq := 1;
            end if;

            -- criar associativa com servico trocando codigo da regra
            insert into gp.regra_serv_faturam
              (id_regra_serv,
               num_livre_1, --GRUPO_PROC_AMB,
               num_livre_2, --CD_ESP_AMB,
               log_livre_1, --TODOS_GRUPO_PROC_AMB,
               cdn_regra,
               cdn_modulo,
               u##cod_tip_serv,
               cod_tip_serv,
               cdn_princp_ativ,
               cdn_grupo,
               cdn_servico,
               dat_inic,
               dat_fim,
               progress_recid)
            values
              (vnseq,
               serv.num_livre_1,
               serv.num_livre_2,
               serv.log_livre_1,
               substr(regra.cdn_regra, 1, 1) ||
               lpad(depara.cd_agrupador_destino, 3, '0') ||
               substr(regra.cdn_regra, 5, 3),
               serv.cdn_modulo,
               upper(serv.cod_tip_serv),
               serv.cod_tip_serv,
               serv.cdn_princp_ativ,
               serv.cdn_grupo,
               serv.cdn_servico,
               serv.dat_inic,
               serv.dat_fim,
               gp.regra_serv_faturam_seq.nextval);
          end if;
        end loop;

        -- ler as familias da regra original
        for fam in (select *
                      from gp.regra_familia_faturam f
                     where f.cdn_regra = regra.cdn_regra) loop

          dbms_output.put_line('REGRA_FAMILIA_FATURAM,cdn_familia_inicial,cdn_familia_final,dat_inic,dat_fim,cdn_regra;' ||
                               fam.cdn_familia_inicial || ';' ||
                               fam.cdn_familia_final || ';' ||
                               fam.dat_inic || ';' ||
                               fam.dat_fim || ';' ||
                               substr(regra.cdn_regra, 1, 1) ||
                               lpad(depara.cd_agrupador_destino, 3, '0') ||
                               substr(regra.cdn_regra, 5, 3));

          if paosimular = 'N' then
            begin
              select max(idi_regra_familia + 1)
                into vnseq
                from gp.regra_familia_faturam;
            exception
              when others then
                vnseq := 1;
            end;
            if vnseq is null then
              vnseq := 1;
            end if;

            -- criar associativa com familia trocando codigo da regra
            insert into gp.regra_familia_faturam
              (IDI_REGRA_FAMILIA,
               CDN_FAMILIA_INICIAL,
               CDN_FAMILIA_FINAL,
               DAT_INIC,
               DAT_FIM,
               CDN_REGRA,
               DAT_ULT_ATUALIZ,
               COD_USUAR_ULT_ATUALIZ,
               PROGRESS_RECID)
            values
              (vnseq,
               fam.cdn_familia_inicial,
               fam.cdn_familia_final,
               fam.dat_inic,
               fam.dat_fim,
               substr(regra.cdn_regra, 1, 1) ||
               lpad(depara.cd_agrupador_destino, 3, '0') ||
               substr(regra.cdn_regra, 5, 3),
               sysdate,
               'migracao',
               gp.regra_familia_faturam_seq.nextval);
          end if;
        end loop;
      end loop;
    end loop;

    dbms_output.put_line('================ FIM ================');
    dbms_output.put_line(' ');

  end loop;

  -- REPLICAR ORDENACAO DAS REGRAS
  for x in (select d.*, o.* from depara_replicar_agrupador d, gp.ord_valid_faturam o
                      where o.cdn_agrup_regra_faturam = d.cd_agrupador_origem) loop

    select max(id_ordem) into vid_ordem from gp.ord_valid_faturam;

    vid_ordem := vid_ordem + 1;

    insert into gp.ord_valid_faturam(cdn_agrup_regra_faturam,
                                     id_ordem,
                                     dat_inic,
                                     dat_fim,
                                     progress_recid)
                                     values(x.cd_agrupador_destino,
                                            vid_ordem,
                                            '01/01/1900',
                                            '31/12/9999',
                                            gp.ord_valid_faturam_seq.nextval);

    for y in (select r.* from gp.ord_regra_faturam r, gp.regra_faturam regra
                       where r.id_ordem = x.id_ordem
                         and r.cdn_regra = regra.cdn_regra
                         and regra.cdn_agrup_regra_faturam = x.cd_agrupador_origem) loop

      dbms_output.put_line(y.cdn_regra || ';' || vid_ordem || ';' || substr(y.cdn_regra, 1, 1) || lpad(x.cd_agrupador_destino, 3, '0') || substr(y.cdn_regra, 5, 3));

      insert into gp.ord_regra_faturam(cdn_regra,
                                       cdn_ord_exec,
                                       id_ordem,
                                       progress_recid)
                                       values(substr(y.cdn_regra, 1, 1) || lpad(x.cd_agrupador_destino, 3, '0') || substr(y.cdn_regra, 5, 3),
                                              y.cdn_ord_exec,
                                              vid_ordem,
                                              gp.ord_regra_faturam_seq.nextval);

    end loop;
  end loop;


  if aoerro = 'S' then
    raise_application_error(-20001, 'Verifique possíveis inconsistências na aba Output.');
  end if;

end p_replicar_agrupador;


  --Migração das Tabelas de Fator Moderador
  --Após o processo de migração das tabelas de Fator Moderador como agrupadores e a amarração nos
  --contratos, os usuarios irão montar as regras da coparticipação destes agrupadores.
  --Se a aplicação não popular automaticamente a tabela
  --regra_bnfciar_faturam, a procedure abaixo o fará.
/*  procedure p_cria_demais_regras_fator is
    vnseq number := 0;
  begin
    for rb in (select rben.id_regra_benef,
                      rben.cdn_modalid,
                      rben.cdn_plano,
                      rben.cdn_tip_plano,
                      rben.cdn_ter_adesao,
                      rben.dat_inic,
                      rben.dat_fim,
                      rben.cdn_regra,
                      rfat.cdn_agrup_regra_faturam
                 from regra_bnfciar_faturam rben, regra_faturam rfat
                where rfat.cdn_regra = rben.cdn_regra) loop
      for regras in (select rfi.cdn_regra
                       from regra_faturam rfi
                      where rfi.cdn_agrup_regra_faturam =
                            rb.cdn_agrup_regra_faturam
                        and rfi.cdn_regra <> rb.cdn_regra
                        and not exists
                      (select 1
                               from regra_bnfciar_faturam rbi
                              where rbi.cdn_regra = rfi.cdn_regra
                                and rbi.cdn_modalid = rb.cdn_modalid
                                and rbi.cdn_plano = rb.cdn_plano
                                and rbi.cdn_tip_plano = rb.cdn_tip_plano
                                and rbi.cdn_ter_adesao = rb.cdn_ter_adesao)) loop

        --Verificar o último código da regra (id_regra)
        select max(id_regra_benef + 1)
          into vnseq
          from regra_bnfciar_faturam;

        if vnseq is null then
          vnseq := 1;
        end if;

        insert into regra_bnfciar_faturam rf
          (id_regra_benef,
           cdn_modalid,
           cdn_plano,
           cdn_tip_plano,
           cdn_ter_adesao,
           dat_inic,
           dat_fim,
           cdn_regra,
           progress_recid)
        values
          (vnseq,
           rb.cdn_modalid,
           rb.cdn_plano,
           rb.cdn_tip_plano,
           rb.cdn_ter_adesao,
           rb.dat_inic,
           rb.dat_fim,
           regras.cdn_regra,
           gp.regra_bnfciar_faturam_seq.nextval);
      end loop;
    end loop;
  end p_cria_demais_regras_fator;

  --ASSOCIAR ASSOC_PROPOST_AGRUP e REGRA_BNFCIAR_FATURAM A PROPOSTA E TERMO CORRETOS
  --(CONFORME PLANO ORIGEM DO UNICOO) APOS REPROCESSAR MIGRACAO PRESERVANDO AS REGRAS
  procedure assoc_regras_partic_contratos is
  begin
    for x in (select ip.num_livre_10,
                     ip.cd_modalidade,
                     ip.cd_plano,
                     ip.cd_tipo_plano,
                     p.nr_insc_contratante,
                     p.nr_proposta,
                     ip.num_livre_2,
                     ip.num_livre_3,
                     co.in_tipo_pessoa,
                     a.progress_recid progress_recid_assoc,
                     p.progress_recid progress_recid_propost,
                     a.cd_modalidade MODALIDADE_ANTIGA,
                     a.nr_proposta PROPOSTA_ANTIGA,
                     a.nr_insc_contratante INSC_CONTRATANTE_ANTIGO,
                     a.num_ano_mes_control
                from import_propost         ip,
                     propost                p,
                     gp.assoc_propost_agrup a,
                     contrat                co
               where ip.num_livre_2 = a.num_livre_5 --NRREGISTRO
                 and to_char(lpad(ip.num_livre_3,4,0)) = to_char(lpad(a.cod_livre_5,4,0)) --NRCONTRATO
                 and p.cd_modalidade = ip.cd_modalidade
                 and p.nr_proposta = ip.num_livre_10
                 and co.nr_insc_contratante = p.nr_insc_contratante) loop

      update gp.ASSOC_PROPOST_AGRUP apa
         set apa.num_livre_3         = apa.cd_modalidade, -- modalidade anterior
             apa.num_livre_4         = apa.nr_proposta, -- proposta anterior
             apa.cd_modalidade       = x.cd_modalidade,
             apa.u##in_tipo_pessoa   = upper(x.in_tipo_pessoa),
             apa.in_tipo_pessoa      = upper(x.in_tipo_pessoa),
             apa.nr_insc_contratante = x.nr_insc_contratante,
             apa.nr_proposta         = x.nr_proposta
       where apa.progress_recid = x.progress_recid_assoc;

      update gp.propost p set p.char_11 = to_char(lpad(x.num_ano_mes_control,6,'0')) -- AA-MM-PROXIMO-REAJUSTE
             where p.progress_recid = x.progress_recid_propost;
    end loop;

    for x in (select ip.num_livre_10,
                     ip.cd_modalidade,
                     ip.cd_plano,
                     ip.cd_tipo_plano,
                     p.nr_insc_contratante,
                     p.nr_ter_adesao,
                     ip.num_livre_2,
                     ip.num_livre_3,
                     co.in_tipo_pessoa,
                     r.progress_recid progress_recid_r,
                     r.cdn_modalid MODALIDADE_ANTIGA,
                     r.cdn_ter_adesao TERMO_ANTIGO
                from import_propost         ip,
                     propost                p,
                     gp.regra_bnfciar_faturam r,
                     contrat                co
               where ip.num_livre_2 = r.num_livre_5 --NRREGISTRO
                 and to_char(lpad(ip.num_livre_3,4,0)) = to_char(lpad(r.cod_livre_5,4,0)) --NRCONTRATO
                 and p.cd_modalidade = ip.cd_modalidade
                 and p.nr_proposta = ip.num_livre_10
                 and co.nr_insc_contratante = p.nr_insc_contratante) loop

      update gp.regra_bnfciar_faturam r set r.num_livre_3 = r.cdn_modalid, --MODALIDADE ANTERIOR
                                            r.num_livre_4 = r.cdn_ter_adesao, --TERMO ANTERIOR
                                            r.cdn_modalid = x.cd_modalidade,
                                            r.cdn_plano   = x.cd_plano,
                                            r.cdn_tip_plano = x.cd_tipo_plano,
                                            r.cdn_ter_adesao = x.nr_ter_adesao
       where r.progress_recid = x.progress_recid_r;
    end loop;
  end assoc_regras_partic_contratos;
*/
  procedure apaga_contrato(pnrcontrato in varchar2) is
  begin
    for x in (select c.cd_modalidade,
                     c.nr_proposta,
                     b.num_seqcial_propost,
                     b.nr_contrato_antigo
                from import_propost b, gp.propost c
               where 1 = 1
                 and b.nr_contrato_antigo /*b.u##nr_contrato_antigo*/ = c.nr_contrato_antigo(+)
                 and b.num_livre_3 = to_number(pnrcontrato)) loop
      if x.cd_modalidade is not null then
        apaga_proposta_totvs(x.cd_modalidade, x.nr_proposta);
      end if;
      apaga_proposta_import(x.nr_contrato_antigo, x.num_seqcial_propost,'S');
    end loop;

  end apaga_contrato;

  procedure apaga_contrato_KL is --KILL
  begin
    for x in (select c.cd_modalidade,
                     c.nr_proposta,
                     b.num_seqcial_propost,
                     b.nr_contrato_antigo
                from import_propost b, gp.propost c
               where b.nr_contrato_antigo /*b.u##nr_contrato_antigo*/ = c.nr_contrato_antigo(+)
                 and b.u##ind_sit_import = 'KL') loop
      if x.cd_modalidade is not null then
        apaga_proposta_totvs(x.cd_modalidade, x.nr_proposta);
      end if;
      apaga_proposta_import(x.nr_contrato_antigo, x.num_seqcial_propost,'S');
    end loop;

  end apaga_contrato_KL;

procedure p_condicao_saude is

    vexistecondcid char;
    vexistedepara  char;
    vaomigrado     char;
    tcondsaud      gp.condsaud%rowtype;
    tdeclsau       gp.relacdeclasaudeproced%rowtype;
    vnm_prestador varchar2(80);

    cursor condicoes is
      select a.*, rownum cdcondicao
        from (select cddoenca, nodoenca from doenca_controlada order by 1) a;

    cursor usuarios is
      select us.cd_modalidade,
             us.nr_proposta,
             us.cd_usuario,
             dcs.cdcondicao,
             v.dtfinal_carencia,
             v.cdservico,
             v.qtdias_carencia + 1 qtdias_carencia --acrescenta um dia pois o unicoo trata inicio de CPT como "inicio + 1", enquanto o totvs comeca a contar a partir da data de inicio 18/10/18 - Alex Boeira
        from v_cpt_unicoo          v,
             import_bnfciar        ib,
             gp.usuario            us,
             depara_condicao_saude dcs
       where v.nrsequencial_usuario = ib.num_seqcial_bnfciar
         and ib.cd_carteira_antiga = us.cd_carteira_antiga
         and v.cddoenca = dcs.cddoenca
       order by 1, 2, 3;

  begin

    delete from gp.condsaud;
    delete from gp.Cond_Sau_Proced;
    delete from gp.relacdeclasaudeproced;
    delete from gp.decprest;

    --resetar_sequence('gp.condsaud_seq','gp.condsaud','progress_recid');
    --resetar_sequence('gp.cond_sau_proced_seq','gp.cond_sau_proced','progress_recid');
    --resetar_sequence('gp.relacdeclasaudeproced_seq','gp.relacdeclasaudeproced','progress_recid');
    --resetar_sequence('gp.decprest_seq','gp.decprest','progress_recid');

    for d in condicoes loop

      --criando de/para
      begin
        select 'S'
          into vexistedepara
          from depara_condicao_saude dcs
         where dcs.cddoenca = d.cddoenca
           and dcs.cdcondicao = d.cdcondicao;
      exception
        when no_data_found then
          insert into depara_condicao_saude values d;
      end;

      --inserindo tabela condicao saude

      begin
        select 'S'
          into vexistecondcid
          from gp.condsaud c
         where c.cd_condicao_saude = d.cdcondicao;
      exception
        when no_data_found then

          tcondsaud.cd_condicao_saude    := d.cdcondicao;
          tcondsaud.u##ds_condicao_saude := upper(d.nodoenca);
          tcondsaud.ds_condicao_saude    := d.nodoenca;
          tcondsaud.dt_inicio_validade   := '';
          tcondsaud.dt_final_validade    := '';
          tcondsaud.lg_medico            := 0;
          tcondsaud.lg_cid               := 0;
          tcondsaud.lg_observacao        := 0;
          tcondsaud.ft_acrescimo         := 0;
          tcondsaud.lg_impressao         := 0;
          tcondsaud.dt_atualizacao       := trunc(sysdate);
          tcondsaud.cd_userid            := 'migracao';
          tcondsaud.ds_observacao##1     := ' ';
          tcondsaud.ds_observacao##2     := ' ';
          tcondsaud.ds_observacao##3     := ' ';
          tcondsaud.ds_observacao##4     := ' ';
          tcondsaud.ds_observacao##5     := ' ';
          tcondsaud.ds_observacao##6     := ' ';
          tcondsaud.ds_observacao##7     := ' ';
          tcondsaud.ds_observacao##8     := ' ';
          tcondsaud.char_1               := ' ';
          tcondsaud.char_2               := ' ';
          tcondsaud.char_3               := ' ';
          tcondsaud.char_4               := ' ';
          tcondsaud.dec_3                := 0;
          tcondsaud.dec_4                := 0;
          tcondsaud.dec_5                := 0;
          tcondsaud.date_1               := '';
          tcondsaud.date_2               := '';
          tcondsaud.date_3               := '';
          tcondsaud.date_4               := '';
          tcondsaud.date_5               := '';
          tcondsaud.dec_1                := 0;
          tcondsaud.dec_2                := 0;
          tcondsaud.int_3                := 0;
          tcondsaud.int_4                := 0;
          tcondsaud.int_5                := 0;
          tcondsaud.int_1                := 0;
          tcondsaud.int_2                := 0;
          tcondsaud.u_char_3             := ' ';
          tcondsaud.u_date_1             := '';
          tcondsaud.u_date_2             := '';
          tcondsaud.log_1                := 0;
          tcondsaud.log_2                := 0;
          tcondsaud.log_3                := 0;
          tcondsaud.log_4                := 0;
          tcondsaud.log_5                := 0;
          tcondsaud.u_char_1             := ' ';
          tcondsaud.u_char_2             := ' ';
          tcondsaud.u_log_1              := 0;
          tcondsaud.u_log_2              := 0;
          tcondsaud.u_log_3              := 0;
          tcondsaud.u_date_3             := '';
          tcondsaud.u_dec_1              := 0;
          tcondsaud.u_dec_2              := 0;
          tcondsaud.u_dec_3              := 0;
          tcondsaud.u_int_1              := 0;
          tcondsaud.u_int_2              := 0;
          tcondsaud.u_int_3              := 0;
          tcondsaud.char_5               := ' ';
          tcondsaud.des_observacao       := ' ';

          select gp.condsaud_seq.nextval
            into tcondsaud.progress_recid
            from dual;

          begin
            insert into gp.condsaud values tcondsaud;
          exception
            when others then
              null;
          end;

      end;

    end loop;

    --commit;

    --condicao saude x procedimentos (cond_sau_proced)
    For csp In (
                Select dcs.cdcondicao, --cd_condicao_saude
                       v.cdservico,    --cd_procedimento
                       nvl(Max(du.dtfinal_carencia),to_date('31/12/9999', 'dd/mm/yyyy')) dtfinal_carencia,  --dt_limite
                       nvl(max(du.dtfinal_carencia - du.dtinicio_doenca),0) qtdias_carencia   --nr_carencia_cpt
                From   v_servico_doenca_controlada v,
                       depara_condicao_saude       dcs,
                       doenca_usuario              du,
                       servico_doenca_usuario      sd
                Where  dcs.cddoenca = v.cddoenca
                And    du.cddoenca(+) = v.cddoenca
                And    sd.cddoenca(+) = v.cddoenca
                and    v.cdservico is not null
                group By dcs.cdcondicao, v.cdservico
               ) Loop
      --
      Begin
        Select 'S'
        Into   vAoMigrado
        From   gp.COND_SAU_PROCED c
        Where  c.cd_condicao_saude = csp.cdcondicao
        And    c.cd_procedimento = csp.cdservico;
      Exception
        When NO_DATA_FOUND Then
          Insert Into gp.Cond_Sau_Proced (cd_condicao_saude, cd_procedimento, dt_limite,
                   nr_carencia_cpt, des_observacao, cod_livre_1, cod_livre_2, cod_livre_3,
                   cod_livre_4, cod_livre_5, cod_livre_6, cod_livre_7, cod_livre_8, cod_livre_9,
                   cod_livre_10, num_livre_1, num_livre_2, num_livre_3, num_livre_4, num_livre_5,
                   num_livre_6, num_livre_7, num_livre_8, num_livre_9, num_livre_10, val_livre_1,
                   val_livre_2, val_livre_3, val_livre_4, val_livre_5, val_livre_6, val_livre_7,
                   val_livre_8, val_livre_9, val_livre_10, log_livre_1, log_livre_2, log_livre_3,
                   log_livre_4, log_livre_5, log_livre_6, log_livre_7, log_livre_8, log_livre_9,
                   log_livre_10, dat_livre_1, dat_livre_2, dat_livre_3, dat_livre_4, dat_livre_5,
                   dat_livre_6, dat_livre_7, dat_livre_8, dat_livre_9, dat_livre_10,
                   cod_usuar_ult_atualiz, dat_ult_atualiz, progress_recid)
                 Values (csp.cdcondicao /*cd_condicao_saude*/, csp.cdservico /*cd_procedimento*/,
                         csp.dtfinal_carencia /*dt_limite*/, csp.qtdias_carencia /*nr_carencia_cpt*/,
                         null, --des_observacao
                         null, null, null, null, null, null, null, null, null, null, --cod_livre_?
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, --num_livre_?
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, --val_livre_?
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, --log_livre_?
                         null, null, null, null, null, null, null, null, null, null, --dat_livre_?
                         'MIGRACAO' /*cod_usuar_ult_atualiz*/, trunc(Sysdate) /*dat_ult_atualiz*/,
                         gp.cond_sau_proced_seq.nextval /*progress_recid*/);
      End;
      --
    End Loop;

    --benef x condicao saude x servico
    for u in usuarios loop

      begin
        select 'S'
          into vaomigrado
          from gp.relacdeclasaudeproced r
         where r.cd_modalidade = u.cd_modalidade
           and r.nr_proposta = u.nr_proposta
           and r.cd_usuario = u.cd_usuario
           and r.cd_condicao_saude = u.cdcondicao
           and r.cd_procedimento = u.cdservico
           and r.nr_carencia_cpt = u.qtdias_carencia;
      exception
        when no_data_found then

          tdeclsau.cd_modalidade         := u.cd_modalidade;
          tdeclsau.nr_proposta           := u.nr_proposta;
          tdeclsau.cd_usuario            := u.cd_usuario;
          tdeclsau.cd_condicao_saude     := u.cdcondicao;
          tdeclsau.cd_procedimento       := u.cdservico;
          tdeclsau.nr_carencia_cpt       := u.qtdias_carencia;
          tdeclsau.cd_userid             := 'migracao';
          tdeclsau.dt_atualizacao        := trunc(sysdate);
          tdeclsau.cod_livre_1           := ' ';
          tdeclsau.cod_livre_2           := ' ';
          tdeclsau.cod_livre_3           := ' ';
          tdeclsau.cod_livre_4           := ' ';
          tdeclsau.cod_livre_5           := ' ';
          tdeclsau.dat_livre_1           := '';
          tdeclsau.dat_livre_2           := '';
          tdeclsau.dat_livre_3           := '';
          tdeclsau.dat_livre_4           := '';
          tdeclsau.dat_livre_5           := '';
          tdeclsau.val_livre_1           := 0;
          tdeclsau.val_livre_2           := 0;
          tdeclsau.val_livre_3           := 0;
          tdeclsau.val_livre_4           := 0;
          tdeclsau.val_livre_5           := 0;
          tdeclsau.log_livre_1           := 0;
          tdeclsau.log_livre_2           := 0;
          tdeclsau.log_livre_3           := 0;
          tdeclsau.log_livre_4           := 0;
          tdeclsau.log_livre_5           := 0;
          tdeclsau.num_livre_1           := 0;
          tdeclsau.num_livre_2           := 0;
          tdeclsau.num_livre_3           := 0;
          tdeclsau.num_livre_4           := 0;
          tdeclsau.num_livre_5           := 0;
          tdeclsau.dat_ult_atualiz       := '';
          tdeclsau.hra_ult_atualiz       := '';
          tdeclsau.cod_usuar_ult_atualiz := 'migracao';
          tdeclsau.cod_livre_usuar_1     := ' ';
          tdeclsau.cod_livre_usuar_2     := ' ';
          tdeclsau.cod_livre_usuar_3     := ' ';
          tdeclsau.dat_livre_usuar_1     := '';
          tdeclsau.dat_livre_usuar_2     := '';
          tdeclsau.dat_livre_usuar_3     := '';
          tdeclsau.val_livre_usuar_1     := 0;
          tdeclsau.val_livre_usuar_2     := 0;
          tdeclsau.val_livre_usuar_3     := 0;
          tdeclsau.num_livre_usuar_1     := 0;
          tdeclsau.num_livre_usuar_2     := 0;
          tdeclsau.num_livre_usuar_3     := 0;
          tdeclsau.log_livre_usuar_1     := 0;
          tdeclsau.log_livre_usuar_2     := 0;
          tdeclsau.log_livre_usuar_3     := 0;

          select gp.relacdeclasaudeproced_seq.nextval
            into tdeclsau.progress_recid
            from dual;

          begin
            insert into gp.relacdeclasaudeproced values tdeclsau;
          exception
            when others then
              null;
          end;

      end;

    end loop;

    for x in (select distinct r.cd_modalidade, r.nr_proposta, r.cd_usuario, r.cd_condicao_saude from gp.relacdeclasaudeproced r) loop

      begin
        select p.nm_prestador into vnm_prestador
          from gp.preserv p
         where p.cd_unidade = PCD_UNIDADE_DECPREST
           and p.cd_prestador = PCD_PRESTADOR_DECPREST;
      exception
        when others then
          vnm_prestador := 'PRESTADOR NAO ENCONTRADO';
      end;

      insert into gp.decprest
        (CD_MODALIDADE,
         NR_PROPOSTA,
         CD_USUARIO,
         NR_SEQUENCIA,
         CD_UNIDADE,
         CD_PRESTADOR,
         NM_PRESTADOR,
         LG_CREDENCIADO_UNIDADE,
         DS_PARECER,
         CD_CONDICAO_SAUDE,
         CD_USERID,
         DT_ATUALIZACAO,
         INT_1,
         INT_2,
         INT_3,
         LOG_1,
         LOG_2,
         LOG_3,
         DATE_1,
         DATE_2,
         DATE_3,
         CHAR_1,
         CHAR_2,
         CHAR_3##1,
         CHAR_3##2,
         CHAR_4,
         DEC_3,
         DEC_2,
         U_CHAR_1,
         U_CHAR_2,
         U_CHAR_3,
         U_INT_1,
         U_INT_2,
         U_INT_3,
         U_DATE_1,
         U_DATE_2,
         U_DATE_3,
         U_LOG_1,
         U_LOG_2,
         U_LOG_3,
         U_DEC_1,
         U_DEC_2,
         U_DEC_3,
         CHAR_5,
         DATE_4,
         DATE_5,
         DEC_1,
         DEC_4,
         DEC_5,
         INT_4,
         INT_5,
         LOG_4,
         LOG_5,
         PROGRESS_RECID)
      values
        (x.cd_modalidade,
         x.nr_proposta,
         x.cd_usuario,
         x.cd_condicao_saude,--sequencia
         PCD_UNIDADE_DECPREST,
         PCD_PRESTADOR_DECPREST,
         substr(vnm_prestador,1,80),
         1,--credenciado
         ' ',--PARECER
         x.cd_condicao_saude,--codicao saude
         'MIGRACAO',
         sysdate,
         0,
         0,
         0,
         0,
         0,
         0,
         null,
         null,
         null,
         ' ',
         ' ',
         ' ',
         ' ',
         ' ',
         0,
         0,
         ' ',
         ' ',
         ' ',
         0,
         0,
         0,
         null,
         null,
         null,
         0,
         0,
         0,
         0,
         0,
         0,
         ' ',
         null,
         null,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         gp.decprest_seq.nextval);

    end loop;

    commit;
  end p_condicao_saude;

  procedure p_migra_estrutura is

  begin

    begin
      p_migra_pl_gr_pa;
    exception
      when others then
        null;
    end;

    begin
      p_migra_qtdmoeda;
    exception
      when others then
        null;
    end;

    begin
      p_migra_forpagtx;
    exception
      when others then
        null;
    end;

    begin
      p_migra_quantitativo_permitido;
    exception
      when others then
        null;
    end;

    begin
      p_migra_trans_mod_proced;
    exception
      when others then
        null;
    end;

    /*    begin
          p_migra_abrangencia;
        exception
          when others then
            null;
        end;
    */
    --commit;

  end p_migra_estrutura;

  procedure p_carga_unimed is
    t_unimed gp.unimed%rowtype;
    vao_existe_unimed varchar2(1);

    cursor dados_unimed is(
      select a.cdareaacao cd_unimed,
             a.noareaacao nm_unimed,
             upper(substr(a.noareaacao, 1, 30)) U##NM_UNIMED_REDUZ,
             substr(a.noareaacao, 1, 30) NM_UNIMED_REDUZ,
             (select substr(nologradouro, 1, 40)
                from endereco e
               where e.nrregistro = p.nrregistro
                 and e.aocorrespondencia = 'S'
                 and rownum = 1) en_rua, --logradouro
             (select substr(nobairro, 1, 20)
                from endereco e
               where e.nrregistro = p.nrregistro
                 and e.aocorrespondencia = 'S'
                 and rownum = 1) en_bairro, --logradouro
             e.cdcidade cd_cidade,
             e.nrcep en_cep,
             c.cdestado en_uf,
             case
               when a.cdareaacao = '999' then
                1
               when substr(trim(a.cdareaacao), 1, 1) = '9' then
                2
               else
                3
             end cd_tipo_unimed,
             p.nrcgc_cpf nr_cgc,
             '01/01/2000' dt_fundacao,
             substr(trim(e.nrtelefone), 1, 20) nr_telefone,
             substr(trim(e.nrfax), 1, 20) nr_fax,
             ' ' nr_ramal_fax,
             ' ' nr_telex,
             ' ' nm_presidente,
             ' ' nm_vice_presidente,
             ' ' nm_superintendente,
             ' ' nm_gerente,
             0 cd_controle_cidade,
             '01/01/2000' dt_atualizacao,
             'migracao' cd_userid,
             0 cd_federacao,
             '1' lg_repassar,
             a.cdareaacao cod_emitente,
             '1' lgestabelecimentounico,
             nvl(substr(trim(a.nrtelefone_autoriz_intercambio), 1, 20),0) nrtelefoneatendimento,
             nvl(substr(trim(a.nrfax_autoriz_intercambio), 1, 20),0) nr_fax_atendimento,
             0 lg_irf,
             trim(a.cdemail) nm_email,
             ' ' CHAR_2,
             ' ' CHAR_3##1,
             ' ' CHAR_3##2,
             null DATE_1,
             null DATE_3,
             0 DEC_3,
             0 cd_unidade_intra,
             0 lg_perm_cpf_dup,
             '1' log_3, --se utiliza ordem de serviço no ptu
             ' ' U_CHAR_1,
             ' ' U_CHAR_2,
             ' ' U_CHAR_3,
             0 U_INT_1,
             0 U_INT_2,
             0 U_INT_3,
             null U_DATE_1,
             null U_DATE_2,
             null U_DATE_3,
             0 U_DEC_1,
             0 U_DEC_2,
             0 U_DEC_3,
             0 U_LOG_1,
             0 U_LOG_2,
             0 U_LOG_3,
             null DATE_2,
             0 DEC_1,
             0 DEC_2,
             0 cd_operadora_susep,
             0 nr_ult_arq_susep,
             '1' lg_obr_dados_benef,
             ' ' CHAR_4,
             ' ' CHAR_5,
             null DATE_4,
             null DATE_5,
             0 DEC_4,
             0 DEC_5,
             0 CDUNIDADEADMINISTRADORA,
             0 INT_5,
             0 LOG_4,
             0 LOG_5,
             '1' LGPOSSUIINTERCELETRONICO,
             ' ' CHAR_1,
             2 INT_1, -- campo ID_OPE_PREST do A401 (Prestador) -> 0-Não informado; 1-Prestadora; 2-Operadora
             0 INT_2,
             0 INT_3,
             0 INT_4,
             '0' LG_TEM_SERIOUS,
             ' ' NM_CARGO1,
             ' ' NM_FUNCIONARIO_CARGO1,
             ' ' NM_CARGO2,
             ' ' NM_FUNCIONARIO_CARGO2,
             ' ' NM_CARGO3,
             ' ' NM_FUNCIONARIO_CARGO3,
             ' ' NM_CARGO4,
             ' ' NM_FUNCIONARIO_CARGO4,
             ' ' NM_CARGO5,
             ' ' NM_FUNCIONARIO_CARGO5,
             ' ' NM_CARGO6,
             ' ' NM_FUNCIONARIO_CARGO6,
             ' ' NM_CARGO7,
             ' ' NM_FUNCIONARIO_CARGO7,
             ' ' NM_CARGO8,
             ' ' NM_FUNCIONARIO_CARGO8,
             ' ' NM_CARGO9,
             ' ' NM_FUNCIONARIO_CARGO9,
             ' ' NM_CARGO10,
             ' ' NM_FUNCIONARIO_CARGO10,
             ' ' NM_HOSTNAME,
             0 LOG_6,
             0 LOG_7,
             gp.UNIMED_SEQ.NEXTVAL PROGRESS_RECID
        from producao.area_de_acao@unicoo_homologa a,
             producao.endereco@unicoo_homologa     e,
             producao.pessoa@unicoo_homologa       p,
             producao.cidade@unicoo_homologa       c
       where e.nrregistro(+) = a.nrregistro_pessoa
         and e.aocorrespondencia(+) = 'S'
         and p.nrregistro = a.nrregistro_pessoa
         and c.cdcidade(+) = e.cdcidade);
  begin

    for d in dados_unimed loop
        begin
          select 'S'
            into vao_existe_unimed
            from gp.unimed u
           where u.cd_unimed = d.cd_unimed;
        exception
          when no_data_found then
            vao_existe_unimed := 'N';
        end;

        if vao_existe_unimed = 'N' then
              t_unimed.CD_UNIMED                := d.CD_UNIMED;
              t_unimed.NM_UNIMED                := d.NM_UNIMED;
              --t_unimed.U##NM_UNIMED_REDUZ       := d.U##NM_UNIMED_REDUZ;
              t_unimed.NM_UNIMED_REDUZ          := d.NM_UNIMED_REDUZ;
              t_unimed.EN_RUA                   := d.EN_RUA;
              t_unimed.EN_BAIRRO                := d.EN_BAIRRO;
              t_unimed.CD_CIDADE                := d.CD_CIDADE;
              t_unimed.EN_CEP                   := d.EN_CEP;
              t_unimed.EN_UF                    := d.EN_UF;
              t_unimed.CD_TIPO_UNIMED           := d.CD_TIPO_UNIMED;
              t_unimed.NR_CGC                   := d.NR_CGC;
              t_unimed.DT_FUNDACAO              := d.DT_FUNDACAO;
              t_unimed.NR_TELEFONE              := d.NR_TELEFONE;
              t_unimed.NR_FAX                   := d.NR_FAX;
              t_unimed.NR_RAMAL_FAX             := d.NR_RAMAL_FAX;
              t_unimed.NR_TELEX                 := d.NR_TELEX;
              t_unimed.NM_PRESIDENTE            := d.NM_PRESIDENTE;
              t_unimed.NM_VICE_PRESIDENTE       := d.NM_VICE_PRESIDENTE;
              t_unimed.NM_SUPERINTENDENTE       := d.NM_SUPERINTENDENTE;
              t_unimed.NM_GERENTE               := d.NM_GERENTE;
              t_unimed.CD_CONTROLE_CIDADE       := d.CD_CONTROLE_CIDADE;
              t_unimed.DT_ATUALIZACAO           := d.DT_ATUALIZACAO;
              t_unimed.CD_USERID                := d.CD_USERID;
              t_unimed.CD_FEDERACAO             := d.CD_FEDERACAO;
              t_unimed.LG_REPASSAR              := d.LG_REPASSAR;
              t_unimed.COD_EMITENTE             := d.COD_EMITENTE;
              t_unimed.LGESTABELECIMENTOUNICO   := d.LGESTABELECIMENTOUNICO;
              t_unimed.NRTELEFONEATENDIMENTO    := d.NRTELEFONEATENDIMENTO;
              t_unimed.NR_FAX_ATENDIMENTO       := d.NR_FAX_ATENDIMENTO;
              t_unimed.LG_IRF                   := d.LG_IRF;
              t_unimed.NM_EMAIL                 := d.NM_EMAIL;
              t_unimed.CHAR_2                   := d.CHAR_2;
              t_unimed.CHAR_3##1                := d.CHAR_3##1;
              t_unimed.CHAR_3##2                := d.CHAR_3##2;
              t_unimed.DATE_1                   := d.DATE_1;
              t_unimed.DATE_3                   := d.DATE_3;
              t_unimed.DEC_3                    := d.DEC_3;
              t_unimed.CD_UNIDADE_INTRA         := d.CD_UNIDADE_INTRA;
              t_unimed.LG_PERM_CPF_DUP          := d.LG_PERM_CPF_DUP;
              t_unimed.LOG_3                    := d.LOG_3;
              t_unimed.U_CHAR_1                 := d.U_CHAR_1;
              t_unimed.U_CHAR_2                 := d.U_CHAR_2;
              t_unimed.U_CHAR_3                 := d.U_CHAR_3;
              t_unimed.U_INT_1                  := d.U_INT_1;
              t_unimed.U_INT_2                  := d.U_INT_2;
              t_unimed.U_INT_3                  := d.U_INT_3;
              t_unimed.U_DATE_1                 := d.U_DATE_1;
              t_unimed.U_DATE_2                 := d.U_DATE_2;
              t_unimed.U_DATE_3                 := d.U_DATE_3;
              t_unimed.U_DEC_1                  := d.U_DEC_1;
              t_unimed.U_DEC_2                  := d.U_DEC_2;
              t_unimed.U_DEC_3                  := d.U_DEC_3;
              t_unimed.U_LOG_1                  := d.U_LOG_1;
              t_unimed.U_LOG_2                  := d.U_LOG_2;
              t_unimed.U_LOG_3                  := d.U_LOG_3;
              t_unimed.DATE_2                   := d.DATE_2;
              t_unimed.DEC_1                    := d.DEC_1;
              t_unimed.DEC_2                    := d.DEC_2;
              t_unimed.CD_OPERADORA_SUSEP       := d.CD_OPERADORA_SUSEP;
              t_unimed.NR_ULT_ARQ_SUSEP         := d.NR_ULT_ARQ_SUSEP;
              t_unimed.LG_OBR_DADOS_BENEF       := d.LG_OBR_DADOS_BENEF;
              t_unimed.CHAR_4                   := d.CHAR_4;
              t_unimed.CHAR_5                   := d.CHAR_5;
              t_unimed.DATE_4                   := d.DATE_4;
              t_unimed.DATE_5                   := d.DATE_5;
              t_unimed.DEC_4                    := d.DEC_4;
              t_unimed.DEC_5                    := d.DEC_5;
              t_unimed.CDUNIDADEADMINISTRADORA  := d.CDUNIDADEADMINISTRADORA;
              t_unimed.INT_5                    := d.INT_5;
              t_unimed.LOG_4                    := d.LOG_4;
              t_unimed.LOG_5                    := d.LOG_5;
              t_unimed.LGPOSSUIINTERCELETRONICO := d.LGPOSSUIINTERCELETRONICO;
              t_unimed.CHAR_1                   := d.CHAR_1;
              t_unimed.INT_1                    := d.INT_1;
              t_unimed.INT_2                    := d.INT_2;
              t_unimed.INT_3                    := d.INT_3;
              t_unimed.INT_4                    := d.INT_4;
              t_unimed.LG_TEM_SERIOUS           := d.LG_TEM_SERIOUS;
              t_unimed.NM_CARGO1                := d.NM_CARGO1;
              t_unimed.NM_FUNCIONARIO_CARGO1    := d.NM_FUNCIONARIO_CARGO1;
              t_unimed.NM_CARGO2                := d.NM_CARGO2;
              t_unimed.NM_FUNCIONARIO_CARGO2    := d.NM_FUNCIONARIO_CARGO2;
              t_unimed.NM_CARGO3                := d.NM_CARGO3;
              t_unimed.NM_FUNCIONARIO_CARGO3    := d.NM_FUNCIONARIO_CARGO3;
              t_unimed.NM_CARGO4                := d.NM_CARGO4;
              t_unimed.NM_FUNCIONARIO_CARGO4    := d.NM_FUNCIONARIO_CARGO4;
              t_unimed.NM_CARGO5                := d.NM_CARGO5;
              t_unimed.NM_FUNCIONARIO_CARGO5    := d.NM_FUNCIONARIO_CARGO5;
              t_unimed.NM_CARGO6                := d.NM_CARGO6;
              t_unimed.NM_FUNCIONARIO_CARGO6    := d.NM_FUNCIONARIO_CARGO6;
              t_unimed.NM_CARGO7                := d.NM_CARGO7;
              t_unimed.NM_FUNCIONARIO_CARGO7    := d.NM_FUNCIONARIO_CARGO7;
              t_unimed.NM_CARGO8                := d.NM_CARGO8;
              t_unimed.NM_FUNCIONARIO_CARGO8    := d.NM_FUNCIONARIO_CARGO8;
              t_unimed.NM_CARGO9                := d.NM_CARGO9;
              t_unimed.NM_FUNCIONARIO_CARGO9    := d.NM_FUNCIONARIO_CARGO9;
              t_unimed.NM_CARGO10               := d.NM_CARGO10;
              t_unimed.NM_FUNCIONARIO_CARGO10   := d.NM_FUNCIONARIO_CARGO10;
              t_unimed.NM_HOSTNAME              := d.NM_HOSTNAME;
              t_unimed.LOG_6                    := d.LOG_6;
              t_unimed.LOG_7                    := d.LOG_7;
              t_unimed.PROGRESS_RECID           := d.PROGRESS_RECID;

              insert into unimed VALUES t_unimed;

        end if;
    end loop;

    /* Evandro Levi (04/09/2018): Atualização do cadastro migrado com as informações atualizadas do CADU 2016 */
    Begin
      For Rx in (Select CD_UNIMED, NM_UNIMED, U##NM_UNIMED_REDUZ, NM_UNIMED_REDUZ,
                        EN_RUA, EN_BAIRRO, EN_CEP, EN_UF, CD_TIPO_UNIMED, NR_CGC,
                        DT_FUNDACAO, NR_TELEFONE, NR_FAX, NM_PRESIDENTE, CD_FEDERACAO,
                        COD_EMITENTE, NM_EMAIL, CD_OPERADORA_SUSEP
                 From   UNIMED_DUMP ud
                 Where  Exists (Select 1 From gp.unimed where cd_unimed = ud.cd_unimed)) Loop
        --
        Update gp.unimed Set NM_UNIMED          = Rx.NM_UNIMED,
                             --U##NM_UNIMED_REDUZ = Rx.U##NM_UNIMED_REDUZ,
                             NM_UNIMED_REDUZ    = Rx.NM_UNIMED_REDUZ,
                             EN_RUA             = Rx.EN_RUA,
                             EN_BAIRRO          = Rx.EN_BAIRRO,
                             EN_CEP             = Rx.EN_CEP,
                             EN_UF              = Rx.EN_UF,
                             CD_TIPO_UNIMED     = Rx.CD_TIPO_UNIMED,
                             NR_CGC             = Rx.NR_CGC,
                             DT_FUNDACAO        = Rx.DT_FUNDACAO,
                             NR_TELEFONE        = Rx.NR_TELEFONE,
                             NR_FAX             = Rx.NR_FAX,
                             NM_PRESIDENTE      = Rx.NM_PRESIDENTE,
                             CD_FEDERACAO       = Rx.CD_FEDERACAO,
                             COD_EMITENTE       = Rx.COD_EMITENTE,
                             NM_EMAIL           = Rx.NM_EMAIL,
                             CD_OPERADORA_SUSEP = Rx.CD_OPERADORA_SUSEP
                         Where CD_UNIMED = Rx.CD_UNIMED;
        --
      End Loop;
    Exception
      when others then null;
    End;

  /*
    begin
    update unimed u
       set u.nm_presidente =
           (select nm_presidente
              from unimed_dump uu
             where uu.cd_unimed = u.cd_unimed);
    update unimed u
       set u.dt_fundacao =
           (select dt_fundacao
              from unimed_dump uu
             where uu.cd_unimed = u.cd_unimed);
    update unimed u
       set u.cd_operadora_susep =
           (select cd_operadora_susep
              from unimed_dump uu
             where uu.cd_unimed = u.cd_unimed);
    exception
       when others then null;
    end;
  */
  end p_carga_unimed;

  procedure p_migra_dados_pessoa is

  begin
    begin
      p_migra_pessoa_fisica;
    exception
      when others then
        null;
    end;
    begin
      --      --commit;
      p_migra_pessoajuridica;
    exception
      when others then
        null;
    end;
    begin
      --      --commit;
      p_migra_endereco;
    exception
      when others then
        null;
    end;
    begin
      --      --commit;

      p_migra_contato;
    exception
      when others then
        null;
    end;

    commit;
  end p_migra_dados_pessoa;

  procedure p_contratante is

  begin
    --apagar erros para reprocessar
    for x in (select e.NUM_SEQCIAL_CONTROL, e.NUM_SEQCIAL, c.nrregistro
                from erro_process_import e, temp_migracao_contratante c
               where e.num_seqcial_control = c.nrseq_controle
                 and c.cdsituacao = 'ER') loop
      delete from erro_process_import e where e.num_seqcial_control = x.num_seqcial_control
                                          and e.num_seqcial = x.num_seqcial;
      update temp_migracao_contratante tc set tc.cdsituacao = 'RE'
       where tc.nrregistro = x.nrregistro;
    end loop;

    p_gera_contrat;

    p_migra_contratante;
    commit;
  end p_contratante;

  procedure p_mensagem_carteira is

    vcont number := 0;
    vaux  number := 0;

    vmensagem1 gp.menscart.ds_mensagem##1%type;
    vmensagem2 gp.menscart.ds_mensagem##2%type;
    vmensagem3 gp.menscart.ds_mensagem##3%type;
    vmensagem4 gp.menscart.ds_mensagem##4%type;

    tmenscart gp.menscart%rowtype;
    ttipomens gp.tipomens%rowtype;

    pcdclassemens tm_parametro.cdparametro%type := f_tm_parametro('CDCLASSE');

    cursor c_mensagens is

      select a.cd_modalidade,
             a.cd_plano,
             a.cd_tipo_plano,
             nvl(a.nr_pROPosta, 0) nr_proposta,
             WM_CONCAT(txmensagem) txmensagem,
             a.cd_modulo
        from (select mens.*
                from (select distinct *
                        from (select v.cd_modalidade,
                                     v.cd_plano,
                                     v.cd_tipo_plano,
                                     0               nr_proposta,
                                     txmensagem,
                                     1               cd_modulo
                                from mensagem_contrato_padrao m,
                                     t_v_plano_padrao         v
                               where txmensagem is not null
                                 and v.cdcontrato = m.cdcontrato
                               order by 1, 2, 3, m.nrsequencia)
                      union
                      select distinct *
                        from (select pr.cd_modalidade,
                                     pr.cd_plano,
                                     pr.cd_tipo_plano,
                                     pr.num_livre_10,
                                     pe.txmensagem,
                                     1 cd_modulo
                                from mensagem_contrato_pessoa pe,
                                     import_propost           pr
                               where pe.nrregistro = pr.num_livre_2
                                 and pe.nrcontrato = pr.num_livre_3
                                 and pr.ind_sit_import = 'IT'
                                 and pe.txmensagem is not null
                               order by 1, 2, 3, pe.nrsequencia)
                      union
                      select *
                        from (select distinct pr.cd_modalidade,
                                              pr.cd_plano,
                                              pr.cd_tipo_plano,
                                              pr.num_livre_10 nr_proposta,
                                              mc.ds_modulo,
                                              mc.cd_modulo
                                from (select cc.nrregistro,
                                             cc.nrcontrato,
                                             cc.cdcategserv,
                                             cs.nocategserv,
                                             cc.aoimprime_carteirinha
                                        from categoria_de_servico_contr_pes cc,
                                             categoria_de_servico           cs
                                       where (cc.cdcontrato = cs.cdcontrato)
                                         and (cc.cdcategserv = cs.cdcategserv)
                                      union
                                      select cp.nrregistro,
                                             substr(cp.nrcontrato, 1, 8) nrcontrato,
                                             c.cdcategserv,
                                             c.nocategserv,
                                             c.aoimprime_carteirinha
                                        from categoria_de_servico c,
                                             contrato_plano       cp
                                       where (c.cdcontrato = cp.cdcontrato or
                                             cp.cdcontrato is null)) a,
                                     import_propost pr,
                                     depara_modulo dp,
                                     gp.mod_cob mc
                               where a.aoimprime_carteirinha = 'S'
                                 and a.nrregistro = pr.num_livre_2
                                 and a.nrcontrato = pr.num_livre_3
                                 and dp.cdcategserv = a.cdcategserv
                                 and mc.cd_modulo = dp.cdmodulo
                                 and pr.ind_sit_import = 'IT'
                              --and pr.num_livre_3 = 0530
                              )
                       order by 1, 2, 3, 4, 6) mens
               order by 1, 2, 3, 4) a
       group by a.cd_modalidade,
                a.cd_plano,
                a.cd_tipo_plano,
                nvl(a.nr_pROPosta, 0),
                a.cd_modulo;

  begin
    for m in c_mensagens loop

      select count(*) + 1 into vaux from gp.menscart;

      vmensagem1 := substr(m.txmensagem, 0, 60);
      vmensagem2 := nvl(substr(m.txmensagem, 61, 60), ' ');
      vmensagem3 := nvl(substr(m.txmensagem, 122, 60), ' ');
      vmensagem4 := nvl(substr(m.txmensagem, 183, 60), ' ');

      tmenscart.cd_mensagem    := vaux;
      tmenscart.ds_mensagem##1 := vmensagem1;
      tmenscart.ds_mensagem##2 := vmensagem2;
      tmenscart.ds_mensagem##3 := vmensagem3;
      tmenscart.ds_mensagem##4 := vmensagem4;
      tmenscart.cd_userid      := 'migracao';
      tmenscart.dt_atualizacao := trunc(sysdate);
      tmenscart.char_1         := ' ';
      tmenscart.char_2         := ' ';
      tmenscart.char_3         := ' ';
      tmenscart.char_4         := ' ';
      tmenscart.char_5         := ' ';
      tmenscart.log_1          := 0;
      tmenscart.log_2          := 0;
      tmenscart.log_3          := 0;
      tmenscart.log_4          := 0;
      tmenscart.log_5          := 0;
      tmenscart.dec_1          := 0;
      tmenscart.dec_2          := 0;
      tmenscart.dec_3          := 0;
      tmenscart.dec_4          := 0;
      tmenscart.dec_5          := 0;
      tmenscart.date_1         := '';
      tmenscart.date_2         := '';
      tmenscart.date_3         := '';
      tmenscart.date_4         := '';
      tmenscart.date_5         := '';
      tmenscart.int_1          := 0;
      tmenscart.int_2          := 0;
      tmenscart.int_3          := 0;
      tmenscart.int_4          := 0;
      tmenscart.int_5          := 0;
      tmenscart.u_char_1       := ' ';
      tmenscart.u_char_2       := ' ';
      tmenscart.u_char_3       := ' ';
      tmenscart.u_date_1       := '';
      tmenscart.u_date_2       := '';
      tmenscart.u_date_3       := '';
      tmenscart.u_dec_1        := 0;
      tmenscart.u_dec_2        := 0;
      tmenscart.u_dec_3        := 0;
      tmenscart.u_int_1        := 0;
      tmenscart.u_int_2        := 0;
      tmenscart.u_int_3        := 0;
      tmenscart.u_log_1        := 0;
      tmenscart.u_log_2        := 0;
      tmenscart.u_log_3        := 0;

      select gp.menscart_seq.nextval
        into tmenscart.progress_recid
        from dual;

      begin
        insert into gp.menscart values tmenscart;
      exception
        when dup_val_on_index then
          null;
      end;

      vcont := vcont + 1;

      ttipomens.cd_modalidade  := m.cd_modalidade;
      ttipomens.cd_plano       := m.cd_plano;
      ttipomens.cd_tipo_plano  := m.cd_tipo_plano;
      ttipomens.cd_modulo      := m.cd_modulo;
      ttipomens.cd_mensagem    := vaux;
      ttipomens.cd_userid      := 'migracao';
      ttipomens.dt_atualizacao := trunc(sysdate);
      if m.nr_proposta <> '0' then

        select cd_forma_pagto
          into ttipomens.cd_forma_pagto
          from gp.propost pr
         where pr.cd_modalidade = m.cd_modalidade
           and pr.nr_proposta = m.nr_proposta;
      else
        select cd_forma_pagto
          into ttipomens.cd_forma_pagto
          from gp.for_pag ff
         where ff.cd_modalidade = m.cd_modalidade
           and ff.cd_plano = m.cd_plano
           and ff.cd_tipo_plano = m.cd_tipo_plano
           and rownum = 1;
      end if;

      ttipomens.cd_classe_mens        := PCDCLASSEMENS;
      ttipomens.ds_observacao##1      := ' ';
      ttipomens.ds_observacao##2      := ' ';
      ttipomens.ds_observacao##3      := ' ';
      ttipomens.cd_tab_preco          := ' ';
      ttipomens.lg_mensagem_fixa := case
                                      when m.cd_modulo = 1 then
                                       1
                                      else
                                       0
                                    end;
      ttipomens.in_sexo               := 0;
      ttipomens.lg_imprime_data := case
                                     when m.cd_modulo = 1 then
                                      0
                                     else
                                      1
                                   end;
      ttipomens.lg_calcula_data := case
                                     when m.cd_modulo = 1 then
                                      0
                                     else
                                      1
                                   end;
      ttipomens.dt_validade_mensagem  := null;
      ttipomens.nr_dias_validade_mens := 0;
      ttipomens.dt_inicio_impressao   := trunc(sysdate);
      ttipomens.ds_complemento_mens   := ' ';
      ttipomens.char_2                := ' ';
      ttipomens.char_3##1             := ' ';
      ttipomens.char_3##2             := ' ';
      ttipomens.date_1                := '';
      ttipomens.date_2                := '';
      ttipomens.date_3                := '';
      ttipomens.inimpmensaposvenccar  := 1;
      ttipomens.int_2                 := 0;
      ttipomens.int_3                 := 0;
      ttipomens.log_1                 := 0;
      ttipomens.log_2                 := 0;
      ttipomens.log_3                 := 0;
      ttipomens.dec_1                 := 0;
      ttipomens.dec_2                 := 0;
      ttipomens.dec_3                 := 0;
      ttipomens.u_char_1              := ' ';
      ttipomens.u_char_2              := ' ';
      ttipomens.u_char_3              := ' ';
      ttipomens.u_int_1               := 0;
      ttipomens.u_int_2               := 0;
      ttipomens.u_int_3               := 0;
      ttipomens.u_date_1              := '';
      ttipomens.u_date_2              := '';
      ttipomens.u_date_3              := '';
      ttipomens.u_dec_1               := 0;
      ttipomens.u_dec_2               := 0;
      ttipomens.u_dec_3               := 0;
      ttipomens.u_log_1               := 0;
      ttipomens.u_log_2               := 0;
      ttipomens.u_log_3               := 0;
      ttipomens.char_4                := ' ';
      ttipomens.char_5                := ' ';
      ttipomens.date_4                := '';
      ttipomens.date_5                := '';
      ttipomens.dec_5                 := 0;
      ttipomens.int_4                 := 0;
      ttipomens.int_5                 := 0;
      ttipomens.log_4                 := 0;
      ttipomens.log_5                 := 0;
      ttipomens.dec_4                 := 0;
      ttipomens.char_1                := ' ';
      ttipomens.int_1                 := 0;
      ttipomens.u##ind_tip_comb := case
                                     when m.nr_proposta = 0 then
                                      'P'
                                     else
                                      'C'
                                   end;
      ttipomens.ind_tip_comb := case
                                  when m.nr_proposta = 0 then
                                   'P'
                                  else
                                   'C'
                                end;
      ttipomens.nr_ter_adesao         := m.nr_proposta;
      ttipomens.cd_usuario            := 0;
      ttipomens.des_observacao        := ' ';
      select gp.tipomens_seq.nextval
        into ttipomens.progress_recid
        from dual;

      begin
        insert into gp.tipomens values ttipomens;
      exception
        when dup_val_on_index then
          null;
      end;

      vcont := vcont + 1;

      if vcont > 1000 then
        --commit;
        vcont := 0;
      end if;

    end loop;

    --commit;
  end p_mensagem_carteira;

  procedure p_import_fatura is
    vsqmigracfatur number;
    vaomigrado     char;
    cdmodalidade   number;
    nrtermoadesao  number;
    nrcontratos    number;
    cdsituacao varchar2(2);
    dserro     varchar2(200);
    ponto      varchar2(5);
    dscomplemento     varchar2(200);
    aotem_contrato varchar2(1);
    hash_atual varchar2(100);
    

    cursor c_titulo is
      select tcr.cod_espec_docto,
             tcr.cod_ser_docto,
             tcr.cod_titulo_acr cod_tit_acr,
             nvl(decode(tcr.cod_parcela, ' ', 0), 0) cod_parcela,
             f.dtemissao dat_emis_docto,
             f.dtvencimento dat_vencto_tit_acr,
             f.vltotal_faturado val_liq_tit_acr,
             f.nrperiodo nrperiodo_compet,
             f.nrfatura nrdocumento,
             tcr.cod_portador,
             f.dtemissao,
             f.nrcontrato,
             f.nrfamilia,
             f.cdlotacao,
             f.nrperiodo,
             tcr.nrpessoa nrregistro,
             tdf.nofaturamento
        from faturamento            f,
             titulo_a_receber       tr,
             ti_controle_integracao tci,
             ti_tit_acr             tcr,
             tipo_de_faturamento    tdf
       where f.nrfatura = tr.nrdocumento
         and tci.nrsequencial_origem = tr.nrregistro_titulo
         and tci.cdidentificador = tr.nrdocumento
         and tcr.nrseq_controle_integracao = tci.nrsequencial
         and tci.tpintegracao = 'TR'
         and tci.cdsituacao = 'IT'
         and f.nrperiodo between P_AAAAMM_INI_FATURAS and P_AAAAMM_FIM_FATURAS
         and tdf.tpfaturamento(+) = tcr.cod_ser_docto
         and exists(
               select 1 from usuario u
                           where u.nrregistro = f.nrregistro
                             and u.nrcontrato = f.nrcontrato
                             /*18/01/2019 - logica comentada para atender issue NIG-1463 - migrar contratos
                                            mesmo que tenham apenas beneficiario eventual*/
                             /*and(   u.nrfamilia <> 0 -- nrfamilia = 0 indica BENEFICIÁRIO EVENTUAL

                             -- TESTE IMPLEMENTADO EM 18/04/2018 - ALEX. VALIDAR AO CRIAR AMBIENTE HML-PROD
                             -- TRATAMENTO PARA ATENDER NECESSIDADE DE NOVA IGUACU, PARA MIGRAR CONTRATOS DE MEDICINA OCUPACIONAL
                                 or (u.nrcontrato >= 5000 and u.nrcontrato <= 5999))*/ -- faixa de contratos de MEDICINA OCUPACIONAL

                             and (exists (select 1
                                           from gp.pessoa_fisica pf
                                          where pf.id_pessoa = u.nrregistro_usuario)
                                  or u.nrfamilia = 0) -- BENEFICIARIO EVENTUAL
                             and not exists
                             (select 1 from temp_plano_nao_migrar t
                                      where t.cdcontrato = u.cdcontrato)
                             and not exists
                             (select 1 from temp_contrato_nao_migrar t
                                      where t.nrcontrato = u.nrcontrato)
                             )

         and not exists
       (select 1
                from gp.migrac_fatur m
               where m.cd_especie = tcr.cod_espec_docto
                 and m.serie = tcr.cod_ser_docto
                 and m.nr_titulo_acr = tcr.cod_titulo_acr
                 and m.parcela = decode(tcr.cod_parcela, ' ', 0));
  begin
    --setar erros de negocio para reprocessar
    update gp.migrac_fatur f set f.cod_livre_1 = 'RC'
     where f.cod_livre_1 = 'PE';     
  
    delete from gp.migrac_fatur mf where mf.cod_livre_1 = 'ER';
  
    --checar se dados de origem da MIGRAC_FATUR no Unicoo mudaram.
    --se sim, apagar temporaria e tabelas do TOTVS para ser recriado.
    for x in (select mf.cod_livre_3, mf.cod_livre_9, mf.progress_recid, mf.cdd_seq,
                     mf.cd_especie, mf.serie, mf.nr_titulo_acr, mf.parcela
                from migrac_fatur mf) loop

      if x.cod_livre_9 <> gerar_hash_faturamento_unicoo(X.cod_livre_3) then

        for y in (select f.cd_contratante, f.nr_fatura, f.progress_recid
                            from gp.fatura f
                           where f.cd_especie = x.cd_especie
                             and f.serie = x.serie
                             and f.nr_titulo_acr = x.nr_titulo_acr
                             and f.parcela = x.parcela) loop

          delete from gp.fatur_juros_multa j where j.cd_contratante = y.cd_contratante
                                               and j.num_fatur_relacdo = y.nr_fatura;

          for z in (select n.progress_recid, n.cd_modalidade, n.cd_contratante, n.cd_contratante_origem,
                           n.nr_ter_adesao, n.aa_referencia, n.mm_referencia, n.nr_sequencia
                      from gp.notaserv n where n.cd_contratante = y.cd_contratante
                                           and n.nr_fatura = y.nr_fatura) loop

            delete from gp.fatueven f where f.cd_modalidade = z.cd_modalidade
                                        and f.cd_contratante = z.cd_contratante
                                        and f.cd_contratante_origem = z.cd_contratante_origem
                                        and f.nr_ter_adesao = z.nr_ter_adesao
                                        and f.aa_referencia = z.aa_referencia
                                        and f.mm_referencia = z.mm_referencia
                                        and f.nr_sequencia = z.nr_sequencia;

            delete from gp.notaserv n where n.progress_recid = z.progress_recid;
          end loop;
          delete from gp.fatura f where f.progress_recid = y.progress_recid;
        end loop;

        delete from gp.migrac_fatur_juros j where j.cdd_seq_tab_pai = x.cdd_seq;
        delete from gp.migrac_fatur mf where mf.progress_recid = x.progress_recid;
      end if;
    end loop;

    for t in c_titulo loop

      select migrac_fatur_seq.nextval into vsqmigracfatur from dual;

      --legenda IMPORT_PROPOST
      /*
      num_livre_2 = nrregistro
      num_livre_3 = nrcontrato
      num_livre_4 = nrfamilia
      cod_livre_2 = cdlotacao
      num_livre_5 = nrpessoa_paga
      */

      cdsituacao := 'RC';
      dserro := ' ';
      dscomplemento := ' ';
      cdmodalidade := 0;
      nrtermoadesao := 0;
      begin
        ponto := '(1)';
        --procura com responsavel financeiro no beneficiario
        select p.cd_modalidade, p.nr_ter_adesao
          into cdmodalidade, nrtermoadesao
          from import_propost ip, gp.propost p, gp.usuario u, gp.contrat c
         where ip.nr_contrato_antigo = p.u##nr_contrato_antigo
           and lpad(ip.num_livre_3,4,'0') = t.nrcontrato
           and c.id_pessoa = t.nrregistro
           and u.cd_modalidade = p.cd_modalidade
           and u.nr_proposta = p.nr_proposta
           and u.cdn_respons_financ = c.cd_contratante
           and rownum = 1;
      exception
        when others then
          --procura com familia
          begin
              ponto := '(2)';
              select p.cd_modalidade, p.nr_ter_adesao
                into cdmodalidade, nrtermoadesao
                from import_propost ip, gp.propost p
               where ip.nr_contrato_antigo = p.u##nr_contrato_antigo
                 and nvl(decode(ip.num_livre_5,0,null,ip.num_livre_5),ip.num_livre_2) = t.nrregistro
                 and lpad(ip.num_livre_3,4,'0') = t.nrcontrato
                 and ip.num_livre_4 = t.nrfamilia
                 and rownum = 1;
          exception
                when others then
                  --procura com lotacao
                  begin
                    ponto := '(3)';
                    select p.cd_modalidade, p.nr_ter_adesao
                      into cdmodalidade, nrtermoadesao
                      from import_propost ip, gp.propost p
                     where ip.nr_contrato_antigo = p.u##nr_contrato_antigo
                       and nvl(decode(ip.num_livre_5,0,null,ip.num_livre_5),ip.num_livre_2) = t.nrregistro
                       and lpad(ip.num_livre_3,4,'0') = t.nrcontrato
                       and ip.cod_livre_2 = t.cdlotacao
                       and rownum = 1;
                  exception
                    when others then
                      --procura apenas com o contrato
                      begin
                        ponto := '(4)';
                        select p.cd_modalidade, p.nr_ter_adesao
                          into cdmodalidade, nrtermoadesao
                          from import_propost ip, gp.propost p
                         where ip.nr_contrato_antigo = p.u##nr_contrato_antigo
                           and nvl(decode(ip.num_livre_5,0,null,ip.num_livre_5),ip.num_livre_2) = t.nrregistro
                           and lpad(ip.num_livre_3,4,'0') = t.nrcontrato
                           and rownum = 1;
                      exception
                        when others then
                          cdsituacao := 'ER';

                          dserro := 'Não encontrou Termo de Adesao para associar ao titulo' || ponto;

                          dscomplemento := 'NRREGISTRO: ' || t.nrregistro ||
                                    ' NRCONTRATO: ' || t.nrcontrato ||
                                    ' FAMILIA: ' || t.nrfamilia ||
                                    ' LOTACAO: ' || t.cdlotacao ||
                                    ' SERIE: ' || t.cod_ser_docto || '-' ||
                                    t.nofaturamento;
                          begin
                            select 'S' into aotem_contrato
                              from contrato_da_pessoa cdp
                             where cdp.nrcontrato = t.nrcontrato
                               and rownum = 1;
                          exception
                            when others then aotem_contrato := 'N';
                          end;
                          if aotem_contrato = 'N' then
                            dserro := 'COBRANCA AVULSA! ' || dserro;
                          end if;
                      end;
                  end;
          end;
      end;

      nrcontratos := 0;

      hash_atual := gerar_hash_faturamento_unicoo(t.nrdocumento);

      begin
        insert into migrac_fatur
          (cdd_seq,
           cd_modalidade,
           nr_ter_adesao,
           aa_referencia,
           num_mm_refer,
           cd_especie,
           serie,
           nr_titulo_acr,
           parcela,
           dat_ult_atualiz,
           hra_ult_atualiz,
           cod_usuar_ult_atualiz,
           portador,
           modalidade,
           dt_emissao,
           dt_vencimento,
           vl_total,
           progress_recid,
           cod_livre_1, --CDSITUACAO
           cod_livre_2, --DSERRO
           cod_livre_3, --NRDOCUMENTO
           cod_livre_4, --COMPLEMENTO MENSAGEM ERRO
           cod_livre_9) --HASH
        values
          (vsqmigracfatur,
           cdmodalidade, --cdmodalidade
           nrtermoadesao, --nr_ter_adesao
           to_number(substr(t.nrperiodo_compet, 0, 4)), --aa_referencia
           to_number(substr(t.nrperiodo_compet, 5, 2)), --num_mm_refer
           t.cod_espec_docto, --cd_especie
           t.cod_ser_docto, --serie
           t.cod_tit_acr, --nrtitulo_acr
           t.cod_parcela, --parcela
           null,
           null,
           null,
           nvl(t.cod_portador, 0), --portador
           0, --modalidade
           t.dat_emis_docto,
           t.dat_vencto_tit_acr,
           to_number(t.val_liq_tit_acr),
           vsqmigracfatur,
           CDSITUACAO,--CDSITUACAO
           DSERRO,    --DSERRO
           t.nrdocumento,
           DSCOMPLEMENTO,
           hash_atual);

        for x in (select tr.cod_espec_docto,
                         tr.cod_ser_docto,
                         tr.cod_titulo_acr cod_tit_acr,
                         decode(tr.cod_parcela, ' ', 0) cod_parcela,
                         ft.nrperiodo nrperiodo_compet,
                         a.tipo_evento,
                         a.vlevento,
                         ft.dtemissao,
                         a.nrfatura,
                         a.nrfatura_geracao,
                         tc.cdsituacao,
                         tc.tpintegracao
                    from (select e.vlevento,
                                 e.nrfatura_geracao,
                                 e.nrfatura,
                                 decode(e.cdevento,
                                        (f_parametro('FTEVMULF')),
                                        'MULTA',
                                        (f_parametro('FTEVJURF')),
                                        'JUROS') tipo_evento
                            from evento_de_faturamento e
                           where e.nrfatura = t.nrdocumento
                             and e.cdevento in
                                 (f_parametro('FTEVJURF'),
                                  (f_parametro('FTEVMULF')))) a,
                         faturamento ft,
                         ti_controle_integracao tc,
                         ti_tit_acr tr
                   where ft.nrfatura = tc.cdidentificador
                     and tc.nrsequencial = tr.nrseq_controle_integracao
                     and ft.nrfatura = a.nrfatura
                     and tc.cdsituacao = 'IT'
                     and tc.tpintegracao = 'TR') loop

          begin
            select 'S'
              into vaomigrado
              from migrac_fatur_juros mfj
             where mfj.cd_modalidade = cdmodalidade
               and mfj.nr_ter_adesao = nrtermoadesao
               and mfj.aa_referencia = substr(x.nrperiodo_compet, 0, 4)
               and mfj.num_mm_refer = substr(x.nrperiodo_compet, 5, 2)
               and mfj.cd_especie = x.cod_espec_docto
               and mfj.serie = x.cod_ser_docto
               and mfj.nr_titulo_acr = x.cod_tit_acr
               and mfj.cdd_seq_tab_pai = vsqmigracfatur;
          exception
            when no_data_found then
              vaomigrado := 'N';

          end;

          if vaomigrado = 'N' then

            insert into migrac_fatur_juros
              (cd_modalidade,
               nr_ter_adesao,
               aa_referencia,
               num_mm_refer,
               cdd_seq_tab_pai,
               val_juros,
               val_multa,
               cdd_seq,
               cd_especie,
               serie,
               nr_titulo_acr,
               parcela,
               cod_livre_1,
               cod_livre_2,
               cod_livre_3,
               cod_livre_4,
               cod_livre_5,
               cod_livre_6,
               cod_livre_7,
               cod_livre_8,
               cod_livre_9,
               cod_livre_10,
               num_livre_1,
               num_livre_2,
               num_livre_3,
               num_livre_4,
               num_livre_5,
               num_livre_6,
               num_livre_7,
               num_livre_8,
               num_livre_9,
               num_livre_10,
               val_livre_1,
               val_livre_2,
               val_livre_3,
               val_livre_4,
               val_livre_5,
               val_livre_6,
               val_livre_7,
               val_livre_8,
               val_livre_9,
               val_livre_10,
               log_livre_1,
               log_livre_2,
               log_livre_3,
               log_livre_4,
               log_livre_5,
               log_livre_6,
               log_livre_7,
               log_livre_8,
               log_livre_9,
               log_livre_10,
               dat_livre_1,
               dat_livre_2,
               dat_livre_3,
               dat_livre_4,
               dat_livre_5,
               dat_livre_6,
               dat_livre_7,
               dat_livre_8,
               dat_livre_9,
               dat_livre_10,
               dat_ult_atualiz,
               hra_ult_atualiz,
               cod_usuar_ult_atualiz,
               progress_recid)
            values
              (cdmodalidade, --cdmodalidade
               nrtermoadesao, --nr_ter_adesao
               substr(x.nrperiodo_compet, 0, 4), --aa_referencia
               substr(x.nrperiodo_compet, 5, 2), --num_mm_refer
               vsqmigracfatur, --cdd_seq_tab_pai,
               0, --val_juros,
               0, --val_multa,
               migrac_fatur_juros_seq.nextval, --cdd_seq,
               x.cod_espec_docto, --cd_especie,
               x.cod_ser_docto, --serie,
               x.cod_tit_acr, --nr_titulo_acr,
               nvl(x.cod_parcela, 0), --parcela,
               ' ', --cod_livre_1,
               x.nrfatura, --cod_livre_2,
               x.nrfatura_geracao, --cod_livre_3,
               ' ', --cod_livre_4,
               ' ', --cod_livre_5,
               ' ', --cod_livre_6,
               ' ', --cod_livre_7,
               ' ', --cod_livre_8,
               ' ', --cod_livre_9,
               ' ', --cod_livre_10,
               0, --num_livre_1,
               0, --num_livre_2,
               0, --num_livre_3,
               0, --num_livre_4,
               0, --num_livre_5,
               0, --num_livre_6,
               0, --num_livre_7,
               0, --num_livre_8,
               0, --num_livre_9,
               0, --num_livre_10,
               0, --val_livre_1,
               0, --val_livre_2,
               0, --val_livre_3,
               0, --val_livre_4,
               0, --val_livre_5,
               0, --val_livre_6,
               0, --val_livre_7,
               0, --val_livre_8,
               0, --val_livre_9,
               0, --val_livre_10,
               0, --log_livre_1,
               0, --log_livre_2,
               0, --log_livre_3,
               0, --log_livre_4,
               0, --log_livre_5,
               0, --log_livre_6,
               0, --log_livre_7,
               0, --log_livre_8,
               0, --log_livre_9,
               0, --log_livre_10,
               x.dtemissao, --to_date((to_char(x.nrperiodo_compet)), 'yymm'), --dat_livre_1,
               (t.dtemissao - 1), --last_day(to_date((to_char(x.nrperiodo_compet)), 'yymm')), --dat_livre_2,
               null, --dat_livre_3,
               null, --dat_livre_4,
               null, --dat_livre_5,
               null, --dat_livre_6,
               null, --dat_livre_7,
               null, --dat_livre_8,
               null, --dat_livre_9,
               null, --dat_livre_10,
               null, --dat_ult_atualiz,
               null, --hra_ult_atualiz,
               ' ', --cod_usuar_ult_atualiz,
               migrac_fatur_juros_seq.currval); --progress_rec

          end if;

          if x.tipo_evento = 'MULTA' then
            update migrac_fatur_juros mfj
               set mfj.val_multa = x.vlevento
             where mfj.cd_modalidade = cdmodalidade
               and mfj.nr_ter_adesao = nrtermoadesao
               and mfj.aa_referencia = substr(x.nrperiodo_compet, 0, 4)
               and mfj.num_mm_refer = substr(x.nrperiodo_compet, 5, 2)
               and mfj.cd_especie = x.cod_espec_docto
               and mfj.serie = x.cod_ser_docto
               and mfj.nr_titulo_acr = x.cod_tit_acr
               and mfj.cdd_seq_tab_pai = vsqmigracfatur;
          else
            update migrac_fatur_juros mfj
               set mfj.val_juros = x.vlevento
             where mfj.cd_modalidade = cdmodalidade
               and mfj.nr_ter_adesao = nrtermoadesao
               and mfj.aa_referencia = substr(x.nrperiodo_compet, 0, 4)
               and mfj.num_mm_refer = substr(x.nrperiodo_compet, 5, 2)
               and mfj.cd_especie = x.cod_espec_docto
               and mfj.serie = x.cod_ser_docto
               and mfj.nr_titulo_acr = x.cod_tit_acr
               and mfj.cdd_seq_tab_pai = vsqmigracfatur;
          end if;

        end loop;

        p_commit;
      end;
    end loop;
    commit;
  end p_import_fatura;

  procedure p_carrega_depara is

    vaoexiste       char;
    vnrtabconversao number;
    vnrseq          number;

  begin

    select nrseq
      into vnrtabconversao
      from mig_tab_conversao
     where notabela = 'MIGRACAO_GLOSA';

     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for tmc in (select * from temp_mvto_glosa) loop

      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = tmc.cdvalor_externo
           and cdvalor_interno = tmc.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        begin
          insert into mig_tab_conversao_exp
            (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
          values
            (vnrseq,
             vnrtabconversao,
             tmc.cdvalor_interno,
             tmc.cdvalor_externo);
        exception
          when others then

            DBMS_OUTPUT.put_line('ERRO CONVERSAO MODULO: EXTERNO' ||
                                 tmc.cdvalor_externo || ' INTERNO ' ||
                                 tmc.cdvalor_interno);
        end;

      end if;
    end loop;

      select nrseq
        into vnrtabconversao
        from mig_tab_conversao
       where notabela = 'MIGRACAO_PROCEDIMENTOS';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for tmc in (select * from temp_depara_servico) loop

      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = tmc.cdvalor_externo
           and cdvalor_interno = tmc.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        begin
          insert into mig_tab_conversao_exp
            (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
          values
            (vnrseq,
             vnrtabconversao,
             tmc.cdvalor_interno,
             tmc.cdvalor_externo);
        exception
          when others then

           DBMS_OUTPUT.put_line('ERRO CONVERSAO SERVICO: EXTERNO' ||
                                 tmc.cdvalor_externo || ' INTERNO ' ||
                                 tmc.cdvalor_interno);
        end;

      end if;
    end loop;

    select nrseq
      into vnrtabconversao
      from mig_tab_conversao
     where notabela = 'MIGRACAO_FATOR_MODERADOR';
   delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for tmc in (select * from temp_depara_fator_moderador) loop


      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = tmc.cdvalor_externo
           and cdvalor_interno = tmc.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        begin
          insert into mig_tab_conversao_exp
            (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
          values
            (vnrseq,
             vnrtabconversao,
             tmc.cdvalor_interno,
             tmc.cdvalor_externo);
        exception
          when others then

            DBMS_OUTPUT.put_line('ERRO CONVERSAO FATOR MODERADOR: EXTERNO' ||
                                 tmc.cdvalor_externo || ' INTERNO ' ||
                                 tmc.cdvalor_interno);
        end;

      end if;
    end loop;

    select nrseq
      into vnrtabconversao
      from mig_tab_conversao
     where notabela = 'MIGRACAO_MODULO';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for tmc in (select * from migracao_modulo_padrao) loop


      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = tmc.cdmodulo
           and cdvalor_interno = tmc.cdcategserv;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        begin
          insert into mig_tab_conversao_exp
            (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
          values
            (vnrseq,
             vnrtabconversao,
             tmc.cdcategserv,
             tmc.cdmodulo);
        exception
          when others then

            DBMS_OUTPUT.put_line('ERRO CONVERSAO MODULO: EXTERNO' ||
                                 tmc.cdmodulo || ' INTERNO ' ||
                                 tmc.cdcategserv);
        end;

      end if;
    end loop;
/*
      select nrseq
        into vnrtabconversao
        from mig_tab_conversao
       where notabela = 'MIGRACAO_GRAU_PARENTESCO';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for tgp in (select * from temp_grau_paren) loop

      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = tgp.cdvalores_externo
           and cdvalor_interno = tgp.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        insert into mig_tab_conversao_exp
          (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
        values
          (vnrseq,
           vnrtabconversao,
           tgp.cdvalor_interno,
           tgp.cdvalores_externo);

      end if;
    end loop;
*/
      select nrseq
        into vnrtabconversao
        from mig_tab_conversao
       where notabela = 'MIGRACAO_MOTIVO_CANCELAMENTO';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for tmcl in (select * from temp_mot_cancel) loop


      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = tmcl.cdvalores_externo
           and cdvalor_interno = tmcl.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        insert into mig_tab_conversao_exp
          (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
        values
          (vnrseq,
           vnrtabconversao,
           tmcl.cdvalor_interno,
           tmcl.cdvalores_externo);

      end if;
    end loop;

      select nrseq
        into vnrtabconversao
        from mig_tab_conversao
       where notabela = 'MIGRACAO_ESTADO_CIVIL';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for tec in (select * from temp_depara_estado_civil) loop


      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = tec.cdvalores_externo
           and cdvalor_interno = tec.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        insert into mig_tab_conversao_exp
          (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
        values
          (vnrseq,
           vnrtabconversao,
           tec.cdvalor_interno,
           tec.cdvalores_externo);

      end if;
    end loop;

      select nrseq
        into vnrtabconversao
        from mig_tab_conversao
       where notabela = 'MIGRACAO_TIPO_VINCULO';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for tpv in (select * from temp_tip_vinc) loop


      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = tpv.cdvalores_externo
           and cdvalor_interno = tpv.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        insert into mig_tab_conversao_exp
          (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
        values
          (vnrseq,
           vnrtabconversao,
           tpv.cdvalor_interno,
           tpv.cdvalores_externo);

      end if;
    end loop;

      select nrseq
        into vnrtabconversao
        from mig_tab_conversao
       where notabela = 'MIGRACAO_INDICADOR_PERIODO';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for tpv in (select * from temp_indperiodo) loop


      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = tpv.cdvalores_externo
           and cdvalor_interno = tpv.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        insert into mig_tab_conversao_exp
          (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
        values
          (vnrseq,
           vnrtabconversao,
           tpv.cdvalor_interno,
           tpv.cdvalores_externo);

      end if;
    end loop;

      select nrseq
        into vnrtabconversao
        from mig_tab_conversao
       where notabela = 'MIGRACAO_ID_CONTROLE_QTDE';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for tpv in (select * from temp_crtl_quant) loop


      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = tpv.cdvalores_externo
           and cdvalor_interno = tpv.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        insert into mig_tab_conversao_exp
          (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
        values
          (vnrseq,
           vnrtabconversao,
           tpv.cdvalor_interno,
           tpv.cdvalores_externo);

      end if;
    end loop;

      select nrseq
        into vnrtabconversao
        from mig_tab_conversao
       where notabela = 'MIGRACAO_TIPO_ENDERECO';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for mte in (select * from temp_tipo_endereco) loop


      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = mte.cdvalores_externo
           and cdvalor_interno = mte.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        insert into mig_tab_conversao_exp
          (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
        values
          (vnrseq,
           vnrtabconversao,
           mte.cdvalor_interno,
           mte.cdvalores_externo);

      end if;
    end loop;

      select nrseq
        into vnrtabconversao
        from mig_tab_conversao
       where notabela = 'MIGRACAO_TABELA_PRECO';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for mtp in (select * from temp_tabela_preco) loop


      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = mtp.cdvalores_externo
           and cdvalor_interno = mtp.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        insert into mig_tab_conversao_exp
          (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
        values
          (vnrseq,
           vnrtabconversao,
           mtp.cdvalor_interno,
           mtp.cdvalores_externo);

      end if;
    end loop;

      select nrseq
        into vnrtabconversao
        from mig_tab_conversao
       where notabela = 'MIGRACAO_GRUPO_PROCEDIMENTO';
     delete from mig_tab_conversao_exp e where e.nrseq_tab_conversao = vnrtabconversao;

    for mgp in (select * from temp_grupo_procedimento) loop


      begin
        select 'S'
          into vaoexiste
          from mig_tab_conversao_exp rte
         where rte.nrseq_tab_conversao = vnrtabconversao
           and cdvalor_externo = mgp.cdvalores_externo
           and cdvalor_interno = mgp.cdvalor_interno;
      exception
        when no_data_found then
          vaoexiste := 'N';
      end;

      if vaoexiste = 'N' then

        select max(nrseq) + 1 into vnrseq from mig_tab_conversao_exp;

        insert into mig_tab_conversao_exp
          (nrseq, nrseq_tab_conversao, cdvalor_interno, cdvalor_externo)
        values
          (vnrseq,
           vnrtabconversao,
           mgp.cdvalor_interno,
           mgp.cdvalores_externo);

      end if;
    end loop;

  end p_carrega_depara;

  procedure p_gera_dep_prod is

  begin

    begin
      for x in (select *
                  from (select distinct pr.cd_modalidade,
                                        pr.nr_proposta,
                                        p.cd_unidade,
                                        p.cd_prestador
                          from historico_do_titulo h,
                               titulo_a_receber    tr,
                               import_propost      i,
                               gp.propost          pr,
                               gp.preserv          p
                         where tr.nrregistro_titulo = h.nrregistro_titulo
                           and tr.nrdocumento = h.nrdocumento
                           and (tr.nrregistro_cliente = i.num_livre_2)
                           and pr.nr_contrato_antigo = i.nr_contrato_antigo --i.u##nr_contrato_antigo
                           and p.id_pessoa = tr.nrregistro_cliente)
                 order by 1, 2) loop
        update gp.ter_ade t
           set t.lgdescontaplanoproducao   = 1,
               t.cd_unidade_prestador      = x.cd_unidade,
               t.cd_prestador              = x.cd_prestador,
               t.incontratantemensalidade  = 1,
               t.incontratanteparticipacao = 1,
               t.in_contratate_co          = 1,
               t.in_contratante_inadim     = 1,
               t.incontratantecustoop      = 1,
               t.innegociacaoparticipacao  = 1
         where t.cd_modalidade = x.cd_modalidade
           and t.nr_ter_adesao = x.nr_proposta;
      end loop;
      --commit;
    end;

  end p_gera_dep_prod;

  /*
  COMENTADO POIS NUNCA ERA CHAMADO
  procedure p_regras_compl(pnrcontrato contrato_da_pessoa.nrcontrato%type) is

    vcdd_regra               number;
    vexiste_criterio         char;
    ttm_regra_menslid_criter tm_reagra_menslid_criter%rowtype;
    --ttm_regra_menslid        tm_regra_menslid%rowtype;

    cursor c_propostas is
      select p.cd_modalidade,
             p.nr_proposta,
             p.dt_proposta,
             c.u##nm_contratante,
             pr.num_livre_3 contrato_unicoo,
             ib.num_seqcial_bnfciar
        from gp.propost     p,
             gp.contrat     c,
             import_propost pr,
             import_bnfciar ib
       where p.nr_insc_contratante = c.nr_insc_contratante
         and pr.nr_contrato_antigo \*pr.u##nr_contrato_antigo*\ = p.nr_contrato_antigo
         and ib.nr_contrato_antigo = pr.nr_contrato_antigo --pr.u##nr_contrato_antigo
         and (pr.num_livre_3 = pnrcontrato or pnrcontrato is null);

    cursor c_criterios(ccd_modaldiade       gp.propost.cd_modalidade%type,
                       cnr_proposta         gp.propost.nr_proposta%type,
                       cnum_seqcial_bnfciar gp.import_bnfciar.num_seqcial_bnfciar%type) is
      select *
        from (select distinct pr.cd_modalidade,
                              pr.num_livre_10 nr_proposta,
                              case
                                when p.nrsequencial_usuario <> 0 then
                                 us.cd_usuario
                                else
                                 0
                              end cd_usuario,
                              v.cd_padrao_cobertura,
                              p.vlpreco_mensal,
                              p.vlpreco_inscricao,

                              (select t.cd_modulo
                                 from tm_modulos_mensa t
                                where t.cdcategserv = p.cdcategserv) cd_modulo,

                              case
                                when p.cdusucateg <> '*' then
                                 nvl((select distinct cdvalor_externo
                                       from mig_tab_conversao     r,
                                            mig_tab_conversao_exp re,
                                            tipo_de_usuario       tu
                                      where r.nrseq = re.nrseq_tab_conversao
                                        and r.notabela =
                                            'MIGRACAO_GRAU_PARENTESCO'
                                        and re.cdvalor_interno = tu.tpusuario
                                        and tu.cdusucateg = p.cdusucateg),
                                     '0')
                                else
                                 case
                                   when p.tpdependente = 'T' then
                                    '01'
                                   else
                                    '0'
                                 end
                              end cd_grau_parentesco,

                              p.nridade_inicio,
                              p.nridade_fim,
                              p.nrqtusuario_inicio,
                              p.nrqtusuario_fim
                from preco_contrato_pessoa     p,
                     preco_referencia_contrato prc,
                     preco_referencia_padrao   prp,
                     t_v_plano_padrao          v,
                     import_propost            pr,
                     import_bnfciar            ib,
                     gp.usuario                us
               where prc.nrtabela_contrato = p.nrtabela_contrato
                 and prc.nrtabela_padrao_origem = prp.nrtabela_padrao
                 and v.CDCONTRATO_USU = prp.cdcontrato
                 and pr.num_livre_2 = prc.nrregistro
                 and pr.num_livre_3 = prc.nrcontrato
                 and ib.cd_carteira_antiga = us.cd_carteira_antiga
                 and ib.nr_contrato_antigo = pr.nr_contrato_antigo --pr.u##nr_contrato_antigo
                 and ib.num_seqcial_bnfciar = cnum_seqcial_bnfciar
                 and (pr.num_livre_4 = p.nrfamilia or p.nrfamilia = 0)
                 and (ib.num_seqcial_bnfciar = p.nrsequencial_usuario or
                     p.nrsequencial_usuario = 0)
                 AND (pr.cod_livre_6 = p.cdlotacao or p.cdlotacao = '*')
                 and p.nrperiodo_ult_reajuste =
                     (select max(nrperiodo_ult_reajuste)
                        from preco_contrato_pessoa pp
                       where pp.nrtabela_contrato = p.nrtabela_contrato))
       where cd_modalidade = ccd_modaldiade
         and nr_proposta = cnr_proposta
       order by cd_grau_parentesco, cd_padrao_cobertura, nridade_inicio;

  begin

    for contracts in c_propostas loop

      for criter in c_criterios(contracts.cd_modalidade,
                                contracts.nr_proposta,
                                contracts.num_seqcial_bnfciar) loop

        if criter.cd_usuario <> 0 then

          null;

        else

          begin
            select cdd_regra
              into vcdd_regra
              from gp.regra_menslid_propost rmp
             where rmp.cd_modalidade = criter.cd_modalidade
               and rmp.nr_proposta = criter.nr_proposta
               and rmp.cd_usuario = criter.cd_usuario
               and rownum = 1;
          exception

            when no_data_found then

              select count(*) + 1
                into vcdd_regra
                from tm_regra_menslid rmp;

              insert into tm_regra_menslid_propost
                (cdd_regra,
                 cd_modalidade,
                 nr_proposta,
                 cd_usuario,
                 dt_fim_validade,
                 dt_ini_validade)

              values
                (vcdd_regra,
                 contracts.cd_modalidade,
                 contracts.nr_proposta,
                 criter.cd_usuario,
                 '31/12/9999',
                 contracts.dt_proposta);

              P_COMMIT;

          end;

          begin
            select 'S'
              into vexiste_criterio
              from tm_reagra_menslid_criter trm
             where trm.cdd_regra = vcdd_regra
               and trm.cd_padrao_cobertura = criter.cd_padrao_cobertura
               and trm.cd_modulo = criter.cd_modulo
               and trm.cd_grau_parentesco = criter.cd_grau_parentesco
               and trm.nridade_inicio = criter.nridade_inicio
               and trm.nridade_fim = criter.nridade_fim
               and trm.num_livre_1 = criter.nrqtusuario_inicio
               and trm.num_livre_2 = criter.nrqtusuario_fim;
          exception

            when no_data_found then

              select seq_cdd_regra.nextval
                into ttm_regra_menslid_criter.cd_id
                from dual;
              ttm_regra_menslid_criter.cdd_regra           := vcdd_regra;
              ttm_regra_menslid_criter.cd_padrao_cobertura := criter.cd_padrao_cobertura;
              ttm_regra_menslid_criter.cd_modulo           := criter.cd_modulo;
              ttm_regra_menslid_criter.cd_grau_parentesco  := criter.cd_grau_parentesco;
              ttm_regra_menslid_criter.nridade_inicio      := criter.nridade_inicio;
              ttm_regra_menslid_criter.nridade_fim         := criter.nridade_fim;
              ttm_regra_menslid_criter.vl_mensalidade_base := criter.vlpreco_mensal;
              ttm_regra_menslid_criter.vl_taxa_inscricao   := criter.vlpreco_inscricao;
              ttm_regra_menslid_criter.dat_inic            := contracts.dt_proposta;
              ttm_regra_menslid_criter.dat_fim             := '31/12/9999';
              ttm_regra_menslid_criter.qt_repasse          := 0;
              ttm_regra_menslid_criter.num_livre_1         := criter.nrqtusuario_inicio;
              ttm_regra_menslid_criter.num_livre_2         := Criter.nrqtusuario_fim;
              ttm_regra_menslid_criter.cdsituacao          := 'RC';

              insert into tm_reagra_menslid_criter
              values ttm_regra_menslid_criter;

              P_COMMIT;

          end;

        end if;
      end loop;

    end loop;

    --commit;

  end p_regras_compl;*/

  /**
   * Versao antiga (antes da Unimed NI e criação das Regras Modelo).

  procedure p_regras_mensalidade(pnrcontrato  contrato_da_pessoa.nrcontrato%type,
                                 pinrperiodo  periodo_competencia.nrperiodo%type) is

  begin

    gera_regra_menslid(pinrperiodo, pnrcontrato);

    p_migra_regra_menslid;

     p_regras_compl(pnrcontrato);

  --  p_migra_regra_menslid;

  end p_regras_mensalidade;
*/

  procedure p_regras_desconto is

  begin

    p_gera_regra_desc;

    p_migra_regra_desc;

  end p_regras_desconto;

  procedure p_pos_migracao is

  begin

    p_condicao_saude;

    -- retirado pois foi substituido pela procedure 'Migracao Historico Reajustes.pdc' p_migra_reajuste(null);

    --  p_mensagem_carteira;

    p_migra_carteira;

    p_migra_mensagem_prodmed;

    --p_migra_fator_moderador;

  end p_pos_migracao;

/*
--para reprocessar o histórico de preços em todas as propostas.
Connect gp;
Drop Sequence HISTABPRECO_SEQ;

create sequence HISTABPRECO_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

Grant all on HISTABPRECO_SEQ to UNICOOGPS;

Delete From HISTABPRECO;
Commit;
*/

--CORRIGIR ANO/MES ULTIMO REAJUSTE DA PROPOSTA
--CARREGAR HISTABPRECO COM TODO O HISTORICO. O % FICA ZERADO. O VALOR VAI PARA A DESCRICAO
procedure p_atualizar_histabpreco is
  Cursor cProposta Is (
                       Select p.cd_modalidade, p.nr_proposta, p.cd_tab_preco,
                              to_char(ip.dat_propost,'YYYY') aa_inicio_proposta,
                              to_char(ip.dat_propost,'MM') mm_inicio_proposta,
                              ip.num_livre_2 nrregistro, Lpad(ip.num_livre_3, 4, '0') nrcontrato
                       From   Import_Propost ip, Propost p
                       Where  ip.nr_contrato_antigo = p.nr_contrato_antigo
                       --And    p.cd_modalidade = 40 And p.nr_proposta = 345
                      );

  --variáveis
  vMM_Ult_Reajuste  Number;
  vAA_Ult_Reajuste  Number;
  vPC_Ult_Reajuste  Number;

  Procedure prLancarHisTabPreco(pCdModalidade Number, pNrProposta Number, pCdTabPreco Varchar2,
                                pPercUltReajuste Number, pAAUltReajuste Number, pMMUltReajuste Number, pObservacoes varchar2) Is
    --Variáveis
    vExiste  Number;
  Begin
    Select Count(*)
    Into   vExiste
    From   HisTabPreco
    Where  cd_modalidade = pCdModalidade
    And    nr_proposta   = pNrProposta
    And    aa_reajuste   = pAAUltReajuste
    And    mm_reajuste   = pMMUltReajuste;
    --
    If (vExiste = 0) Then
      Insert Into HisTabPreco (cd_modalidade, nr_proposta, cd_tab_preco, pc_reajuste, aa_reajuste, mm_reajuste, nr_oficio_reajuste,
                               cd_userid, dt_atualizacao, char_1, char_2, char_3, char_4, char_5, dec_1, dec_2, dec_3, dec_4,
                               dec_5, date_1, date_2, date_3, date_4, date_5, int_1, int_2, int_3, int_4, int_5, log_1, log_2, log_3,
                               log_4, log_5, u_char_1, u_char_2, u_char_3, u_date_1, u_date_2, u_date_3, u_int_1, u_int_2, u_int_3,
                               u_log_1, u_log_2, u_log_3, u_dec_1, u_dec_2, u_dec_3, int_6, int_7, int_8, int_9, int_10, des_obs_reajus, progress_recid)
             Values (pCdModalidade, pNrProposta, pCdTabPreco, 0 /*pPercUltReajuste*/ , pAAUltReajuste, pMMUltReajuste,
                     Null /*nr_oficio_reajuste*/, 'MIGRACAO' /*cd_userid*/, Trunc(Sysdate) /*dt_atualizacao*/,
                     ' ', ' ', ' ', ' ', ' ', --char_? (1~5)
                     0, 0, 0, 0, 0, --dec_? (1~5)
                     Null, Null, Null, Null, Null, --date_? (1~5)
                     pAAUltReajuste, pMMUltReajuste, 0, 1, 0, --int_? (1~5)
                     0, 1, 0, 0, 0, --log_? (1~5)
                     ' ', ' ', ' ', --u_char_? (1~3)
                     Null, Null, Null, --u_date_? (1~3)
                     0, 0, 0, --u_int_? (1~3)
                     0, 0, 0, --u_log_? (1~3)
                     0, 0, 0, --u_dec_? (1~3)
                     0, 0, 0, 0, 0, --int_? (6~10),
                     substr(pPercUltReajuste || '% ' || pObservacoes,1,100), --des_obs_reajus
                     gp.histabpreco_seq.nextval /*progress_recid*/);
    End If;
  End;

Begin
  For Rx In cProposta Loop
    Begin
      --Lançamento do Período de início do contrato (registro default)
      prLancarHisTabPreco(Rx.Cd_Modalidade, Rx.nr_proposta, Rx.cd_tab_preco, 0, Rx.aa_inicio_proposta, Rx.mm_inicio_proposta, ' ');

      --Lançamento todos os Períodos de Reajuste aplicado no Unicoo
      for x in (select substr(rcp.nrperiodo,1,4) ano_reajuste,
                       substr(rcp.nrperiodo,5,2) mes_reajuste,
                       rcp.vlindice_mensalidade,
                       rcp.txmotivo_reajuste
                  from reajuste_contrato_pessoa rcp
                    where rcp.nrregistro = Rx.nrregistro
                      and rcp.nrcontrato = Rx.nrcontrato) loop

          prLancarHisTabPreco(Rx.Cd_Modalidade, Rx.nr_proposta, Rx.cd_tab_preco, x.vlindice_mensalidade, x.ano_reajuste, x.mes_reajuste, x.txmotivo_reajuste);
      end loop;

      --Ajuste do último reajuste na proposta
      Select substr(nrperiodo,1,4) ano_reajuste,
             substr(nrperiodo,5,2) mes_reajuste
             --vlindice_mensalidade
      Into   vAA_Ult_Reajuste,
             vMM_Ult_Reajuste
      From   reajuste_contrato_pessoa rcp
      Where  nrperiodo in (Select Max(nrperiodo) From reajuste_contrato_pessoa
                           Where nrregistro = rcp.nrregistro
                           And   nrcontrato = rcp.nrcontrato)
      And    nrregistro = Rx.NrRegistro
      And    nrcontrato = Rx.Nrcontrato
      And    rownum = 1;
      --Evandro Levi (17/01/2018): Foi identificado que a informação de reajuste com valor, positivo ou negativo,
      --                              impactam na exibição do valor da mensalidade no totvs.
      --                           Portanto, a solicitação foi gravar somente o período do último reajuste com
      --                              percentual zerado.
      --Solicitação: Moacir Junior em Consultoria em SSParaíso.
      vPC_Ult_Reajuste := 0;
      --

      Update Propost Set mm_ult_reajuste = vMM_Ult_Reajuste, aa_ult_reajuste = vAA_Ult_Reajuste
                     Where Cd_Modalidade = Rx.Cd_Modalidade
                     And   Nr_Proposta = Rx.nr_proposta;
      --
    Exception
      When NO_DATA_FOUND Then
        --Caso não encontre reajuste no Unicoo, não nenhum registro será lançado na HISTABPRECO do GPS.
        --Mas na proposta os períodos de reajustes serão atualizados com mês e ano de início do contrato.
        Update Propost Set mm_ult_reajuste = Rx.mm_inicio_proposta, aa_ult_reajuste = Rx.aa_inicio_proposta
                       Where Cd_Modalidade = Rx.Cd_Modalidade
                       And   Nr_Proposta = Rx.nr_proposta;
      When Others Then
        DBMS_OUTPUT.put_line('Ocorreu a falha '||Sqlerrm||'. Reg:'||Rx.NrRegistro||' Contr:'||Rx.NrContrato||
                                           ' Mod:'||Rx.Cd_Modalidade||' Prop:'||Rx.Nr_Proposta);
    End;
  End Loop;
  commit;
End p_atualizar_histabpreco;


  procedure p_verifica_rows_tab is

    vcount number;

  begin

 --DBMS_OUTPUT.ENABLE(1000000);
 --DBMS_OUTPUT.PUT_LINE( 'ANTES DO LOOP1');

    for x in (

              select ' select count(*) from ' || m.owner || '.' || table_name comando,
                      m.table_name,
                      m.owner
                from tm_tabelas_movimentacao m) loop

      --DBMS_OUTPUT.PUT_LINE( 'PROCESSANDO1:' || x.comando);
      execute immediate x.comando
        into vcount;
      --DBMS_OUTPUT.PUT_LINE(x.comando || ' - OK');

      update tm_tabelas_movimentacao tm
         set tm.num_rows = vcount
       where tm.owner = x.owner
         and tm.table_name = x.table_name;

    end loop;

 --DBMS_OUTPUT.PUT_LINE( 'ANTES DO LOOP2');

    for x in (

              select ' select count(*) from ' || m.owner || '.' || table_name comando,
                      m.table_name,
                      m.owner
                from tm_tabelas_parametros m) loop

--      begin
          --DBMS_OUTPUT.PUT_LINE( 'PROCESSANDO2:' || x.comando);
          execute immediate x.comando
             into vcount;
--      exception
--             WHEN OTHERS THEN
--                  --DBMS_OUTPUT.PUT_LINE( 'ERRO AO TENTAR PROCESSAR:' x.comando);

--      end;

      update tm_tabelas_parametros tm
         set tm.num_rows = vcount
       where tm.owner = x.owner
         and tm.table_name = x.table_name;

    end loop;

    for x in (
              select ' select count(*) from ' || m.owner || '.' || table_name comando,
                      m.table_name,
                      m.owner
                from tm_tabelas_ems5_gp m) loop

--      DBMS_OUTPUT.PUT_LINE( 'PROCESSANDO1:' || x.comando);

      begin
        execute immediate x.comando
          into vcount;

--          DBMS_OUTPUT.PUT_LINE(x.comando || ' - OK!');
        exception
          when others then null; --DBMS_OUTPUT.PUT_LINE(x.comando || ' - ERRO!!!');
        end;


      update tm_tabelas_ems5_gp tm
         set tm.num_rows = vcount
       where tm.owner = x.owner
         and tm.table_name = x.table_name;

    end loop;

    --commit;
  end p_verifica_rows_tab;

  procedure p_reprocessa_proposta is
    vaorepasse varchar(1);
    vao_contr_orig_resp_financ varchar2(20);
    vcd_modalidade number;
    vcd_plano number;
    vcd_tipo_plano number;
    vcdcontrato varchar2(8);
    verro varchar2(1) := 'N';

    cursor c_propostas is
      select num_seqcial_propost,
             num_seqcial_control,
             cd_modalidade,
             num_livre_10 nr_proposta,
             ind_tip_pessoa,
             num_livre_2,
             lpad(num_livre_3,4,'0') num_livre_3,
             progress_recid
        from import_propost
       where u##ind_sit_import = 'RE';

  begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    --garantir que a temporaria T_V_PLANO_PADRAO esteja atualizada com os DEPARAs da Estrutura de Produto
    p_carga_t_v_plano_padrao;

    dbms_output.put_line('INICIO DE P_REPROCESSA_PROPOSTA');

    for cp in c_propostas loop

      dbms_output.put_line('REPROCESSANDO MODALIDADE: ' || cp.cd_modalidade || ' PROPOSTA: ' || cp.nr_proposta);

      verro := 'N';
      begin
        /* DEPARA pode ter sido alterado. Neste ponto pode mudar estrutura do produto.
           Verificar se a proposta usara lotacao */
        select t.cd_modalidade,
               t.cd_plano,
               t.cd_tipo_plano,
               t.cdcontrato,
               t.ao_contr_orig_resp_financ into vcd_modalidade,
                                                vcd_plano,
                                                vcd_tipo_plano,
                                                vcdcontrato,
                                                vao_contr_orig_resp_financ
          from t_v_plano_padrao t,
               contrato_plano c
         where c.nrregistro = cp.num_livre_2
           and c.nrcontrato = cp.num_livre_3
           and t.cdcontrato_usu = c.cdcontrato
           and rownum = 1;
      exception
        when others then
          verro := 'S';
          dbms_output.put_line('Nao achou TEMP_DEPARA_AGRUPADO para NRREGISTRO, NRCONTRATO' || ';' ||
                               cp.num_livre_2 || ';' || cp.num_livre_3 || ';' || sqlerrm);
      end;

      if verro = 'S' then
        update gp.import_propost ip set ip.u##ind_sit_import = 'SEM_DEPARA', ip.ind_sit_import = 'SEM_DEPARA'
                                  where ip.progress_recid = cp.progress_recid;
      else

        delete from erro_process_import e
         where e.num_seqcial_control = cp.num_seqcial_control;

        delete from importpadrcobertpropost i
         where i.num_seqcial_propost = cp.num_seqcial_propost;

        begin
          select 'S'
            into vaorepasse
            from import_negociac_propost inp
           where inp.num_seqcial_propost = cp.num_seqcial_propost
             and rownum = 1;
        exception
          when others then
            vaorepasse := 'N';
        end;

        delete from import_negociac_propost inp
         where inp.num_seqcial_propost = cp.num_seqcial_propost;

        delete from import_modul_propost p
         where p.num_seqcial_propost = cp.num_seqcial_propost;

        delete from gp.import_lotac_propost ilp
         where ilp.num_seqcial_propost = cp.num_seqcial_propost;

        apaga_proposta_totvs(cp.cd_modalidade, cp.nr_proposta);

        -- SE MUDOU A MODALIDADE, ZERAR A PROPOSTA E CD_USUARIO, PARA QUE GERE NOVA NUMERACAO
        if cp.cd_modalidade <> vcd_modalidade then
          update gp.import_propost ip set ip.num_livre_10 = 0
           where ip.progress_recid = cp.progress_recid;

          update gp.import_bnfciar ib set ib.num_livre_6 = 0
           where exists(select 1 from gp.import_propost ip
                         where ip.progress_recid = cp.progress_recid
                           and ib.nr_contrato_antigo = ip.nr_contrato_antigo);
        end if;

        update gp.import_propost ip set ip.cd_modalidade = vcd_modalidade,
                                        ip.cd_plano      = vcd_plano,
                                        ip.cd_tipo_plano = vcd_tipo_plano,
                                        ip.cod_livre_3   = vcdcontrato where ip.progress_recid = cp.progress_recid;

        if vao_contr_orig_resp_financ = 'CONTR_ORIG' then
           p_atualiza_proposta(cp.num_seqcial_propost,'N',0);
        else if vao_contr_orig_resp_financ = 'RESP_FINANC' then
               p_atualiza_proposta(cp.num_seqcial_propost,'S',0);
             else
                if pAOMIGRA_COM_LOTACAO = 'N'
                or cp.ind_tip_pessoa = 'F'
                or vaorepasse = 'S'
                then
                   dbms_output.put_line('REPROCESSA SEM LOTACAO');
                   p_atualiza_proposta(cp.num_seqcial_propost,'N',0);
                else
                   dbms_output.put_line('REPROCESSA COM LOTACAO');
                   p_atualiza_proposta(cp.num_seqcial_propost,'S',0);
                end if;
             end if;
        end if;

        for usu in (select num_seqcial_bnfciar, num_seqcial_control
                      from import_bnfciar ib
                     where ib.nr_contrato_antigo =
                           to_char(cp.num_seqcial_propost)) loop

          delete from erro_process_import e
           where e.num_seqcial_control = usu.num_seqcial_control;

          delete from import_negociac_bnfciar inb
           where inb.num_seqcial_bnfciar = usu.num_seqcial_bnfciar;

          delete from import_atendim_bnfciar iab
           where iab.num_seqcial_bnfciar = usu.num_seqcial_bnfciar;

          delete from import_modul_bnfciar imb
           where imb.num_seqcial_bnfciar = usu.num_seqcial_bnfciar;

          p_atualiza_beneficiario_g(usu.num_seqcial_bnfciar);

          commit;

        end loop;
      end if;
    end loop;

  end p_reprocessa_proposta;

  procedure p_reprocessa_beneficiario is

    cursor c_beneficiario is

      select num_seqcial_control, num_seqcial_bnfciar, num_livre_4 nr_familia
        from import_bnfciar
       where u##ind_sit_import = 'RE';

  BEGIN
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    --garantir que a temporaria T_V_PLANO_PADRAO esteja atualizada com os DEPARAs da Estrutura de Produto
    p_carga_t_v_plano_padrao;

    DBMS_OUTPUT.PUT_LINE( 'P1. ANTES DO LOOP REPROCESSA_BENEFICIARIO');

    for cb in c_beneficiario loop

      delete from erro_process_import e
       where e.num_seqcial_control = cb.num_seqcial_control;

      delete from import_negociac_bnfciar inb
       where inb.num_seqcial_bnfciar = cb.num_seqcial_bnfciar;

      delete from import_atendim_bnfciar iab
       where iab.num_seqcial_bnfciar = cb.num_seqcial_bnfciar;

      delete from import_modul_bnfciar imb
       where imb.num_seqcial_bnfciar = cb.num_seqcial_bnfciar;

      apaga_beneficiario_totvs(cb.num_seqcial_bnfciar);
      commit;

      --se NR_FAMILIA (num_livre_4) for zero, eh beneficiario eventual
      update import_bnfciar ib set ib.u##ind_sit_import = 'EV', ib.ind_sit_import = 'EV'
       where ib.num_seqcial_bnfciar = cb.num_seqcial_bnfciar
         and cb.nr_familia = 0 or cb.nr_familia is null;

      --SE NAO EXISTIR USUARIO NO UNICOO COM NRSEQUENCIAL_USUARIO = IMPORT_BNFCIAR.NUM_SEQCIAL_BNFCIAR,
      --significa que eh registro 'ficticio' para carga de remidos. nesse caso, serao eliminados.
      --se o seu dependente estiver na lista para reprocessamento, os registros serao recriados.
      delete from import_bnfciar ib where ib.num_seqcial_bnfciar = cb.num_seqcial_bnfciar
                                      and not exists(select 1 from usuario u
                                                             where u.nrsequencial_usuario = ib.num_seqcial_bnfciar);
      commit;

DBMS_OUTPUT.PUT_LINE( 'P100. APAGOU TABELAS. VAI CHAMAR P_ATUALIZA_BENEFICIARIO_G. NUM_SEQCIAL_BNFCIAR: ' || cb.num_seqcial_bnfciar);

      p_atualiza_beneficiario_g(cb.num_seqcial_bnfciar);

      commit;

    end loop;

DBMS_OUTPUT.PUT_LINE( 'P999. DEPOIS DO LOOP REPROCESSA_BENEFICIARIO');

  end p_reprocessa_beneficiario;

  procedure p_apagar_benef_e_temps is

    cursor c_beneficiario is

      select num_seqcial_control, num_seqcial_bnfciar, num_livre_4 nr_familia
        from import_bnfciar
       where u##ind_sit_import = 'APAGAR';

  BEGIN
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

    DBMS_OUTPUT.PUT_LINE( 'P1. ANTES DO LOOP P_APAGAR_BENEF_E_TEMPS');

    for cb in c_beneficiario loop

      delete from erro_process_import e
       where e.num_seqcial_control = cb.num_seqcial_control;

      delete from import_negociac_bnfciar inb
       where inb.num_seqcial_bnfciar = cb.num_seqcial_bnfciar;

      delete from import_atendim_bnfciar iab
       where iab.num_seqcial_bnfciar = cb.num_seqcial_bnfciar;

      delete from import_modul_bnfciar imb
       where imb.num_seqcial_bnfciar = cb.num_seqcial_bnfciar;

      apaga_beneficiario_totvs(cb.num_seqcial_bnfciar);
      commit;

      delete from import_bnfciar ib where ib.num_seqcial_bnfciar = cb.num_seqcial_bnfciar;
      commit;

      DBMS_OUTPUT.PUT_LINE( 'P100. APAGOU TABELAS.');

    end loop;

    DBMS_OUTPUT.PUT_LINE( 'P999. DEPOIS DO LOOP P_APAGAR_BENEF_E_TEMPS');

  end p_apagar_benef_e_temps;

--preencher NR_PROPOSTA e CD_USUARIO (NUM_LIVRE_6) em IMPORT_BNFCIAR
/*procedure p_setar_codigo_beneficiario is
  ct_codigo number := 0;
  ult_contrato number := 0;
begin
  for x in (select ip.num_livre_10, ib.nr_contrato_antigo, ib.progress_recid
              from import_propost ip, import_bnfciar ib
                   where ib.nr_contrato_antigo = ip.nr_contrato_antigo
                     and ib.u##ind_sit_import = 'RC'
                     and (ib.num_livre_6 = 0 or ib.num_livre_6 is null)
                   order by ib.nr_contrato_antigo, ib.cd_grau_parentesco) loop

      if ult_contrato <> x.nr_contrato_antigo then
         ult_contrato := x.nr_contrato_antigo;
         ct_codigo := 0;
      end if;
      ct_codigo := ct_codigo + 1;

      update import_bnfciar ib set ib.nr_proposta = x.num_livre_10,
                                   ib.num_livre_6 = ct_codigo
                   where ib.progress_recid = x.progress_recid;
  end loop;
end p_setar_codigo_beneficiario;
*/
 /* Limpar e carregar temporária TEMP_DEPARA_LOTACAO */
 procedure p_gera_lotacao is
 begin

 declare
  rx      integer;
  num_Lot integer;
  vcdn_cliente number(10);

  cursor c_lotacao is
           select cdp.tpfatura,
                  decode(cdp.tpfatura,'L',nvl(lt.nrpessoa_paga,lt.nrregistro_lotacao),'I',nvl(lt.nrpessoa_paga,lt.nrregistro_lotacao),null) respons_financ,
                  lt.nrpessoa_paga, lt.nrregistro_lotacao, lt.nrregistro, lt.nrcontrato, lt.cdlotacao,
                  lt.txdescricao, nvl(p.noabreviado, nvl(p1.noabreviado,lt.txabreviacao)) txabreviacao, lt.nrdia_de_vencimento, lt.dtinicio_vigencia, lt.dtfim_vigencia
           from lotacao lt, contrato_da_pessoa cdp, pessoa p, pessoa p1
          where cdp.nrregistro = lt.nrregistro
            and cdp.nrcontrato = lt.nrcontrato
            and p.nrregistro(+) = lt.nrregistro_lotacao
            and p1.nrregistro(+) = lt.nrregistro
           order by 1,2,3;

  begin

    delete from temp_depara_lotacao;
    commit;

    /*DEMITIDOS E APOSENTADOS - LOTACAO FIXA 1*/
    insert into temp_depara_lotacao values (

            0, --nrregistro,
            0, --nrcontrato,
            1, --to_number(rx.cdlotacao),
            '', --rx.txdescricao,
            '', --rx.txabreviacao,
            1,-- num_Lot,                                             -- cdlotacao_gp,
            '', --rx.nrcontrato||' - '||substr(rx.txdescricao,1,33),   -- txdescricao_gp,
            '', --rx.txabreviacao,                                     -- txabreviacao_gp,
            '0',                                                 -- aodem_apos_gp,
            0,--rx.nrdia_de_vencimento,
            0,--nvl(vcdn_cliente,0),
            '01/01/1900',--rx.dtinicio_vigencia,
            '31/12/9999');--rx.dtfim_vigencia)


    /*CONTRATOS SEM LOTACAO - LOTACAO FIXA 0*/
    insert into temp_depara_lotacao values (

            0, --nrregistro,
            0, --nrcontrato,
            0, --to_number(rx.cdlotacao),
            '', --rx.txdescricao,
            '', --rx.txabreviacao,
            0,-- num_Lot,                                             -- cdlotacao_gp,
            '', --rx.nrcontrato||' - '||substr(rx.txdescricao,1,33),   -- txdescricao_gp,
            '', --rx.txabreviacao,                                     -- txabreviacao_gp,
            '0',                                                 -- aodem_apos_gp,
            0,--rx.nrdia_de_vencimento,
            0,--nvl(vcdn_cliente,0),
            '01/01/1900',--rx.dtinicio_vigencia,
            '31/12/9999');--rx.dtfim_vigencia)

    commit;

    num_Lot := 2; -- a codificação das lotações é sequencial, a partir de 2. O código 1 é reservado para DEMITIDO/APOSENTADO.

    for rx in c_lotacao loop

      vcdn_cliente := null;

      if rx.tpfatura in ('L','I') then
        begin
          select tip.cdn_cliente
            into vcdn_cliente
            from ti_pessoa tip
           where tip.nrregistro = rx.respons_financ;
        exception
          when others then
            raise_application_error(-20001,
                                    'Cliente não encontrado para associar à lotação. NRREGISTRO: ' ||
                                    rx.respons_financ);
        end;
      end if;

      insert into temp_depara_lotacao values (

              rx.nrregistro,
              rx.nrcontrato,
              to_number(rx.cdlotacao),
              rx.txdescricao,
              rx.txabreviacao,
              num_Lot,                                             -- cdlotacao_gp,
              rx.nrcontrato||' - '||substr(rx.txdescricao,1,33),   -- txdescricao_gp,
              rx.txabreviacao,                                     -- txabreviacao_gp,
              '0',                                                 -- aodem_apos_gp,
              rx.nrdia_de_vencimento,
              nvl(vcdn_cliente,0),                                 -- responsavel_financeiro
              rx.dtinicio_vigencia,
              rx.dtfim_vigencia);
      commit;
      num_Lot := num_Lot + 1;
    end loop;
  end;
end p_gera_lotacao;

procedure p_migra_lotacao is

begin

declare
  cursor c_lotacao is
         select cdlotacao_gp,
                txdescricao_gp,
                txabreviacao_gp
           from temp_depara_lotacao where cdlotacao_gp <> 1;

begin
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;
      p_gera_lotacao;

      delete gp.lotac;
      commit;

      -- inserindo dominio CÓDIGO 1 - Lotacao Padrao para DEMITIDO/APOSENTADO
      insert into gp.lotac values (
       '1',                           --cdn_lotac,
       'LOTACAO APOSENTADO/DEMITIDO', --u##des_lotac,
       'Lotacao Aposentado/Demitido', --des_lotac,
       'APOSENT/DEMITIDO',            --des_reduz_lotac,
       '',                      --cod_livre_1,
       '',                      --cod_livre_2,
       '',                      --cod_livre_3,
       '',                      --cod_livre_4,
       '',                      --cod_livre_5,
       '',                      --cod_livre_6,
       '',                      --cod_livre_7,
       '',                      --cod_livre_8,
       '',                      --cod_livre_9,
       '',                      --cod_livre_10,
       0,                       --num_livre_1,
       0,                       --num_livre_2,
       0,                       --num_livre_3,
       0,                       --num_livre_4,
       0,                       --num_livre_5,
       0,                       --num_livre_6,
       0,                       --num_livre_7,
       0,                       --num_livre_8,
       0,                       --num_livre_9,
       0,                       --num_livre_10,
       0,                       --val_livre_1,
       0,                       --val_livre_2,
       0,                       --val_livre_3,
       0,                       --val_livre_4,
       0,                       --val_livre_5,
       0,                       --val_livre_6,
       0,                       --val_livre_7,
       0,                       --val_livre_8,
       0,                       --val_livre_9,
       0,                       --val_livre_10,
       0,                       --log_livre_1,
       0,                       --log_livre_2,
       0,                       --log_livre_3,
       0,                       --log_livre_4,
       0,                       --log_livre_5,
       0,                       --log_livre_6,
       0,                       --log_livre_7,
       0,                       --log_livre_8,
       0,                       --log_livre_9,
       0,                       --log_livre_10,
       null,                    --dat_livre_1,
       null,                    --dat_livre_2,
       null,                    --dat_livre_3,
       null,                    --dat_livre_4,
       null,                    --dat_livre_5,
       null,                    --dat_livre_6,
       null,                    --dat_livre_7,
       null,                    --dat_livre_8,
       null,                    --dat_livre_9,
       null,                    --dat_livre_10,
       '1',                     --log_demit_apos,
       gp.lotac_seq.nextval);   --progress_recid

      commit;

     for x in c_lotacao loop --ignorar codigo 1 (DEMAP) pois foi criado logo acima.

       begin
           --dbms_output.put_line('inserindo x.cdlotacao_gp: ' || x.cdlotacao_gp);

           insert into gp.lotac values (
           x.cdlotacao_gp,          --cdn_lotac,
           upper(x.txdescricao_gp), --u##des_lotac,
           x.txdescricao_gp,        --des_lotac,
           x.txabreviacao_gp,       --des_reduz_lotac,
           '',                      --cod_livre_1,
           '',                      --cod_livre_2,
           '',                      --cod_livre_3,
           '',                      --cod_livre_4,
           '',                      --cod_livre_5,
           '',                      --cod_livre_6,
           '',                      --cod_livre_7,
           '',                      --cod_livre_8,
           '',                      --cod_livre_9,
           '',                      --cod_livre_10,
           0,                       --num_livre_1,
           0,                       --num_livre_2,
           0,                       --num_livre_3,
           0,                       --num_livre_4,
           0,                       --num_livre_5,
           0,                       --num_livre_6,
           0,                       --num_livre_7,
           0,                       --num_livre_8,
           0,                       --num_livre_9,
           0,                       --num_livre_10,
           0,                       --val_livre_1,
           0,                       --val_livre_2,
           0,                       --val_livre_3,
           0,                       --val_livre_4,
           0,                       --val_livre_5,
           0,                       --val_livre_6,
           0,                       --val_livre_7,
           0,                       --val_livre_8,
           0,                       --val_livre_9,
           0,                       --val_livre_10,
           0,                       --log_livre_1,
           0,                       --log_livre_2,
           0,                       --log_livre_3,
           0,                       --log_livre_4,
           0,                       --log_livre_5,
           0,                       --log_livre_6,
           0,                       --log_livre_7,
           0,                       --log_livre_8,
           0,                       --log_livre_9,
           0,                       --log_livre_10,
           null,                    --dat_livre_1,
           null,                    --dat_livre_2,
           null,                    --dat_livre_3,
           null,                    --dat_livre_4,
           null,                    --dat_livre_5,
           null,                    --dat_livre_6,
           null,                    --dat_livre_7,
           null,                    --dat_livre_8,
           null,                    --dat_livre_9,
           null,                    --dat_livre_10,
           '0',                     --log_demit_apos,
           gp.lotac_seq.nextval     --progress_recid
           );
       exception
         when others then dbms_output.put_line('x.cdlotacao_gp: ' || x.cdlotacao_gp || ' - '  || sqlerrm);
       end;

       commit;

     end loop;

   end;


end p_migra_lotacao;

  /**
   * P_REPLICAR_TRMODAMB não faz parte do processo padrão de migração.
   * Foi criada como apoio, para copiar uma TRMODAMB para um novo código de TRANSAÇÃO com base em uma já existente.
   */
  procedure P_REPLICAR_TRMODAMB is

      v integer;

      Cursor C is
      select
      *
      from
      gp.trmodamb tb
      where tb.cd_transacao = 1; -- INFORMAR AQUI O CÓDIGO DA TRANSAÇÃO QUE JÁ EXISTE;

    Begin

      for v in c loop

          insert into gp.trmodamb
          (CD_TRANSACAO,
           CD_MODULO,
           CD_ESP_AMB,
           CD_GRUPO_PROC_AMB,
           CD_PROCEDIMENTO,
           DV_PROCEDIMENTO,
           LG_IMPRIME_DESCRICAO,
           CHAR_1,
           CHAR_2,
           CHAR_3,
           CHAR_4,
           CHAR_5,
           LGPROCDUPLOACUMULAQTD,
           LOG_4,
           LOG_5,
           DEC_1,
           DEC_2,
           DEC_3,
           DEC_4,
           DEC_5,
           DT_LIMITE,
           DATE_2,
           DATE_3,
           DATE_4,
           DATE_5,
           INT_1,
           INT_2,
           INT_3,
           INT_4,
           INT_5,
           U_CHAR_1,
           U_CHAR_2,
           U_CHAR_3,
           U_DATE_1,
           U_DATE_2,
           LOG_1,
           LOG_2,
           U_DEC_2,
           U_DEC_3,
           U_INT_1,
           U_INT_2,
           U_INT_3,
           U_LOG_1,
           U_LOG_2,
           U_LOG_3,
           U_DATE_3,
           U_DEC_1,
           DT_ATUALIZACAO,
           CD_USERID,
           LOG_3,
           NUM_PROCED_COMPLET,
           PROGRESS_RECID)
        values
          (1010, --1 -- INFORMAR AQUI O CÓDIGO DA TRANSAÇÃO NOVA A SER COPIADA;
           v.cd_modulo,
           v.cd_esp_amb,
           v.cd_grupo_proc_amb,
           v.cd_procedimento,
           v.dv_procedimento,
           v.lg_imprime_descricao,
           v.char_1,
           v.char_2,
           v.char_3,
           v.char_4,
           v.char_5,
           v.lgprocduploacumulaqtd,
           v.log_4,
           v.log_5,
           v.dec_1,
           v.dec_2,
           v.dec_3,
           v.dec_4,
           v.dec_5,
           v.dt_limite,
           v.date_2,
           v.date_3,
           v.date_4,
           v.date_5,
           v.int_1,
           v.int_2,
           v.int_3,
           v.int_4,
           v.int_5,
           v.u_char_1,
           v.u_char_2,
           v.u_char_3,
           v.u_date_1,
           v.u_date_2,
           v.log_1,
           v.log_2,
           v.u_dec_2,
           v.u_dec_3,
           v.u_int_1,
           v.u_int_2,
           v.u_int_3,
           v.u_log_1,
           v.u_log_2,
           v.u_log_3,
           v.u_date_3,
           v.u_dec_1,
           v.dt_atualizacao,
           v.cd_userid,
           v.log_3,
           v.num_proced_complet,
           gp.trmodamb_seq.nextval);

       end loop;

  end P_REPLICAR_TRMODAMB;

  /**
   * P_REPLICAR_TRMODTPI não faz parte do processo padrão de migração.
   * Foi criada como apoio, para copiar uma TRMODTPI para um novo código de TRANSAÇÃO com base em uma já existente.
   */
  procedure P_REPLICAR_TRMODTPI is
    v integer;

    Cursor C is
    select
    *
    from
    gp.trmodtpi tb
    where tb.cd_transacao = 1; -- INFORME AQUI O CODIGO DA TRANSAÇÃO JÁ EXISTENTE;

Begin

    for v in c loop

      insert into gp.trmodtpi
       (CD_TRANSACAO,
        CD_MODULO,
        CD_TIPO_INSUMO,
        LG_IMPRIME_DESCRICAO,
        CHAR_1,
        CHAR_2,
        CHAR_3,
        CHAR_4,
        CHAR_5,
        DATE_1,
        DATE_2,
        DATE_3,
        DATE_4,
        DATE_5,
        DEC_1,
        DEC_2,
        DEC_3,
        DEC_4,
        DEC_5,
        INT_1,
        INT_2,
        INT_3,
        INT_4,
        INT_5,
        LOG_1,
        LOG_2,
        LOG_3,
        LOG_4,
        LOG_5,
        U_CHAR_1,
        U_CHAR_2,
        U_CHAR_3,
        U_DATE_1,
        U_DATE_2,
        U_DATE_3,
        U_DEC_1,
        U_DEC_2,
        U_DEC_3,
        U_INT_1,
        U_INT_2,
        U_INT_3,
        U_LOG_1,
        U_LOG_2,
        U_LOG_3,
        DT_ATUALIZACAO,
        CD_USERID,
        CD_INSUMO,
        PROGRESS_RECID)
      values
        (1010, -- INFORME AQUI O CODIGO DA TRANSAÇÃO A SER COPIADA;
         v.cd_modulo,
         v.cd_tipo_insumo,
         v.lg_imprime_descricao,
         v.char_1,
         v.char_2,
         v.char_3,
         v.char_4,
         v.char_5,
         v.date_1,
         v.date_2,
         v.date_3,
         v.date_4,
         v.date_5,
         v.dec_1,
         v.dec_2,
         v.dec_3,
         v.dec_4,
         v.dec_5,
         v.int_1,
         v.int_2,
         v.int_3,
         v.int_4,
         v.int_5,
         v.log_1,
         v.log_2,
         v.log_3,
         v.log_4,
         v.log_5,
         v.u_char_1,
         v.u_char_2,
         v.u_char_3,
         v.u_date_1,
         v.u_date_2,
         v.u_date_3,
         v.u_dec_1,
         v.u_dec_2,
         v.u_dec_3,
         v.u_int_1,
         v.u_int_2,
         v.u_int_3,
         v.u_log_1,
         v.u_log_2,
         v.u_log_3,
         v.dt_atualizacao,
         v.cd_userid,
         v.cd_insumo,
         gp.trmodtpi_seq.nextval);

     end loop;

  end P_REPLICAR_TRMODTPI;

PROCEDURE P_GERA_DEB_PROD IS

BEGIN

  BEGIN
    FOR X IN (SELECT *
                FROM (SELECT DISTINCT PR.CD_MODALIDADE,
                                      PR.NR_PROPOSTA,
                                      P.CD_UNIDADE,
                                      P.CD_PRESTADOR
                        FROM PRODUCAO.CONTRATO_DA_PESSOA@UNICOO_homologa CP,
                             IMPORT_PROPOST                           I,
                             GP.PROPOST                               PR,
                             GP.PRESERV                               P,
                             PRODUCAO.GRUPO_FATURAMENTO@unicoo_homologa  GF
                       WHERE GF.TPUSU_CONTRATO = 'C'
                         and CP.CDGRUPO_FATURAMENTO = GF.CDGRUPO_FATURAMENTO
                         AND I.NUM_LIVRE_2 = CP.NRPESSOA_PAGA
                         AND PR.NR_CONTRATO_ANTIGO = I.NR_CONTRATO_ANTIGO --I.u##NR_CONTRATO_ANTIGO
                         AND P.ID_PESSOA = I.NUM_LIVRE_2)
               ORDER BY 1, 2) LOOP
      UPDATE GP.TER_ADE T
         SET T.LGDESCONTAPLANOPRODUCAO   = 1,
             T.CD_UNIDADE_PRESTADOR      = X.CD_UNIDADE,
             T.CD_PRESTADOR              = X.CD_PRESTADOR,
             T.INCONTRATANTEMENSALIDADE  = 1, -- indica que o faturamento é para o CONTRATANTE ORIGEM
             T.INCONTRATANTEPARTICIPACAO = 1,
             T.IN_CONTRATATE_CO          = 1,
             T.IN_CONTRATANTE_INADIM     = 1,
             T.INCONTRATANTECUSTOOP      = 1,
             T.INNEGOCIACAOPARTICIPACAO  = 1
       WHERE T.CD_MODALIDADE = X.CD_MODALIDADE
         AND T.NR_TER_ADESAO = X.NR_PROPOSTA;
    END LOOP;
    COMMIT;
  END;

END P_GERA_DEB_PROD;


/*procedure p_carga_estrutura_modulos is
begin
    --delete unicoogps.temp_categorias_usuarios;
    begin
      insert into unicoogps.temp_categorias_usuarios
        select distinct c.nrregistro,
                        c.nrcontrato,
                        c.cdcategserv,
                        c.dtfinal_carencia,
                        c.dtinclusao,
                        dm.cdmodulo,
                        c.nrsequencial_usuario
          from producao.criterios_do_usuario@unicoo_homologa c,
               depara_modulo dm
               where dm.cdcategserv = c.cdcategserv
                 and not exists(select 1 from unicoogps.temp_categorias_usuarios t
                                        where t.NRREGISTRO = c.nrregistro
                                          and t.NRCONTRATO = c.nrcontrato
                                          and t.CDCATEGSERV = c.cdcategserv
                                          and t.DTFINAL_CARENCIA = c.dtfinal_carencia
                                          and t.DTINCLUSAO = c.dtinclusao
                                          and t.CDMODULO = dm.cdmodulo
                                          and t.NRSEQUENCIAL_USUARIO = c.nrsequencial_usuario);
      exception
        when dup_val_on_index then
          null;
      end;

--    analyze table unicoogps.temp_categorias_usuarios compute statistics
--        for table for all indexes for all indexed columns;

    commit;
end p_carga_estrutura_modulos;
*/

procedure log_dbms (pmensagem varchar2) is
begin
  if PAOLOG_DBMS_OUTPUT = 'S' then
    DBMS_OUTPUT.ENABLE(null);

    dbms_output.put_line(to_char(systimestamp, 'HH24:MI:ss.FF') || ' ' ||
                         pmensagem);
  else
    dbms_output.disable;
  end if;
end log_dbms;

--Alex Boeira - 12/02/2019 - nova versao para buscar possiveis mudancas ocorridas no Unicoo
--OBS: performance esta lenta. Cliente esta ciente que o banco precisa de ajuste, pois HML-PROD esta adequado
--     enquanto PRODUCAO esta muito lento.
/*procedure p_carga_estrutura_modulos is
  vdt_ult_atualizacao date;
begin
  if PAOLOG_DBMS_OUTPUT = 'S' then
    DBMS_OUTPUT.ENABLE(null);
  else
    dbms_output.disable;
  end if;

  log_dbms('buscar atualizacao mais recente.');

  --buscar data e hora de atualizacao mais recente na temp
  begin
    select max(dtult_atualizacao) into vdt_ult_atualizacao
      from unicoogps.temp_categorias_usuarios;
  exception
    when others then
      vdt_ult_atualizacao := null;
  end;

  log_dbms('atualizacao mais recente encontrada: ' || vdt_ult_atualizacao);

  --se existir historico no unicoo mais recente, apagar na temp para recriar
  for x in (select distinct NRSEQUENCIAL_USUARIO from CRITERIOS_DO_USUARIO_HIST_MOV c
                    where c.dthistorico >= vdt_ult_atualizacao) loop

    log_dbms('apagando criterios do usuario pois teve alteracao: ' ||
             x.nrsequencial_usuario);

    delete from unicoogps.temp_categorias_usuarios t
          where t.nrsequencial_usuario = x.nrsequencial_usuario;
  end loop;

  log_dbms('vai atualizar a temp com as diferencas.');

  begin
    insert into unicoogps.temp_categorias_usuarios
      select distinct c.nrregistro,
                      c.nrcontrato,
                      c.cdcategserv,
                      c.dtfinal_carencia,
                      c.dtinclusao,
                      dm.cdmodulo,
                      c.nrsequencial_usuario,
                      sysdate
        from producao.criterios_do_usuario@unicoo_homologa c,
             depara_modulo dm
             where dm.cdcategserv = c.cdcategserv;
  exception
    when dup_val_on_index then
      null;
  end;

  log_dbms('terminou de atualizar.');

  commit;
end p_carga_estrutura_modulos;
*/
/*
* Procedure : P_Migra_CBO
* Objetivo  : Migrar entidade CBO
*/
procedure p_migra_cbo is
  cursor cur_cbo is
    select cb.* from cbo cb order by cb.cdcbo_atual;

  /** Checar se ja existe a familia de CBO cadastrada */
  function fn_checa_existe_familia_cbo(pCdFamilia in varchar2) return boolean is
    qtde number;

  begin
    -- Verificar se existe familia cadastrada --
    select count(*) qt
      into qtde
      from dzfamicbo fc
     where fc.cd_familia_cbo = pCdFamilia;

    if (qtde is null) or (qtde = 0) then
      return false;
    else
      return true;
    end if;
  end;

  /** Checar se ja existe o grupo de CBO cadastrado */
  function fn_checa_existe_grupo_cbo(pCdGrupo in varchar2) return boolean is
    qtde number;

  begin
    -- Verificar se existe o grupo cadastrado --
    select count(*) qt
      into qtde
      from dzgrucbo gc
     where gc.cd_grupo_cbo = pCdGrupo;

    if (qtde is null) or (qtde = 0) then
      return false;
    else
      return true;
    end if;
  end;

  /** Checar se ja existe o subgrupo de CBO cadastrado */
  function fn_checa_existe_subgrupo_cbo(pCdSubGrupo in varchar2)
    return boolean is
    qtde number;

  begin
    -- Verificar se existe o subgrupo cadastrado --
    select count(*) qt
      into qtde
      from dzsubcbo gc
     where gc.cd_sub_grupo_cbo = pCdSubGrupo;

    if (qtde is null) or (qtde = 0) then
      return false;
    else
      return true;
    end if;
  end;

begin
  for rcb in cur_cbo loop
    -- Cadastrar a Familia do CBO --
    if (not fn_checa_existe_familia_cbo(substr(rcb.cdcbo_atual, 1, 4))) then
      insert into dzfamicbo
        (cd_familia_cbo,
         u##in_tipo_cbo,
         in_tipo_cbo,
         nm_titulo_familia,
         ds_familia_cbo,
         cd_userid,
         progress_recid)
      values
        (substr(rcb.cdcbo_atual, 1, 4),
         'CBO2002',
         'CBO2002',
         'Rever cadastro de Familia CBO',
         null,
         cUSER_MIGRACAO,
         dzfamicbo_seq.nextval);

--      vQtRegistro2 := vQtRegistro2 + 1;
    end if;

    -- Cadastrar o Grupo de CBO --
    if (not fn_checa_existe_grupo_cbo(substr(rcb.cdcbo_atual, 1, 1))) then
      insert into dzgrucbo
        (cd_grupo_cbo,
         u##in_tipo_cbo,
         in_tipo_cbo,
         ds_grupo_cbo,
         cd_userid,
         progress_recid)
      values
        (substr(rcb.cdcbo_atual, 1, 1),
         'CBO2002',
         'CBO2002',
         'Rever cadastro de Grupos CBO',
         cUSER_MIGRACAO,
         dzgrucbo_seq.nextval);

--      vQtRegistro3 := vQtRegistro3 + 1;
    end if;

    -- Cadastrar o SubGrupo de CBO --
    if (not fn_checa_existe_subgrupo_cbo(substr(rcb.cdcbo_atual, 2, 3))) then
      insert into dzsubcbo
        (cd_sub_grupo_cbo,
         u##in_tipo_cbo,
         in_tipo_cbo,
         ds_sub_grupo_cbo,
         cd_userid,
         progress_recid)
      values
        (substr(rcb.cdcbo_atual, 2, 3),
         'CBO2002',
         'CBO2002',
         'Rever cadastro de Sub Grupos CBO',
         cUSER_MIGRACAO,
         dzsubcbo_seq.nextval);

      --vQtRegistro4 := vQtRegistro4 + 1;
    end if;

    -- Cadastrar o CBO --
    begin
      begin
        select 'S'
          into vAoMigrado
          from dz_cbo02
         where cd_cbo = rcb.cdcbo_atual;
      exception
        when no_data_found then
          vAoMigrado := 'N';

      end;

      if vAoMigrado = 'N' then
        insert into dz_cbo02
          (cd_cbo,
           in_sigla_cbo,
           u##ds_cbo,
           ds_cbo,
           in_tipo_cbo,
           cd_cbo_interno,
           cd_familia_cbo,
           cd_grupo_cbo,
           cd_sub_grupo_cbo,
           cd_userid,
           progress_recid)
        values
          (rcb.cdcbo_atual,
           ' ',
           upper(rcb.nocbo),
           rcb.nocbo,
           'CBO2002',
           rcb.cdcbo_atual,
           substr(rcb.cdcbo_atual, 1, 4),
           substr(rcb.cdcbo_atual, 1, 1),
           substr(rcb.cdcbo_atual, 2, 3),
           cUSER_MIGRACAO,
           dz_cbo02_seq.nextval);

        vQtRegistro1 := vQtRegistro1 + 1;

      end if;
    end;

    countOfRecords := countOfRecords + 1;

    if (countOfRecords >= 1000) then
      commit;
      countOfRecords := 0;
    end if;

  end loop;
end p_migra_cbo;
--======================================================================================
--ATENCAO: essa procedure esta salva na PCK como backup do fonte, mas para se executada
--         deve estar conectado ao owner GP!
--======================================================================================
PROCEDURE P_ACERTA_SEQUENCES IS

  PCOMANDO1   VARCHAR2(4000);
  PCOMANDO2   VARCHAR2(4000);
  PCOMANDO3   VARCHAR2(4000);
  PCOMANDO4   VARCHAR2(4000);
  PCOMANDO_GRANT VARCHAR2(4000);
  PNEXTVAL    NUMBER;
  PLASTNUMBER NUMBER;

  CURSOR C_SEQUENCES IS
    SELECT * FROM unicoogps.TM_SEQUENCES T
     where t.column_name is not null and t.column_name <> ' '; --SE NULO, ESTA PENDENTE DE INFORMAR O CAMPO CORRETO.

/* cursor que lista todas as sequences do owner GP. nao esta sendo utilizado
  cursor c_seq_sistema
    select u.name,
           o.name SEQUENCE_NAME,
           s.minvalue MIN_VALUE,
           s.maxvalue MAX_VALUE,
           s.increment$ INCREMENT_BY,
           decode(s.cycle#, 0, 'N', 1, 'Y') CYCLE_FLAG,
           decode(s.order$, 0, 'N', 1, 'Y') ORDER_FLAG,
           s.cache CACHE_SIZE,
           s.highwater LAST_NUMBER
      from sys.seq$ s, sys.obj$ o, sys.user$ u
     where o.owner# = u.user#
       and o.obj# = s.obj#
       and o.type# = 6 --1: INDEX; 2: TABLE; 6: SEQUENCE;
       and u.name in ('GP');
*/
BEGIN
    if PAOLOG_DBMS_OUTPUT = 'S' then
      DBMS_OUTPUT.ENABLE(null);
    else
      dbms_output.disable;
    end if;

  --connect gp;

  FOR C IN C_SEQUENCES LOOP

    PNEXTVAL := 0;

    PLASTNUMBER := 1;

    --buscar ultimo ID na tabela
    PCOMANDO1 := 'SELECT NVL(MAX(' || C.COLUMN_NAME || '),0)+1 FROM ' ||
                 c.owner_name || '.' || C.TABLE_NAME;
    BEGIN
      EXECUTE IMMEDIATE PCOMANDO1
        INTO PNEXTVAL;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    dbms_output.put_line(PCOMANDO1 || ': ' || pnextval);

    --buscar maior valor da sequence
    PCOMANDO4 := 'SELECT LAST_NUMBER FROM USER_SEQUENCES WHERE SEQUENCE_NAME = ' || '''' ||
                 C.SEQUENCE_NAME || '''';
--    PCOMANDO4 := 'select ' || c.owner_name || '.' || c.sequence_name || '.nextval from dual;';

    BEGIN
      EXECUTE IMMEDIATE PCOMANDO4
        INTO PLASTNUMBER;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

    dbms_output.put_line(PCOMANDO4 || ': ' || plastnumber);

    IF PNEXTVAL > PLASTNUMBER THEN
       dbms_output.put_line('PRECISA CORRIGIR!!!!!');
    end if;

    --se o valor da tabela for maior que da sequence, recriar a sequence com o valor da tabela + 1
    IF PNEXTVAL > PLASTNUMBER THEN
      PCOMANDO2 := 'DROP SEQUENCE ' || c.owner_name || '.' || C.SEQUENCE_NAME;

      IF PNEXTVAL = 0 THEN
        PNEXTVAL := 1;
      END IF;

      BEGIN
        EXECUTE IMMEDIATE PCOMANDO2;
      EXCEPTION
        WHEN OTHERS THEN
          dbms_output.put_line(PCOMANDO2 || ': ' || sqlerrm);
          NULL;
      END;

      PCOMANDO3 := 'CREATE SEQUENCE ' || c.owner_name || '.' || C.SEQUENCE_NAME || ' START WITH ' ||
                   PNEXTVAL || ' MINVALUE ' || PNEXTVAL;

      BEGIN
        EXECUTE IMMEDIATE PCOMANDO3;
      EXCEPTION
        WHEN OTHERS THEN
          dbms_output.put_line(PCOMANDO3 || ': ' || sqlerrm);
          NULL;
      END;

    END IF;

    PCOMANDO_GRANT := 'grant all on ' || c.owner_name || '.' || C.SEQUENCE_NAME || ' to unicoogps';

    BEGIN
      EXECUTE IMMEDIATE PCOMANDO_GRANT;
    EXCEPTION
      WHEN OTHERS THEN
        dbms_output.put_line(PCOMANDO_GRANT || ': ' || sqlerrm);
        NULL;
    END;

  END LOOP;

END P_ACERTA_SEQUENCES;

-- ATUALIZAR TABELA TM_SEQUENCES - LISTA DE SEQUENCES COM RESPECTIVA TABELA E CAMPO DE CONTROLE
-- OBS: QUANDO O PADRAO DE NOME FOR <TABELA)_SEQ, EH SEQUENCE DEFAULT DO SCHEMA HOLDER. CASO CONTRARIO, O CAMPO DEVE SER PREENCHIDO MANUALMENTE.
procedure p_atualizar_tm_sequences is
begin
  for x in (select replace(replace(replace(a.sequence_name,'_SEQ',''),'SEQ_',''),'SEQ','') TABLE_NAME,
            a.* from all_sequences a
             where a.sequence_owner = 'GP'
               and not exists
             (select 1 from tm_sequences t where t.sequence_name = a.sequence_name)) loop

    if x.sequence_name like '%SEQ'
     then -- sequences padroes do schema holder
      insert into tm_sequences values (x.sequence_name, x.table_name, 'PROGRESS_RECID', x.sequence_owner);
    else -- coluna de controle da tabela devera ser preenchida manualmente
      insert into tm_sequences values (x.sequence_name, x.table_name, null, x.sequence_owner);
    end if;
  end loop;
end p_atualizar_tm_sequences;

procedure p_carga_plamodpr_proc is
begin
  for a in (select * from pla_mod pm) loop
    insert into gp.plamodpr
      (cd_modalidade,
       cd_plano,
       cd_tipo_plano,
       cd_modulo,
       U##IN_PROCEDIMENTO_INSUMO,
       in_procedimento_insumo,
       nr_dias_validade,
       dt_limite,
       cd_tab_preco,
       cd_esp_amb,
       cd_grupo_proc_amb,
       cd_procedimento,
       dv_procedimento,
       dt_atualizacao,
       cd_userid,
       progress_recid)
    values
      (a.cd_modalidade,
       a.cd_plano,
       a.cd_tipo_plano,
       a.cd_modulo,
       'P',
       'P',
       0,
       '31/12/9999',
       pcdtabpreco, -- TM_PARAMETRO CDTABELAPRECO
       0,
       0,
       0,
       0,
       sysdate,
       'migracao',
       gp.plamodpr_seq.nextval);
  end loop;
end p_carga_plamodpr_proc;

procedure p_carga_plamodpr_ins is
begin
  for a in (select * from pla_mod pm) loop
    insert into gp.plamodpr
      (cd_modalidade,
       cd_plano,
       cd_tipo_plano,
       cd_modulo,
       U##IN_PROCEDIMENTO_INSUMO,
       in_procedimento_insumo,
       nr_dias_validade,
       dt_limite,
       cd_tab_preco,
       cd_esp_amb,
       cd_grupo_proc_amb,
       cd_procedimento,
       dv_procedimento,
       dt_atualizacao,
       cd_userid,
       progress_recid)
    values
      (a.cd_modalidade,
       a.cd_plano,
       a.cd_tipo_plano,
       a.cd_modulo,
       'I',
       'I',
       0,
       '31/12/9999',
       pcdtabpreco, -- TM_PARAMETRO CDTABELAPRECO
       0,
       0,
       0,
       0,
       sysdate,
       'migracao',
       gp.plamodpr_seq.nextval);
  end loop;
end p_carga_plamodpr_ins;

procedure p_importa_nota_co_evento_progr (pPeriodo number,                            /*Informar o período do UNICOO para buscar os eventos de Coparticipação e Custo Operacional*/
                                          pEVENTO_FM      GP.EVENPROG.CD_EVENTO%Type, /*Informar o Evento de Coparticipação do TOTVS*/
                                          pEVENTO_CO      GP.EVENPROG.CD_EVENTO%Type, /*Informar o Evento de Custo Operacional do TOTVS*/
                                          pOBS_EVENTO_FM  Varchar2,                   /*Observações para registrar os Eventos de Coparticipação*/
                                          pOBS_EVENTO_CO  Varchar2                    /*Observações para registrar os Eventos de Custo Operacional*/
                                          ) is
  --
  Cursor cFat (pCdOperacao Varchar2) Is (
    Select US.CD_MODALIDADE, US.NR_TER_ADESAO, P.CD_CONTRATANTE, P.CD_CONTRAT_ORIGEM,
           /******
             >> Regra para preenchimento do Codigo do Responssvel Financeiro. (orientado pelo Alex)
             Ordem de prioridade:
              1. Buscar campo CDN_RESPONS_FINANC do USUARIO, se zero ou nulo - segue regra 2
              2. Buscar campo CDN_RESPONS_FINANC da LOTAC_PROPOST, se zero ou nulo - segue regra 3
              3. Verificar conteúdo do campo TER_ADE.INCONTRATANTEMENSALIDADE:
                   a. se "0" (zero), informar o conteúdo do campo PROPOST.NR_INSC_CONTRATANTE
                   b. se "1", informar o conteúdo do campo PROPOST.NR_INSC_CONTRAT_ORIGEM
            ******/
           Case
             When (Nvl(US.CDN_RESPONS_FINANC,0) = 0) And (Nvl(LP.CDN_RESPONS_FINANC,0) = 0) Then
               Decode(TA.INCONTRATANTEMENSALIDADE, 0, P.NR_INSC_CONTRATANTE, P.NR_INSC_CONTRAT_ORIGEM)
             When (Nvl(US.CDN_RESPONS_FINANC,0) = 0) And (Nvl(LP.CDN_RESPONS_FINANC,0) > 0) Then
               LP.CDN_RESPONS_FINANC
             Else
               US.CDN_RESPONS_FINANC
           End CDN_RESPONS_FINANC,
           TO_NUMBER(Substr(D.NRPERIODO,5)) MM_REF, TO_NUMBER(Substr(D.NRPERIODO,1,4)) AA_REF,
           Count(*) QT_EVENTO, SUM(NVL(D.VLCOBRADO_EM_MOEDA,0) + NVL(D.VLCOBRADO_FILME_EM_MOEDA,0)) VL_EVENTO
    From   DETALHE_FATURAMENTO_CUSTO@UNICOO_HOMOLOGA D, IMPORT_BNFCIAR IB, GP.USUARIO US, GP.PROPOST P,
           GP.LOTAC_PROPOST LP, GP.TER_ADE TA
    Where  IB.NUM_SEQCIAL_BNFCIAR = D.NRSEQUENCIAL_USUARIO
    And    US.CD_CARTEIRA_ANTIGA = IB.CD_CARTEIRA_ANTIGA
    And    P.CD_MODALIDADE = US.CD_MODALIDADE
    And    P.NR_PROPOSTA = US.NR_PROPOSTA
    And    LP.CDN_MODALID(+) = US.CD_MODALIDADE
    And    LP.NUM_PROPOST(+) = US.NR_PROPOSTA
    And    LP.CDN_LOTAC(+) = US.CDN_LOTAC
    And    TA.CD_MODALIDADE = US.CD_MODALIDADE
    And    TA.NR_TER_ADESAO = US.NR_TER_ADESAO
    And    D.CDOPERACAO = pCdOperacao
    And    D.NRPERIODO = pPERIODO
    And    D.NRFATURA Is Not Null
    --And    us.cd_modalidade = 20 And us.nr_ter_adesao = 58
    And    Exists (
                   Select 1 From FATURAMENTO@UNICOO_HOMOLOGA
                   Where NRFATURA = D.NRFATURA
                   And   AOSITUACAO_FATURA = '0' /*ativa*/
                   )
    Group By US.CD_MODALIDADE, US.NR_TER_ADESAO, P.CD_CONTRATANTE, P.CD_CONTRAT_ORIGEM,
             Case
               When (Nvl(US.CDN_RESPONS_FINANC,0) = 0) And (Nvl(LP.CDN_RESPONS_FINANC,0) = 0) Then
                 Decode(TA.INCONTRATANTEMENSALIDADE, 0, P.NR_INSC_CONTRATANTE, P.NR_INSC_CONTRAT_ORIGEM)
               When (Nvl(US.CDN_RESPONS_FINANC,0) = 0) And (Nvl(LP.CDN_RESPONS_FINANC,0) > 0) Then
                 LP.CDN_RESPONS_FINANC
               Else
                 US.CDN_RESPONS_FINANC
             End, Substr(D.NRPERIODO,5), Substr(D.NRPERIODO,1,4)
  );
Begin
  /*Evento de Co-participação*/
  For Rx In cFat('FM') Loop
    Insert Into GP.EVENPROG (CD_MODALIDADE, NR_TER_ADESAO, CD_EVENTO, AA_REFERENCIA, MM_REFERENCIA, CD_MOEDA,
                             QT_EVENTO, VL_EVENTO, DT_ATUALIZACAO, CD_USERID, CHAR_1, CHAR_2, CHAR_3, CHAR_4,
                             CHAR_5, INT_1, INT_2, INT_3, INT_4, INT_5, DEC_1, DEC_2, DEC_3, DEC_4, DEC_5,
                             DATE_1, DATE_2, DATE_3, DATE_4, DATE_5, LOG_1, LOG_2, LOG_3, LOG_4, LOG_5, U_CHAR_1,
                             U_CHAR_2, U_CHAR_3, U_DATE_1, U_DATE_2, U_DATE_3, U_LOG_1, U_LOG_2, U_LOG_3, U_INT_1,
                             U_INT_2, U_INT_3, U_DEC_1, U_DEC_2, U_DEC_3, CD_CONTRATANTE, CD_CONTRATANTE_ORIGEM,
                             NR_SEQUENCIA, CDN_RESPONS_FINANC, PROGRESS_RECID)
           Values (Rx.Cd_Modalidade, Rx.Nr_Ter_Adesao, pEVENTO_FM, Rx.AA_REF, Rx.MM_REF,
                   0 /*cd_moeda*/, Rx.Qt_Evento, Rx.Vl_Evento,
                   Trunc(Sysdate) /*dt_atualizacao*/, 'MIGRACAO' /*cd_userid*/,
                   Nvl(pOBS_EVENTO_FM,' ') /*char_1*/,
                   ' ', ' ', ' ', ' ', /*char_2~5*/
                   0, 0, 0, 0, 0, /*int_1~5*/
                   0, 0, 0, 0, 0, /*dec_1~5*/
                   null, Null, Null, Null, Null, /*date_1~5*/
                   0, 0, 0, 0, 0, /*log_1~5*/
                   ' ', ' ', ' ', /*u_char_1~3*/
                   Null, Null, Null, /*u_date_1~3*/
                   0, 0, 0, /*u_log_1~3*/
                   0, 0, 0, /*u_int_1~3*/
                   0, 0, 0, /*u_dec_1~3*/
                   Rx.CD_CONTRATANTE, Rx.CD_CONTRAT_ORIGEM, 0 /*nr_sequencia*/, Rx.CDN_RESPONS_FINANC,
                   GP.EVENPROG_SEQ.Nextval);
  End Loop;
  --
  /*Evento de Custo Operacional*/
  For Rx In cFat('2') Loop
    Insert Into GP.EVENPROG (CD_MODALIDADE, NR_TER_ADESAO, CD_EVENTO, AA_REFERENCIA, MM_REFERENCIA, CD_MOEDA,
                             QT_EVENTO, VL_EVENTO, DT_ATUALIZACAO, CD_USERID, CHAR_1, CHAR_2, CHAR_3, CHAR_4,
                             CHAR_5, INT_1, INT_2, INT_3, INT_4, INT_5, DEC_1, DEC_2, DEC_3, DEC_4, DEC_5,
                             DATE_1, DATE_2, DATE_3, DATE_4, DATE_5, LOG_1, LOG_2, LOG_3, LOG_4, LOG_5, U_CHAR_1,
                             U_CHAR_2, U_CHAR_3, U_DATE_1, U_DATE_2, U_DATE_3, U_LOG_1, U_LOG_2, U_LOG_3, U_INT_1,
                             U_INT_2, U_INT_3, U_DEC_1, U_DEC_2, U_DEC_3, CD_CONTRATANTE, CD_CONTRATANTE_ORIGEM,
                             NR_SEQUENCIA, CDN_RESPONS_FINANC, PROGRESS_RECID)
           Values (Rx.Cd_Modalidade, Rx.Nr_Ter_Adesao, pEVENTO_CO, Rx.AA_REF, Rx.MM_REF,
                   0 /*cd_moeda*/, Rx.Qt_Evento, Rx.Vl_Evento,
                   Trunc(Sysdate) /*dt_atualizacao*/, 'MIGRACAO' /*cd_userid*/,
                   Nvl(pOBS_EVENTO_CO,' ') /*char_1*/,
                   ' ', ' ', ' ', ' ', /*char_2~5*/
                   0, 0, 0, 0, 0, /*int_1~5*/
                   0, 0, 0, 0, 0, /*dec_1~5*/
                   null, Null, Null, Null, Null, /*date_1~5*/
                   0, 0, 0, 0, 0, /*log_1~5*/
                   ' ', ' ', ' ', /*u_char_1~3*/
                   Null, Null, Null, /*u_date_1~3*/
                   0, 0, 0, /*u_log_1~3*/
                   0, 0, 0, /*u_int_1~3*/
                   0, 0, 0, /*u_dec_1~3*/
                   Rx.CD_CONTRATANTE, Rx.CD_CONTRAT_ORIGEM, 0 /*nr_sequencia*/, Rx.CDN_RESPONS_FINANC,
                   GP.EVENPROG_SEQ.Nextval);
  End Loop;
End p_importa_nota_co_evento_progr;


/* COMENTADO POIS ESTA INSTAVEL. TODO - AJUSTAR (PRIORIDADE BAIXA)
procedure resetar_sequence( p_seq_name in varchar2,
                            p_tabela   in varchar2,
                            p_campo    in varchar2 ) is
    l_val number;
    l_ult_id number;
begin
    IF PAOLOG_DBMS_OUTPUT = 'S' then
      dbms_output.enable(null);
    else
      dbms_output.disable;
    end if;

    execute immediate
    'select max(' || p_campo || ') from ' || p_tabela  INTO l_ult_id;

    --dbms_output.put_line('ult: ' || l_ult_id);

    execute immediate
    'select ' || p_seq_name || '.nextval from dual' INTO l_val;

    --dbms_output.put_line('sequence: ' || l_val);

    if l_val > l_ult_id then
      l_val := l_val - l_ult_id;

      execute immediate
        'alter sequence ' || p_seq_name || ' increment by -' || l_val ||
                                                          ' minvalue 0';
    else
      l_val := l_ult_id - l_val;

      execute immediate
        'alter sequence ' || p_seq_name || ' increment by ' || l_val ||
                                                          ' minvalue 0';
    end if;

    --dbms_output.put_line('apos calculo: ' || l_val);

    execute immediate
    'select ' || p_seq_name || '.nextval from dual' INTO l_val;

    execute immediate
    'alter sequence ' || p_seq_name || ' increment by 1 minvalue 0';
end resetar_sequence;
*/
BEGIN

  PCATEGSUS               := F_PARAMETRO('CATEGSUS');
  PCLSMATER               := F_PARAMETRO('CLSMATER');
  PCLSMEDIC               := F_PARAMETRO('CLSMEDIC');
  PCLTAXA                 := F_PARAMETRO('CLTAXA');
  PCLASDIA                := F_PARAMETRO('CLASDIA');
  PNRUNIMED               := F_PARAMETRO('NRUNIMED');

  PCLASSES_INSUMOS        := F_TM_PARAMETRO('CDCLASSES_INSUMOS');
  PCOMMIT                 := F_TM_PARAMETRO('CDCOMMIT');
  PCDTABCOBR              := F_TM_PARAMETRO('CDTABELA_COBRANCA');
  PCDTABPRECO             := F_TM_PARAMETRO('CDTABELAPRECO');
  PNRPERIODO_ULT_REAJUSTE := F_TM_PARAMETRO('NRPERIODO_ULT_REAJUSTE_FATURAMENTO');
  PNRPERIODO_ULT_FATURAMENTO := F_TM_PARAMETRO('NRPERIODO_ULT_PERIODO_FATURAMENTO');
  PQTVALIDTERMO           := F_TM_PARAMETRO('QTVALIDTERMO');
  PUNVALIDTERMO           := F_TM_PARAMETRO('UNVALIDTERMO');
  PQTVALIDCART            := F_TM_PARAMETRO('QTVALIDCART');
  PUNVALIDCART            := F_TM_PARAMETRO('UNVALIDCART');
  PREALGPS                := F_TM_PARAMETRO('REALGPS');
  PCDMOTIVOCANCEL         := F_TM_PARAMETRO('MOTIVO_CANCELA_MODULO');
  PCDMOTIVOCANCEL_BENEF   := F_TM_PARAMETRO('CDMOTIVO_CANCEL_BENEF');
  PCDCONVENIOPADRAO       := F_TM_PARAMETRO('CDCONVENIOPADRAO');
  PQTLIMITE               := F_TM_PARAMETRO('QTLIMITE');
  PCDCONVTAB              := F_TM_PARAMETRO('CD_TAB_CONV_PTU');
  PNOCIDADEDEFAULT        := F_TM_PARAMETRO('NOCIDADEDEFAULT');
  PCDCIDADEDEFAULT        := F_TM_PARAMETRO('CDCIDADEDEFAULT');
  PCDESTADODEFAULT        := F_TM_PARAMETRO('CDESTADODEFAULT');
  PCDPORTADOR             := F_TM_PARAMETRO('CDPORTADOR');
  PCDBANCO                := F_TM_PARAMETRO('CDBANCO');
  PAOCPFINVALIDINATIVO    := F_TM_PARAMETRO('AOCPFINVALIDINATIVO');
  PCONTRATO_PEA           := F_TM_PARAMETRO('CONTRATO_PEA');
  PCDPRESTADOR            := F_TM_PARAMETRO('CDPRESTADOR');
  PNOPRESTADOR            := F_TM_PARAMETRO('NOPRESTADOR');
  PCDCONSELHOPROF := F_TM_PARAMETRO('CDCONSELHOPROF');
  PNRCONSELHOPROF := F_TM_PARAMETRO('NRCONSELHOPROF');
  PCDESTADOCRM    := F_TM_PARAMETRO('CDESTADOCRM');
  PCDESPECIALIDADE              := F_TM_PARAMETRO('CDESPECIALIDADE');
  PGRAU_PARENTESCO_IRMAO        := F_TM_PARAMETRO('GRAU_PARENTESCO_IRMAO');
  PCDGRAU_DEFAULT_REMIDOS       := F_TM_PARAMETRO('GRAU_DEFAULT_REMIDOS');
  PMOTIVO_CANCEL_OBITO          := F_TM_PARAMETRO('CDMOTIVO_CANCEL_OBITO');
  PSEPARA_INATIVO               := F_TM_PARAMETRO('SEPARA_INATIVO');
  pCD_REPRESENTANTE             := f_tm_parametro('CD_REPRESENTANTE');
  pcd_modulo_menslidade         := f_tm_parametro('CD_MODULO_MENSLIDADE');
  pAOCONSID_PRIMEIRO_DIA_CARENC := f_tm_parametro('AOCONSID_PRIMEIRO_DIA_CARENCIA');
  pcd_modalidade_pea            := f_tm_parametro('CD_MODALIDADE_PEA');
  pCDGRAU_PARENTESCO_ESPECIAL   := f_tm_parametro('CDGRAU_PARENTESCO_ESPECIAL');
  pCDGRAU_PARENTESCO_UNIVER     := f_tm_parametro('CDGRAU_PARENTESCO_UNIVERSITARIO');
  pCD_GLOSA_DEFAULT             := f_tm_parametro('CD_GLOSA_DEFAULT');
  pAOMIGRA_COM_LOTACAO          := f_tm_parametro('AOMIGRA_COM_LOTACAO');
  pnrfamilia_demitidos          := f_tm_parametro('NRFAMILIA_DEMITIDOS');
  pmigra_insumos_unicoo         := f_tm_parametro('PMIGRA_INSUMOS_UNICOO');
  parea_acao_monitoramento_ie   := f_tm_parametro('AREA_ACAO_MONITORAMENTO_IE');
  aoignorar_histor_guia_iguais  := f_tm_parametro('AOIGNORAR_HISTOR_GUIA_IGUAIS');
  PTIPO_ANEXO_CONTRATO          := f_tm_parametro('TIPO_ANEXO_CONTRATO');
  PTIPO_ANEXO_BENEF             := f_tm_parametro('TIPO_ANEXO_BENEF');
  PTIPO_ANEXO_OUTROS            := f_tm_parametro('TIPO_ANEXO_OUTROS');
  PCDMODALIDADE_PORT_REC        := f_tm_parametro('CDMODALIDADE_PORT_REC');
  pSEPARADOR_ENDERECO_NUMERO    := f_tm_parametro('SEPARADOR_ENDERECO_NUMERO');
  PAOLOG_DBMS_OUTPUT            := f_tm_parametro('GERAR_LOG_PLSQL');
  PAOLOG_TABELA                 := f_tm_parametro('GERAR_LOG_TABELA');
  P_AAAAMM_INI_FATURAS          := f_tm_parametro('AAAAMM_INI_FATURAS');
  P_AAAAMM_FIM_FATURAS          := f_tm_parametro('AAAAMM_FIM_FATURAS');
  PDT_INICIAL_GUIAS_AUTORIZ     := f_tm_parametro('DT_INICIAL_GUIAS_AUTORIZ');
  PCD_UNIDADE_DECPREST          := f_tm_parametro('CD_UNIDADE_DECPREST');
  PCD_PRESTADOR_DECPREST        := f_tm_parametro('CD_PRESTADOR_DECPREST');

END PCK_UNICOOGPS;
/